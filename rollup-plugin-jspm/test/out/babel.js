import _nodeProcess from 'process';
import _tty from 'tty';
import _nodeModule from 'module';
import _os from 'os';
import _util from 'util';
import _nodeBuffer from 'buffer';
import _assert2 from 'assert';
import _path2 from 'path';
import _fs2 from 'fs';
import _url2 from 'url';
import _v2 from 'v8';

var exports$4H = {},
  _dewExec$4G = false;
function dew$4G() {
  if (_dewExec$4G) return exports$4H;
  _dewExec$4G = true;
  Object.defineProperty(exports$4H, "__esModule", {
    value: true
  });
  exports$4H.default = shallowEqual;
  function shallowEqual(actual, expected) {
    const keys = Object.keys(expected);
    for (const key of keys) {
      if (actual[key] !== expected[key]) {
        return false;
      }
    }
    return true;
  }
  return exports$4H;
}

var exports$4G = {},
  _dewExec$4F = false;
function dew$4F() {
  if (_dewExec$4F) return exports$4G;
  _dewExec$4F = true;
  Object.defineProperty(exports$4G, "__esModule", {
    value: true
  });
  exports$4G.default = deprecationWarning;
  const warnings = new Set();
  function deprecationWarning(oldName, newName, prefix = "") {
    if (warnings.has(oldName)) return;
    warnings.add(oldName);
    const {
      internal,
      trace
    } = captureShortStackTrace(1, 2);
    if (internal) {
      return;
    }
    console.warn(`${prefix}\`${oldName}\` has been deprecated, please migrate to \`${newName}\`\n${trace}`);
  }
  function captureShortStackTrace(skip, length) {
    const {
      stackTraceLimit,
      prepareStackTrace
    } = Error;
    let stackTrace;
    Error.stackTraceLimit = 1 + skip + length;
    Error.prepareStackTrace = function (err, stack) {
      stackTrace = stack;
    };
    new Error().stack;
    Error.stackTraceLimit = stackTraceLimit;
    Error.prepareStackTrace = prepareStackTrace;
    if (!stackTrace) return {
      internal: false,
      trace: ""
    };
    const shortStackTrace = stackTrace.slice(1 + skip, 1 + skip + length);
    return {
      internal: /[\\/]@babel[\\/]/.test(shortStackTrace[1].getFileName()),
      trace: shortStackTrace.map(frame => `    at ${frame}`).join("\n")
    };
  }
  return exports$4G;
}

var exports$4F = {},
  _dewExec$4E = false;
function dew$4E() {
  if (_dewExec$4E) return exports$4F;
  _dewExec$4E = true;
  Object.defineProperty(exports$4F, "__esModule", {
    value: true
  });
  exports$4F.isAccessor = isAccessor;
  exports$4F.isAnyTypeAnnotation = isAnyTypeAnnotation;
  exports$4F.isArgumentPlaceholder = isArgumentPlaceholder;
  exports$4F.isArrayExpression = isArrayExpression;
  exports$4F.isArrayPattern = isArrayPattern;
  exports$4F.isArrayTypeAnnotation = isArrayTypeAnnotation;
  exports$4F.isArrowFunctionExpression = isArrowFunctionExpression;
  exports$4F.isAssignmentExpression = isAssignmentExpression;
  exports$4F.isAssignmentPattern = isAssignmentPattern;
  exports$4F.isAwaitExpression = isAwaitExpression;
  exports$4F.isBigIntLiteral = isBigIntLiteral;
  exports$4F.isBinary = isBinary;
  exports$4F.isBinaryExpression = isBinaryExpression;
  exports$4F.isBindExpression = isBindExpression;
  exports$4F.isBlock = isBlock;
  exports$4F.isBlockParent = isBlockParent;
  exports$4F.isBlockStatement = isBlockStatement;
  exports$4F.isBooleanLiteral = isBooleanLiteral;
  exports$4F.isBooleanLiteralTypeAnnotation = isBooleanLiteralTypeAnnotation;
  exports$4F.isBooleanTypeAnnotation = isBooleanTypeAnnotation;
  exports$4F.isBreakStatement = isBreakStatement;
  exports$4F.isCallExpression = isCallExpression;
  exports$4F.isCatchClause = isCatchClause;
  exports$4F.isClass = isClass;
  exports$4F.isClassAccessorProperty = isClassAccessorProperty;
  exports$4F.isClassBody = isClassBody;
  exports$4F.isClassDeclaration = isClassDeclaration;
  exports$4F.isClassExpression = isClassExpression;
  exports$4F.isClassImplements = isClassImplements;
  exports$4F.isClassMethod = isClassMethod;
  exports$4F.isClassPrivateMethod = isClassPrivateMethod;
  exports$4F.isClassPrivateProperty = isClassPrivateProperty;
  exports$4F.isClassProperty = isClassProperty;
  exports$4F.isCompletionStatement = isCompletionStatement;
  exports$4F.isConditional = isConditional;
  exports$4F.isConditionalExpression = isConditionalExpression;
  exports$4F.isContinueStatement = isContinueStatement;
  exports$4F.isDebuggerStatement = isDebuggerStatement;
  exports$4F.isDecimalLiteral = isDecimalLiteral;
  exports$4F.isDeclaration = isDeclaration;
  exports$4F.isDeclareClass = isDeclareClass;
  exports$4F.isDeclareExportAllDeclaration = isDeclareExportAllDeclaration;
  exports$4F.isDeclareExportDeclaration = isDeclareExportDeclaration;
  exports$4F.isDeclareFunction = isDeclareFunction;
  exports$4F.isDeclareInterface = isDeclareInterface;
  exports$4F.isDeclareModule = isDeclareModule;
  exports$4F.isDeclareModuleExports = isDeclareModuleExports;
  exports$4F.isDeclareOpaqueType = isDeclareOpaqueType;
  exports$4F.isDeclareTypeAlias = isDeclareTypeAlias;
  exports$4F.isDeclareVariable = isDeclareVariable;
  exports$4F.isDeclaredPredicate = isDeclaredPredicate;
  exports$4F.isDecorator = isDecorator;
  exports$4F.isDirective = isDirective;
  exports$4F.isDirectiveLiteral = isDirectiveLiteral;
  exports$4F.isDoExpression = isDoExpression;
  exports$4F.isDoWhileStatement = isDoWhileStatement;
  exports$4F.isEmptyStatement = isEmptyStatement;
  exports$4F.isEmptyTypeAnnotation = isEmptyTypeAnnotation;
  exports$4F.isEnumBody = isEnumBody;
  exports$4F.isEnumBooleanBody = isEnumBooleanBody;
  exports$4F.isEnumBooleanMember = isEnumBooleanMember;
  exports$4F.isEnumDeclaration = isEnumDeclaration;
  exports$4F.isEnumDefaultedMember = isEnumDefaultedMember;
  exports$4F.isEnumMember = isEnumMember;
  exports$4F.isEnumNumberBody = isEnumNumberBody;
  exports$4F.isEnumNumberMember = isEnumNumberMember;
  exports$4F.isEnumStringBody = isEnumStringBody;
  exports$4F.isEnumStringMember = isEnumStringMember;
  exports$4F.isEnumSymbolBody = isEnumSymbolBody;
  exports$4F.isExistsTypeAnnotation = isExistsTypeAnnotation;
  exports$4F.isExportAllDeclaration = isExportAllDeclaration;
  exports$4F.isExportDeclaration = isExportDeclaration;
  exports$4F.isExportDefaultDeclaration = isExportDefaultDeclaration;
  exports$4F.isExportDefaultSpecifier = isExportDefaultSpecifier;
  exports$4F.isExportNamedDeclaration = isExportNamedDeclaration;
  exports$4F.isExportNamespaceSpecifier = isExportNamespaceSpecifier;
  exports$4F.isExportSpecifier = isExportSpecifier;
  exports$4F.isExpression = isExpression;
  exports$4F.isExpressionStatement = isExpressionStatement;
  exports$4F.isExpressionWrapper = isExpressionWrapper;
  exports$4F.isFile = isFile;
  exports$4F.isFlow = isFlow;
  exports$4F.isFlowBaseAnnotation = isFlowBaseAnnotation;
  exports$4F.isFlowDeclaration = isFlowDeclaration;
  exports$4F.isFlowPredicate = isFlowPredicate;
  exports$4F.isFlowType = isFlowType;
  exports$4F.isFor = isFor;
  exports$4F.isForInStatement = isForInStatement;
  exports$4F.isForOfStatement = isForOfStatement;
  exports$4F.isForStatement = isForStatement;
  exports$4F.isForXStatement = isForXStatement;
  exports$4F.isFunction = isFunction;
  exports$4F.isFunctionDeclaration = isFunctionDeclaration;
  exports$4F.isFunctionExpression = isFunctionExpression;
  exports$4F.isFunctionParent = isFunctionParent;
  exports$4F.isFunctionTypeAnnotation = isFunctionTypeAnnotation;
  exports$4F.isFunctionTypeParam = isFunctionTypeParam;
  exports$4F.isGenericTypeAnnotation = isGenericTypeAnnotation;
  exports$4F.isIdentifier = isIdentifier;
  exports$4F.isIfStatement = isIfStatement;
  exports$4F.isImmutable = isImmutable;
  exports$4F.isImport = isImport;
  exports$4F.isImportAttribute = isImportAttribute;
  exports$4F.isImportDeclaration = isImportDeclaration;
  exports$4F.isImportDefaultSpecifier = isImportDefaultSpecifier;
  exports$4F.isImportExpression = isImportExpression;
  exports$4F.isImportNamespaceSpecifier = isImportNamespaceSpecifier;
  exports$4F.isImportOrExportDeclaration = isImportOrExportDeclaration;
  exports$4F.isImportSpecifier = isImportSpecifier;
  exports$4F.isIndexedAccessType = isIndexedAccessType;
  exports$4F.isInferredPredicate = isInferredPredicate;
  exports$4F.isInterfaceDeclaration = isInterfaceDeclaration;
  exports$4F.isInterfaceExtends = isInterfaceExtends;
  exports$4F.isInterfaceTypeAnnotation = isInterfaceTypeAnnotation;
  exports$4F.isInterpreterDirective = isInterpreterDirective;
  exports$4F.isIntersectionTypeAnnotation = isIntersectionTypeAnnotation;
  exports$4F.isJSX = isJSX;
  exports$4F.isJSXAttribute = isJSXAttribute;
  exports$4F.isJSXClosingElement = isJSXClosingElement;
  exports$4F.isJSXClosingFragment = isJSXClosingFragment;
  exports$4F.isJSXElement = isJSXElement;
  exports$4F.isJSXEmptyExpression = isJSXEmptyExpression;
  exports$4F.isJSXExpressionContainer = isJSXExpressionContainer;
  exports$4F.isJSXFragment = isJSXFragment;
  exports$4F.isJSXIdentifier = isJSXIdentifier;
  exports$4F.isJSXMemberExpression = isJSXMemberExpression;
  exports$4F.isJSXNamespacedName = isJSXNamespacedName;
  exports$4F.isJSXOpeningElement = isJSXOpeningElement;
  exports$4F.isJSXOpeningFragment = isJSXOpeningFragment;
  exports$4F.isJSXSpreadAttribute = isJSXSpreadAttribute;
  exports$4F.isJSXSpreadChild = isJSXSpreadChild;
  exports$4F.isJSXText = isJSXText;
  exports$4F.isLVal = isLVal;
  exports$4F.isLabeledStatement = isLabeledStatement;
  exports$4F.isLiteral = isLiteral;
  exports$4F.isLogicalExpression = isLogicalExpression;
  exports$4F.isLoop = isLoop;
  exports$4F.isMemberExpression = isMemberExpression;
  exports$4F.isMetaProperty = isMetaProperty;
  exports$4F.isMethod = isMethod;
  exports$4F.isMiscellaneous = isMiscellaneous;
  exports$4F.isMixedTypeAnnotation = isMixedTypeAnnotation;
  exports$4F.isModuleDeclaration = isModuleDeclaration;
  exports$4F.isModuleExpression = isModuleExpression;
  exports$4F.isModuleSpecifier = isModuleSpecifier;
  exports$4F.isNewExpression = isNewExpression;
  exports$4F.isNoop = isNoop;
  exports$4F.isNullLiteral = isNullLiteral;
  exports$4F.isNullLiteralTypeAnnotation = isNullLiteralTypeAnnotation;
  exports$4F.isNullableTypeAnnotation = isNullableTypeAnnotation;
  exports$4F.isNumberLiteral = isNumberLiteral;
  exports$4F.isNumberLiteralTypeAnnotation = isNumberLiteralTypeAnnotation;
  exports$4F.isNumberTypeAnnotation = isNumberTypeAnnotation;
  exports$4F.isNumericLiteral = isNumericLiteral;
  exports$4F.isObjectExpression = isObjectExpression;
  exports$4F.isObjectMember = isObjectMember;
  exports$4F.isObjectMethod = isObjectMethod;
  exports$4F.isObjectPattern = isObjectPattern;
  exports$4F.isObjectProperty = isObjectProperty;
  exports$4F.isObjectTypeAnnotation = isObjectTypeAnnotation;
  exports$4F.isObjectTypeCallProperty = isObjectTypeCallProperty;
  exports$4F.isObjectTypeIndexer = isObjectTypeIndexer;
  exports$4F.isObjectTypeInternalSlot = isObjectTypeInternalSlot;
  exports$4F.isObjectTypeProperty = isObjectTypeProperty;
  exports$4F.isObjectTypeSpreadProperty = isObjectTypeSpreadProperty;
  exports$4F.isOpaqueType = isOpaqueType;
  exports$4F.isOptionalCallExpression = isOptionalCallExpression;
  exports$4F.isOptionalIndexedAccessType = isOptionalIndexedAccessType;
  exports$4F.isOptionalMemberExpression = isOptionalMemberExpression;
  exports$4F.isParenthesizedExpression = isParenthesizedExpression;
  exports$4F.isPattern = isPattern;
  exports$4F.isPatternLike = isPatternLike;
  exports$4F.isPipelineBareFunction = isPipelineBareFunction;
  exports$4F.isPipelinePrimaryTopicReference = isPipelinePrimaryTopicReference;
  exports$4F.isPipelineTopicExpression = isPipelineTopicExpression;
  exports$4F.isPlaceholder = isPlaceholder;
  exports$4F.isPrivate = isPrivate;
  exports$4F.isPrivateName = isPrivateName;
  exports$4F.isProgram = isProgram;
  exports$4F.isProperty = isProperty;
  exports$4F.isPureish = isPureish;
  exports$4F.isQualifiedTypeIdentifier = isQualifiedTypeIdentifier;
  exports$4F.isRecordExpression = isRecordExpression;
  exports$4F.isRegExpLiteral = isRegExpLiteral;
  exports$4F.isRegexLiteral = isRegexLiteral;
  exports$4F.isRestElement = isRestElement;
  exports$4F.isRestProperty = isRestProperty;
  exports$4F.isReturnStatement = isReturnStatement;
  exports$4F.isScopable = isScopable;
  exports$4F.isSequenceExpression = isSequenceExpression;
  exports$4F.isSpreadElement = isSpreadElement;
  exports$4F.isSpreadProperty = isSpreadProperty;
  exports$4F.isStandardized = isStandardized;
  exports$4F.isStatement = isStatement;
  exports$4F.isStaticBlock = isStaticBlock;
  exports$4F.isStringLiteral = isStringLiteral;
  exports$4F.isStringLiteralTypeAnnotation = isStringLiteralTypeAnnotation;
  exports$4F.isStringTypeAnnotation = isStringTypeAnnotation;
  exports$4F.isSuper = isSuper;
  exports$4F.isSwitchCase = isSwitchCase;
  exports$4F.isSwitchStatement = isSwitchStatement;
  exports$4F.isSymbolTypeAnnotation = isSymbolTypeAnnotation;
  exports$4F.isTSAnyKeyword = isTSAnyKeyword;
  exports$4F.isTSArrayType = isTSArrayType;
  exports$4F.isTSAsExpression = isTSAsExpression;
  exports$4F.isTSBaseType = isTSBaseType;
  exports$4F.isTSBigIntKeyword = isTSBigIntKeyword;
  exports$4F.isTSBooleanKeyword = isTSBooleanKeyword;
  exports$4F.isTSCallSignatureDeclaration = isTSCallSignatureDeclaration;
  exports$4F.isTSConditionalType = isTSConditionalType;
  exports$4F.isTSConstructSignatureDeclaration = isTSConstructSignatureDeclaration;
  exports$4F.isTSConstructorType = isTSConstructorType;
  exports$4F.isTSDeclareFunction = isTSDeclareFunction;
  exports$4F.isTSDeclareMethod = isTSDeclareMethod;
  exports$4F.isTSEntityName = isTSEntityName;
  exports$4F.isTSEnumDeclaration = isTSEnumDeclaration;
  exports$4F.isTSEnumMember = isTSEnumMember;
  exports$4F.isTSExportAssignment = isTSExportAssignment;
  exports$4F.isTSExpressionWithTypeArguments = isTSExpressionWithTypeArguments;
  exports$4F.isTSExternalModuleReference = isTSExternalModuleReference;
  exports$4F.isTSFunctionType = isTSFunctionType;
  exports$4F.isTSImportEqualsDeclaration = isTSImportEqualsDeclaration;
  exports$4F.isTSImportType = isTSImportType;
  exports$4F.isTSIndexSignature = isTSIndexSignature;
  exports$4F.isTSIndexedAccessType = isTSIndexedAccessType;
  exports$4F.isTSInferType = isTSInferType;
  exports$4F.isTSInstantiationExpression = isTSInstantiationExpression;
  exports$4F.isTSInterfaceBody = isTSInterfaceBody;
  exports$4F.isTSInterfaceDeclaration = isTSInterfaceDeclaration;
  exports$4F.isTSIntersectionType = isTSIntersectionType;
  exports$4F.isTSIntrinsicKeyword = isTSIntrinsicKeyword;
  exports$4F.isTSLiteralType = isTSLiteralType;
  exports$4F.isTSMappedType = isTSMappedType;
  exports$4F.isTSMethodSignature = isTSMethodSignature;
  exports$4F.isTSModuleBlock = isTSModuleBlock;
  exports$4F.isTSModuleDeclaration = isTSModuleDeclaration;
  exports$4F.isTSNamedTupleMember = isTSNamedTupleMember;
  exports$4F.isTSNamespaceExportDeclaration = isTSNamespaceExportDeclaration;
  exports$4F.isTSNeverKeyword = isTSNeverKeyword;
  exports$4F.isTSNonNullExpression = isTSNonNullExpression;
  exports$4F.isTSNullKeyword = isTSNullKeyword;
  exports$4F.isTSNumberKeyword = isTSNumberKeyword;
  exports$4F.isTSObjectKeyword = isTSObjectKeyword;
  exports$4F.isTSOptionalType = isTSOptionalType;
  exports$4F.isTSParameterProperty = isTSParameterProperty;
  exports$4F.isTSParenthesizedType = isTSParenthesizedType;
  exports$4F.isTSPropertySignature = isTSPropertySignature;
  exports$4F.isTSQualifiedName = isTSQualifiedName;
  exports$4F.isTSRestType = isTSRestType;
  exports$4F.isTSSatisfiesExpression = isTSSatisfiesExpression;
  exports$4F.isTSStringKeyword = isTSStringKeyword;
  exports$4F.isTSSymbolKeyword = isTSSymbolKeyword;
  exports$4F.isTSThisType = isTSThisType;
  exports$4F.isTSTupleType = isTSTupleType;
  exports$4F.isTSType = isTSType;
  exports$4F.isTSTypeAliasDeclaration = isTSTypeAliasDeclaration;
  exports$4F.isTSTypeAnnotation = isTSTypeAnnotation;
  exports$4F.isTSTypeAssertion = isTSTypeAssertion;
  exports$4F.isTSTypeElement = isTSTypeElement;
  exports$4F.isTSTypeLiteral = isTSTypeLiteral;
  exports$4F.isTSTypeOperator = isTSTypeOperator;
  exports$4F.isTSTypeParameter = isTSTypeParameter;
  exports$4F.isTSTypeParameterDeclaration = isTSTypeParameterDeclaration;
  exports$4F.isTSTypeParameterInstantiation = isTSTypeParameterInstantiation;
  exports$4F.isTSTypePredicate = isTSTypePredicate;
  exports$4F.isTSTypeQuery = isTSTypeQuery;
  exports$4F.isTSTypeReference = isTSTypeReference;
  exports$4F.isTSUndefinedKeyword = isTSUndefinedKeyword;
  exports$4F.isTSUnionType = isTSUnionType;
  exports$4F.isTSUnknownKeyword = isTSUnknownKeyword;
  exports$4F.isTSVoidKeyword = isTSVoidKeyword;
  exports$4F.isTaggedTemplateExpression = isTaggedTemplateExpression;
  exports$4F.isTemplateElement = isTemplateElement;
  exports$4F.isTemplateLiteral = isTemplateLiteral;
  exports$4F.isTerminatorless = isTerminatorless;
  exports$4F.isThisExpression = isThisExpression;
  exports$4F.isThisTypeAnnotation = isThisTypeAnnotation;
  exports$4F.isThrowStatement = isThrowStatement;
  exports$4F.isTopicReference = isTopicReference;
  exports$4F.isTryStatement = isTryStatement;
  exports$4F.isTupleExpression = isTupleExpression;
  exports$4F.isTupleTypeAnnotation = isTupleTypeAnnotation;
  exports$4F.isTypeAlias = isTypeAlias;
  exports$4F.isTypeAnnotation = isTypeAnnotation;
  exports$4F.isTypeCastExpression = isTypeCastExpression;
  exports$4F.isTypeParameter = isTypeParameter;
  exports$4F.isTypeParameterDeclaration = isTypeParameterDeclaration;
  exports$4F.isTypeParameterInstantiation = isTypeParameterInstantiation;
  exports$4F.isTypeScript = isTypeScript;
  exports$4F.isTypeofTypeAnnotation = isTypeofTypeAnnotation;
  exports$4F.isUnaryExpression = isUnaryExpression;
  exports$4F.isUnaryLike = isUnaryLike;
  exports$4F.isUnionTypeAnnotation = isUnionTypeAnnotation;
  exports$4F.isUpdateExpression = isUpdateExpression;
  exports$4F.isUserWhitespacable = isUserWhitespacable;
  exports$4F.isV8IntrinsicIdentifier = isV8IntrinsicIdentifier;
  exports$4F.isVariableDeclaration = isVariableDeclaration;
  exports$4F.isVariableDeclarator = isVariableDeclarator;
  exports$4F.isVariance = isVariance;
  exports$4F.isVoidTypeAnnotation = isVoidTypeAnnotation;
  exports$4F.isWhile = isWhile;
  exports$4F.isWhileStatement = isWhileStatement;
  exports$4F.isWithStatement = isWithStatement;
  exports$4F.isYieldExpression = isYieldExpression;
  var _shallowEqual = dew$4G();
  var _deprecationWarning = dew$4F();
  function isArrayExpression(node, opts) {
    if (!node) return false;
    if (node.type !== "ArrayExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isAssignmentExpression(node, opts) {
    if (!node) return false;
    if (node.type !== "AssignmentExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isBinaryExpression(node, opts) {
    if (!node) return false;
    if (node.type !== "BinaryExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isInterpreterDirective(node, opts) {
    if (!node) return false;
    if (node.type !== "InterpreterDirective") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isDirective(node, opts) {
    if (!node) return false;
    if (node.type !== "Directive") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isDirectiveLiteral(node, opts) {
    if (!node) return false;
    if (node.type !== "DirectiveLiteral") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isBlockStatement(node, opts) {
    if (!node) return false;
    if (node.type !== "BlockStatement") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isBreakStatement(node, opts) {
    if (!node) return false;
    if (node.type !== "BreakStatement") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isCallExpression(node, opts) {
    if (!node) return false;
    if (node.type !== "CallExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isCatchClause(node, opts) {
    if (!node) return false;
    if (node.type !== "CatchClause") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isConditionalExpression(node, opts) {
    if (!node) return false;
    if (node.type !== "ConditionalExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isContinueStatement(node, opts) {
    if (!node) return false;
    if (node.type !== "ContinueStatement") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isDebuggerStatement(node, opts) {
    if (!node) return false;
    if (node.type !== "DebuggerStatement") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isDoWhileStatement(node, opts) {
    if (!node) return false;
    if (node.type !== "DoWhileStatement") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isEmptyStatement(node, opts) {
    if (!node) return false;
    if (node.type !== "EmptyStatement") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isExpressionStatement(node, opts) {
    if (!node) return false;
    if (node.type !== "ExpressionStatement") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isFile(node, opts) {
    if (!node) return false;
    if (node.type !== "File") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isForInStatement(node, opts) {
    if (!node) return false;
    if (node.type !== "ForInStatement") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isForStatement(node, opts) {
    if (!node) return false;
    if (node.type !== "ForStatement") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isFunctionDeclaration(node, opts) {
    if (!node) return false;
    if (node.type !== "FunctionDeclaration") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isFunctionExpression(node, opts) {
    if (!node) return false;
    if (node.type !== "FunctionExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isIdentifier(node, opts) {
    if (!node) return false;
    if (node.type !== "Identifier") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isIfStatement(node, opts) {
    if (!node) return false;
    if (node.type !== "IfStatement") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isLabeledStatement(node, opts) {
    if (!node) return false;
    if (node.type !== "LabeledStatement") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isStringLiteral(node, opts) {
    if (!node) return false;
    if (node.type !== "StringLiteral") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isNumericLiteral(node, opts) {
    if (!node) return false;
    if (node.type !== "NumericLiteral") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isNullLiteral(node, opts) {
    if (!node) return false;
    if (node.type !== "NullLiteral") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isBooleanLiteral(node, opts) {
    if (!node) return false;
    if (node.type !== "BooleanLiteral") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isRegExpLiteral(node, opts) {
    if (!node) return false;
    if (node.type !== "RegExpLiteral") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isLogicalExpression(node, opts) {
    if (!node) return false;
    if (node.type !== "LogicalExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isMemberExpression(node, opts) {
    if (!node) return false;
    if (node.type !== "MemberExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isNewExpression(node, opts) {
    if (!node) return false;
    if (node.type !== "NewExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isProgram(node, opts) {
    if (!node) return false;
    if (node.type !== "Program") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isObjectExpression(node, opts) {
    if (!node) return false;
    if (node.type !== "ObjectExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isObjectMethod(node, opts) {
    if (!node) return false;
    if (node.type !== "ObjectMethod") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isObjectProperty(node, opts) {
    if (!node) return false;
    if (node.type !== "ObjectProperty") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isRestElement(node, opts) {
    if (!node) return false;
    if (node.type !== "RestElement") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isReturnStatement(node, opts) {
    if (!node) return false;
    if (node.type !== "ReturnStatement") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isSequenceExpression(node, opts) {
    if (!node) return false;
    if (node.type !== "SequenceExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isParenthesizedExpression(node, opts) {
    if (!node) return false;
    if (node.type !== "ParenthesizedExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isSwitchCase(node, opts) {
    if (!node) return false;
    if (node.type !== "SwitchCase") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isSwitchStatement(node, opts) {
    if (!node) return false;
    if (node.type !== "SwitchStatement") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isThisExpression(node, opts) {
    if (!node) return false;
    if (node.type !== "ThisExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isThrowStatement(node, opts) {
    if (!node) return false;
    if (node.type !== "ThrowStatement") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTryStatement(node, opts) {
    if (!node) return false;
    if (node.type !== "TryStatement") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isUnaryExpression(node, opts) {
    if (!node) return false;
    if (node.type !== "UnaryExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isUpdateExpression(node, opts) {
    if (!node) return false;
    if (node.type !== "UpdateExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isVariableDeclaration(node, opts) {
    if (!node) return false;
    if (node.type !== "VariableDeclaration") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isVariableDeclarator(node, opts) {
    if (!node) return false;
    if (node.type !== "VariableDeclarator") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isWhileStatement(node, opts) {
    if (!node) return false;
    if (node.type !== "WhileStatement") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isWithStatement(node, opts) {
    if (!node) return false;
    if (node.type !== "WithStatement") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isAssignmentPattern(node, opts) {
    if (!node) return false;
    if (node.type !== "AssignmentPattern") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isArrayPattern(node, opts) {
    if (!node) return false;
    if (node.type !== "ArrayPattern") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isArrowFunctionExpression(node, opts) {
    if (!node) return false;
    if (node.type !== "ArrowFunctionExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isClassBody(node, opts) {
    if (!node) return false;
    if (node.type !== "ClassBody") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isClassExpression(node, opts) {
    if (!node) return false;
    if (node.type !== "ClassExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isClassDeclaration(node, opts) {
    if (!node) return false;
    if (node.type !== "ClassDeclaration") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isExportAllDeclaration(node, opts) {
    if (!node) return false;
    if (node.type !== "ExportAllDeclaration") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isExportDefaultDeclaration(node, opts) {
    if (!node) return false;
    if (node.type !== "ExportDefaultDeclaration") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isExportNamedDeclaration(node, opts) {
    if (!node) return false;
    if (node.type !== "ExportNamedDeclaration") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isExportSpecifier(node, opts) {
    if (!node) return false;
    if (node.type !== "ExportSpecifier") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isForOfStatement(node, opts) {
    if (!node) return false;
    if (node.type !== "ForOfStatement") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isImportDeclaration(node, opts) {
    if (!node) return false;
    if (node.type !== "ImportDeclaration") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isImportDefaultSpecifier(node, opts) {
    if (!node) return false;
    if (node.type !== "ImportDefaultSpecifier") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isImportNamespaceSpecifier(node, opts) {
    if (!node) return false;
    if (node.type !== "ImportNamespaceSpecifier") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isImportSpecifier(node, opts) {
    if (!node) return false;
    if (node.type !== "ImportSpecifier") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isImportExpression(node, opts) {
    if (!node) return false;
    if (node.type !== "ImportExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isMetaProperty(node, opts) {
    if (!node) return false;
    if (node.type !== "MetaProperty") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isClassMethod(node, opts) {
    if (!node) return false;
    if (node.type !== "ClassMethod") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isObjectPattern(node, opts) {
    if (!node) return false;
    if (node.type !== "ObjectPattern") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isSpreadElement(node, opts) {
    if (!node) return false;
    if (node.type !== "SpreadElement") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isSuper(node, opts) {
    if (!node) return false;
    if (node.type !== "Super") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTaggedTemplateExpression(node, opts) {
    if (!node) return false;
    if (node.type !== "TaggedTemplateExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTemplateElement(node, opts) {
    if (!node) return false;
    if (node.type !== "TemplateElement") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTemplateLiteral(node, opts) {
    if (!node) return false;
    if (node.type !== "TemplateLiteral") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isYieldExpression(node, opts) {
    if (!node) return false;
    if (node.type !== "YieldExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isAwaitExpression(node, opts) {
    if (!node) return false;
    if (node.type !== "AwaitExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isImport(node, opts) {
    if (!node) return false;
    if (node.type !== "Import") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isBigIntLiteral(node, opts) {
    if (!node) return false;
    if (node.type !== "BigIntLiteral") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isExportNamespaceSpecifier(node, opts) {
    if (!node) return false;
    if (node.type !== "ExportNamespaceSpecifier") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isOptionalMemberExpression(node, opts) {
    if (!node) return false;
    if (node.type !== "OptionalMemberExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isOptionalCallExpression(node, opts) {
    if (!node) return false;
    if (node.type !== "OptionalCallExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isClassProperty(node, opts) {
    if (!node) return false;
    if (node.type !== "ClassProperty") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isClassAccessorProperty(node, opts) {
    if (!node) return false;
    if (node.type !== "ClassAccessorProperty") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isClassPrivateProperty(node, opts) {
    if (!node) return false;
    if (node.type !== "ClassPrivateProperty") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isClassPrivateMethod(node, opts) {
    if (!node) return false;
    if (node.type !== "ClassPrivateMethod") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isPrivateName(node, opts) {
    if (!node) return false;
    if (node.type !== "PrivateName") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isStaticBlock(node, opts) {
    if (!node) return false;
    if (node.type !== "StaticBlock") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isAnyTypeAnnotation(node, opts) {
    if (!node) return false;
    if (node.type !== "AnyTypeAnnotation") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isArrayTypeAnnotation(node, opts) {
    if (!node) return false;
    if (node.type !== "ArrayTypeAnnotation") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isBooleanTypeAnnotation(node, opts) {
    if (!node) return false;
    if (node.type !== "BooleanTypeAnnotation") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isBooleanLiteralTypeAnnotation(node, opts) {
    if (!node) return false;
    if (node.type !== "BooleanLiteralTypeAnnotation") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isNullLiteralTypeAnnotation(node, opts) {
    if (!node) return false;
    if (node.type !== "NullLiteralTypeAnnotation") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isClassImplements(node, opts) {
    if (!node) return false;
    if (node.type !== "ClassImplements") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isDeclareClass(node, opts) {
    if (!node) return false;
    if (node.type !== "DeclareClass") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isDeclareFunction(node, opts) {
    if (!node) return false;
    if (node.type !== "DeclareFunction") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isDeclareInterface(node, opts) {
    if (!node) return false;
    if (node.type !== "DeclareInterface") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isDeclareModule(node, opts) {
    if (!node) return false;
    if (node.type !== "DeclareModule") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isDeclareModuleExports(node, opts) {
    if (!node) return false;
    if (node.type !== "DeclareModuleExports") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isDeclareTypeAlias(node, opts) {
    if (!node) return false;
    if (node.type !== "DeclareTypeAlias") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isDeclareOpaqueType(node, opts) {
    if (!node) return false;
    if (node.type !== "DeclareOpaqueType") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isDeclareVariable(node, opts) {
    if (!node) return false;
    if (node.type !== "DeclareVariable") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isDeclareExportDeclaration(node, opts) {
    if (!node) return false;
    if (node.type !== "DeclareExportDeclaration") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isDeclareExportAllDeclaration(node, opts) {
    if (!node) return false;
    if (node.type !== "DeclareExportAllDeclaration") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isDeclaredPredicate(node, opts) {
    if (!node) return false;
    if (node.type !== "DeclaredPredicate") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isExistsTypeAnnotation(node, opts) {
    if (!node) return false;
    if (node.type !== "ExistsTypeAnnotation") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isFunctionTypeAnnotation(node, opts) {
    if (!node) return false;
    if (node.type !== "FunctionTypeAnnotation") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isFunctionTypeParam(node, opts) {
    if (!node) return false;
    if (node.type !== "FunctionTypeParam") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isGenericTypeAnnotation(node, opts) {
    if (!node) return false;
    if (node.type !== "GenericTypeAnnotation") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isInferredPredicate(node, opts) {
    if (!node) return false;
    if (node.type !== "InferredPredicate") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isInterfaceExtends(node, opts) {
    if (!node) return false;
    if (node.type !== "InterfaceExtends") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isInterfaceDeclaration(node, opts) {
    if (!node) return false;
    if (node.type !== "InterfaceDeclaration") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isInterfaceTypeAnnotation(node, opts) {
    if (!node) return false;
    if (node.type !== "InterfaceTypeAnnotation") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isIntersectionTypeAnnotation(node, opts) {
    if (!node) return false;
    if (node.type !== "IntersectionTypeAnnotation") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isMixedTypeAnnotation(node, opts) {
    if (!node) return false;
    if (node.type !== "MixedTypeAnnotation") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isEmptyTypeAnnotation(node, opts) {
    if (!node) return false;
    if (node.type !== "EmptyTypeAnnotation") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isNullableTypeAnnotation(node, opts) {
    if (!node) return false;
    if (node.type !== "NullableTypeAnnotation") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isNumberLiteralTypeAnnotation(node, opts) {
    if (!node) return false;
    if (node.type !== "NumberLiteralTypeAnnotation") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isNumberTypeAnnotation(node, opts) {
    if (!node) return false;
    if (node.type !== "NumberTypeAnnotation") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isObjectTypeAnnotation(node, opts) {
    if (!node) return false;
    if (node.type !== "ObjectTypeAnnotation") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isObjectTypeInternalSlot(node, opts) {
    if (!node) return false;
    if (node.type !== "ObjectTypeInternalSlot") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isObjectTypeCallProperty(node, opts) {
    if (!node) return false;
    if (node.type !== "ObjectTypeCallProperty") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isObjectTypeIndexer(node, opts) {
    if (!node) return false;
    if (node.type !== "ObjectTypeIndexer") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isObjectTypeProperty(node, opts) {
    if (!node) return false;
    if (node.type !== "ObjectTypeProperty") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isObjectTypeSpreadProperty(node, opts) {
    if (!node) return false;
    if (node.type !== "ObjectTypeSpreadProperty") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isOpaqueType(node, opts) {
    if (!node) return false;
    if (node.type !== "OpaqueType") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isQualifiedTypeIdentifier(node, opts) {
    if (!node) return false;
    if (node.type !== "QualifiedTypeIdentifier") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isStringLiteralTypeAnnotation(node, opts) {
    if (!node) return false;
    if (node.type !== "StringLiteralTypeAnnotation") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isStringTypeAnnotation(node, opts) {
    if (!node) return false;
    if (node.type !== "StringTypeAnnotation") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isSymbolTypeAnnotation(node, opts) {
    if (!node) return false;
    if (node.type !== "SymbolTypeAnnotation") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isThisTypeAnnotation(node, opts) {
    if (!node) return false;
    if (node.type !== "ThisTypeAnnotation") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTupleTypeAnnotation(node, opts) {
    if (!node) return false;
    if (node.type !== "TupleTypeAnnotation") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTypeofTypeAnnotation(node, opts) {
    if (!node) return false;
    if (node.type !== "TypeofTypeAnnotation") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTypeAlias(node, opts) {
    if (!node) return false;
    if (node.type !== "TypeAlias") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTypeAnnotation(node, opts) {
    if (!node) return false;
    if (node.type !== "TypeAnnotation") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTypeCastExpression(node, opts) {
    if (!node) return false;
    if (node.type !== "TypeCastExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTypeParameter(node, opts) {
    if (!node) return false;
    if (node.type !== "TypeParameter") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTypeParameterDeclaration(node, opts) {
    if (!node) return false;
    if (node.type !== "TypeParameterDeclaration") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTypeParameterInstantiation(node, opts) {
    if (!node) return false;
    if (node.type !== "TypeParameterInstantiation") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isUnionTypeAnnotation(node, opts) {
    if (!node) return false;
    if (node.type !== "UnionTypeAnnotation") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isVariance(node, opts) {
    if (!node) return false;
    if (node.type !== "Variance") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isVoidTypeAnnotation(node, opts) {
    if (!node) return false;
    if (node.type !== "VoidTypeAnnotation") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isEnumDeclaration(node, opts) {
    if (!node) return false;
    if (node.type !== "EnumDeclaration") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isEnumBooleanBody(node, opts) {
    if (!node) return false;
    if (node.type !== "EnumBooleanBody") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isEnumNumberBody(node, opts) {
    if (!node) return false;
    if (node.type !== "EnumNumberBody") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isEnumStringBody(node, opts) {
    if (!node) return false;
    if (node.type !== "EnumStringBody") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isEnumSymbolBody(node, opts) {
    if (!node) return false;
    if (node.type !== "EnumSymbolBody") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isEnumBooleanMember(node, opts) {
    if (!node) return false;
    if (node.type !== "EnumBooleanMember") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isEnumNumberMember(node, opts) {
    if (!node) return false;
    if (node.type !== "EnumNumberMember") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isEnumStringMember(node, opts) {
    if (!node) return false;
    if (node.type !== "EnumStringMember") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isEnumDefaultedMember(node, opts) {
    if (!node) return false;
    if (node.type !== "EnumDefaultedMember") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isIndexedAccessType(node, opts) {
    if (!node) return false;
    if (node.type !== "IndexedAccessType") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isOptionalIndexedAccessType(node, opts) {
    if (!node) return false;
    if (node.type !== "OptionalIndexedAccessType") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isJSXAttribute(node, opts) {
    if (!node) return false;
    if (node.type !== "JSXAttribute") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isJSXClosingElement(node, opts) {
    if (!node) return false;
    if (node.type !== "JSXClosingElement") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isJSXElement(node, opts) {
    if (!node) return false;
    if (node.type !== "JSXElement") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isJSXEmptyExpression(node, opts) {
    if (!node) return false;
    if (node.type !== "JSXEmptyExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isJSXExpressionContainer(node, opts) {
    if (!node) return false;
    if (node.type !== "JSXExpressionContainer") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isJSXSpreadChild(node, opts) {
    if (!node) return false;
    if (node.type !== "JSXSpreadChild") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isJSXIdentifier(node, opts) {
    if (!node) return false;
    if (node.type !== "JSXIdentifier") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isJSXMemberExpression(node, opts) {
    if (!node) return false;
    if (node.type !== "JSXMemberExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isJSXNamespacedName(node, opts) {
    if (!node) return false;
    if (node.type !== "JSXNamespacedName") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isJSXOpeningElement(node, opts) {
    if (!node) return false;
    if (node.type !== "JSXOpeningElement") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isJSXSpreadAttribute(node, opts) {
    if (!node) return false;
    if (node.type !== "JSXSpreadAttribute") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isJSXText(node, opts) {
    if (!node) return false;
    if (node.type !== "JSXText") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isJSXFragment(node, opts) {
    if (!node) return false;
    if (node.type !== "JSXFragment") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isJSXOpeningFragment(node, opts) {
    if (!node) return false;
    if (node.type !== "JSXOpeningFragment") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isJSXClosingFragment(node, opts) {
    if (!node) return false;
    if (node.type !== "JSXClosingFragment") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isNoop(node, opts) {
    if (!node) return false;
    if (node.type !== "Noop") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isPlaceholder(node, opts) {
    if (!node) return false;
    if (node.type !== "Placeholder") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isV8IntrinsicIdentifier(node, opts) {
    if (!node) return false;
    if (node.type !== "V8IntrinsicIdentifier") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isArgumentPlaceholder(node, opts) {
    if (!node) return false;
    if (node.type !== "ArgumentPlaceholder") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isBindExpression(node, opts) {
    if (!node) return false;
    if (node.type !== "BindExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isImportAttribute(node, opts) {
    if (!node) return false;
    if (node.type !== "ImportAttribute") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isDecorator(node, opts) {
    if (!node) return false;
    if (node.type !== "Decorator") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isDoExpression(node, opts) {
    if (!node) return false;
    if (node.type !== "DoExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isExportDefaultSpecifier(node, opts) {
    if (!node) return false;
    if (node.type !== "ExportDefaultSpecifier") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isRecordExpression(node, opts) {
    if (!node) return false;
    if (node.type !== "RecordExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTupleExpression(node, opts) {
    if (!node) return false;
    if (node.type !== "TupleExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isDecimalLiteral(node, opts) {
    if (!node) return false;
    if (node.type !== "DecimalLiteral") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isModuleExpression(node, opts) {
    if (!node) return false;
    if (node.type !== "ModuleExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTopicReference(node, opts) {
    if (!node) return false;
    if (node.type !== "TopicReference") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isPipelineTopicExpression(node, opts) {
    if (!node) return false;
    if (node.type !== "PipelineTopicExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isPipelineBareFunction(node, opts) {
    if (!node) return false;
    if (node.type !== "PipelineBareFunction") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isPipelinePrimaryTopicReference(node, opts) {
    if (!node) return false;
    if (node.type !== "PipelinePrimaryTopicReference") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTSParameterProperty(node, opts) {
    if (!node) return false;
    if (node.type !== "TSParameterProperty") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTSDeclareFunction(node, opts) {
    if (!node) return false;
    if (node.type !== "TSDeclareFunction") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTSDeclareMethod(node, opts) {
    if (!node) return false;
    if (node.type !== "TSDeclareMethod") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTSQualifiedName(node, opts) {
    if (!node) return false;
    if (node.type !== "TSQualifiedName") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTSCallSignatureDeclaration(node, opts) {
    if (!node) return false;
    if (node.type !== "TSCallSignatureDeclaration") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTSConstructSignatureDeclaration(node, opts) {
    if (!node) return false;
    if (node.type !== "TSConstructSignatureDeclaration") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTSPropertySignature(node, opts) {
    if (!node) return false;
    if (node.type !== "TSPropertySignature") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTSMethodSignature(node, opts) {
    if (!node) return false;
    if (node.type !== "TSMethodSignature") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTSIndexSignature(node, opts) {
    if (!node) return false;
    if (node.type !== "TSIndexSignature") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTSAnyKeyword(node, opts) {
    if (!node) return false;
    if (node.type !== "TSAnyKeyword") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTSBooleanKeyword(node, opts) {
    if (!node) return false;
    if (node.type !== "TSBooleanKeyword") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTSBigIntKeyword(node, opts) {
    if (!node) return false;
    if (node.type !== "TSBigIntKeyword") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTSIntrinsicKeyword(node, opts) {
    if (!node) return false;
    if (node.type !== "TSIntrinsicKeyword") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTSNeverKeyword(node, opts) {
    if (!node) return false;
    if (node.type !== "TSNeverKeyword") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTSNullKeyword(node, opts) {
    if (!node) return false;
    if (node.type !== "TSNullKeyword") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTSNumberKeyword(node, opts) {
    if (!node) return false;
    if (node.type !== "TSNumberKeyword") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTSObjectKeyword(node, opts) {
    if (!node) return false;
    if (node.type !== "TSObjectKeyword") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTSStringKeyword(node, opts) {
    if (!node) return false;
    if (node.type !== "TSStringKeyword") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTSSymbolKeyword(node, opts) {
    if (!node) return false;
    if (node.type !== "TSSymbolKeyword") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTSUndefinedKeyword(node, opts) {
    if (!node) return false;
    if (node.type !== "TSUndefinedKeyword") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTSUnknownKeyword(node, opts) {
    if (!node) return false;
    if (node.type !== "TSUnknownKeyword") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTSVoidKeyword(node, opts) {
    if (!node) return false;
    if (node.type !== "TSVoidKeyword") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTSThisType(node, opts) {
    if (!node) return false;
    if (node.type !== "TSThisType") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTSFunctionType(node, opts) {
    if (!node) return false;
    if (node.type !== "TSFunctionType") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTSConstructorType(node, opts) {
    if (!node) return false;
    if (node.type !== "TSConstructorType") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTSTypeReference(node, opts) {
    if (!node) return false;
    if (node.type !== "TSTypeReference") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTSTypePredicate(node, opts) {
    if (!node) return false;
    if (node.type !== "TSTypePredicate") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTSTypeQuery(node, opts) {
    if (!node) return false;
    if (node.type !== "TSTypeQuery") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTSTypeLiteral(node, opts) {
    if (!node) return false;
    if (node.type !== "TSTypeLiteral") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTSArrayType(node, opts) {
    if (!node) return false;
    if (node.type !== "TSArrayType") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTSTupleType(node, opts) {
    if (!node) return false;
    if (node.type !== "TSTupleType") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTSOptionalType(node, opts) {
    if (!node) return false;
    if (node.type !== "TSOptionalType") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTSRestType(node, opts) {
    if (!node) return false;
    if (node.type !== "TSRestType") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTSNamedTupleMember(node, opts) {
    if (!node) return false;
    if (node.type !== "TSNamedTupleMember") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTSUnionType(node, opts) {
    if (!node) return false;
    if (node.type !== "TSUnionType") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTSIntersectionType(node, opts) {
    if (!node) return false;
    if (node.type !== "TSIntersectionType") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTSConditionalType(node, opts) {
    if (!node) return false;
    if (node.type !== "TSConditionalType") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTSInferType(node, opts) {
    if (!node) return false;
    if (node.type !== "TSInferType") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTSParenthesizedType(node, opts) {
    if (!node) return false;
    if (node.type !== "TSParenthesizedType") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTSTypeOperator(node, opts) {
    if (!node) return false;
    if (node.type !== "TSTypeOperator") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTSIndexedAccessType(node, opts) {
    if (!node) return false;
    if (node.type !== "TSIndexedAccessType") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTSMappedType(node, opts) {
    if (!node) return false;
    if (node.type !== "TSMappedType") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTSLiteralType(node, opts) {
    if (!node) return false;
    if (node.type !== "TSLiteralType") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTSExpressionWithTypeArguments(node, opts) {
    if (!node) return false;
    if (node.type !== "TSExpressionWithTypeArguments") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTSInterfaceDeclaration(node, opts) {
    if (!node) return false;
    if (node.type !== "TSInterfaceDeclaration") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTSInterfaceBody(node, opts) {
    if (!node) return false;
    if (node.type !== "TSInterfaceBody") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTSTypeAliasDeclaration(node, opts) {
    if (!node) return false;
    if (node.type !== "TSTypeAliasDeclaration") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTSInstantiationExpression(node, opts) {
    if (!node) return false;
    if (node.type !== "TSInstantiationExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTSAsExpression(node, opts) {
    if (!node) return false;
    if (node.type !== "TSAsExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTSSatisfiesExpression(node, opts) {
    if (!node) return false;
    if (node.type !== "TSSatisfiesExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTSTypeAssertion(node, opts) {
    if (!node) return false;
    if (node.type !== "TSTypeAssertion") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTSEnumDeclaration(node, opts) {
    if (!node) return false;
    if (node.type !== "TSEnumDeclaration") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTSEnumMember(node, opts) {
    if (!node) return false;
    if (node.type !== "TSEnumMember") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTSModuleDeclaration(node, opts) {
    if (!node) return false;
    if (node.type !== "TSModuleDeclaration") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTSModuleBlock(node, opts) {
    if (!node) return false;
    if (node.type !== "TSModuleBlock") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTSImportType(node, opts) {
    if (!node) return false;
    if (node.type !== "TSImportType") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTSImportEqualsDeclaration(node, opts) {
    if (!node) return false;
    if (node.type !== "TSImportEqualsDeclaration") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTSExternalModuleReference(node, opts) {
    if (!node) return false;
    if (node.type !== "TSExternalModuleReference") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTSNonNullExpression(node, opts) {
    if (!node) return false;
    if (node.type !== "TSNonNullExpression") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTSExportAssignment(node, opts) {
    if (!node) return false;
    if (node.type !== "TSExportAssignment") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTSNamespaceExportDeclaration(node, opts) {
    if (!node) return false;
    if (node.type !== "TSNamespaceExportDeclaration") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTSTypeAnnotation(node, opts) {
    if (!node) return false;
    if (node.type !== "TSTypeAnnotation") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTSTypeParameterInstantiation(node, opts) {
    if (!node) return false;
    if (node.type !== "TSTypeParameterInstantiation") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTSTypeParameterDeclaration(node, opts) {
    if (!node) return false;
    if (node.type !== "TSTypeParameterDeclaration") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTSTypeParameter(node, opts) {
    if (!node) return false;
    if (node.type !== "TSTypeParameter") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isStandardized(node, opts) {
    if (!node) return false;
    switch (node.type) {
      case "ArrayExpression":
      case "AssignmentExpression":
      case "BinaryExpression":
      case "InterpreterDirective":
      case "Directive":
      case "DirectiveLiteral":
      case "BlockStatement":
      case "BreakStatement":
      case "CallExpression":
      case "CatchClause":
      case "ConditionalExpression":
      case "ContinueStatement":
      case "DebuggerStatement":
      case "DoWhileStatement":
      case "EmptyStatement":
      case "ExpressionStatement":
      case "File":
      case "ForInStatement":
      case "ForStatement":
      case "FunctionDeclaration":
      case "FunctionExpression":
      case "Identifier":
      case "IfStatement":
      case "LabeledStatement":
      case "StringLiteral":
      case "NumericLiteral":
      case "NullLiteral":
      case "BooleanLiteral":
      case "RegExpLiteral":
      case "LogicalExpression":
      case "MemberExpression":
      case "NewExpression":
      case "Program":
      case "ObjectExpression":
      case "ObjectMethod":
      case "ObjectProperty":
      case "RestElement":
      case "ReturnStatement":
      case "SequenceExpression":
      case "ParenthesizedExpression":
      case "SwitchCase":
      case "SwitchStatement":
      case "ThisExpression":
      case "ThrowStatement":
      case "TryStatement":
      case "UnaryExpression":
      case "UpdateExpression":
      case "VariableDeclaration":
      case "VariableDeclarator":
      case "WhileStatement":
      case "WithStatement":
      case "AssignmentPattern":
      case "ArrayPattern":
      case "ArrowFunctionExpression":
      case "ClassBody":
      case "ClassExpression":
      case "ClassDeclaration":
      case "ExportAllDeclaration":
      case "ExportDefaultDeclaration":
      case "ExportNamedDeclaration":
      case "ExportSpecifier":
      case "ForOfStatement":
      case "ImportDeclaration":
      case "ImportDefaultSpecifier":
      case "ImportNamespaceSpecifier":
      case "ImportSpecifier":
      case "ImportExpression":
      case "MetaProperty":
      case "ClassMethod":
      case "ObjectPattern":
      case "SpreadElement":
      case "Super":
      case "TaggedTemplateExpression":
      case "TemplateElement":
      case "TemplateLiteral":
      case "YieldExpression":
      case "AwaitExpression":
      case "Import":
      case "BigIntLiteral":
      case "ExportNamespaceSpecifier":
      case "OptionalMemberExpression":
      case "OptionalCallExpression":
      case "ClassProperty":
      case "ClassAccessorProperty":
      case "ClassPrivateProperty":
      case "ClassPrivateMethod":
      case "PrivateName":
      case "StaticBlock":
        break;
      case "Placeholder":
        switch (node.expectedNode) {
          case "Identifier":
          case "StringLiteral":
          case "BlockStatement":
          case "ClassBody":
            break;
          default:
            return false;
        }
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isExpression(node, opts) {
    if (!node) return false;
    switch (node.type) {
      case "ArrayExpression":
      case "AssignmentExpression":
      case "BinaryExpression":
      case "CallExpression":
      case "ConditionalExpression":
      case "FunctionExpression":
      case "Identifier":
      case "StringLiteral":
      case "NumericLiteral":
      case "NullLiteral":
      case "BooleanLiteral":
      case "RegExpLiteral":
      case "LogicalExpression":
      case "MemberExpression":
      case "NewExpression":
      case "ObjectExpression":
      case "SequenceExpression":
      case "ParenthesizedExpression":
      case "ThisExpression":
      case "UnaryExpression":
      case "UpdateExpression":
      case "ArrowFunctionExpression":
      case "ClassExpression":
      case "ImportExpression":
      case "MetaProperty":
      case "Super":
      case "TaggedTemplateExpression":
      case "TemplateLiteral":
      case "YieldExpression":
      case "AwaitExpression":
      case "Import":
      case "BigIntLiteral":
      case "OptionalMemberExpression":
      case "OptionalCallExpression":
      case "TypeCastExpression":
      case "JSXElement":
      case "JSXFragment":
      case "BindExpression":
      case "DoExpression":
      case "RecordExpression":
      case "TupleExpression":
      case "DecimalLiteral":
      case "ModuleExpression":
      case "TopicReference":
      case "PipelineTopicExpression":
      case "PipelineBareFunction":
      case "PipelinePrimaryTopicReference":
      case "TSInstantiationExpression":
      case "TSAsExpression":
      case "TSSatisfiesExpression":
      case "TSTypeAssertion":
      case "TSNonNullExpression":
        break;
      case "Placeholder":
        switch (node.expectedNode) {
          case "Expression":
          case "Identifier":
          case "StringLiteral":
            break;
          default:
            return false;
        }
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isBinary(node, opts) {
    if (!node) return false;
    switch (node.type) {
      case "BinaryExpression":
      case "LogicalExpression":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isScopable(node, opts) {
    if (!node) return false;
    switch (node.type) {
      case "BlockStatement":
      case "CatchClause":
      case "DoWhileStatement":
      case "ForInStatement":
      case "ForStatement":
      case "FunctionDeclaration":
      case "FunctionExpression":
      case "Program":
      case "ObjectMethod":
      case "SwitchStatement":
      case "WhileStatement":
      case "ArrowFunctionExpression":
      case "ClassExpression":
      case "ClassDeclaration":
      case "ForOfStatement":
      case "ClassMethod":
      case "ClassPrivateMethod":
      case "StaticBlock":
      case "TSModuleBlock":
        break;
      case "Placeholder":
        if (node.expectedNode === "BlockStatement") break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isBlockParent(node, opts) {
    if (!node) return false;
    switch (node.type) {
      case "BlockStatement":
      case "CatchClause":
      case "DoWhileStatement":
      case "ForInStatement":
      case "ForStatement":
      case "FunctionDeclaration":
      case "FunctionExpression":
      case "Program":
      case "ObjectMethod":
      case "SwitchStatement":
      case "WhileStatement":
      case "ArrowFunctionExpression":
      case "ForOfStatement":
      case "ClassMethod":
      case "ClassPrivateMethod":
      case "StaticBlock":
      case "TSModuleBlock":
        break;
      case "Placeholder":
        if (node.expectedNode === "BlockStatement") break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isBlock(node, opts) {
    if (!node) return false;
    switch (node.type) {
      case "BlockStatement":
      case "Program":
      case "TSModuleBlock":
        break;
      case "Placeholder":
        if (node.expectedNode === "BlockStatement") break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isStatement(node, opts) {
    if (!node) return false;
    switch (node.type) {
      case "BlockStatement":
      case "BreakStatement":
      case "ContinueStatement":
      case "DebuggerStatement":
      case "DoWhileStatement":
      case "EmptyStatement":
      case "ExpressionStatement":
      case "ForInStatement":
      case "ForStatement":
      case "FunctionDeclaration":
      case "IfStatement":
      case "LabeledStatement":
      case "ReturnStatement":
      case "SwitchStatement":
      case "ThrowStatement":
      case "TryStatement":
      case "VariableDeclaration":
      case "WhileStatement":
      case "WithStatement":
      case "ClassDeclaration":
      case "ExportAllDeclaration":
      case "ExportDefaultDeclaration":
      case "ExportNamedDeclaration":
      case "ForOfStatement":
      case "ImportDeclaration":
      case "DeclareClass":
      case "DeclareFunction":
      case "DeclareInterface":
      case "DeclareModule":
      case "DeclareModuleExports":
      case "DeclareTypeAlias":
      case "DeclareOpaqueType":
      case "DeclareVariable":
      case "DeclareExportDeclaration":
      case "DeclareExportAllDeclaration":
      case "InterfaceDeclaration":
      case "OpaqueType":
      case "TypeAlias":
      case "EnumDeclaration":
      case "TSDeclareFunction":
      case "TSInterfaceDeclaration":
      case "TSTypeAliasDeclaration":
      case "TSEnumDeclaration":
      case "TSModuleDeclaration":
      case "TSImportEqualsDeclaration":
      case "TSExportAssignment":
      case "TSNamespaceExportDeclaration":
        break;
      case "Placeholder":
        switch (node.expectedNode) {
          case "Statement":
          case "Declaration":
          case "BlockStatement":
            break;
          default:
            return false;
        }
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTerminatorless(node, opts) {
    if (!node) return false;
    switch (node.type) {
      case "BreakStatement":
      case "ContinueStatement":
      case "ReturnStatement":
      case "ThrowStatement":
      case "YieldExpression":
      case "AwaitExpression":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isCompletionStatement(node, opts) {
    if (!node) return false;
    switch (node.type) {
      case "BreakStatement":
      case "ContinueStatement":
      case "ReturnStatement":
      case "ThrowStatement":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isConditional(node, opts) {
    if (!node) return false;
    switch (node.type) {
      case "ConditionalExpression":
      case "IfStatement":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isLoop(node, opts) {
    if (!node) return false;
    switch (node.type) {
      case "DoWhileStatement":
      case "ForInStatement":
      case "ForStatement":
      case "WhileStatement":
      case "ForOfStatement":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isWhile(node, opts) {
    if (!node) return false;
    switch (node.type) {
      case "DoWhileStatement":
      case "WhileStatement":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isExpressionWrapper(node, opts) {
    if (!node) return false;
    switch (node.type) {
      case "ExpressionStatement":
      case "ParenthesizedExpression":
      case "TypeCastExpression":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isFor(node, opts) {
    if (!node) return false;
    switch (node.type) {
      case "ForInStatement":
      case "ForStatement":
      case "ForOfStatement":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isForXStatement(node, opts) {
    if (!node) return false;
    switch (node.type) {
      case "ForInStatement":
      case "ForOfStatement":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isFunction(node, opts) {
    if (!node) return false;
    switch (node.type) {
      case "FunctionDeclaration":
      case "FunctionExpression":
      case "ObjectMethod":
      case "ArrowFunctionExpression":
      case "ClassMethod":
      case "ClassPrivateMethod":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isFunctionParent(node, opts) {
    if (!node) return false;
    switch (node.type) {
      case "FunctionDeclaration":
      case "FunctionExpression":
      case "ObjectMethod":
      case "ArrowFunctionExpression":
      case "ClassMethod":
      case "ClassPrivateMethod":
      case "StaticBlock":
      case "TSModuleBlock":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isPureish(node, opts) {
    if (!node) return false;
    switch (node.type) {
      case "FunctionDeclaration":
      case "FunctionExpression":
      case "StringLiteral":
      case "NumericLiteral":
      case "NullLiteral":
      case "BooleanLiteral":
      case "RegExpLiteral":
      case "ArrowFunctionExpression":
      case "BigIntLiteral":
      case "DecimalLiteral":
        break;
      case "Placeholder":
        if (node.expectedNode === "StringLiteral") break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isDeclaration(node, opts) {
    if (!node) return false;
    switch (node.type) {
      case "FunctionDeclaration":
      case "VariableDeclaration":
      case "ClassDeclaration":
      case "ExportAllDeclaration":
      case "ExportDefaultDeclaration":
      case "ExportNamedDeclaration":
      case "ImportDeclaration":
      case "DeclareClass":
      case "DeclareFunction":
      case "DeclareInterface":
      case "DeclareModule":
      case "DeclareModuleExports":
      case "DeclareTypeAlias":
      case "DeclareOpaqueType":
      case "DeclareVariable":
      case "DeclareExportDeclaration":
      case "DeclareExportAllDeclaration":
      case "InterfaceDeclaration":
      case "OpaqueType":
      case "TypeAlias":
      case "EnumDeclaration":
      case "TSDeclareFunction":
      case "TSInterfaceDeclaration":
      case "TSTypeAliasDeclaration":
      case "TSEnumDeclaration":
      case "TSModuleDeclaration":
        break;
      case "Placeholder":
        if (node.expectedNode === "Declaration") break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isPatternLike(node, opts) {
    if (!node) return false;
    switch (node.type) {
      case "Identifier":
      case "RestElement":
      case "AssignmentPattern":
      case "ArrayPattern":
      case "ObjectPattern":
      case "TSAsExpression":
      case "TSSatisfiesExpression":
      case "TSTypeAssertion":
      case "TSNonNullExpression":
        break;
      case "Placeholder":
        switch (node.expectedNode) {
          case "Pattern":
          case "Identifier":
            break;
          default:
            return false;
        }
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isLVal(node, opts) {
    if (!node) return false;
    switch (node.type) {
      case "Identifier":
      case "MemberExpression":
      case "RestElement":
      case "AssignmentPattern":
      case "ArrayPattern":
      case "ObjectPattern":
      case "TSParameterProperty":
      case "TSAsExpression":
      case "TSSatisfiesExpression":
      case "TSTypeAssertion":
      case "TSNonNullExpression":
        break;
      case "Placeholder":
        switch (node.expectedNode) {
          case "Pattern":
          case "Identifier":
            break;
          default:
            return false;
        }
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTSEntityName(node, opts) {
    if (!node) return false;
    switch (node.type) {
      case "Identifier":
      case "TSQualifiedName":
        break;
      case "Placeholder":
        if (node.expectedNode === "Identifier") break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isLiteral(node, opts) {
    if (!node) return false;
    switch (node.type) {
      case "StringLiteral":
      case "NumericLiteral":
      case "NullLiteral":
      case "BooleanLiteral":
      case "RegExpLiteral":
      case "TemplateLiteral":
      case "BigIntLiteral":
      case "DecimalLiteral":
        break;
      case "Placeholder":
        if (node.expectedNode === "StringLiteral") break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isImmutable(node, opts) {
    if (!node) return false;
    switch (node.type) {
      case "StringLiteral":
      case "NumericLiteral":
      case "NullLiteral":
      case "BooleanLiteral":
      case "BigIntLiteral":
      case "JSXAttribute":
      case "JSXClosingElement":
      case "JSXElement":
      case "JSXExpressionContainer":
      case "JSXSpreadChild":
      case "JSXOpeningElement":
      case "JSXText":
      case "JSXFragment":
      case "JSXOpeningFragment":
      case "JSXClosingFragment":
      case "DecimalLiteral":
        break;
      case "Placeholder":
        if (node.expectedNode === "StringLiteral") break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isUserWhitespacable(node, opts) {
    if (!node) return false;
    switch (node.type) {
      case "ObjectMethod":
      case "ObjectProperty":
      case "ObjectTypeInternalSlot":
      case "ObjectTypeCallProperty":
      case "ObjectTypeIndexer":
      case "ObjectTypeProperty":
      case "ObjectTypeSpreadProperty":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isMethod(node, opts) {
    if (!node) return false;
    switch (node.type) {
      case "ObjectMethod":
      case "ClassMethod":
      case "ClassPrivateMethod":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isObjectMember(node, opts) {
    if (!node) return false;
    switch (node.type) {
      case "ObjectMethod":
      case "ObjectProperty":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isProperty(node, opts) {
    if (!node) return false;
    switch (node.type) {
      case "ObjectProperty":
      case "ClassProperty":
      case "ClassAccessorProperty":
      case "ClassPrivateProperty":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isUnaryLike(node, opts) {
    if (!node) return false;
    switch (node.type) {
      case "UnaryExpression":
      case "SpreadElement":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isPattern(node, opts) {
    if (!node) return false;
    switch (node.type) {
      case "AssignmentPattern":
      case "ArrayPattern":
      case "ObjectPattern":
        break;
      case "Placeholder":
        if (node.expectedNode === "Pattern") break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isClass(node, opts) {
    if (!node) return false;
    switch (node.type) {
      case "ClassExpression":
      case "ClassDeclaration":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isImportOrExportDeclaration(node, opts) {
    if (!node) return false;
    switch (node.type) {
      case "ExportAllDeclaration":
      case "ExportDefaultDeclaration":
      case "ExportNamedDeclaration":
      case "ImportDeclaration":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isExportDeclaration(node, opts) {
    if (!node) return false;
    switch (node.type) {
      case "ExportAllDeclaration":
      case "ExportDefaultDeclaration":
      case "ExportNamedDeclaration":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isModuleSpecifier(node, opts) {
    if (!node) return false;
    switch (node.type) {
      case "ExportSpecifier":
      case "ImportDefaultSpecifier":
      case "ImportNamespaceSpecifier":
      case "ImportSpecifier":
      case "ExportNamespaceSpecifier":
      case "ExportDefaultSpecifier":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isAccessor(node, opts) {
    if (!node) return false;
    switch (node.type) {
      case "ClassAccessorProperty":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isPrivate(node, opts) {
    if (!node) return false;
    switch (node.type) {
      case "ClassPrivateProperty":
      case "ClassPrivateMethod":
      case "PrivateName":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isFlow(node, opts) {
    if (!node) return false;
    switch (node.type) {
      case "AnyTypeAnnotation":
      case "ArrayTypeAnnotation":
      case "BooleanTypeAnnotation":
      case "BooleanLiteralTypeAnnotation":
      case "NullLiteralTypeAnnotation":
      case "ClassImplements":
      case "DeclareClass":
      case "DeclareFunction":
      case "DeclareInterface":
      case "DeclareModule":
      case "DeclareModuleExports":
      case "DeclareTypeAlias":
      case "DeclareOpaqueType":
      case "DeclareVariable":
      case "DeclareExportDeclaration":
      case "DeclareExportAllDeclaration":
      case "DeclaredPredicate":
      case "ExistsTypeAnnotation":
      case "FunctionTypeAnnotation":
      case "FunctionTypeParam":
      case "GenericTypeAnnotation":
      case "InferredPredicate":
      case "InterfaceExtends":
      case "InterfaceDeclaration":
      case "InterfaceTypeAnnotation":
      case "IntersectionTypeAnnotation":
      case "MixedTypeAnnotation":
      case "EmptyTypeAnnotation":
      case "NullableTypeAnnotation":
      case "NumberLiteralTypeAnnotation":
      case "NumberTypeAnnotation":
      case "ObjectTypeAnnotation":
      case "ObjectTypeInternalSlot":
      case "ObjectTypeCallProperty":
      case "ObjectTypeIndexer":
      case "ObjectTypeProperty":
      case "ObjectTypeSpreadProperty":
      case "OpaqueType":
      case "QualifiedTypeIdentifier":
      case "StringLiteralTypeAnnotation":
      case "StringTypeAnnotation":
      case "SymbolTypeAnnotation":
      case "ThisTypeAnnotation":
      case "TupleTypeAnnotation":
      case "TypeofTypeAnnotation":
      case "TypeAlias":
      case "TypeAnnotation":
      case "TypeCastExpression":
      case "TypeParameter":
      case "TypeParameterDeclaration":
      case "TypeParameterInstantiation":
      case "UnionTypeAnnotation":
      case "Variance":
      case "VoidTypeAnnotation":
      case "EnumDeclaration":
      case "EnumBooleanBody":
      case "EnumNumberBody":
      case "EnumStringBody":
      case "EnumSymbolBody":
      case "EnumBooleanMember":
      case "EnumNumberMember":
      case "EnumStringMember":
      case "EnumDefaultedMember":
      case "IndexedAccessType":
      case "OptionalIndexedAccessType":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isFlowType(node, opts) {
    if (!node) return false;
    switch (node.type) {
      case "AnyTypeAnnotation":
      case "ArrayTypeAnnotation":
      case "BooleanTypeAnnotation":
      case "BooleanLiteralTypeAnnotation":
      case "NullLiteralTypeAnnotation":
      case "ExistsTypeAnnotation":
      case "FunctionTypeAnnotation":
      case "GenericTypeAnnotation":
      case "InterfaceTypeAnnotation":
      case "IntersectionTypeAnnotation":
      case "MixedTypeAnnotation":
      case "EmptyTypeAnnotation":
      case "NullableTypeAnnotation":
      case "NumberLiteralTypeAnnotation":
      case "NumberTypeAnnotation":
      case "ObjectTypeAnnotation":
      case "StringLiteralTypeAnnotation":
      case "StringTypeAnnotation":
      case "SymbolTypeAnnotation":
      case "ThisTypeAnnotation":
      case "TupleTypeAnnotation":
      case "TypeofTypeAnnotation":
      case "UnionTypeAnnotation":
      case "VoidTypeAnnotation":
      case "IndexedAccessType":
      case "OptionalIndexedAccessType":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isFlowBaseAnnotation(node, opts) {
    if (!node) return false;
    switch (node.type) {
      case "AnyTypeAnnotation":
      case "BooleanTypeAnnotation":
      case "NullLiteralTypeAnnotation":
      case "MixedTypeAnnotation":
      case "EmptyTypeAnnotation":
      case "NumberTypeAnnotation":
      case "StringTypeAnnotation":
      case "SymbolTypeAnnotation":
      case "ThisTypeAnnotation":
      case "VoidTypeAnnotation":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isFlowDeclaration(node, opts) {
    if (!node) return false;
    switch (node.type) {
      case "DeclareClass":
      case "DeclareFunction":
      case "DeclareInterface":
      case "DeclareModule":
      case "DeclareModuleExports":
      case "DeclareTypeAlias":
      case "DeclareOpaqueType":
      case "DeclareVariable":
      case "DeclareExportDeclaration":
      case "DeclareExportAllDeclaration":
      case "InterfaceDeclaration":
      case "OpaqueType":
      case "TypeAlias":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isFlowPredicate(node, opts) {
    if (!node) return false;
    switch (node.type) {
      case "DeclaredPredicate":
      case "InferredPredicate":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isEnumBody(node, opts) {
    if (!node) return false;
    switch (node.type) {
      case "EnumBooleanBody":
      case "EnumNumberBody":
      case "EnumStringBody":
      case "EnumSymbolBody":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isEnumMember(node, opts) {
    if (!node) return false;
    switch (node.type) {
      case "EnumBooleanMember":
      case "EnumNumberMember":
      case "EnumStringMember":
      case "EnumDefaultedMember":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isJSX(node, opts) {
    if (!node) return false;
    switch (node.type) {
      case "JSXAttribute":
      case "JSXClosingElement":
      case "JSXElement":
      case "JSXEmptyExpression":
      case "JSXExpressionContainer":
      case "JSXSpreadChild":
      case "JSXIdentifier":
      case "JSXMemberExpression":
      case "JSXNamespacedName":
      case "JSXOpeningElement":
      case "JSXSpreadAttribute":
      case "JSXText":
      case "JSXFragment":
      case "JSXOpeningFragment":
      case "JSXClosingFragment":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isMiscellaneous(node, opts) {
    if (!node) return false;
    switch (node.type) {
      case "Noop":
      case "Placeholder":
      case "V8IntrinsicIdentifier":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTypeScript(node, opts) {
    if (!node) return false;
    switch (node.type) {
      case "TSParameterProperty":
      case "TSDeclareFunction":
      case "TSDeclareMethod":
      case "TSQualifiedName":
      case "TSCallSignatureDeclaration":
      case "TSConstructSignatureDeclaration":
      case "TSPropertySignature":
      case "TSMethodSignature":
      case "TSIndexSignature":
      case "TSAnyKeyword":
      case "TSBooleanKeyword":
      case "TSBigIntKeyword":
      case "TSIntrinsicKeyword":
      case "TSNeverKeyword":
      case "TSNullKeyword":
      case "TSNumberKeyword":
      case "TSObjectKeyword":
      case "TSStringKeyword":
      case "TSSymbolKeyword":
      case "TSUndefinedKeyword":
      case "TSUnknownKeyword":
      case "TSVoidKeyword":
      case "TSThisType":
      case "TSFunctionType":
      case "TSConstructorType":
      case "TSTypeReference":
      case "TSTypePredicate":
      case "TSTypeQuery":
      case "TSTypeLiteral":
      case "TSArrayType":
      case "TSTupleType":
      case "TSOptionalType":
      case "TSRestType":
      case "TSNamedTupleMember":
      case "TSUnionType":
      case "TSIntersectionType":
      case "TSConditionalType":
      case "TSInferType":
      case "TSParenthesizedType":
      case "TSTypeOperator":
      case "TSIndexedAccessType":
      case "TSMappedType":
      case "TSLiteralType":
      case "TSExpressionWithTypeArguments":
      case "TSInterfaceDeclaration":
      case "TSInterfaceBody":
      case "TSTypeAliasDeclaration":
      case "TSInstantiationExpression":
      case "TSAsExpression":
      case "TSSatisfiesExpression":
      case "TSTypeAssertion":
      case "TSEnumDeclaration":
      case "TSEnumMember":
      case "TSModuleDeclaration":
      case "TSModuleBlock":
      case "TSImportType":
      case "TSImportEqualsDeclaration":
      case "TSExternalModuleReference":
      case "TSNonNullExpression":
      case "TSExportAssignment":
      case "TSNamespaceExportDeclaration":
      case "TSTypeAnnotation":
      case "TSTypeParameterInstantiation":
      case "TSTypeParameterDeclaration":
      case "TSTypeParameter":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTSTypeElement(node, opts) {
    if (!node) return false;
    switch (node.type) {
      case "TSCallSignatureDeclaration":
      case "TSConstructSignatureDeclaration":
      case "TSPropertySignature":
      case "TSMethodSignature":
      case "TSIndexSignature":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTSType(node, opts) {
    if (!node) return false;
    switch (node.type) {
      case "TSAnyKeyword":
      case "TSBooleanKeyword":
      case "TSBigIntKeyword":
      case "TSIntrinsicKeyword":
      case "TSNeverKeyword":
      case "TSNullKeyword":
      case "TSNumberKeyword":
      case "TSObjectKeyword":
      case "TSStringKeyword":
      case "TSSymbolKeyword":
      case "TSUndefinedKeyword":
      case "TSUnknownKeyword":
      case "TSVoidKeyword":
      case "TSThisType":
      case "TSFunctionType":
      case "TSConstructorType":
      case "TSTypeReference":
      case "TSTypePredicate":
      case "TSTypeQuery":
      case "TSTypeLiteral":
      case "TSArrayType":
      case "TSTupleType":
      case "TSOptionalType":
      case "TSRestType":
      case "TSUnionType":
      case "TSIntersectionType":
      case "TSConditionalType":
      case "TSInferType":
      case "TSParenthesizedType":
      case "TSTypeOperator":
      case "TSIndexedAccessType":
      case "TSMappedType":
      case "TSLiteralType":
      case "TSExpressionWithTypeArguments":
      case "TSImportType":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isTSBaseType(node, opts) {
    if (!node) return false;
    switch (node.type) {
      case "TSAnyKeyword":
      case "TSBooleanKeyword":
      case "TSBigIntKeyword":
      case "TSIntrinsicKeyword":
      case "TSNeverKeyword":
      case "TSNullKeyword":
      case "TSNumberKeyword":
      case "TSObjectKeyword":
      case "TSStringKeyword":
      case "TSSymbolKeyword":
      case "TSUndefinedKeyword":
      case "TSUnknownKeyword":
      case "TSVoidKeyword":
      case "TSThisType":
      case "TSLiteralType":
        break;
      default:
        return false;
    }
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isNumberLiteral(node, opts) {
    (0, _deprecationWarning.default)("isNumberLiteral", "isNumericLiteral");
    if (!node) return false;
    if (node.type !== "NumberLiteral") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isRegexLiteral(node, opts) {
    (0, _deprecationWarning.default)("isRegexLiteral", "isRegExpLiteral");
    if (!node) return false;
    if (node.type !== "RegexLiteral") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isRestProperty(node, opts) {
    (0, _deprecationWarning.default)("isRestProperty", "isRestElement");
    if (!node) return false;
    if (node.type !== "RestProperty") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isSpreadProperty(node, opts) {
    (0, _deprecationWarning.default)("isSpreadProperty", "isSpreadElement");
    if (!node) return false;
    if (node.type !== "SpreadProperty") return false;
    return opts == null || (0, _shallowEqual.default)(node, opts);
  }
  function isModuleDeclaration(node, opts) {
    (0, _deprecationWarning.default)("isModuleDeclaration", "isImportOrExportDeclaration");
    return isImportOrExportDeclaration(node, opts);
  }
  return exports$4F;
}

var exports$4E = {},
  _dewExec$4D = false;
function dew$4D() {
  if (_dewExec$4D) return exports$4E;
  _dewExec$4D = true;
  Object.defineProperty(exports$4E, "__esModule", {
    value: true
  });
  exports$4E.default = matchesPattern;
  var _index = dew$4E();
  function matchesPattern(member, match, allowPartial) {
    if (!(0, _index.isMemberExpression)(member)) return false;
    const parts = Array.isArray(match) ? match : match.split(".");
    const nodes = [];
    let node;
    for (node = member; (0, _index.isMemberExpression)(node); node = node.object) {
      nodes.push(node.property);
    }
    nodes.push(node);
    if (nodes.length < parts.length) return false;
    if (!allowPartial && nodes.length > parts.length) return false;
    for (let i = 0, j = nodes.length - 1; i < parts.length; i++, j--) {
      const node = nodes[j];
      let value;
      if ((0, _index.isIdentifier)(node)) {
        value = node.name;
      } else if ((0, _index.isStringLiteral)(node)) {
        value = node.value;
      } else if ((0, _index.isThisExpression)(node)) {
        value = "this";
      } else {
        return false;
      }
      if (parts[i] !== value) return false;
    }
    return true;
  }
  return exports$4E;
}

var exports$4D = {},
  _dewExec$4C = false;
function dew$4C() {
  if (_dewExec$4C) return exports$4D;
  _dewExec$4C = true;
  Object.defineProperty(exports$4D, "__esModule", {
    value: true
  });
  exports$4D.default = buildMatchMemberExpression;
  var _matchesPattern = dew$4D();
  function buildMatchMemberExpression(match, allowPartial) {
    const parts = match.split(".");
    return member => (0, _matchesPattern.default)(member, parts, allowPartial);
  }
  return exports$4D;
}

var exports$4C = {},
  _dewExec$4B = false;
function dew$4B() {
  if (_dewExec$4B) return exports$4C;
  _dewExec$4B = true;
  Object.defineProperty(exports$4C, "__esModule", {
    value: true
  });
  exports$4C.default = void 0;
  var _buildMatchMemberExpression = dew$4C();
  const isReactComponent = (0, _buildMatchMemberExpression.default)("React.Component");
  exports$4C.default = isReactComponent;
  return exports$4C;
}

var exports$4B = {},
  _dewExec$4A = false;
function dew$4A() {
  if (_dewExec$4A) return exports$4B;
  _dewExec$4A = true;
  Object.defineProperty(exports$4B, "__esModule", {
    value: true
  });
  exports$4B.default = isCompatTag;
  function isCompatTag(tagName) {
    return !!tagName && /^[a-z]/.test(tagName);
  }
  return exports$4B;
}

var exports$4A = {},
  _dewExec$4z = false;
function dew$4z() {
  if (_dewExec$4z) return exports$4A;
  _dewExec$4z = true;
  let fastProto = null;

  // Creates an object with permanently fast properties in V8. See Toon Verwaest's
  // post https://medium.com/@tverwaes/setting-up-prototypes-in-v8-ec9c9491dfe2#5f62
  // for more details. Use %HasFastProperties(object) and the Node.js flag
  // --allow-natives-syntax to check whether an object has fast properties.
  function FastObject(o) {
    // A prototype object will have "fast properties" enabled once it is checked
    // against the inline property cache of a function, e.g. fastProto.property:
    // https://github.com/v8/v8/blob/6.0.122/test/mjsunit/fast-prototype.js#L48-L63
    if (fastProto !== null && typeof fastProto.property) {
      const result = fastProto;
      fastProto = FastObject.prototype = null;
      return result;
    }
    fastProto = FastObject.prototype = o == null ? Object.create(null) : o;
    return new FastObject();
  }

  // Initialize the inline property cache of FastObject
  FastObject();
  exports$4A = function toFastproperties(o) {
    return FastObject(o);
  };
  return exports$4A;
}

var exports$4z = {},
  _dewExec$4y = false;
function dew$4y() {
  if (_dewExec$4y) return exports$4z;
  _dewExec$4y = true;
  Object.defineProperty(exports$4z, "__esModule", {
    value: true
  });
  exports$4z.default = isType;
  var _index = dew$4g();
  function isType(nodeType, targetType) {
    if (nodeType === targetType) return true;
    if (nodeType == null) return false;
    if (_index.ALIAS_KEYS[targetType]) return false;
    const aliases = _index.FLIPPED_ALIAS_KEYS[targetType];
    if (aliases) {
      if (aliases[0] === nodeType) return true;
      for (const alias of aliases) {
        if (nodeType === alias) return true;
      }
    }
    return false;
  }
  return exports$4z;
}

var exports$4y = {},
  _dewExec$4x = false;
function dew$4x() {
  if (_dewExec$4x) return exports$4y;
  _dewExec$4x = true;
  Object.defineProperty(exports$4y, "__esModule", {
    value: true
  });
  exports$4y.default = isPlaceholderType;
  var _index = dew$4g();
  function isPlaceholderType(placeholderType, targetType) {
    if (placeholderType === targetType) return true;
    const aliases = _index.PLACEHOLDERS_ALIAS[placeholderType];
    if (aliases) {
      for (const alias of aliases) {
        if (targetType === alias) return true;
      }
    }
    return false;
  }
  return exports$4y;
}

var exports$4x = {},
  _dewExec$4w = false;
function dew$4w() {
  if (_dewExec$4w) return exports$4x;
  _dewExec$4w = true;
  Object.defineProperty(exports$4x, "__esModule", {
    value: true
  });
  exports$4x.default = is;
  var _shallowEqual = dew$4G();
  var _isType = dew$4y();
  var _isPlaceholderType = dew$4x();
  var _index = dew$4g();
  function is(type, node, opts) {
    if (!node) return false;
    const matches = (0, _isType.default)(node.type, type);
    if (!matches) {
      if (!opts && node.type === "Placeholder" && type in _index.FLIPPED_ALIAS_KEYS) {
        return (0, _isPlaceholderType.default)(node.expectedNode, type);
      }
      return false;
    }
    if (typeof opts === "undefined") {
      return true;
    } else {
      return (0, _shallowEqual.default)(node, opts);
    }
  }
  return exports$4x;
}

var exports$4w = {},
  _dewExec$4v = false;
function dew$4v() {
  if (_dewExec$4v) return exports$4w;
  _dewExec$4v = true;
  Object.defineProperty(exports$4w, "__esModule", {
    value: true
  });
  exports$4w.isIdentifierChar = isIdentifierChar;
  exports$4w.isIdentifierName = isIdentifierName;
  exports$4w.isIdentifierStart = isIdentifierStart;
  let nonASCIIidentifierStartChars = "\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC";
  let nonASCIIidentifierChars = "\u200C\u200D\xB7\u0300-\u036F\u0387\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u0669\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u06F0-\u06F9\u0711\u0730-\u074A\u07A6-\u07B0\u07C0-\u07C9\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u0898-\u089F\u08CA-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0966-\u096F\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09E6-\u09EF\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A66-\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AE6-\u0AEF\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B66-\u0B6F\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0BE6-\u0BEF\u0C00-\u0C04\u0C3C\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0CE6-\u0CEF\u0CF3\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D66-\u0D6F\u0D81-\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0E50-\u0E59\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECE\u0ED0-\u0ED9\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1040-\u1049\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F-\u109D\u135D-\u135F\u1369-\u1371\u1712-\u1715\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u17E0-\u17E9\u180B-\u180D\u180F-\u1819\u18A9\u1920-\u192B\u1930-\u193B\u1946-\u194F\u19D0-\u19DA\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AB0-\u1ABD\u1ABF-\u1ACE\u1B00-\u1B04\u1B34-\u1B44\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BB0-\u1BB9\u1BE6-\u1BF3\u1C24-\u1C37\u1C40-\u1C49\u1C50-\u1C59\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DFF\u200C\u200D\u203F\u2040\u2054\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\u30FB\uA620-\uA629\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA82C\uA880\uA881\uA8B4-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F1\uA8FF-\uA909\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9D0-\uA9D9\uA9E5\uA9F0-\uA9F9\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA50-\uAA59\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uABF0-\uABF9\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFF10-\uFF19\uFF3F\uFF65";
  const nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");
  const nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");
  nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;
  const astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 68, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 20, 1, 64, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 16, 0, 2, 12, 2, 33, 125, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1071, 18, 5, 4026, 582, 8634, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8936, 3, 2, 6, 2, 1, 2, 290, 16, 0, 30, 2, 3, 0, 15, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 7, 5, 262, 61, 147, 44, 11, 6, 17, 0, 322, 29, 19, 43, 485, 27, 757, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4153, 7, 221, 3, 5761, 15, 7472, 16, 621, 2467, 541, 1507, 4938, 6, 4191];
  const astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 81, 2, 71, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 3, 0, 158, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 10, 1, 2, 0, 49, 6, 4, 4, 14, 9, 5351, 0, 7, 14, 13835, 9, 87, 9, 39, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4706, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 101, 0, 161, 6, 10, 9, 357, 0, 62, 13, 499, 13, 983, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];
  function isInAstralSet(code, set) {
    let pos = 65536;
    for (let i = 0, length = set.length; i < length; i += 2) {
      pos += set[i];
      if (pos > code) return false;
      pos += set[i + 1];
      if (pos >= code) return true;
    }
    return false;
  }
  function isIdentifierStart(code) {
    if (code < 65) return code === 36;
    if (code <= 90) return true;
    if (code < 97) return code === 95;
    if (code <= 122) return true;
    if (code <= 65535) {
      return code >= 170 && nonASCIIidentifierStart.test(String.fromCharCode(code));
    }
    return isInAstralSet(code, astralIdentifierStartCodes);
  }
  function isIdentifierChar(code) {
    if (code < 48) return code === 36;
    if (code < 58) return true;
    if (code < 65) return false;
    if (code <= 90) return true;
    if (code < 97) return code === 95;
    if (code <= 122) return true;
    if (code <= 65535) {
      return code >= 170 && nonASCIIidentifier.test(String.fromCharCode(code));
    }
    return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);
  }
  function isIdentifierName(name) {
    let isFirst = true;
    for (let i = 0; i < name.length; i++) {
      let cp = name.charCodeAt(i);
      if ((cp & 64512) === 55296 && i + 1 < name.length) {
        const trail = name.charCodeAt(++i);
        if ((trail & 64512) === 56320) {
          cp = 65536 + ((cp & 1023) << 10) + (trail & 1023);
        }
      }
      if (isFirst) {
        isFirst = false;
        if (!isIdentifierStart(cp)) {
          return false;
        }
      } else if (!isIdentifierChar(cp)) {
        return false;
      }
    }
    return !isFirst;
  }
  return exports$4w;
}

var exports$4v = {},
  _dewExec$4u = false;
function dew$4u() {
  if (_dewExec$4u) return exports$4v;
  _dewExec$4u = true;
  Object.defineProperty(exports$4v, "__esModule", {
    value: true
  });
  exports$4v.isKeyword = isKeyword;
  exports$4v.isReservedWord = isReservedWord;
  exports$4v.isStrictBindOnlyReservedWord = isStrictBindOnlyReservedWord;
  exports$4v.isStrictBindReservedWord = isStrictBindReservedWord;
  exports$4v.isStrictReservedWord = isStrictReservedWord;
  const reservedWords = {
    keyword: ["break", "case", "catch", "continue", "debugger", "default", "do", "else", "finally", "for", "function", "if", "return", "switch", "throw", "try", "var", "const", "while", "with", "new", "this", "super", "class", "extends", "export", "import", "null", "true", "false", "in", "instanceof", "typeof", "void", "delete"],
    strict: ["implements", "interface", "let", "package", "private", "protected", "public", "static", "yield"],
    strictBind: ["eval", "arguments"]
  };
  const keywords = new Set(reservedWords.keyword);
  const reservedWordsStrictSet = new Set(reservedWords.strict);
  const reservedWordsStrictBindSet = new Set(reservedWords.strictBind);
  function isReservedWord(word, inModule) {
    return inModule && word === "await" || word === "enum";
  }
  function isStrictReservedWord(word, inModule) {
    return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);
  }
  function isStrictBindOnlyReservedWord(word) {
    return reservedWordsStrictBindSet.has(word);
  }
  function isStrictBindReservedWord(word, inModule) {
    return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);
  }
  function isKeyword(word) {
    return keywords.has(word);
  }
  return exports$4v;
}

var exports$4u = {},
  _dewExec$4t = false;
function dew$4t() {
  if (_dewExec$4t) return exports$4u;
  _dewExec$4t = true;
  Object.defineProperty(exports$4u, "__esModule", {
    value: true
  });
  Object.defineProperty(exports$4u, "isIdentifierChar", {
    enumerable: true,
    get: function () {
      return _identifier.isIdentifierChar;
    }
  });
  Object.defineProperty(exports$4u, "isIdentifierName", {
    enumerable: true,
    get: function () {
      return _identifier.isIdentifierName;
    }
  });
  Object.defineProperty(exports$4u, "isIdentifierStart", {
    enumerable: true,
    get: function () {
      return _identifier.isIdentifierStart;
    }
  });
  Object.defineProperty(exports$4u, "isKeyword", {
    enumerable: true,
    get: function () {
      return _keyword.isKeyword;
    }
  });
  Object.defineProperty(exports$4u, "isReservedWord", {
    enumerable: true,
    get: function () {
      return _keyword.isReservedWord;
    }
  });
  Object.defineProperty(exports$4u, "isStrictBindOnlyReservedWord", {
    enumerable: true,
    get: function () {
      return _keyword.isStrictBindOnlyReservedWord;
    }
  });
  Object.defineProperty(exports$4u, "isStrictBindReservedWord", {
    enumerable: true,
    get: function () {
      return _keyword.isStrictBindReservedWord;
    }
  });
  Object.defineProperty(exports$4u, "isStrictReservedWord", {
    enumerable: true,
    get: function () {
      return _keyword.isStrictReservedWord;
    }
  });
  var _identifier = dew$4v();
  var _keyword = dew$4u();
  return exports$4u;
}

var exports$4t = {},
  _dewExec$4s = false;
function dew$4s() {
  if (_dewExec$4s) return exports$4t;
  _dewExec$4s = true;
  Object.defineProperty(exports$4t, "__esModule", {
    value: true
  });
  exports$4t.default = isValidIdentifier;
  var _helperValidatorIdentifier = dew$4t();
  function isValidIdentifier(name, reserved = true) {
    if (typeof name !== "string") return false;
    if (reserved) {
      if ((0, _helperValidatorIdentifier.isKeyword)(name) || (0, _helperValidatorIdentifier.isStrictReservedWord)(name, true)) {
        return false;
      }
    }
    return (0, _helperValidatorIdentifier.isIdentifierName)(name);
  }
  return exports$4t;
}

var exports$4s = {},
  _dewExec$4r = false;
function dew$4r() {
  if (_dewExec$4r) return exports$4s;
  _dewExec$4r = true;
  Object.defineProperty(exports$4s, "__esModule", {
    value: true
  });
  exports$4s.readCodePoint = readCodePoint;
  exports$4s.readInt = readInt;
  exports$4s.readStringContents = readStringContents;
  var _isDigit = function isDigit(code) {
    return code >= 48 && code <= 57;
  };
  const forbiddenNumericSeparatorSiblings = {
    decBinOct: new Set([46, 66, 69, 79, 95, 98, 101, 111]),
    hex: new Set([46, 88, 95, 120])
  };
  const isAllowedNumericSeparatorSibling = {
    bin: ch => ch === 48 || ch === 49,
    oct: ch => ch >= 48 && ch <= 55,
    dec: ch => ch >= 48 && ch <= 57,
    hex: ch => ch >= 48 && ch <= 57 || ch >= 65 && ch <= 70 || ch >= 97 && ch <= 102
  };
  function readStringContents(type, input, pos, lineStart, curLine, errors) {
    const initialPos = pos;
    const initialLineStart = lineStart;
    const initialCurLine = curLine;
    let out = "";
    let firstInvalidLoc = null;
    let chunkStart = pos;
    const {
      length
    } = input;
    for (;;) {
      if (pos >= length) {
        errors.unterminated(initialPos, initialLineStart, initialCurLine);
        out += input.slice(chunkStart, pos);
        break;
      }
      const ch = input.charCodeAt(pos);
      if (isStringEnd(type, ch, input, pos)) {
        out += input.slice(chunkStart, pos);
        break;
      }
      if (ch === 92) {
        out += input.slice(chunkStart, pos);
        const res = readEscapedChar(input, pos, lineStart, curLine, type === "template", errors);
        if (res.ch === null && !firstInvalidLoc) {
          firstInvalidLoc = {
            pos,
            lineStart,
            curLine
          };
        } else {
          out += res.ch;
        }
        ({
          pos,
          lineStart,
          curLine
        } = res);
        chunkStart = pos;
      } else if (ch === 8232 || ch === 8233) {
        ++pos;
        ++curLine;
        lineStart = pos;
      } else if (ch === 10 || ch === 13) {
        if (type === "template") {
          out += input.slice(chunkStart, pos) + "\n";
          ++pos;
          if (ch === 13 && input.charCodeAt(pos) === 10) {
            ++pos;
          }
          ++curLine;
          chunkStart = lineStart = pos;
        } else {
          errors.unterminated(initialPos, initialLineStart, initialCurLine);
        }
      } else {
        ++pos;
      }
    }
    return {
      pos,
      str: out,
      firstInvalidLoc,
      lineStart,
      curLine,
      containsInvalid: !!firstInvalidLoc
    };
  }
  function isStringEnd(type, ch, input, pos) {
    if (type === "template") {
      return ch === 96 || ch === 36 && input.charCodeAt(pos + 1) === 123;
    }
    return ch === (type === "double" ? 34 : 39);
  }
  function readEscapedChar(input, pos, lineStart, curLine, inTemplate, errors) {
    const throwOnInvalid = !inTemplate;
    pos++;
    const res = ch => ({
      pos,
      ch,
      lineStart,
      curLine
    });
    const ch = input.charCodeAt(pos++);
    switch (ch) {
      case 110:
        return res("\n");
      case 114:
        return res("\r");
      case 120:
        {
          let code;
          ({
            code,
            pos
          } = readHexChar(input, pos, lineStart, curLine, 2, false, throwOnInvalid, errors));
          return res(code === null ? null : String.fromCharCode(code));
        }
      case 117:
        {
          let code;
          ({
            code,
            pos
          } = readCodePoint(input, pos, lineStart, curLine, throwOnInvalid, errors));
          return res(code === null ? null : String.fromCodePoint(code));
        }
      case 116:
        return res("\t");
      case 98:
        return res("\b");
      case 118:
        return res("\x0B");
      case 102:
        return res("\f");
      case 13:
        if (input.charCodeAt(pos) === 10) {
          ++pos;
        }
      case 10:
        lineStart = pos;
        ++curLine;
      case 8232:
      case 8233:
        return res("");
      case 56:
      case 57:
        if (inTemplate) {
          return res(null);
        } else {
          errors.strictNumericEscape(pos - 1, lineStart, curLine);
        }
      default:
        if (ch >= 48 && ch <= 55) {
          const startPos = pos - 1;
          const match = /^[0-7]+/.exec(input.slice(startPos, pos + 2));
          let octalStr = match[0];
          let octal = parseInt(octalStr, 8);
          if (octal > 255) {
            octalStr = octalStr.slice(0, -1);
            octal = parseInt(octalStr, 8);
          }
          pos += octalStr.length - 1;
          const next = input.charCodeAt(pos);
          if (octalStr !== "0" || next === 56 || next === 57) {
            if (inTemplate) {
              return res(null);
            } else {
              errors.strictNumericEscape(startPos, lineStart, curLine);
            }
          }
          return res(String.fromCharCode(octal));
        }
        return res(String.fromCharCode(ch));
    }
  }
  function readHexChar(input, pos, lineStart, curLine, len, forceLen, throwOnInvalid, errors) {
    const initialPos = pos;
    let n;
    ({
      n,
      pos
    } = readInt(input, pos, lineStart, curLine, 16, len, forceLen, false, errors, !throwOnInvalid));
    if (n === null) {
      if (throwOnInvalid) {
        errors.invalidEscapeSequence(initialPos, lineStart, curLine);
      } else {
        pos = initialPos - 1;
      }
    }
    return {
      code: n,
      pos
    };
  }
  function readInt(input, pos, lineStart, curLine, radix, len, forceLen, allowNumSeparator, errors, bailOnError) {
    const start = pos;
    const forbiddenSiblings = radix === 16 ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct;
    const isAllowedSibling = radix === 16 ? isAllowedNumericSeparatorSibling.hex : radix === 10 ? isAllowedNumericSeparatorSibling.dec : radix === 8 ? isAllowedNumericSeparatorSibling.oct : isAllowedNumericSeparatorSibling.bin;
    let invalid = false;
    let total = 0;
    for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {
      const code = input.charCodeAt(pos);
      let val;
      if (code === 95 && allowNumSeparator !== "bail") {
        const prev = input.charCodeAt(pos - 1);
        const next = input.charCodeAt(pos + 1);
        if (!allowNumSeparator) {
          if (bailOnError) return {
            n: null,
            pos
          };
          errors.numericSeparatorInEscapeSequence(pos, lineStart, curLine);
        } else if (Number.isNaN(next) || !isAllowedSibling(next) || forbiddenSiblings.has(prev) || forbiddenSiblings.has(next)) {
          if (bailOnError) return {
            n: null,
            pos
          };
          errors.unexpectedNumericSeparator(pos, lineStart, curLine);
        }
        ++pos;
        continue;
      }
      if (code >= 97) {
        val = code - 97 + 10;
      } else if (code >= 65) {
        val = code - 65 + 10;
      } else if (_isDigit(code)) {
        val = code - 48;
      } else {
        val = Infinity;
      }
      if (val >= radix) {
        if (val <= 9 && bailOnError) {
          return {
            n: null,
            pos
          };
        } else if (val <= 9 && errors.invalidDigit(pos, lineStart, curLine, radix)) {
          val = 0;
        } else if (forceLen) {
          val = 0;
          invalid = true;
        } else {
          break;
        }
      }
      ++pos;
      total = total * radix + val;
    }
    if (pos === start || len != null && pos - start !== len || invalid) {
      return {
        n: null,
        pos
      };
    }
    return {
      n: total,
      pos
    };
  }
  function readCodePoint(input, pos, lineStart, curLine, throwOnInvalid, errors) {
    const ch = input.charCodeAt(pos);
    let code;
    if (ch === 123) {
      ++pos;
      ({
        code,
        pos
      } = readHexChar(input, pos, lineStart, curLine, input.indexOf("}", pos) - pos, true, throwOnInvalid, errors));
      ++pos;
      if (code !== null && code > 1114111) {
        if (throwOnInvalid) {
          errors.invalidCodePoint(pos, lineStart, curLine);
        } else {
          return {
            code: null,
            pos
          };
        }
      }
    } else {
      ({
        code,
        pos
      } = readHexChar(input, pos, lineStart, curLine, 4, false, throwOnInvalid, errors));
    }
    return {
      code,
      pos
    };
  }
  return exports$4s;
}

var exports$4r = {},
  _dewExec$4q = false;
function dew$4q() {
  if (_dewExec$4q) return exports$4r;
  _dewExec$4q = true;
  Object.defineProperty(exports$4r, "__esModule", {
    value: true
  });
  exports$4r.UPDATE_OPERATORS = exports$4r.UNARY_OPERATORS = exports$4r.STRING_UNARY_OPERATORS = exports$4r.STATEMENT_OR_BLOCK_KEYS = exports$4r.NUMBER_UNARY_OPERATORS = exports$4r.NUMBER_BINARY_OPERATORS = exports$4r.NOT_LOCAL_BINDING = exports$4r.LOGICAL_OPERATORS = exports$4r.INHERIT_KEYS = exports$4r.FOR_INIT_KEYS = exports$4r.FLATTENABLE_KEYS = exports$4r.EQUALITY_BINARY_OPERATORS = exports$4r.COMPARISON_BINARY_OPERATORS = exports$4r.COMMENT_KEYS = exports$4r.BOOLEAN_UNARY_OPERATORS = exports$4r.BOOLEAN_NUMBER_BINARY_OPERATORS = exports$4r.BOOLEAN_BINARY_OPERATORS = exports$4r.BLOCK_SCOPED_SYMBOL = exports$4r.BINARY_OPERATORS = exports$4r.ASSIGNMENT_OPERATORS = void 0;
  exports$4r.STATEMENT_OR_BLOCK_KEYS = ["consequent", "body", "alternate"];
  exports$4r.FLATTENABLE_KEYS = ["body", "expressions"];
  exports$4r.FOR_INIT_KEYS = ["left", "init"];
  exports$4r.COMMENT_KEYS = ["leadingComments", "trailingComments", "innerComments"];
  const LOGICAL_OPERATORS = exports$4r.LOGICAL_OPERATORS = ["||", "&&", "??"];
  exports$4r.UPDATE_OPERATORS = ["++", "--"];
  const BOOLEAN_NUMBER_BINARY_OPERATORS = exports$4r.BOOLEAN_NUMBER_BINARY_OPERATORS = [">", "<", ">=", "<="];
  const EQUALITY_BINARY_OPERATORS = exports$4r.EQUALITY_BINARY_OPERATORS = ["==", "===", "!=", "!=="];
  const COMPARISON_BINARY_OPERATORS = exports$4r.COMPARISON_BINARY_OPERATORS = [...EQUALITY_BINARY_OPERATORS, "in", "instanceof"];
  const BOOLEAN_BINARY_OPERATORS = exports$4r.BOOLEAN_BINARY_OPERATORS = [...COMPARISON_BINARY_OPERATORS, ...BOOLEAN_NUMBER_BINARY_OPERATORS];
  const NUMBER_BINARY_OPERATORS = exports$4r.NUMBER_BINARY_OPERATORS = ["-", "/", "%", "*", "**", "&", "|", ">>", ">>>", "<<", "^"];
  exports$4r.BINARY_OPERATORS = ["+", ...NUMBER_BINARY_OPERATORS, ...BOOLEAN_BINARY_OPERATORS, "|>"];
  exports$4r.ASSIGNMENT_OPERATORS = ["=", "+=", ...NUMBER_BINARY_OPERATORS.map(op => op + "="), ...LOGICAL_OPERATORS.map(op => op + "=")];
  const BOOLEAN_UNARY_OPERATORS = exports$4r.BOOLEAN_UNARY_OPERATORS = ["delete", "!"];
  const NUMBER_UNARY_OPERATORS = exports$4r.NUMBER_UNARY_OPERATORS = ["+", "-", "~"];
  const STRING_UNARY_OPERATORS = exports$4r.STRING_UNARY_OPERATORS = ["typeof"];
  exports$4r.UNARY_OPERATORS = ["void", "throw", ...BOOLEAN_UNARY_OPERATORS, ...NUMBER_UNARY_OPERATORS, ...STRING_UNARY_OPERATORS];
  exports$4r.INHERIT_KEYS = {
    optional: ["typeAnnotation", "typeParameters", "returnType"],
    force: ["start", "loc", "end"]
  };
  exports$4r.BLOCK_SCOPED_SYMBOL = Symbol.for("var used to be block scoped");
  exports$4r.NOT_LOCAL_BINDING = Symbol.for("should not be considered a local binding");
  return exports$4r;
}

var exports$4q = {},
  _dewExec$4p = false;
function dew$4p() {
  if (_dewExec$4p) return exports$4q;
  _dewExec$4p = true;
  var process = _nodeProcess;
  Object.defineProperty(exports$4q, "__esModule", {
    value: true
  });
  exports$4q.VISITOR_KEYS = exports$4q.NODE_PARENT_VALIDATIONS = exports$4q.NODE_FIELDS = exports$4q.FLIPPED_ALIAS_KEYS = exports$4q.DEPRECATED_KEYS = exports$4q.BUILDER_KEYS = exports$4q.ALIAS_KEYS = void 0;
  exports$4q.arrayOf = arrayOf;
  exports$4q.arrayOfType = arrayOfType;
  exports$4q.assertEach = assertEach;
  exports$4q.assertNodeOrValueType = assertNodeOrValueType;
  exports$4q.assertNodeType = assertNodeType;
  exports$4q.assertOneOf = assertOneOf;
  exports$4q.assertOptionalChainStart = assertOptionalChainStart;
  exports$4q.assertShape = assertShape;
  exports$4q.assertValueType = assertValueType;
  exports$4q.chain = chain;
  exports$4q.default = defineType;
  exports$4q.defineAliasedType = defineAliasedType;
  exports$4q.typeIs = typeIs;
  exports$4q.validate = validate;
  exports$4q.validateArrayOfType = validateArrayOfType;
  exports$4q.validateOptional = validateOptional;
  exports$4q.validateOptionalType = validateOptionalType;
  exports$4q.validateType = validateType;
  var _is = dew$4w();
  var _validate = dew$4f();
  const VISITOR_KEYS = exports$4q.VISITOR_KEYS = {};
  const ALIAS_KEYS = exports$4q.ALIAS_KEYS = {};
  const FLIPPED_ALIAS_KEYS = exports$4q.FLIPPED_ALIAS_KEYS = {};
  const NODE_FIELDS = exports$4q.NODE_FIELDS = {};
  const BUILDER_KEYS = exports$4q.BUILDER_KEYS = {};
  const DEPRECATED_KEYS = exports$4q.DEPRECATED_KEYS = {};
  const NODE_PARENT_VALIDATIONS = exports$4q.NODE_PARENT_VALIDATIONS = {};
  function getType(val) {
    if (Array.isArray(val)) {
      return "array";
    } else if (val === null) {
      return "null";
    } else {
      return typeof val;
    }
  }
  function validate(validate) {
    return {
      validate
    };
  }
  function typeIs(typeName) {
    return typeof typeName === "string" ? assertNodeType(typeName) : assertNodeType(...typeName);
  }
  function validateType(typeName) {
    return validate(typeIs(typeName));
  }
  function validateOptional(validate) {
    return {
      validate,
      optional: true
    };
  }
  function validateOptionalType(typeName) {
    return {
      validate: typeIs(typeName),
      optional: true
    };
  }
  function arrayOf(elementType) {
    return chain(assertValueType("array"), assertEach(elementType));
  }
  function arrayOfType(typeName) {
    return arrayOf(typeIs(typeName));
  }
  function validateArrayOfType(typeName) {
    return validate(arrayOfType(typeName));
  }
  function assertEach(callback) {
    function validator(node, key, val) {
      if (!Array.isArray(val)) return;
      for (let i = 0; i < val.length; i++) {
        const subkey = `${key}[${i}]`;
        const v = val[i];
        callback(node, subkey, v);
        if (process.env.BABEL_TYPES_8_BREAKING) (0, _validate.validateChild)(node, subkey, v);
      }
    }
    validator.each = callback;
    return validator;
  }
  function assertOneOf(...values) {
    function validate(node, key, val) {
      if (!values.includes(val)) {
        throw new TypeError(`Property ${key} expected value to be one of ${JSON.stringify(values)} but got ${JSON.stringify(val)}`);
      }
    }
    validate.oneOf = values;
    return validate;
  }
  function assertNodeType(...types) {
    function validate(node, key, val) {
      for (const type of types) {
        if ((0, _is.default)(type, val)) {
          (0, _validate.validateChild)(node, key, val);
          return;
        }
      }
      throw new TypeError(`Property ${key} of ${node.type} expected node to be of a type ${JSON.stringify(types)} but instead got ${JSON.stringify(val == null ? void 0 : val.type)}`);
    }
    validate.oneOfNodeTypes = types;
    return validate;
  }
  function assertNodeOrValueType(...types) {
    function validate(node, key, val) {
      for (const type of types) {
        if (getType(val) === type || (0, _is.default)(type, val)) {
          (0, _validate.validateChild)(node, key, val);
          return;
        }
      }
      throw new TypeError(`Property ${key} of ${node.type} expected node to be of a type ${JSON.stringify(types)} but instead got ${JSON.stringify(val == null ? void 0 : val.type)}`);
    }
    validate.oneOfNodeOrValueTypes = types;
    return validate;
  }
  function assertValueType(type) {
    function validate(node, key, val) {
      const valid = getType(val) === type;
      if (!valid) {
        throw new TypeError(`Property ${key} expected type of ${type} but got ${getType(val)}`);
      }
    }
    validate.type = type;
    return validate;
  }
  function assertShape(shape) {
    function validate(node, key, val) {
      const errors = [];
      for (const property of Object.keys(shape)) {
        try {
          (0, _validate.validateField)(node, property, val[property], shape[property]);
        } catch (error) {
          if (error instanceof TypeError) {
            errors.push(error.message);
            continue;
          }
          throw error;
        }
      }
      if (errors.length) {
        throw new TypeError(`Property ${key} of ${node.type} expected to have the following:\n${errors.join("\n")}`);
      }
    }
    validate.shapeOf = shape;
    return validate;
  }
  function assertOptionalChainStart() {
    function validate(node) {
      var _current;
      let current = node;
      while (node) {
        const {
          type
        } = current;
        if (type === "OptionalCallExpression") {
          if (current.optional) return;
          current = current.callee;
          continue;
        }
        if (type === "OptionalMemberExpression") {
          if (current.optional) return;
          current = current.object;
          continue;
        }
        break;
      }
      throw new TypeError(`Non-optional ${node.type} must chain from an optional OptionalMemberExpression or OptionalCallExpression. Found chain from ${(_current = current) == null ? void 0 : _current.type}`);
    }
    return validate;
  }
  function chain(...fns) {
    function validate(...args) {
      for (const fn of fns) {
        fn(...args);
      }
    }
    validate.chainOf = fns;
    if (fns.length >= 2 && "type" in fns[0] && fns[0].type === "array" && !("each" in fns[1])) {
      throw new Error(`An assertValueType("array") validator can only be followed by an assertEach(...) validator.`);
    }
    return validate;
  }
  const validTypeOpts = ["aliases", "builder", "deprecatedAlias", "fields", "inherits", "visitor", "validate"];
  const validFieldKeys = ["default", "optional", "deprecated", "validate"];
  const store = {};
  function defineAliasedType(...aliases) {
    return (type, opts = {}) => {
      let defined = opts.aliases;
      if (!defined) {
        var _store$opts$inherits$, _defined;
        if (opts.inherits) defined = (_store$opts$inherits$ = store[opts.inherits].aliases) == null ? void 0 : _store$opts$inherits$.slice();
        (_defined = defined) != null ? _defined : defined = [];
        opts.aliases = defined;
      }
      const additional = aliases.filter(a => !defined.includes(a));
      defined.unshift(...additional);
      defineType(type, opts);
    };
  }
  function defineType(type, opts = {}) {
    const inherits = opts.inherits && store[opts.inherits] || {};
    let fields = opts.fields;
    if (!fields) {
      fields = {};
      if (inherits.fields) {
        const keys = Object.getOwnPropertyNames(inherits.fields);
        for (const key of keys) {
          const field = inherits.fields[key];
          const def = field.default;
          if (Array.isArray(def) ? def.length > 0 : def && typeof def === "object") {
            throw new Error("field defaults can only be primitives or empty arrays currently");
          }
          fields[key] = {
            default: Array.isArray(def) ? [] : def,
            optional: field.optional,
            deprecated: field.deprecated,
            validate: field.validate
          };
        }
      }
    }
    const visitor = opts.visitor || inherits.visitor || [];
    const aliases = opts.aliases || inherits.aliases || [];
    const builder = opts.builder || inherits.builder || opts.visitor || [];
    for (const k of Object.keys(opts)) {
      if (!validTypeOpts.includes(k)) {
        throw new Error(`Unknown type option "${k}" on ${type}`);
      }
    }
    if (opts.deprecatedAlias) {
      DEPRECATED_KEYS[opts.deprecatedAlias] = type;
    }
    for (const key of visitor.concat(builder)) {
      fields[key] = fields[key] || {};
    }
    for (const key of Object.keys(fields)) {
      const field = fields[key];
      if (field.default !== undefined && !builder.includes(key)) {
        field.optional = true;
      }
      if (field.default === undefined) {
        field.default = null;
      } else if (!field.validate && field.default != null) {
        field.validate = assertValueType(getType(field.default));
      }
      for (const k of Object.keys(field)) {
        if (!validFieldKeys.includes(k)) {
          throw new Error(`Unknown field key "${k}" on ${type}.${key}`);
        }
      }
    }
    VISITOR_KEYS[type] = opts.visitor = visitor;
    BUILDER_KEYS[type] = opts.builder = builder;
    NODE_FIELDS[type] = opts.fields = fields;
    ALIAS_KEYS[type] = opts.aliases = aliases;
    aliases.forEach(alias => {
      FLIPPED_ALIAS_KEYS[alias] = FLIPPED_ALIAS_KEYS[alias] || [];
      FLIPPED_ALIAS_KEYS[alias].push(type);
    });
    if (opts.validate) {
      NODE_PARENT_VALIDATIONS[type] = opts.validate;
    }
    store[type] = opts;
  }
  return exports$4q;
}

var exports$4p = {},
  _dewExec$4o = false;
function dew$4o() {
  if (_dewExec$4o) return exports$4p;
  _dewExec$4o = true;
  var process = _nodeProcess;
  Object.defineProperty(exports$4p, "__esModule", {
    value: true
  });
  exports$4p.patternLikeCommon = exports$4p.functionTypeAnnotationCommon = exports$4p.functionDeclarationCommon = exports$4p.functionCommon = exports$4p.classMethodOrPropertyCommon = exports$4p.classMethodOrDeclareMethodCommon = void 0;
  var _is = dew$4w();
  var _isValidIdentifier = dew$4s();
  var _helperValidatorIdentifier = dew$4t();
  var _helperStringParser = dew$4r();
  var _index = dew$4q();
  var _utils = dew$4p();
  const defineType = (0, _utils.defineAliasedType)("Standardized");
  defineType("ArrayExpression", {
    fields: {
      elements: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeOrValueType)("null", "Expression", "SpreadElement"))),
        default: !process.env.BABEL_TYPES_8_BREAKING ? [] : undefined
      }
    },
    visitor: ["elements"],
    aliases: ["Expression"]
  });
  defineType("AssignmentExpression", {
    fields: {
      operator: {
        validate: function () {
          if (!process.env.BABEL_TYPES_8_BREAKING) {
            return (0, _utils.assertValueType)("string");
          }
          const identifier = (0, _utils.assertOneOf)(..._index.ASSIGNMENT_OPERATORS);
          const pattern = (0, _utils.assertOneOf)("=");
          return function (node, key, val) {
            const validator = (0, _is.default)("Pattern", node.left) ? pattern : identifier;
            validator(node, key, val);
          };
        }()
      },
      left: {
        validate: !process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertNodeType)("LVal", "OptionalMemberExpression") : (0, _utils.assertNodeType)("Identifier", "MemberExpression", "OptionalMemberExpression", "ArrayPattern", "ObjectPattern", "TSAsExpression", "TSSatisfiesExpression", "TSTypeAssertion", "TSNonNullExpression")
      },
      right: {
        validate: (0, _utils.assertNodeType)("Expression")
      }
    },
    builder: ["operator", "left", "right"],
    visitor: ["left", "right"],
    aliases: ["Expression"]
  });
  defineType("BinaryExpression", {
    builder: ["operator", "left", "right"],
    fields: {
      operator: {
        validate: (0, _utils.assertOneOf)(..._index.BINARY_OPERATORS)
      },
      left: {
        validate: function () {
          const expression = (0, _utils.assertNodeType)("Expression");
          const inOp = (0, _utils.assertNodeType)("Expression", "PrivateName");
          const validator = Object.assign(function (node, key, val) {
            const validator = node.operator === "in" ? inOp : expression;
            validator(node, key, val);
          }, {
            oneOfNodeTypes: ["Expression", "PrivateName"]
          });
          return validator;
        }()
      },
      right: {
        validate: (0, _utils.assertNodeType)("Expression")
      }
    },
    visitor: ["left", "right"],
    aliases: ["Binary", "Expression"]
  });
  defineType("InterpreterDirective", {
    builder: ["value"],
    fields: {
      value: {
        validate: (0, _utils.assertValueType)("string")
      }
    }
  });
  defineType("Directive", {
    visitor: ["value"],
    fields: {
      value: {
        validate: (0, _utils.assertNodeType)("DirectiveLiteral")
      }
    }
  });
  defineType("DirectiveLiteral", {
    builder: ["value"],
    fields: {
      value: {
        validate: (0, _utils.assertValueType)("string")
      }
    }
  });
  defineType("BlockStatement", {
    builder: ["body", "directives"],
    visitor: ["directives", "body"],
    fields: {
      directives: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Directive"))),
        default: []
      },
      body: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Statement")))
      }
    },
    aliases: ["Scopable", "BlockParent", "Block", "Statement"]
  });
  defineType("BreakStatement", {
    visitor: ["label"],
    fields: {
      label: {
        validate: (0, _utils.assertNodeType)("Identifier"),
        optional: true
      }
    },
    aliases: ["Statement", "Terminatorless", "CompletionStatement"]
  });
  defineType("CallExpression", {
    visitor: ["callee", "arguments", "typeParameters", "typeArguments"],
    builder: ["callee", "arguments"],
    aliases: ["Expression"],
    fields: Object.assign({
      callee: {
        validate: (0, _utils.assertNodeType)("Expression", "Super", "V8IntrinsicIdentifier")
      },
      arguments: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Expression", "SpreadElement", "ArgumentPlaceholder")))
      }
    }, !process.env.BABEL_TYPES_8_BREAKING ? {
      optional: {
        validate: (0, _utils.assertOneOf)(true, false),
        optional: true
      }
    } : {}, {
      typeArguments: {
        validate: (0, _utils.assertNodeType)("TypeParameterInstantiation"),
        optional: true
      },
      typeParameters: {
        validate: (0, _utils.assertNodeType)("TSTypeParameterInstantiation"),
        optional: true
      }
    })
  });
  defineType("CatchClause", {
    visitor: ["param", "body"],
    fields: {
      param: {
        validate: (0, _utils.assertNodeType)("Identifier", "ArrayPattern", "ObjectPattern"),
        optional: true
      },
      body: {
        validate: (0, _utils.assertNodeType)("BlockStatement")
      }
    },
    aliases: ["Scopable", "BlockParent"]
  });
  defineType("ConditionalExpression", {
    visitor: ["test", "consequent", "alternate"],
    fields: {
      test: {
        validate: (0, _utils.assertNodeType)("Expression")
      },
      consequent: {
        validate: (0, _utils.assertNodeType)("Expression")
      },
      alternate: {
        validate: (0, _utils.assertNodeType)("Expression")
      }
    },
    aliases: ["Expression", "Conditional"]
  });
  defineType("ContinueStatement", {
    visitor: ["label"],
    fields: {
      label: {
        validate: (0, _utils.assertNodeType)("Identifier"),
        optional: true
      }
    },
    aliases: ["Statement", "Terminatorless", "CompletionStatement"]
  });
  defineType("DebuggerStatement", {
    aliases: ["Statement"]
  });
  defineType("DoWhileStatement", {
    visitor: ["test", "body"],
    fields: {
      test: {
        validate: (0, _utils.assertNodeType)("Expression")
      },
      body: {
        validate: (0, _utils.assertNodeType)("Statement")
      }
    },
    aliases: ["Statement", "BlockParent", "Loop", "While", "Scopable"]
  });
  defineType("EmptyStatement", {
    aliases: ["Statement"]
  });
  defineType("ExpressionStatement", {
    visitor: ["expression"],
    fields: {
      expression: {
        validate: (0, _utils.assertNodeType)("Expression")
      }
    },
    aliases: ["Statement", "ExpressionWrapper"]
  });
  defineType("File", {
    builder: ["program", "comments", "tokens"],
    visitor: ["program"],
    fields: {
      program: {
        validate: (0, _utils.assertNodeType)("Program")
      },
      comments: {
        validate: !process.env.BABEL_TYPES_8_BREAKING ? Object.assign(() => {}, {
          each: {
            oneOfNodeTypes: ["CommentBlock", "CommentLine"]
          }
        }) : (0, _utils.assertEach)((0, _utils.assertNodeType)("CommentBlock", "CommentLine")),
        optional: true
      },
      tokens: {
        validate: (0, _utils.assertEach)(Object.assign(() => {}, {
          type: "any"
        })),
        optional: true
      }
    }
  });
  defineType("ForInStatement", {
    visitor: ["left", "right", "body"],
    aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop", "ForXStatement"],
    fields: {
      left: {
        validate: !process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertNodeType)("VariableDeclaration", "LVal") : (0, _utils.assertNodeType)("VariableDeclaration", "Identifier", "MemberExpression", "ArrayPattern", "ObjectPattern", "TSAsExpression", "TSSatisfiesExpression", "TSTypeAssertion", "TSNonNullExpression")
      },
      right: {
        validate: (0, _utils.assertNodeType)("Expression")
      },
      body: {
        validate: (0, _utils.assertNodeType)("Statement")
      }
    }
  });
  defineType("ForStatement", {
    visitor: ["init", "test", "update", "body"],
    aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop"],
    fields: {
      init: {
        validate: (0, _utils.assertNodeType)("VariableDeclaration", "Expression"),
        optional: true
      },
      test: {
        validate: (0, _utils.assertNodeType)("Expression"),
        optional: true
      },
      update: {
        validate: (0, _utils.assertNodeType)("Expression"),
        optional: true
      },
      body: {
        validate: (0, _utils.assertNodeType)("Statement")
      }
    }
  });
  const functionCommon = () => ({
    params: {
      validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Identifier", "Pattern", "RestElement")))
    },
    generator: {
      default: false
    },
    async: {
      default: false
    }
  });
  exports$4p.functionCommon = functionCommon;
  const functionTypeAnnotationCommon = () => ({
    returnType: {
      validate: (0, _utils.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"),
      optional: true
    },
    typeParameters: {
      validate: (0, _utils.assertNodeType)("TypeParameterDeclaration", "TSTypeParameterDeclaration", "Noop"),
      optional: true
    }
  });
  exports$4p.functionTypeAnnotationCommon = functionTypeAnnotationCommon;
  const functionDeclarationCommon = () => Object.assign({}, functionCommon(), {
    declare: {
      validate: (0, _utils.assertValueType)("boolean"),
      optional: true
    },
    id: {
      validate: (0, _utils.assertNodeType)("Identifier"),
      optional: true
    }
  });
  exports$4p.functionDeclarationCommon = functionDeclarationCommon;
  defineType("FunctionDeclaration", {
    builder: ["id", "params", "body", "generator", "async"],
    visitor: ["id", "params", "body", "returnType", "typeParameters"],
    fields: Object.assign({}, functionDeclarationCommon(), functionTypeAnnotationCommon(), {
      body: {
        validate: (0, _utils.assertNodeType)("BlockStatement")
      },
      predicate: {
        validate: (0, _utils.assertNodeType)("DeclaredPredicate", "InferredPredicate"),
        optional: true
      }
    }),
    aliases: ["Scopable", "Function", "BlockParent", "FunctionParent", "Statement", "Pureish", "Declaration"],
    validate: function () {
      if (!process.env.BABEL_TYPES_8_BREAKING) return () => {};
      const identifier = (0, _utils.assertNodeType)("Identifier");
      return function (parent, key, node) {
        if (!(0, _is.default)("ExportDefaultDeclaration", parent)) {
          identifier(node, "id", node.id);
        }
      };
    }()
  });
  defineType("FunctionExpression", {
    inherits: "FunctionDeclaration",
    aliases: ["Scopable", "Function", "BlockParent", "FunctionParent", "Expression", "Pureish"],
    fields: Object.assign({}, functionCommon(), functionTypeAnnotationCommon(), {
      id: {
        validate: (0, _utils.assertNodeType)("Identifier"),
        optional: true
      },
      body: {
        validate: (0, _utils.assertNodeType)("BlockStatement")
      },
      predicate: {
        validate: (0, _utils.assertNodeType)("DeclaredPredicate", "InferredPredicate"),
        optional: true
      }
    })
  });
  const patternLikeCommon = () => ({
    typeAnnotation: {
      validate: (0, _utils.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"),
      optional: true
    },
    optional: {
      validate: (0, _utils.assertValueType)("boolean"),
      optional: true
    },
    decorators: {
      validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))),
      optional: true
    }
  });
  exports$4p.patternLikeCommon = patternLikeCommon;
  defineType("Identifier", {
    builder: ["name"],
    visitor: ["typeAnnotation", "decorators"],
    aliases: ["Expression", "PatternLike", "LVal", "TSEntityName"],
    fields: Object.assign({}, patternLikeCommon(), {
      name: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("string"), Object.assign(function (node, key, val) {
          if (!process.env.BABEL_TYPES_8_BREAKING) return;
          if (!(0, _isValidIdentifier.default)(val, false)) {
            throw new TypeError(`"${val}" is not a valid identifier name`);
          }
        }, {
          type: "string"
        }))
      }
    }),
    validate(parent, key, node) {
      if (!process.env.BABEL_TYPES_8_BREAKING) return;
      const match = /\.(\w+)$/.exec(key);
      if (!match) return;
      const [, parentKey] = match;
      const nonComp = {
        computed: false
      };
      if (parentKey === "property") {
        if ((0, _is.default)("MemberExpression", parent, nonComp)) return;
        if ((0, _is.default)("OptionalMemberExpression", parent, nonComp)) return;
      } else if (parentKey === "key") {
        if ((0, _is.default)("Property", parent, nonComp)) return;
        if ((0, _is.default)("Method", parent, nonComp)) return;
      } else if (parentKey === "exported") {
        if ((0, _is.default)("ExportSpecifier", parent)) return;
      } else if (parentKey === "imported") {
        if ((0, _is.default)("ImportSpecifier", parent, {
          imported: node
        })) return;
      } else if (parentKey === "meta") {
        if ((0, _is.default)("MetaProperty", parent, {
          meta: node
        })) return;
      }
      if (((0, _helperValidatorIdentifier.isKeyword)(node.name) || (0, _helperValidatorIdentifier.isReservedWord)(node.name, false)) && node.name !== "this") {
        throw new TypeError(`"${node.name}" is not a valid identifier`);
      }
    }
  });
  defineType("IfStatement", {
    visitor: ["test", "consequent", "alternate"],
    aliases: ["Statement", "Conditional"],
    fields: {
      test: {
        validate: (0, _utils.assertNodeType)("Expression")
      },
      consequent: {
        validate: (0, _utils.assertNodeType)("Statement")
      },
      alternate: {
        optional: true,
        validate: (0, _utils.assertNodeType)("Statement")
      }
    }
  });
  defineType("LabeledStatement", {
    visitor: ["label", "body"],
    aliases: ["Statement"],
    fields: {
      label: {
        validate: (0, _utils.assertNodeType)("Identifier")
      },
      body: {
        validate: (0, _utils.assertNodeType)("Statement")
      }
    }
  });
  defineType("StringLiteral", {
    builder: ["value"],
    fields: {
      value: {
        validate: (0, _utils.assertValueType)("string")
      }
    },
    aliases: ["Expression", "Pureish", "Literal", "Immutable"]
  });
  defineType("NumericLiteral", {
    builder: ["value"],
    deprecatedAlias: "NumberLiteral",
    fields: {
      value: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("number"), Object.assign(function (node, key, val) {
        }, {
          type: "number"
        }))
      }
    },
    aliases: ["Expression", "Pureish", "Literal", "Immutable"]
  });
  defineType("NullLiteral", {
    aliases: ["Expression", "Pureish", "Literal", "Immutable"]
  });
  defineType("BooleanLiteral", {
    builder: ["value"],
    fields: {
      value: {
        validate: (0, _utils.assertValueType)("boolean")
      }
    },
    aliases: ["Expression", "Pureish", "Literal", "Immutable"]
  });
  defineType("RegExpLiteral", {
    builder: ["pattern", "flags"],
    deprecatedAlias: "RegexLiteral",
    aliases: ["Expression", "Pureish", "Literal"],
    fields: {
      pattern: {
        validate: (0, _utils.assertValueType)("string")
      },
      flags: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("string"), Object.assign(function (node, key, val) {
          if (!process.env.BABEL_TYPES_8_BREAKING) return;
          const invalid = /[^gimsuy]/.exec(val);
          if (invalid) {
            throw new TypeError(`"${invalid[0]}" is not a valid RegExp flag`);
          }
        }, {
          type: "string"
        })),
        default: ""
      }
    }
  });
  defineType("LogicalExpression", {
    builder: ["operator", "left", "right"],
    visitor: ["left", "right"],
    aliases: ["Binary", "Expression"],
    fields: {
      operator: {
        validate: (0, _utils.assertOneOf)(..._index.LOGICAL_OPERATORS)
      },
      left: {
        validate: (0, _utils.assertNodeType)("Expression")
      },
      right: {
        validate: (0, _utils.assertNodeType)("Expression")
      }
    }
  });
  defineType("MemberExpression", {
    builder: ["object", "property", "computed", ...(!process.env.BABEL_TYPES_8_BREAKING ? ["optional"] : [])],
    visitor: ["object", "property"],
    aliases: ["Expression", "LVal"],
    fields: Object.assign({
      object: {
        validate: (0, _utils.assertNodeType)("Expression", "Super")
      },
      property: {
        validate: function () {
          const normal = (0, _utils.assertNodeType)("Identifier", "PrivateName");
          const computed = (0, _utils.assertNodeType)("Expression");
          const validator = function (node, key, val) {
            const validator = node.computed ? computed : normal;
            validator(node, key, val);
          };
          validator.oneOfNodeTypes = ["Expression", "Identifier", "PrivateName"];
          return validator;
        }()
      },
      computed: {
        default: false
      }
    }, !process.env.BABEL_TYPES_8_BREAKING ? {
      optional: {
        validate: (0, _utils.assertOneOf)(true, false),
        optional: true
      }
    } : {})
  });
  defineType("NewExpression", {
    inherits: "CallExpression"
  });
  defineType("Program", {
    visitor: ["directives", "body"],
    builder: ["body", "directives", "sourceType", "interpreter"],
    fields: {
      sourceType: {
        validate: (0, _utils.assertOneOf)("script", "module"),
        default: "script"
      },
      interpreter: {
        validate: (0, _utils.assertNodeType)("InterpreterDirective"),
        default: null,
        optional: true
      },
      directives: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Directive"))),
        default: []
      },
      body: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Statement")))
      }
    },
    aliases: ["Scopable", "BlockParent", "Block"]
  });
  defineType("ObjectExpression", {
    visitor: ["properties"],
    aliases: ["Expression"],
    fields: {
      properties: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("ObjectMethod", "ObjectProperty", "SpreadElement")))
      }
    }
  });
  defineType("ObjectMethod", {
    builder: ["kind", "key", "params", "body", "computed", "generator", "async"],
    fields: Object.assign({}, functionCommon(), functionTypeAnnotationCommon(), {
      kind: Object.assign({
        validate: (0, _utils.assertOneOf)("method", "get", "set")
      }, !process.env.BABEL_TYPES_8_BREAKING ? {
        default: "method"
      } : {}),
      computed: {
        default: false
      },
      key: {
        validate: function () {
          const normal = (0, _utils.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral");
          const computed = (0, _utils.assertNodeType)("Expression");
          const validator = function (node, key, val) {
            const validator = node.computed ? computed : normal;
            validator(node, key, val);
          };
          validator.oneOfNodeTypes = ["Expression", "Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral"];
          return validator;
        }()
      },
      decorators: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))),
        optional: true
      },
      body: {
        validate: (0, _utils.assertNodeType)("BlockStatement")
      }
    }),
    visitor: ["key", "params", "body", "decorators", "returnType", "typeParameters"],
    aliases: ["UserWhitespacable", "Function", "Scopable", "BlockParent", "FunctionParent", "Method", "ObjectMember"]
  });
  defineType("ObjectProperty", {
    builder: ["key", "value", "computed", "shorthand", ...(!process.env.BABEL_TYPES_8_BREAKING ? ["decorators"] : [])],
    fields: {
      computed: {
        default: false
      },
      key: {
        validate: function () {
          const normal = (0, _utils.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral", "DecimalLiteral", "PrivateName");
          const computed = (0, _utils.assertNodeType)("Expression");
          const validator = Object.assign(function (node, key, val) {
            const validator = node.computed ? computed : normal;
            validator(node, key, val);
          }, {
            oneOfNodeTypes: ["Expression", "Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral", "DecimalLiteral", "PrivateName"]
          });
          return validator;
        }()
      },
      value: {
        validate: (0, _utils.assertNodeType)("Expression", "PatternLike")
      },
      shorthand: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("boolean"), Object.assign(function (node, key, val) {
          if (!process.env.BABEL_TYPES_8_BREAKING) return;
          if (val && node.computed) {
            throw new TypeError("Property shorthand of ObjectProperty cannot be true if computed is true");
          }
        }, {
          type: "boolean"
        }), function (node, key, val) {
          if (!process.env.BABEL_TYPES_8_BREAKING) return;
          if (val && !(0, _is.default)("Identifier", node.key)) {
            throw new TypeError("Property shorthand of ObjectProperty cannot be true if key is not an Identifier");
          }
        }),
        default: false
      },
      decorators: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))),
        optional: true
      }
    },
    visitor: ["key", "value", "decorators"],
    aliases: ["UserWhitespacable", "Property", "ObjectMember"],
    validate: function () {
      const pattern = (0, _utils.assertNodeType)("Identifier", "Pattern", "TSAsExpression", "TSSatisfiesExpression", "TSNonNullExpression", "TSTypeAssertion");
      const expression = (0, _utils.assertNodeType)("Expression");
      return function (parent, key, node) {
        if (!process.env.BABEL_TYPES_8_BREAKING) return;
        const validator = (0, _is.default)("ObjectPattern", parent) ? pattern : expression;
        validator(node, "value", node.value);
      };
    }()
  });
  defineType("RestElement", {
    visitor: ["argument", "typeAnnotation"],
    builder: ["argument"],
    aliases: ["LVal", "PatternLike"],
    deprecatedAlias: "RestProperty",
    fields: Object.assign({}, patternLikeCommon(), {
      argument: {
        validate: !process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertNodeType)("LVal") : (0, _utils.assertNodeType)("Identifier", "ArrayPattern", "ObjectPattern", "MemberExpression", "TSAsExpression", "TSSatisfiesExpression", "TSTypeAssertion", "TSNonNullExpression")
      }
    }),
    validate(parent, key) {
      if (!process.env.BABEL_TYPES_8_BREAKING) return;
      const match = /(\w+)\[(\d+)\]/.exec(key);
      if (!match) throw new Error("Internal Babel error: malformed key.");
      const [, listKey, index] = match;
      if (parent[listKey].length > +index + 1) {
        throw new TypeError(`RestElement must be last element of ${listKey}`);
      }
    }
  });
  defineType("ReturnStatement", {
    visitor: ["argument"],
    aliases: ["Statement", "Terminatorless", "CompletionStatement"],
    fields: {
      argument: {
        validate: (0, _utils.assertNodeType)("Expression"),
        optional: true
      }
    }
  });
  defineType("SequenceExpression", {
    visitor: ["expressions"],
    fields: {
      expressions: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Expression")))
      }
    },
    aliases: ["Expression"]
  });
  defineType("ParenthesizedExpression", {
    visitor: ["expression"],
    aliases: ["Expression", "ExpressionWrapper"],
    fields: {
      expression: {
        validate: (0, _utils.assertNodeType)("Expression")
      }
    }
  });
  defineType("SwitchCase", {
    visitor: ["test", "consequent"],
    fields: {
      test: {
        validate: (0, _utils.assertNodeType)("Expression"),
        optional: true
      },
      consequent: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Statement")))
      }
    }
  });
  defineType("SwitchStatement", {
    visitor: ["discriminant", "cases"],
    aliases: ["Statement", "BlockParent", "Scopable"],
    fields: {
      discriminant: {
        validate: (0, _utils.assertNodeType)("Expression")
      },
      cases: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("SwitchCase")))
      }
    }
  });
  defineType("ThisExpression", {
    aliases: ["Expression"]
  });
  defineType("ThrowStatement", {
    visitor: ["argument"],
    aliases: ["Statement", "Terminatorless", "CompletionStatement"],
    fields: {
      argument: {
        validate: (0, _utils.assertNodeType)("Expression")
      }
    }
  });
  defineType("TryStatement", {
    visitor: ["block", "handler", "finalizer"],
    aliases: ["Statement"],
    fields: {
      block: {
        validate: (0, _utils.chain)((0, _utils.assertNodeType)("BlockStatement"), Object.assign(function (node) {
          if (!process.env.BABEL_TYPES_8_BREAKING) return;
          if (!node.handler && !node.finalizer) {
            throw new TypeError("TryStatement expects either a handler or finalizer, or both");
          }
        }, {
          oneOfNodeTypes: ["BlockStatement"]
        }))
      },
      handler: {
        optional: true,
        validate: (0, _utils.assertNodeType)("CatchClause")
      },
      finalizer: {
        optional: true,
        validate: (0, _utils.assertNodeType)("BlockStatement")
      }
    }
  });
  defineType("UnaryExpression", {
    builder: ["operator", "argument", "prefix"],
    fields: {
      prefix: {
        default: true
      },
      argument: {
        validate: (0, _utils.assertNodeType)("Expression")
      },
      operator: {
        validate: (0, _utils.assertOneOf)(..._index.UNARY_OPERATORS)
      }
    },
    visitor: ["argument"],
    aliases: ["UnaryLike", "Expression"]
  });
  defineType("UpdateExpression", {
    builder: ["operator", "argument", "prefix"],
    fields: {
      prefix: {
        default: false
      },
      argument: {
        validate: !process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertNodeType)("Expression") : (0, _utils.assertNodeType)("Identifier", "MemberExpression")
      },
      operator: {
        validate: (0, _utils.assertOneOf)(..._index.UPDATE_OPERATORS)
      }
    },
    visitor: ["argument"],
    aliases: ["Expression"]
  });
  defineType("VariableDeclaration", {
    builder: ["kind", "declarations"],
    visitor: ["declarations"],
    aliases: ["Statement", "Declaration"],
    fields: {
      declare: {
        validate: (0, _utils.assertValueType)("boolean"),
        optional: true
      },
      kind: {
        validate: (0, _utils.assertOneOf)("var", "let", "const", "using", "await using")
      },
      declarations: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("VariableDeclarator")))
      }
    },
    validate(parent, key, node) {
      if (!process.env.BABEL_TYPES_8_BREAKING) return;
      if (!(0, _is.default)("ForXStatement", parent, {
        left: node
      })) return;
      if (node.declarations.length !== 1) {
        throw new TypeError(`Exactly one VariableDeclarator is required in the VariableDeclaration of a ${parent.type}`);
      }
    }
  });
  defineType("VariableDeclarator", {
    visitor: ["id", "init"],
    fields: {
      id: {
        validate: function () {
          if (!process.env.BABEL_TYPES_8_BREAKING) {
            return (0, _utils.assertNodeType)("LVal");
          }
          const normal = (0, _utils.assertNodeType)("Identifier", "ArrayPattern", "ObjectPattern");
          const without = (0, _utils.assertNodeType)("Identifier");
          return function (node, key, val) {
            const validator = node.init ? normal : without;
            validator(node, key, val);
          };
        }()
      },
      definite: {
        optional: true,
        validate: (0, _utils.assertValueType)("boolean")
      },
      init: {
        optional: true,
        validate: (0, _utils.assertNodeType)("Expression")
      }
    }
  });
  defineType("WhileStatement", {
    visitor: ["test", "body"],
    aliases: ["Statement", "BlockParent", "Loop", "While", "Scopable"],
    fields: {
      test: {
        validate: (0, _utils.assertNodeType)("Expression")
      },
      body: {
        validate: (0, _utils.assertNodeType)("Statement")
      }
    }
  });
  defineType("WithStatement", {
    visitor: ["object", "body"],
    aliases: ["Statement"],
    fields: {
      object: {
        validate: (0, _utils.assertNodeType)("Expression")
      },
      body: {
        validate: (0, _utils.assertNodeType)("Statement")
      }
    }
  });
  defineType("AssignmentPattern", {
    visitor: ["left", "right", "decorators"],
    builder: ["left", "right"],
    aliases: ["Pattern", "PatternLike", "LVal"],
    fields: Object.assign({}, patternLikeCommon(), {
      left: {
        validate: (0, _utils.assertNodeType)("Identifier", "ObjectPattern", "ArrayPattern", "MemberExpression", "TSAsExpression", "TSSatisfiesExpression", "TSTypeAssertion", "TSNonNullExpression")
      },
      right: {
        validate: (0, _utils.assertNodeType)("Expression")
      },
      decorators: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))),
        optional: true
      }
    })
  });
  defineType("ArrayPattern", {
    visitor: ["elements", "typeAnnotation"],
    builder: ["elements"],
    aliases: ["Pattern", "PatternLike", "LVal"],
    fields: Object.assign({}, patternLikeCommon(), {
      elements: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeOrValueType)("null", "PatternLike", "LVal")))
      }
    })
  });
  defineType("ArrowFunctionExpression", {
    builder: ["params", "body", "async"],
    visitor: ["params", "body", "returnType", "typeParameters"],
    aliases: ["Scopable", "Function", "BlockParent", "FunctionParent", "Expression", "Pureish"],
    fields: Object.assign({}, functionCommon(), functionTypeAnnotationCommon(), {
      expression: {
        validate: (0, _utils.assertValueType)("boolean")
      },
      body: {
        validate: (0, _utils.assertNodeType)("BlockStatement", "Expression")
      },
      predicate: {
        validate: (0, _utils.assertNodeType)("DeclaredPredicate", "InferredPredicate"),
        optional: true
      }
    })
  });
  defineType("ClassBody", {
    visitor: ["body"],
    fields: {
      body: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("ClassMethod", "ClassPrivateMethod", "ClassProperty", "ClassPrivateProperty", "ClassAccessorProperty", "TSDeclareMethod", "TSIndexSignature", "StaticBlock")))
      }
    }
  });
  defineType("ClassExpression", {
    builder: ["id", "superClass", "body", "decorators"],
    visitor: ["id", "body", "superClass", "mixins", "typeParameters", "superTypeParameters", "implements", "decorators"],
    aliases: ["Scopable", "Class", "Expression"],
    fields: {
      id: {
        validate: (0, _utils.assertNodeType)("Identifier"),
        optional: true
      },
      typeParameters: {
        validate: (0, _utils.assertNodeType)("TypeParameterDeclaration", "TSTypeParameterDeclaration", "Noop"),
        optional: true
      },
      body: {
        validate: (0, _utils.assertNodeType)("ClassBody")
      },
      superClass: {
        optional: true,
        validate: (0, _utils.assertNodeType)("Expression")
      },
      superTypeParameters: {
        validate: (0, _utils.assertNodeType)("TypeParameterInstantiation", "TSTypeParameterInstantiation"),
        optional: true
      },
      implements: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("TSExpressionWithTypeArguments", "ClassImplements"))),
        optional: true
      },
      decorators: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))),
        optional: true
      },
      mixins: {
        validate: (0, _utils.assertNodeType)("InterfaceExtends"),
        optional: true
      }
    }
  });
  defineType("ClassDeclaration", {
    inherits: "ClassExpression",
    aliases: ["Scopable", "Class", "Statement", "Declaration"],
    fields: {
      id: {
        validate: (0, _utils.assertNodeType)("Identifier"),
        optional: true
      },
      typeParameters: {
        validate: (0, _utils.assertNodeType)("TypeParameterDeclaration", "TSTypeParameterDeclaration", "Noop"),
        optional: true
      },
      body: {
        validate: (0, _utils.assertNodeType)("ClassBody")
      },
      superClass: {
        optional: true,
        validate: (0, _utils.assertNodeType)("Expression")
      },
      superTypeParameters: {
        validate: (0, _utils.assertNodeType)("TypeParameterInstantiation", "TSTypeParameterInstantiation"),
        optional: true
      },
      implements: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("TSExpressionWithTypeArguments", "ClassImplements"))),
        optional: true
      },
      decorators: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))),
        optional: true
      },
      mixins: {
        validate: (0, _utils.assertNodeType)("InterfaceExtends"),
        optional: true
      },
      declare: {
        validate: (0, _utils.assertValueType)("boolean"),
        optional: true
      },
      abstract: {
        validate: (0, _utils.assertValueType)("boolean"),
        optional: true
      }
    },
    validate: function () {
      const identifier = (0, _utils.assertNodeType)("Identifier");
      return function (parent, key, node) {
        if (!process.env.BABEL_TYPES_8_BREAKING) return;
        if (!(0, _is.default)("ExportDefaultDeclaration", parent)) {
          identifier(node, "id", node.id);
        }
      };
    }()
  });
  defineType("ExportAllDeclaration", {
    builder: ["source"],
    visitor: ["source", "attributes", "assertions"],
    aliases: ["Statement", "Declaration", "ImportOrExportDeclaration", "ExportDeclaration"],
    fields: {
      source: {
        validate: (0, _utils.assertNodeType)("StringLiteral")
      },
      exportKind: (0, _utils.validateOptional)((0, _utils.assertOneOf)("type", "value")),
      attributes: {
        optional: true,
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("ImportAttribute")))
      },
      assertions: {
        optional: true,
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("ImportAttribute")))
      }
    }
  });
  defineType("ExportDefaultDeclaration", {
    visitor: ["declaration"],
    aliases: ["Statement", "Declaration", "ImportOrExportDeclaration", "ExportDeclaration"],
    fields: {
      declaration: {
        validate: (0, _utils.assertNodeType)("TSDeclareFunction", "FunctionDeclaration", "ClassDeclaration", "Expression")
      },
      exportKind: (0, _utils.validateOptional)((0, _utils.assertOneOf)("value"))
    }
  });
  defineType("ExportNamedDeclaration", {
    builder: ["declaration", "specifiers", "source"],
    visitor: ["declaration", "specifiers", "source", "attributes", "assertions"],
    aliases: ["Statement", "Declaration", "ImportOrExportDeclaration", "ExportDeclaration"],
    fields: {
      declaration: {
        optional: true,
        validate: (0, _utils.chain)((0, _utils.assertNodeType)("Declaration"), Object.assign(function (node, key, val) {
          if (!process.env.BABEL_TYPES_8_BREAKING) return;
          if (val && node.specifiers.length) {
            throw new TypeError("Only declaration or specifiers is allowed on ExportNamedDeclaration");
          }
        }, {
          oneOfNodeTypes: ["Declaration"]
        }), function (node, key, val) {
          if (!process.env.BABEL_TYPES_8_BREAKING) return;
          if (val && node.source) {
            throw new TypeError("Cannot export a declaration from a source");
          }
        })
      },
      attributes: {
        optional: true,
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("ImportAttribute")))
      },
      assertions: {
        optional: true,
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("ImportAttribute")))
      },
      specifiers: {
        default: [],
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)(function () {
          const sourced = (0, _utils.assertNodeType)("ExportSpecifier", "ExportDefaultSpecifier", "ExportNamespaceSpecifier");
          const sourceless = (0, _utils.assertNodeType)("ExportSpecifier");
          if (!process.env.BABEL_TYPES_8_BREAKING) return sourced;
          return function (node, key, val) {
            const validator = node.source ? sourced : sourceless;
            validator(node, key, val);
          };
        }()))
      },
      source: {
        validate: (0, _utils.assertNodeType)("StringLiteral"),
        optional: true
      },
      exportKind: (0, _utils.validateOptional)((0, _utils.assertOneOf)("type", "value"))
    }
  });
  defineType("ExportSpecifier", {
    visitor: ["local", "exported"],
    aliases: ["ModuleSpecifier"],
    fields: {
      local: {
        validate: (0, _utils.assertNodeType)("Identifier")
      },
      exported: {
        validate: (0, _utils.assertNodeType)("Identifier", "StringLiteral")
      },
      exportKind: {
        validate: (0, _utils.assertOneOf)("type", "value"),
        optional: true
      }
    }
  });
  defineType("ForOfStatement", {
    visitor: ["left", "right", "body"],
    builder: ["left", "right", "body", "await"],
    aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop", "ForXStatement"],
    fields: {
      left: {
        validate: function () {
          if (!process.env.BABEL_TYPES_8_BREAKING) {
            return (0, _utils.assertNodeType)("VariableDeclaration", "LVal");
          }
          const declaration = (0, _utils.assertNodeType)("VariableDeclaration");
          const lval = (0, _utils.assertNodeType)("Identifier", "MemberExpression", "ArrayPattern", "ObjectPattern", "TSAsExpression", "TSSatisfiesExpression", "TSTypeAssertion", "TSNonNullExpression");
          return function (node, key, val) {
            if ((0, _is.default)("VariableDeclaration", val)) {
              declaration(node, key, val);
            } else {
              lval(node, key, val);
            }
          };
        }()
      },
      right: {
        validate: (0, _utils.assertNodeType)("Expression")
      },
      body: {
        validate: (0, _utils.assertNodeType)("Statement")
      },
      await: {
        default: false
      }
    }
  });
  defineType("ImportDeclaration", {
    builder: ["specifiers", "source"],
    visitor: ["specifiers", "source", "attributes", "assertions"],
    aliases: ["Statement", "Declaration", "ImportOrExportDeclaration"],
    fields: {
      attributes: {
        optional: true,
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("ImportAttribute")))
      },
      assertions: {
        optional: true,
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("ImportAttribute")))
      },
      module: {
        optional: true,
        validate: (0, _utils.assertValueType)("boolean")
      },
      phase: {
        default: null,
        validate: (0, _utils.assertOneOf)("source", "defer")
      },
      specifiers: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("ImportSpecifier", "ImportDefaultSpecifier", "ImportNamespaceSpecifier")))
      },
      source: {
        validate: (0, _utils.assertNodeType)("StringLiteral")
      },
      importKind: {
        validate: (0, _utils.assertOneOf)("type", "typeof", "value"),
        optional: true
      }
    }
  });
  defineType("ImportDefaultSpecifier", {
    visitor: ["local"],
    aliases: ["ModuleSpecifier"],
    fields: {
      local: {
        validate: (0, _utils.assertNodeType)("Identifier")
      }
    }
  });
  defineType("ImportNamespaceSpecifier", {
    visitor: ["local"],
    aliases: ["ModuleSpecifier"],
    fields: {
      local: {
        validate: (0, _utils.assertNodeType)("Identifier")
      }
    }
  });
  defineType("ImportSpecifier", {
    visitor: ["local", "imported"],
    aliases: ["ModuleSpecifier"],
    fields: {
      local: {
        validate: (0, _utils.assertNodeType)("Identifier")
      },
      imported: {
        validate: (0, _utils.assertNodeType)("Identifier", "StringLiteral")
      },
      importKind: {
        validate: (0, _utils.assertOneOf)("type", "typeof", "value"),
        optional: true
      }
    }
  });
  defineType("ImportExpression", {
    visitor: ["source", "options"],
    aliases: ["Expression"],
    fields: {
      phase: {
        default: null,
        validate: (0, _utils.assertOneOf)("source", "defer")
      },
      source: {
        validate: (0, _utils.assertNodeType)("Expression")
      },
      options: {
        validate: (0, _utils.assertNodeType)("Expression"),
        optional: true
      }
    }
  });
  defineType("MetaProperty", {
    visitor: ["meta", "property"],
    aliases: ["Expression"],
    fields: {
      meta: {
        validate: (0, _utils.chain)((0, _utils.assertNodeType)("Identifier"), Object.assign(function (node, key, val) {
          if (!process.env.BABEL_TYPES_8_BREAKING) return;
          let property;
          switch (val.name) {
            case "function":
              property = "sent";
              break;
            case "new":
              property = "target";
              break;
            case "import":
              property = "meta";
              break;
          }
          if (!(0, _is.default)("Identifier", node.property, {
            name: property
          })) {
            throw new TypeError("Unrecognised MetaProperty");
          }
        }, {
          oneOfNodeTypes: ["Identifier"]
        }))
      },
      property: {
        validate: (0, _utils.assertNodeType)("Identifier")
      }
    }
  });
  const classMethodOrPropertyCommon = () => ({
    abstract: {
      validate: (0, _utils.assertValueType)("boolean"),
      optional: true
    },
    accessibility: {
      validate: (0, _utils.assertOneOf)("public", "private", "protected"),
      optional: true
    },
    static: {
      default: false
    },
    override: {
      default: false
    },
    computed: {
      default: false
    },
    optional: {
      validate: (0, _utils.assertValueType)("boolean"),
      optional: true
    },
    key: {
      validate: (0, _utils.chain)(function () {
        const normal = (0, _utils.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral");
        const computed = (0, _utils.assertNodeType)("Expression");
        return function (node, key, val) {
          const validator = node.computed ? computed : normal;
          validator(node, key, val);
        };
      }(), (0, _utils.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral", "Expression"))
    }
  });
  exports$4p.classMethodOrPropertyCommon = classMethodOrPropertyCommon;
  const classMethodOrDeclareMethodCommon = () => Object.assign({}, functionCommon(), classMethodOrPropertyCommon(), {
    params: {
      validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Identifier", "Pattern", "RestElement", "TSParameterProperty")))
    },
    kind: {
      validate: (0, _utils.assertOneOf)("get", "set", "method", "constructor"),
      default: "method"
    },
    access: {
      validate: (0, _utils.chain)((0, _utils.assertValueType)("string"), (0, _utils.assertOneOf)("public", "private", "protected")),
      optional: true
    },
    decorators: {
      validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))),
      optional: true
    }
  });
  exports$4p.classMethodOrDeclareMethodCommon = classMethodOrDeclareMethodCommon;
  defineType("ClassMethod", {
    aliases: ["Function", "Scopable", "BlockParent", "FunctionParent", "Method"],
    builder: ["kind", "key", "params", "body", "computed", "static", "generator", "async"],
    visitor: ["key", "params", "body", "decorators", "returnType", "typeParameters"],
    fields: Object.assign({}, classMethodOrDeclareMethodCommon(), functionTypeAnnotationCommon(), {
      body: {
        validate: (0, _utils.assertNodeType)("BlockStatement")
      }
    })
  });
  defineType("ObjectPattern", {
    visitor: ["properties", "typeAnnotation", "decorators"],
    builder: ["properties"],
    aliases: ["Pattern", "PatternLike", "LVal"],
    fields: Object.assign({}, patternLikeCommon(), {
      properties: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("RestElement", "ObjectProperty")))
      }
    })
  });
  defineType("SpreadElement", {
    visitor: ["argument"],
    aliases: ["UnaryLike"],
    deprecatedAlias: "SpreadProperty",
    fields: {
      argument: {
        validate: (0, _utils.assertNodeType)("Expression")
      }
    }
  });
  defineType("Super", {
    aliases: ["Expression"]
  });
  defineType("TaggedTemplateExpression", {
    visitor: ["tag", "quasi", "typeParameters"],
    builder: ["tag", "quasi"],
    aliases: ["Expression"],
    fields: {
      tag: {
        validate: (0, _utils.assertNodeType)("Expression")
      },
      quasi: {
        validate: (0, _utils.assertNodeType)("TemplateLiteral")
      },
      typeParameters: {
        validate: (0, _utils.assertNodeType)("TypeParameterInstantiation", "TSTypeParameterInstantiation"),
        optional: true
      }
    }
  });
  defineType("TemplateElement", {
    builder: ["value", "tail"],
    fields: {
      value: {
        validate: (0, _utils.chain)((0, _utils.assertShape)({
          raw: {
            validate: (0, _utils.assertValueType)("string")
          },
          cooked: {
            validate: (0, _utils.assertValueType)("string"),
            optional: true
          }
        }), function templateElementCookedValidator(node) {
          const raw = node.value.raw;
          let unterminatedCalled = false;
          const error = () => {
            throw new Error("Internal @babel/types error.");
          };
          const {
            str,
            firstInvalidLoc
          } = (0, _helperStringParser.readStringContents)("template", raw, 0, 0, 0, {
            unterminated() {
              unterminatedCalled = true;
            },
            strictNumericEscape: error,
            invalidEscapeSequence: error,
            numericSeparatorInEscapeSequence: error,
            unexpectedNumericSeparator: error,
            invalidDigit: error,
            invalidCodePoint: error
          });
          if (!unterminatedCalled) throw new Error("Invalid raw");
          node.value.cooked = firstInvalidLoc ? null : str;
        })
      },
      tail: {
        default: false
      }
    }
  });
  defineType("TemplateLiteral", {
    visitor: ["quasis", "expressions"],
    aliases: ["Expression", "Literal"],
    fields: {
      quasis: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("TemplateElement")))
      },
      expressions: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Expression", "TSType")), function (node, key, val) {
          if (node.quasis.length !== val.length + 1) {
            throw new TypeError(`Number of ${node.type} quasis should be exactly one more than the number of expressions.\nExpected ${val.length + 1} quasis but got ${node.quasis.length}`);
          }
        })
      }
    }
  });
  defineType("YieldExpression", {
    builder: ["argument", "delegate"],
    visitor: ["argument"],
    aliases: ["Expression", "Terminatorless"],
    fields: {
      delegate: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("boolean"), Object.assign(function (node, key, val) {
          if (!process.env.BABEL_TYPES_8_BREAKING) return;
          if (val && !node.argument) {
            throw new TypeError("Property delegate of YieldExpression cannot be true if there is no argument");
          }
        }, {
          type: "boolean"
        })),
        default: false
      },
      argument: {
        optional: true,
        validate: (0, _utils.assertNodeType)("Expression")
      }
    }
  });
  defineType("AwaitExpression", {
    builder: ["argument"],
    visitor: ["argument"],
    aliases: ["Expression", "Terminatorless"],
    fields: {
      argument: {
        validate: (0, _utils.assertNodeType)("Expression")
      }
    }
  });
  defineType("Import", {
    aliases: ["Expression"]
  });
  defineType("BigIntLiteral", {
    builder: ["value"],
    fields: {
      value: {
        validate: (0, _utils.assertValueType)("string")
      }
    },
    aliases: ["Expression", "Pureish", "Literal", "Immutable"]
  });
  defineType("ExportNamespaceSpecifier", {
    visitor: ["exported"],
    aliases: ["ModuleSpecifier"],
    fields: {
      exported: {
        validate: (0, _utils.assertNodeType)("Identifier")
      }
    }
  });
  defineType("OptionalMemberExpression", {
    builder: ["object", "property", "computed", "optional"],
    visitor: ["object", "property"],
    aliases: ["Expression"],
    fields: {
      object: {
        validate: (0, _utils.assertNodeType)("Expression")
      },
      property: {
        validate: function () {
          const normal = (0, _utils.assertNodeType)("Identifier");
          const computed = (0, _utils.assertNodeType)("Expression");
          const validator = Object.assign(function (node, key, val) {
            const validator = node.computed ? computed : normal;
            validator(node, key, val);
          }, {
            oneOfNodeTypes: ["Expression", "Identifier"]
          });
          return validator;
        }()
      },
      computed: {
        default: false
      },
      optional: {
        validate: !process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertValueType)("boolean") : (0, _utils.chain)((0, _utils.assertValueType)("boolean"), (0, _utils.assertOptionalChainStart)())
      }
    }
  });
  defineType("OptionalCallExpression", {
    visitor: ["callee", "arguments", "typeParameters", "typeArguments"],
    builder: ["callee", "arguments", "optional"],
    aliases: ["Expression"],
    fields: {
      callee: {
        validate: (0, _utils.assertNodeType)("Expression")
      },
      arguments: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Expression", "SpreadElement", "ArgumentPlaceholder")))
      },
      optional: {
        validate: !process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertValueType)("boolean") : (0, _utils.chain)((0, _utils.assertValueType)("boolean"), (0, _utils.assertOptionalChainStart)())
      },
      typeArguments: {
        validate: (0, _utils.assertNodeType)("TypeParameterInstantiation"),
        optional: true
      },
      typeParameters: {
        validate: (0, _utils.assertNodeType)("TSTypeParameterInstantiation"),
        optional: true
      }
    }
  });
  defineType("ClassProperty", {
    visitor: ["key", "value", "typeAnnotation", "decorators"],
    builder: ["key", "value", "typeAnnotation", "decorators", "computed", "static"],
    aliases: ["Property"],
    fields: Object.assign({}, classMethodOrPropertyCommon(), {
      value: {
        validate: (0, _utils.assertNodeType)("Expression"),
        optional: true
      },
      definite: {
        validate: (0, _utils.assertValueType)("boolean"),
        optional: true
      },
      typeAnnotation: {
        validate: (0, _utils.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"),
        optional: true
      },
      decorators: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))),
        optional: true
      },
      readonly: {
        validate: (0, _utils.assertValueType)("boolean"),
        optional: true
      },
      declare: {
        validate: (0, _utils.assertValueType)("boolean"),
        optional: true
      },
      variance: {
        validate: (0, _utils.assertNodeType)("Variance"),
        optional: true
      }
    })
  });
  defineType("ClassAccessorProperty", {
    visitor: ["key", "value", "typeAnnotation", "decorators"],
    builder: ["key", "value", "typeAnnotation", "decorators", "computed", "static"],
    aliases: ["Property", "Accessor"],
    fields: Object.assign({}, classMethodOrPropertyCommon(), {
      key: {
        validate: (0, _utils.chain)(function () {
          const normal = (0, _utils.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral", "PrivateName");
          const computed = (0, _utils.assertNodeType)("Expression");
          return function (node, key, val) {
            const validator = node.computed ? computed : normal;
            validator(node, key, val);
          };
        }(), (0, _utils.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral", "Expression", "PrivateName"))
      },
      value: {
        validate: (0, _utils.assertNodeType)("Expression"),
        optional: true
      },
      definite: {
        validate: (0, _utils.assertValueType)("boolean"),
        optional: true
      },
      typeAnnotation: {
        validate: (0, _utils.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"),
        optional: true
      },
      decorators: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))),
        optional: true
      },
      readonly: {
        validate: (0, _utils.assertValueType)("boolean"),
        optional: true
      },
      declare: {
        validate: (0, _utils.assertValueType)("boolean"),
        optional: true
      },
      variance: {
        validate: (0, _utils.assertNodeType)("Variance"),
        optional: true
      }
    })
  });
  defineType("ClassPrivateProperty", {
    visitor: ["key", "value", "decorators", "typeAnnotation"],
    builder: ["key", "value", "decorators", "static"],
    aliases: ["Property", "Private"],
    fields: {
      key: {
        validate: (0, _utils.assertNodeType)("PrivateName")
      },
      value: {
        validate: (0, _utils.assertNodeType)("Expression"),
        optional: true
      },
      typeAnnotation: {
        validate: (0, _utils.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"),
        optional: true
      },
      decorators: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))),
        optional: true
      },
      static: {
        validate: (0, _utils.assertValueType)("boolean"),
        default: false
      },
      readonly: {
        validate: (0, _utils.assertValueType)("boolean"),
        optional: true
      },
      definite: {
        validate: (0, _utils.assertValueType)("boolean"),
        optional: true
      },
      variance: {
        validate: (0, _utils.assertNodeType)("Variance"),
        optional: true
      }
    }
  });
  defineType("ClassPrivateMethod", {
    builder: ["kind", "key", "params", "body", "static"],
    visitor: ["key", "params", "body", "decorators", "returnType", "typeParameters"],
    aliases: ["Function", "Scopable", "BlockParent", "FunctionParent", "Method", "Private"],
    fields: Object.assign({}, classMethodOrDeclareMethodCommon(), functionTypeAnnotationCommon(), {
      kind: {
        validate: (0, _utils.assertOneOf)("get", "set", "method"),
        default: "method"
      },
      key: {
        validate: (0, _utils.assertNodeType)("PrivateName")
      },
      body: {
        validate: (0, _utils.assertNodeType)("BlockStatement")
      }
    })
  });
  defineType("PrivateName", {
    visitor: ["id"],
    aliases: ["Private"],
    fields: {
      id: {
        validate: (0, _utils.assertNodeType)("Identifier")
      }
    }
  });
  defineType("StaticBlock", {
    visitor: ["body"],
    fields: {
      body: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Statement")))
      }
    },
    aliases: ["Scopable", "BlockParent", "FunctionParent"]
  });
  return exports$4p;
}

var exports$4o = {},
  _dewExec$4n = false;
function dew$4n() {
  if (_dewExec$4n) return exports$4o;
  _dewExec$4n = true;
  var _utils = dew$4p();
  const defineType = (0, _utils.defineAliasedType)("Flow");
  const defineInterfaceishType = name => {
    const isDeclareClass = name === "DeclareClass";
    defineType(name, {
      builder: ["id", "typeParameters", "extends", "body"],
      visitor: ["id", "typeParameters", "extends", ...(isDeclareClass ? ["mixins", "implements"] : []), "body"],
      aliases: ["FlowDeclaration", "Statement", "Declaration"],
      fields: Object.assign({
        id: (0, _utils.validateType)("Identifier"),
        typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"),
        extends: (0, _utils.validateOptional)((0, _utils.arrayOfType)("InterfaceExtends"))
      }, isDeclareClass ? {
        mixins: (0, _utils.validateOptional)((0, _utils.arrayOfType)("InterfaceExtends")),
        implements: (0, _utils.validateOptional)((0, _utils.arrayOfType)("ClassImplements"))
      } : {}, {
        body: (0, _utils.validateType)("ObjectTypeAnnotation")
      })
    });
  };
  defineType("AnyTypeAnnotation", {
    aliases: ["FlowType", "FlowBaseAnnotation"]
  });
  defineType("ArrayTypeAnnotation", {
    visitor: ["elementType"],
    aliases: ["FlowType"],
    fields: {
      elementType: (0, _utils.validateType)("FlowType")
    }
  });
  defineType("BooleanTypeAnnotation", {
    aliases: ["FlowType", "FlowBaseAnnotation"]
  });
  defineType("BooleanLiteralTypeAnnotation", {
    builder: ["value"],
    aliases: ["FlowType"],
    fields: {
      value: (0, _utils.validate)((0, _utils.assertValueType)("boolean"))
    }
  });
  defineType("NullLiteralTypeAnnotation", {
    aliases: ["FlowType", "FlowBaseAnnotation"]
  });
  defineType("ClassImplements", {
    visitor: ["id", "typeParameters"],
    fields: {
      id: (0, _utils.validateType)("Identifier"),
      typeParameters: (0, _utils.validateOptionalType)("TypeParameterInstantiation")
    }
  });
  defineInterfaceishType("DeclareClass");
  defineType("DeclareFunction", {
    visitor: ["id"],
    aliases: ["FlowDeclaration", "Statement", "Declaration"],
    fields: {
      id: (0, _utils.validateType)("Identifier"),
      predicate: (0, _utils.validateOptionalType)("DeclaredPredicate")
    }
  });
  defineInterfaceishType("DeclareInterface");
  defineType("DeclareModule", {
    builder: ["id", "body", "kind"],
    visitor: ["id", "body"],
    aliases: ["FlowDeclaration", "Statement", "Declaration"],
    fields: {
      id: (0, _utils.validateType)(["Identifier", "StringLiteral"]),
      body: (0, _utils.validateType)("BlockStatement"),
      kind: (0, _utils.validateOptional)((0, _utils.assertOneOf)("CommonJS", "ES"))
    }
  });
  defineType("DeclareModuleExports", {
    visitor: ["typeAnnotation"],
    aliases: ["FlowDeclaration", "Statement", "Declaration"],
    fields: {
      typeAnnotation: (0, _utils.validateType)("TypeAnnotation")
    }
  });
  defineType("DeclareTypeAlias", {
    visitor: ["id", "typeParameters", "right"],
    aliases: ["FlowDeclaration", "Statement", "Declaration"],
    fields: {
      id: (0, _utils.validateType)("Identifier"),
      typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"),
      right: (0, _utils.validateType)("FlowType")
    }
  });
  defineType("DeclareOpaqueType", {
    visitor: ["id", "typeParameters", "supertype"],
    aliases: ["FlowDeclaration", "Statement", "Declaration"],
    fields: {
      id: (0, _utils.validateType)("Identifier"),
      typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"),
      supertype: (0, _utils.validateOptionalType)("FlowType"),
      impltype: (0, _utils.validateOptionalType)("FlowType")
    }
  });
  defineType("DeclareVariable", {
    visitor: ["id"],
    aliases: ["FlowDeclaration", "Statement", "Declaration"],
    fields: {
      id: (0, _utils.validateType)("Identifier")
    }
  });
  defineType("DeclareExportDeclaration", {
    visitor: ["declaration", "specifiers", "source"],
    aliases: ["FlowDeclaration", "Statement", "Declaration"],
    fields: {
      declaration: (0, _utils.validateOptionalType)("Flow"),
      specifiers: (0, _utils.validateOptional)((0, _utils.arrayOfType)(["ExportSpecifier", "ExportNamespaceSpecifier"])),
      source: (0, _utils.validateOptionalType)("StringLiteral"),
      default: (0, _utils.validateOptional)((0, _utils.assertValueType)("boolean"))
    }
  });
  defineType("DeclareExportAllDeclaration", {
    visitor: ["source"],
    aliases: ["FlowDeclaration", "Statement", "Declaration"],
    fields: {
      source: (0, _utils.validateType)("StringLiteral"),
      exportKind: (0, _utils.validateOptional)((0, _utils.assertOneOf)("type", "value"))
    }
  });
  defineType("DeclaredPredicate", {
    visitor: ["value"],
    aliases: ["FlowPredicate"],
    fields: {
      value: (0, _utils.validateType)("Flow")
    }
  });
  defineType("ExistsTypeAnnotation", {
    aliases: ["FlowType"]
  });
  defineType("FunctionTypeAnnotation", {
    visitor: ["typeParameters", "params", "rest", "returnType"],
    aliases: ["FlowType"],
    fields: {
      typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"),
      params: (0, _utils.validate)((0, _utils.arrayOfType)("FunctionTypeParam")),
      rest: (0, _utils.validateOptionalType)("FunctionTypeParam"),
      this: (0, _utils.validateOptionalType)("FunctionTypeParam"),
      returnType: (0, _utils.validateType)("FlowType")
    }
  });
  defineType("FunctionTypeParam", {
    visitor: ["name", "typeAnnotation"],
    fields: {
      name: (0, _utils.validateOptionalType)("Identifier"),
      typeAnnotation: (0, _utils.validateType)("FlowType"),
      optional: (0, _utils.validateOptional)((0, _utils.assertValueType)("boolean"))
    }
  });
  defineType("GenericTypeAnnotation", {
    visitor: ["id", "typeParameters"],
    aliases: ["FlowType"],
    fields: {
      id: (0, _utils.validateType)(["Identifier", "QualifiedTypeIdentifier"]),
      typeParameters: (0, _utils.validateOptionalType)("TypeParameterInstantiation")
    }
  });
  defineType("InferredPredicate", {
    aliases: ["FlowPredicate"]
  });
  defineType("InterfaceExtends", {
    visitor: ["id", "typeParameters"],
    fields: {
      id: (0, _utils.validateType)(["Identifier", "QualifiedTypeIdentifier"]),
      typeParameters: (0, _utils.validateOptionalType)("TypeParameterInstantiation")
    }
  });
  defineInterfaceishType("InterfaceDeclaration");
  defineType("InterfaceTypeAnnotation", {
    visitor: ["extends", "body"],
    aliases: ["FlowType"],
    fields: {
      extends: (0, _utils.validateOptional)((0, _utils.arrayOfType)("InterfaceExtends")),
      body: (0, _utils.validateType)("ObjectTypeAnnotation")
    }
  });
  defineType("IntersectionTypeAnnotation", {
    visitor: ["types"],
    aliases: ["FlowType"],
    fields: {
      types: (0, _utils.validate)((0, _utils.arrayOfType)("FlowType"))
    }
  });
  defineType("MixedTypeAnnotation", {
    aliases: ["FlowType", "FlowBaseAnnotation"]
  });
  defineType("EmptyTypeAnnotation", {
    aliases: ["FlowType", "FlowBaseAnnotation"]
  });
  defineType("NullableTypeAnnotation", {
    visitor: ["typeAnnotation"],
    aliases: ["FlowType"],
    fields: {
      typeAnnotation: (0, _utils.validateType)("FlowType")
    }
  });
  defineType("NumberLiteralTypeAnnotation", {
    builder: ["value"],
    aliases: ["FlowType"],
    fields: {
      value: (0, _utils.validate)((0, _utils.assertValueType)("number"))
    }
  });
  defineType("NumberTypeAnnotation", {
    aliases: ["FlowType", "FlowBaseAnnotation"]
  });
  defineType("ObjectTypeAnnotation", {
    visitor: ["properties", "indexers", "callProperties", "internalSlots"],
    aliases: ["FlowType"],
    builder: ["properties", "indexers", "callProperties", "internalSlots", "exact"],
    fields: {
      properties: (0, _utils.validate)((0, _utils.arrayOfType)(["ObjectTypeProperty", "ObjectTypeSpreadProperty"])),
      indexers: {
        validate: (0, _utils.arrayOfType)("ObjectTypeIndexer"),
        optional: true,
        default: []
      },
      callProperties: {
        validate: (0, _utils.arrayOfType)("ObjectTypeCallProperty"),
        optional: true,
        default: []
      },
      internalSlots: {
        validate: (0, _utils.arrayOfType)("ObjectTypeInternalSlot"),
        optional: true,
        default: []
      },
      exact: {
        validate: (0, _utils.assertValueType)("boolean"),
        default: false
      },
      inexact: (0, _utils.validateOptional)((0, _utils.assertValueType)("boolean"))
    }
  });
  defineType("ObjectTypeInternalSlot", {
    visitor: ["id", "value"],
    builder: ["id", "value", "optional", "static", "method"],
    aliases: ["UserWhitespacable"],
    fields: {
      id: (0, _utils.validateType)("Identifier"),
      value: (0, _utils.validateType)("FlowType"),
      optional: (0, _utils.validate)((0, _utils.assertValueType)("boolean")),
      static: (0, _utils.validate)((0, _utils.assertValueType)("boolean")),
      method: (0, _utils.validate)((0, _utils.assertValueType)("boolean"))
    }
  });
  defineType("ObjectTypeCallProperty", {
    visitor: ["value"],
    aliases: ["UserWhitespacable"],
    fields: {
      value: (0, _utils.validateType)("FlowType"),
      static: (0, _utils.validate)((0, _utils.assertValueType)("boolean"))
    }
  });
  defineType("ObjectTypeIndexer", {
    visitor: ["id", "key", "value", "variance"],
    aliases: ["UserWhitespacable"],
    fields: {
      id: (0, _utils.validateOptionalType)("Identifier"),
      key: (0, _utils.validateType)("FlowType"),
      value: (0, _utils.validateType)("FlowType"),
      static: (0, _utils.validate)((0, _utils.assertValueType)("boolean")),
      variance: (0, _utils.validateOptionalType)("Variance")
    }
  });
  defineType("ObjectTypeProperty", {
    visitor: ["key", "value", "variance"],
    aliases: ["UserWhitespacable"],
    fields: {
      key: (0, _utils.validateType)(["Identifier", "StringLiteral"]),
      value: (0, _utils.validateType)("FlowType"),
      kind: (0, _utils.validate)((0, _utils.assertOneOf)("init", "get", "set")),
      static: (0, _utils.validate)((0, _utils.assertValueType)("boolean")),
      proto: (0, _utils.validate)((0, _utils.assertValueType)("boolean")),
      optional: (0, _utils.validate)((0, _utils.assertValueType)("boolean")),
      variance: (0, _utils.validateOptionalType)("Variance"),
      method: (0, _utils.validate)((0, _utils.assertValueType)("boolean"))
    }
  });
  defineType("ObjectTypeSpreadProperty", {
    visitor: ["argument"],
    aliases: ["UserWhitespacable"],
    fields: {
      argument: (0, _utils.validateType)("FlowType")
    }
  });
  defineType("OpaqueType", {
    visitor: ["id", "typeParameters", "supertype", "impltype"],
    aliases: ["FlowDeclaration", "Statement", "Declaration"],
    fields: {
      id: (0, _utils.validateType)("Identifier"),
      typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"),
      supertype: (0, _utils.validateOptionalType)("FlowType"),
      impltype: (0, _utils.validateType)("FlowType")
    }
  });
  defineType("QualifiedTypeIdentifier", {
    visitor: ["id", "qualification"],
    fields: {
      id: (0, _utils.validateType)("Identifier"),
      qualification: (0, _utils.validateType)(["Identifier", "QualifiedTypeIdentifier"])
    }
  });
  defineType("StringLiteralTypeAnnotation", {
    builder: ["value"],
    aliases: ["FlowType"],
    fields: {
      value: (0, _utils.validate)((0, _utils.assertValueType)("string"))
    }
  });
  defineType("StringTypeAnnotation", {
    aliases: ["FlowType", "FlowBaseAnnotation"]
  });
  defineType("SymbolTypeAnnotation", {
    aliases: ["FlowType", "FlowBaseAnnotation"]
  });
  defineType("ThisTypeAnnotation", {
    aliases: ["FlowType", "FlowBaseAnnotation"]
  });
  defineType("TupleTypeAnnotation", {
    visitor: ["types"],
    aliases: ["FlowType"],
    fields: {
      types: (0, _utils.validate)((0, _utils.arrayOfType)("FlowType"))
    }
  });
  defineType("TypeofTypeAnnotation", {
    visitor: ["argument"],
    aliases: ["FlowType"],
    fields: {
      argument: (0, _utils.validateType)("FlowType")
    }
  });
  defineType("TypeAlias", {
    visitor: ["id", "typeParameters", "right"],
    aliases: ["FlowDeclaration", "Statement", "Declaration"],
    fields: {
      id: (0, _utils.validateType)("Identifier"),
      typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"),
      right: (0, _utils.validateType)("FlowType")
    }
  });
  defineType("TypeAnnotation", {
    visitor: ["typeAnnotation"],
    fields: {
      typeAnnotation: (0, _utils.validateType)("FlowType")
    }
  });
  defineType("TypeCastExpression", {
    visitor: ["expression", "typeAnnotation"],
    aliases: ["ExpressionWrapper", "Expression"],
    fields: {
      expression: (0, _utils.validateType)("Expression"),
      typeAnnotation: (0, _utils.validateType)("TypeAnnotation")
    }
  });
  defineType("TypeParameter", {
    visitor: ["bound", "default", "variance"],
    fields: {
      name: (0, _utils.validate)((0, _utils.assertValueType)("string")),
      bound: (0, _utils.validateOptionalType)("TypeAnnotation"),
      default: (0, _utils.validateOptionalType)("FlowType"),
      variance: (0, _utils.validateOptionalType)("Variance")
    }
  });
  defineType("TypeParameterDeclaration", {
    visitor: ["params"],
    fields: {
      params: (0, _utils.validate)((0, _utils.arrayOfType)("TypeParameter"))
    }
  });
  defineType("TypeParameterInstantiation", {
    visitor: ["params"],
    fields: {
      params: (0, _utils.validate)((0, _utils.arrayOfType)("FlowType"))
    }
  });
  defineType("UnionTypeAnnotation", {
    visitor: ["types"],
    aliases: ["FlowType"],
    fields: {
      types: (0, _utils.validate)((0, _utils.arrayOfType)("FlowType"))
    }
  });
  defineType("Variance", {
    builder: ["kind"],
    fields: {
      kind: (0, _utils.validate)((0, _utils.assertOneOf)("minus", "plus"))
    }
  });
  defineType("VoidTypeAnnotation", {
    aliases: ["FlowType", "FlowBaseAnnotation"]
  });
  defineType("EnumDeclaration", {
    aliases: ["Statement", "Declaration"],
    visitor: ["id", "body"],
    fields: {
      id: (0, _utils.validateType)("Identifier"),
      body: (0, _utils.validateType)(["EnumBooleanBody", "EnumNumberBody", "EnumStringBody", "EnumSymbolBody"])
    }
  });
  defineType("EnumBooleanBody", {
    aliases: ["EnumBody"],
    visitor: ["members"],
    fields: {
      explicitType: (0, _utils.validate)((0, _utils.assertValueType)("boolean")),
      members: (0, _utils.validateArrayOfType)("EnumBooleanMember"),
      hasUnknownMembers: (0, _utils.validate)((0, _utils.assertValueType)("boolean"))
    }
  });
  defineType("EnumNumberBody", {
    aliases: ["EnumBody"],
    visitor: ["members"],
    fields: {
      explicitType: (0, _utils.validate)((0, _utils.assertValueType)("boolean")),
      members: (0, _utils.validateArrayOfType)("EnumNumberMember"),
      hasUnknownMembers: (0, _utils.validate)((0, _utils.assertValueType)("boolean"))
    }
  });
  defineType("EnumStringBody", {
    aliases: ["EnumBody"],
    visitor: ["members"],
    fields: {
      explicitType: (0, _utils.validate)((0, _utils.assertValueType)("boolean")),
      members: (0, _utils.validateArrayOfType)(["EnumStringMember", "EnumDefaultedMember"]),
      hasUnknownMembers: (0, _utils.validate)((0, _utils.assertValueType)("boolean"))
    }
  });
  defineType("EnumSymbolBody", {
    aliases: ["EnumBody"],
    visitor: ["members"],
    fields: {
      members: (0, _utils.validateArrayOfType)("EnumDefaultedMember"),
      hasUnknownMembers: (0, _utils.validate)((0, _utils.assertValueType)("boolean"))
    }
  });
  defineType("EnumBooleanMember", {
    aliases: ["EnumMember"],
    visitor: ["id"],
    fields: {
      id: (0, _utils.validateType)("Identifier"),
      init: (0, _utils.validateType)("BooleanLiteral")
    }
  });
  defineType("EnumNumberMember", {
    aliases: ["EnumMember"],
    visitor: ["id", "init"],
    fields: {
      id: (0, _utils.validateType)("Identifier"),
      init: (0, _utils.validateType)("NumericLiteral")
    }
  });
  defineType("EnumStringMember", {
    aliases: ["EnumMember"],
    visitor: ["id", "init"],
    fields: {
      id: (0, _utils.validateType)("Identifier"),
      init: (0, _utils.validateType)("StringLiteral")
    }
  });
  defineType("EnumDefaultedMember", {
    aliases: ["EnumMember"],
    visitor: ["id"],
    fields: {
      id: (0, _utils.validateType)("Identifier")
    }
  });
  defineType("IndexedAccessType", {
    visitor: ["objectType", "indexType"],
    aliases: ["FlowType"],
    fields: {
      objectType: (0, _utils.validateType)("FlowType"),
      indexType: (0, _utils.validateType)("FlowType")
    }
  });
  defineType("OptionalIndexedAccessType", {
    visitor: ["objectType", "indexType"],
    aliases: ["FlowType"],
    fields: {
      objectType: (0, _utils.validateType)("FlowType"),
      indexType: (0, _utils.validateType)("FlowType"),
      optional: (0, _utils.validate)((0, _utils.assertValueType)("boolean"))
    }
  });
  return exports$4o;
}

var exports$4n = {},
  _dewExec$4m = false;
function dew$4m() {
  if (_dewExec$4m) return exports$4n;
  _dewExec$4m = true;
  var _utils = dew$4p();
  const defineType = (0, _utils.defineAliasedType)("JSX");
  defineType("JSXAttribute", {
    visitor: ["name", "value"],
    aliases: ["Immutable"],
    fields: {
      name: {
        validate: (0, _utils.assertNodeType)("JSXIdentifier", "JSXNamespacedName")
      },
      value: {
        optional: true,
        validate: (0, _utils.assertNodeType)("JSXElement", "JSXFragment", "StringLiteral", "JSXExpressionContainer")
      }
    }
  });
  defineType("JSXClosingElement", {
    visitor: ["name"],
    aliases: ["Immutable"],
    fields: {
      name: {
        validate: (0, _utils.assertNodeType)("JSXIdentifier", "JSXMemberExpression", "JSXNamespacedName")
      }
    }
  });
  defineType("JSXElement", {
    builder: ["openingElement", "closingElement", "children", "selfClosing"],
    visitor: ["openingElement", "children", "closingElement"],
    aliases: ["Immutable", "Expression"],
    fields: Object.assign({
      openingElement: {
        validate: (0, _utils.assertNodeType)("JSXOpeningElement")
      },
      closingElement: {
        optional: true,
        validate: (0, _utils.assertNodeType)("JSXClosingElement")
      },
      children: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("JSXText", "JSXExpressionContainer", "JSXSpreadChild", "JSXElement", "JSXFragment")))
      }
    }, {
      selfClosing: {
        validate: (0, _utils.assertValueType)("boolean"),
        optional: true
      }
    })
  });
  defineType("JSXEmptyExpression", {});
  defineType("JSXExpressionContainer", {
    visitor: ["expression"],
    aliases: ["Immutable"],
    fields: {
      expression: {
        validate: (0, _utils.assertNodeType)("Expression", "JSXEmptyExpression")
      }
    }
  });
  defineType("JSXSpreadChild", {
    visitor: ["expression"],
    aliases: ["Immutable"],
    fields: {
      expression: {
        validate: (0, _utils.assertNodeType)("Expression")
      }
    }
  });
  defineType("JSXIdentifier", {
    builder: ["name"],
    fields: {
      name: {
        validate: (0, _utils.assertValueType)("string")
      }
    }
  });
  defineType("JSXMemberExpression", {
    visitor: ["object", "property"],
    fields: {
      object: {
        validate: (0, _utils.assertNodeType)("JSXMemberExpression", "JSXIdentifier")
      },
      property: {
        validate: (0, _utils.assertNodeType)("JSXIdentifier")
      }
    }
  });
  defineType("JSXNamespacedName", {
    visitor: ["namespace", "name"],
    fields: {
      namespace: {
        validate: (0, _utils.assertNodeType)("JSXIdentifier")
      },
      name: {
        validate: (0, _utils.assertNodeType)("JSXIdentifier")
      }
    }
  });
  defineType("JSXOpeningElement", {
    builder: ["name", "attributes", "selfClosing"],
    visitor: ["name", "attributes"],
    aliases: ["Immutable"],
    fields: {
      name: {
        validate: (0, _utils.assertNodeType)("JSXIdentifier", "JSXMemberExpression", "JSXNamespacedName")
      },
      selfClosing: {
        default: false
      },
      attributes: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("JSXAttribute", "JSXSpreadAttribute")))
      },
      typeParameters: {
        validate: (0, _utils.assertNodeType)("TypeParameterInstantiation", "TSTypeParameterInstantiation"),
        optional: true
      }
    }
  });
  defineType("JSXSpreadAttribute", {
    visitor: ["argument"],
    fields: {
      argument: {
        validate: (0, _utils.assertNodeType)("Expression")
      }
    }
  });
  defineType("JSXText", {
    aliases: ["Immutable"],
    builder: ["value"],
    fields: {
      value: {
        validate: (0, _utils.assertValueType)("string")
      }
    }
  });
  defineType("JSXFragment", {
    builder: ["openingFragment", "closingFragment", "children"],
    visitor: ["openingFragment", "children", "closingFragment"],
    aliases: ["Immutable", "Expression"],
    fields: {
      openingFragment: {
        validate: (0, _utils.assertNodeType)("JSXOpeningFragment")
      },
      closingFragment: {
        validate: (0, _utils.assertNodeType)("JSXClosingFragment")
      },
      children: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("JSXText", "JSXExpressionContainer", "JSXSpreadChild", "JSXElement", "JSXFragment")))
      }
    }
  });
  defineType("JSXOpeningFragment", {
    aliases: ["Immutable"]
  });
  defineType("JSXClosingFragment", {
    aliases: ["Immutable"]
  });
  return exports$4n;
}

var exports$4m = {},
  _dewExec$4l = false;
function dew$4l() {
  if (_dewExec$4l) return exports$4m;
  _dewExec$4l = true;
  Object.defineProperty(exports$4m, "__esModule", {
    value: true
  });
  exports$4m.PLACEHOLDERS_FLIPPED_ALIAS = exports$4m.PLACEHOLDERS_ALIAS = exports$4m.PLACEHOLDERS = void 0;
  var _utils = dew$4p();
  const PLACEHOLDERS = exports$4m.PLACEHOLDERS = ["Identifier", "StringLiteral", "Expression", "Statement", "Declaration", "BlockStatement", "ClassBody", "Pattern"];
  const PLACEHOLDERS_ALIAS = exports$4m.PLACEHOLDERS_ALIAS = {
    Declaration: ["Statement"],
    Pattern: ["PatternLike", "LVal"]
  };
  for (const type of PLACEHOLDERS) {
    const alias = _utils.ALIAS_KEYS[type];
    if (alias != null && alias.length) PLACEHOLDERS_ALIAS[type] = alias;
  }
  const PLACEHOLDERS_FLIPPED_ALIAS = exports$4m.PLACEHOLDERS_FLIPPED_ALIAS = {};
  Object.keys(PLACEHOLDERS_ALIAS).forEach(type => {
    PLACEHOLDERS_ALIAS[type].forEach(alias => {
      if (!hasOwnProperty.call(PLACEHOLDERS_FLIPPED_ALIAS, alias)) {
        PLACEHOLDERS_FLIPPED_ALIAS[alias] = [];
      }
      PLACEHOLDERS_FLIPPED_ALIAS[alias].push(type);
    });
  });
  return exports$4m;
}

var exports$4l = {},
  _dewExec$4k = false;
function dew$4k() {
  if (_dewExec$4k) return exports$4l;
  _dewExec$4k = true;
  var _utils = dew$4p();
  var _placeholders = dew$4l();
  const defineType = (0, _utils.defineAliasedType)("Miscellaneous");
  {
    defineType("Noop", {
      visitor: []
    });
  }
  defineType("Placeholder", {
    visitor: [],
    builder: ["expectedNode", "name"],
    fields: {
      name: {
        validate: (0, _utils.assertNodeType)("Identifier")
      },
      expectedNode: {
        validate: (0, _utils.assertOneOf)(..._placeholders.PLACEHOLDERS)
      }
    }
  });
  defineType("V8IntrinsicIdentifier", {
    builder: ["name"],
    fields: {
      name: {
        validate: (0, _utils.assertValueType)("string")
      }
    }
  });
  return exports$4l;
}

var exports$4k = {},
  _dewExec$4j = false;
function dew$4j() {
  if (_dewExec$4j) return exports$4k;
  _dewExec$4j = true;
  var process = _nodeProcess;
  var _utils = dew$4p();
  (0, _utils.default)("ArgumentPlaceholder", {});
  (0, _utils.default)("BindExpression", {
    visitor: ["object", "callee"],
    aliases: ["Expression"],
    fields: !process.env.BABEL_TYPES_8_BREAKING ? {
      object: {
        validate: Object.assign(() => {}, {
          oneOfNodeTypes: ["Expression"]
        })
      },
      callee: {
        validate: Object.assign(() => {}, {
          oneOfNodeTypes: ["Expression"]
        })
      }
    } : {
      object: {
        validate: (0, _utils.assertNodeType)("Expression")
      },
      callee: {
        validate: (0, _utils.assertNodeType)("Expression")
      }
    }
  });
  (0, _utils.default)("ImportAttribute", {
    visitor: ["key", "value"],
    fields: {
      key: {
        validate: (0, _utils.assertNodeType)("Identifier", "StringLiteral")
      },
      value: {
        validate: (0, _utils.assertNodeType)("StringLiteral")
      }
    }
  });
  (0, _utils.default)("Decorator", {
    visitor: ["expression"],
    fields: {
      expression: {
        validate: (0, _utils.assertNodeType)("Expression")
      }
    }
  });
  (0, _utils.default)("DoExpression", {
    visitor: ["body"],
    builder: ["body", "async"],
    aliases: ["Expression"],
    fields: {
      body: {
        validate: (0, _utils.assertNodeType)("BlockStatement")
      },
      async: {
        validate: (0, _utils.assertValueType)("boolean"),
        default: false
      }
    }
  });
  (0, _utils.default)("ExportDefaultSpecifier", {
    visitor: ["exported"],
    aliases: ["ModuleSpecifier"],
    fields: {
      exported: {
        validate: (0, _utils.assertNodeType)("Identifier")
      }
    }
  });
  (0, _utils.default)("RecordExpression", {
    visitor: ["properties"],
    aliases: ["Expression"],
    fields: {
      properties: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("ObjectProperty", "SpreadElement")))
      }
    }
  });
  (0, _utils.default)("TupleExpression", {
    fields: {
      elements: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Expression", "SpreadElement"))),
        default: []
      }
    },
    visitor: ["elements"],
    aliases: ["Expression"]
  });
  (0, _utils.default)("DecimalLiteral", {
    builder: ["value"],
    fields: {
      value: {
        validate: (0, _utils.assertValueType)("string")
      }
    },
    aliases: ["Expression", "Pureish", "Literal", "Immutable"]
  });
  (0, _utils.default)("ModuleExpression", {
    visitor: ["body"],
    fields: {
      body: {
        validate: (0, _utils.assertNodeType)("Program")
      }
    },
    aliases: ["Expression"]
  });
  (0, _utils.default)("TopicReference", {
    aliases: ["Expression"]
  });
  (0, _utils.default)("PipelineTopicExpression", {
    builder: ["expression"],
    visitor: ["expression"],
    fields: {
      expression: {
        validate: (0, _utils.assertNodeType)("Expression")
      }
    },
    aliases: ["Expression"]
  });
  (0, _utils.default)("PipelineBareFunction", {
    builder: ["callee"],
    visitor: ["callee"],
    fields: {
      callee: {
        validate: (0, _utils.assertNodeType)("Expression")
      }
    },
    aliases: ["Expression"]
  });
  (0, _utils.default)("PipelinePrimaryTopicReference", {
    aliases: ["Expression"]
  });
  return exports$4k;
}

var exports$4j = {},
  _dewExec$4i = false;
function dew$4i() {
  if (_dewExec$4i) return exports$4j;
  _dewExec$4i = true;
  var _utils = dew$4p();
  var _core = dew$4o();
  var _is = dew$4w();
  const defineType = (0, _utils.defineAliasedType)("TypeScript");
  const bool = (0, _utils.assertValueType)("boolean");
  const tSFunctionTypeAnnotationCommon = () => ({
    returnType: {
      validate: (0, _utils.assertNodeType)("TSTypeAnnotation", "Noop"),
      optional: true
    },
    typeParameters: {
      validate: (0, _utils.assertNodeType)("TSTypeParameterDeclaration", "Noop"),
      optional: true
    }
  });
  defineType("TSParameterProperty", {
    aliases: ["LVal"],
    visitor: ["parameter"],
    fields: {
      accessibility: {
        validate: (0, _utils.assertOneOf)("public", "private", "protected"),
        optional: true
      },
      readonly: {
        validate: (0, _utils.assertValueType)("boolean"),
        optional: true
      },
      parameter: {
        validate: (0, _utils.assertNodeType)("Identifier", "AssignmentPattern")
      },
      override: {
        validate: (0, _utils.assertValueType)("boolean"),
        optional: true
      },
      decorators: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))),
        optional: true
      }
    }
  });
  defineType("TSDeclareFunction", {
    aliases: ["Statement", "Declaration"],
    visitor: ["id", "typeParameters", "params", "returnType"],
    fields: Object.assign({}, (0, _core.functionDeclarationCommon)(), tSFunctionTypeAnnotationCommon())
  });
  defineType("TSDeclareMethod", {
    visitor: ["decorators", "key", "typeParameters", "params", "returnType"],
    fields: Object.assign({}, (0, _core.classMethodOrDeclareMethodCommon)(), tSFunctionTypeAnnotationCommon())
  });
  defineType("TSQualifiedName", {
    aliases: ["TSEntityName"],
    visitor: ["left", "right"],
    fields: {
      left: (0, _utils.validateType)("TSEntityName"),
      right: (0, _utils.validateType)("Identifier")
    }
  });
  const signatureDeclarationCommon = () => ({
    typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterDeclaration"),
    ["parameters"]: (0, _utils.validateArrayOfType)(["ArrayPattern", "Identifier", "ObjectPattern", "RestElement"]),
    ["typeAnnotation"]: (0, _utils.validateOptionalType)("TSTypeAnnotation")
  });
  const callConstructSignatureDeclaration = {
    aliases: ["TSTypeElement"],
    visitor: ["typeParameters", "parameters", "typeAnnotation"],
    fields: signatureDeclarationCommon()
  };
  defineType("TSCallSignatureDeclaration", callConstructSignatureDeclaration);
  defineType("TSConstructSignatureDeclaration", callConstructSignatureDeclaration);
  const namedTypeElementCommon = () => ({
    key: (0, _utils.validateType)("Expression"),
    computed: {
      default: false
    },
    optional: (0, _utils.validateOptional)(bool)
  });
  defineType("TSPropertySignature", {
    aliases: ["TSTypeElement"],
    visitor: ["key", "typeAnnotation"],
    fields: Object.assign({}, namedTypeElementCommon(), {
      readonly: (0, _utils.validateOptional)(bool),
      typeAnnotation: (0, _utils.validateOptionalType)("TSTypeAnnotation"),
      kind: {
        validate: (0, _utils.assertOneOf)("get", "set")
      }
    })
  });
  defineType("TSMethodSignature", {
    aliases: ["TSTypeElement"],
    visitor: ["key", "typeParameters", "parameters", "typeAnnotation"],
    fields: Object.assign({}, signatureDeclarationCommon(), namedTypeElementCommon(), {
      kind: {
        validate: (0, _utils.assertOneOf)("method", "get", "set")
      }
    })
  });
  defineType("TSIndexSignature", {
    aliases: ["TSTypeElement"],
    visitor: ["parameters", "typeAnnotation"],
    fields: {
      readonly: (0, _utils.validateOptional)(bool),
      static: (0, _utils.validateOptional)(bool),
      parameters: (0, _utils.validateArrayOfType)("Identifier"),
      typeAnnotation: (0, _utils.validateOptionalType)("TSTypeAnnotation")
    }
  });
  const tsKeywordTypes = ["TSAnyKeyword", "TSBooleanKeyword", "TSBigIntKeyword", "TSIntrinsicKeyword", "TSNeverKeyword", "TSNullKeyword", "TSNumberKeyword", "TSObjectKeyword", "TSStringKeyword", "TSSymbolKeyword", "TSUndefinedKeyword", "TSUnknownKeyword", "TSVoidKeyword"];
  for (const type of tsKeywordTypes) {
    defineType(type, {
      aliases: ["TSType", "TSBaseType"],
      visitor: [],
      fields: {}
    });
  }
  defineType("TSThisType", {
    aliases: ["TSType", "TSBaseType"],
    visitor: [],
    fields: {}
  });
  const fnOrCtrBase = {
    aliases: ["TSType"],
    visitor: ["typeParameters", "parameters", "typeAnnotation"]
  };
  defineType("TSFunctionType", Object.assign({}, fnOrCtrBase, {
    fields: signatureDeclarationCommon()
  }));
  defineType("TSConstructorType", Object.assign({}, fnOrCtrBase, {
    fields: Object.assign({}, signatureDeclarationCommon(), {
      abstract: (0, _utils.validateOptional)(bool)
    })
  }));
  defineType("TSTypeReference", {
    aliases: ["TSType"],
    visitor: ["typeName", "typeParameters"],
    fields: {
      typeName: (0, _utils.validateType)("TSEntityName"),
      typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterInstantiation")
    }
  });
  defineType("TSTypePredicate", {
    aliases: ["TSType"],
    visitor: ["parameterName", "typeAnnotation"],
    builder: ["parameterName", "typeAnnotation", "asserts"],
    fields: {
      parameterName: (0, _utils.validateType)(["Identifier", "TSThisType"]),
      typeAnnotation: (0, _utils.validateOptionalType)("TSTypeAnnotation"),
      asserts: (0, _utils.validateOptional)(bool)
    }
  });
  defineType("TSTypeQuery", {
    aliases: ["TSType"],
    visitor: ["exprName", "typeParameters"],
    fields: {
      exprName: (0, _utils.validateType)(["TSEntityName", "TSImportType"]),
      typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterInstantiation")
    }
  });
  defineType("TSTypeLiteral", {
    aliases: ["TSType"],
    visitor: ["members"],
    fields: {
      members: (0, _utils.validateArrayOfType)("TSTypeElement")
    }
  });
  defineType("TSArrayType", {
    aliases: ["TSType"],
    visitor: ["elementType"],
    fields: {
      elementType: (0, _utils.validateType)("TSType")
    }
  });
  defineType("TSTupleType", {
    aliases: ["TSType"],
    visitor: ["elementTypes"],
    fields: {
      elementTypes: (0, _utils.validateArrayOfType)(["TSType", "TSNamedTupleMember"])
    }
  });
  defineType("TSOptionalType", {
    aliases: ["TSType"],
    visitor: ["typeAnnotation"],
    fields: {
      typeAnnotation: (0, _utils.validateType)("TSType")
    }
  });
  defineType("TSRestType", {
    aliases: ["TSType"],
    visitor: ["typeAnnotation"],
    fields: {
      typeAnnotation: (0, _utils.validateType)("TSType")
    }
  });
  defineType("TSNamedTupleMember", {
    visitor: ["label", "elementType"],
    builder: ["label", "elementType", "optional"],
    fields: {
      label: (0, _utils.validateType)("Identifier"),
      optional: {
        validate: bool,
        default: false
      },
      elementType: (0, _utils.validateType)("TSType")
    }
  });
  const unionOrIntersection = {
    aliases: ["TSType"],
    visitor: ["types"],
    fields: {
      types: (0, _utils.validateArrayOfType)("TSType")
    }
  };
  defineType("TSUnionType", unionOrIntersection);
  defineType("TSIntersectionType", unionOrIntersection);
  defineType("TSConditionalType", {
    aliases: ["TSType"],
    visitor: ["checkType", "extendsType", "trueType", "falseType"],
    fields: {
      checkType: (0, _utils.validateType)("TSType"),
      extendsType: (0, _utils.validateType)("TSType"),
      trueType: (0, _utils.validateType)("TSType"),
      falseType: (0, _utils.validateType)("TSType")
    }
  });
  defineType("TSInferType", {
    aliases: ["TSType"],
    visitor: ["typeParameter"],
    fields: {
      typeParameter: (0, _utils.validateType)("TSTypeParameter")
    }
  });
  defineType("TSParenthesizedType", {
    aliases: ["TSType"],
    visitor: ["typeAnnotation"],
    fields: {
      typeAnnotation: (0, _utils.validateType)("TSType")
    }
  });
  defineType("TSTypeOperator", {
    aliases: ["TSType"],
    visitor: ["typeAnnotation"],
    fields: {
      operator: (0, _utils.validate)((0, _utils.assertValueType)("string")),
      typeAnnotation: (0, _utils.validateType)("TSType")
    }
  });
  defineType("TSIndexedAccessType", {
    aliases: ["TSType"],
    visitor: ["objectType", "indexType"],
    fields: {
      objectType: (0, _utils.validateType)("TSType"),
      indexType: (0, _utils.validateType)("TSType")
    }
  });
  defineType("TSMappedType", {
    aliases: ["TSType"],
    visitor: ["typeParameter", "typeAnnotation", "nameType"],
    fields: {
      readonly: (0, _utils.validateOptional)((0, _utils.assertOneOf)(true, false, "+", "-")),
      typeParameter: (0, _utils.validateType)("TSTypeParameter"),
      optional: (0, _utils.validateOptional)((0, _utils.assertOneOf)(true, false, "+", "-")),
      typeAnnotation: (0, _utils.validateOptionalType)("TSType"),
      nameType: (0, _utils.validateOptionalType)("TSType")
    }
  });
  defineType("TSLiteralType", {
    aliases: ["TSType", "TSBaseType"],
    visitor: ["literal"],
    fields: {
      literal: {
        validate: function () {
          const unaryExpression = (0, _utils.assertNodeType)("NumericLiteral", "BigIntLiteral");
          const unaryOperator = (0, _utils.assertOneOf)("-");
          const literal = (0, _utils.assertNodeType)("NumericLiteral", "StringLiteral", "BooleanLiteral", "BigIntLiteral", "TemplateLiteral");
          function validator(parent, key, node) {
            if ((0, _is.default)("UnaryExpression", node)) {
              unaryOperator(node, "operator", node.operator);
              unaryExpression(node, "argument", node.argument);
            } else {
              literal(parent, key, node);
            }
          }
          validator.oneOfNodeTypes = ["NumericLiteral", "StringLiteral", "BooleanLiteral", "BigIntLiteral", "TemplateLiteral", "UnaryExpression"];
          return validator;
        }()
      }
    }
  });
  defineType("TSExpressionWithTypeArguments", {
    aliases: ["TSType"],
    visitor: ["expression", "typeParameters"],
    fields: {
      expression: (0, _utils.validateType)("TSEntityName"),
      typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterInstantiation")
    }
  });
  defineType("TSInterfaceDeclaration", {
    aliases: ["Statement", "Declaration"],
    visitor: ["id", "typeParameters", "extends", "body"],
    fields: {
      declare: (0, _utils.validateOptional)(bool),
      id: (0, _utils.validateType)("Identifier"),
      typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterDeclaration"),
      extends: (0, _utils.validateOptional)((0, _utils.arrayOfType)("TSExpressionWithTypeArguments")),
      body: (0, _utils.validateType)("TSInterfaceBody")
    }
  });
  defineType("TSInterfaceBody", {
    visitor: ["body"],
    fields: {
      body: (0, _utils.validateArrayOfType)("TSTypeElement")
    }
  });
  defineType("TSTypeAliasDeclaration", {
    aliases: ["Statement", "Declaration"],
    visitor: ["id", "typeParameters", "typeAnnotation"],
    fields: {
      declare: (0, _utils.validateOptional)(bool),
      id: (0, _utils.validateType)("Identifier"),
      typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterDeclaration"),
      typeAnnotation: (0, _utils.validateType)("TSType")
    }
  });
  defineType("TSInstantiationExpression", {
    aliases: ["Expression"],
    visitor: ["expression", "typeParameters"],
    fields: {
      expression: (0, _utils.validateType)("Expression"),
      typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterInstantiation")
    }
  });
  const TSTypeExpression = {
    aliases: ["Expression", "LVal", "PatternLike"],
    visitor: ["expression", "typeAnnotation"],
    fields: {
      expression: (0, _utils.validateType)("Expression"),
      typeAnnotation: (0, _utils.validateType)("TSType")
    }
  };
  defineType("TSAsExpression", TSTypeExpression);
  defineType("TSSatisfiesExpression", TSTypeExpression);
  defineType("TSTypeAssertion", {
    aliases: ["Expression", "LVal", "PatternLike"],
    visitor: ["typeAnnotation", "expression"],
    fields: {
      typeAnnotation: (0, _utils.validateType)("TSType"),
      expression: (0, _utils.validateType)("Expression")
    }
  });
  defineType("TSEnumDeclaration", {
    aliases: ["Statement", "Declaration"],
    visitor: ["id", "members"],
    fields: {
      declare: (0, _utils.validateOptional)(bool),
      const: (0, _utils.validateOptional)(bool),
      id: (0, _utils.validateType)("Identifier"),
      members: (0, _utils.validateArrayOfType)("TSEnumMember"),
      initializer: (0, _utils.validateOptionalType)("Expression")
    }
  });
  defineType("TSEnumMember", {
    visitor: ["id", "initializer"],
    fields: {
      id: (0, _utils.validateType)(["Identifier", "StringLiteral"]),
      initializer: (0, _utils.validateOptionalType)("Expression")
    }
  });
  defineType("TSModuleDeclaration", {
    aliases: ["Statement", "Declaration"],
    visitor: ["id", "body"],
    fields: {
      declare: (0, _utils.validateOptional)(bool),
      global: (0, _utils.validateOptional)(bool),
      id: (0, _utils.validateType)(["Identifier", "StringLiteral"]),
      body: (0, _utils.validateType)(["TSModuleBlock", "TSModuleDeclaration"])
    }
  });
  defineType("TSModuleBlock", {
    aliases: ["Scopable", "Block", "BlockParent", "FunctionParent"],
    visitor: ["body"],
    fields: {
      body: (0, _utils.validateArrayOfType)("Statement")
    }
  });
  defineType("TSImportType", {
    aliases: ["TSType"],
    visitor: ["argument", "qualifier", "typeParameters"],
    fields: {
      argument: (0, _utils.validateType)("StringLiteral"),
      qualifier: (0, _utils.validateOptionalType)("TSEntityName"),
      typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterInstantiation"),
      options: {
        validate: (0, _utils.assertNodeType)("Expression"),
        optional: true
      }
    }
  });
  defineType("TSImportEqualsDeclaration", {
    aliases: ["Statement"],
    visitor: ["id", "moduleReference"],
    fields: {
      isExport: (0, _utils.validate)(bool),
      id: (0, _utils.validateType)("Identifier"),
      moduleReference: (0, _utils.validateType)(["TSEntityName", "TSExternalModuleReference"]),
      importKind: {
        validate: (0, _utils.assertOneOf)("type", "value"),
        optional: true
      }
    }
  });
  defineType("TSExternalModuleReference", {
    visitor: ["expression"],
    fields: {
      expression: (0, _utils.validateType)("StringLiteral")
    }
  });
  defineType("TSNonNullExpression", {
    aliases: ["Expression", "LVal", "PatternLike"],
    visitor: ["expression"],
    fields: {
      expression: (0, _utils.validateType)("Expression")
    }
  });
  defineType("TSExportAssignment", {
    aliases: ["Statement"],
    visitor: ["expression"],
    fields: {
      expression: (0, _utils.validateType)("Expression")
    }
  });
  defineType("TSNamespaceExportDeclaration", {
    aliases: ["Statement"],
    visitor: ["id"],
    fields: {
      id: (0, _utils.validateType)("Identifier")
    }
  });
  defineType("TSTypeAnnotation", {
    visitor: ["typeAnnotation"],
    fields: {
      typeAnnotation: {
        validate: (0, _utils.assertNodeType)("TSType")
      }
    }
  });
  defineType("TSTypeParameterInstantiation", {
    visitor: ["params"],
    fields: {
      params: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("TSType")))
      }
    }
  });
  defineType("TSTypeParameterDeclaration", {
    visitor: ["params"],
    fields: {
      params: {
        validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("TSTypeParameter")))
      }
    }
  });
  defineType("TSTypeParameter", {
    builder: ["constraint", "default", "name"],
    visitor: ["constraint", "default"],
    fields: {
      name: {
        validate: (0, _utils.assertValueType)("string")
      },
      in: {
        validate: (0, _utils.assertValueType)("boolean"),
        optional: true
      },
      out: {
        validate: (0, _utils.assertValueType)("boolean"),
        optional: true
      },
      const: {
        validate: (0, _utils.assertValueType)("boolean"),
        optional: true
      },
      constraint: {
        validate: (0, _utils.assertNodeType)("TSType"),
        optional: true
      },
      default: {
        validate: (0, _utils.assertNodeType)("TSType"),
        optional: true
      }
    }
  });
  return exports$4j;
}

var exports$4i = {},
  _dewExec$4h = false;
function dew$4h() {
  if (_dewExec$4h) return exports$4i;
  _dewExec$4h = true;
  Object.defineProperty(exports$4i, "__esModule", {
    value: true
  });
  exports$4i.DEPRECATED_ALIASES = void 0;
  exports$4i.DEPRECATED_ALIASES = {
    ModuleDeclaration: "ImportOrExportDeclaration"
  };
  return exports$4i;
}

var exports$4h = {},
  _dewExec$4g = false;
function dew$4g() {
  if (_dewExec$4g) return exports$4h;
  _dewExec$4g = true;
  Object.defineProperty(exports$4h, "__esModule", {
    value: true
  });
  Object.defineProperty(exports$4h, "ALIAS_KEYS", {
    enumerable: true,
    get: function () {
      return _utils.ALIAS_KEYS;
    }
  });
  Object.defineProperty(exports$4h, "BUILDER_KEYS", {
    enumerable: true,
    get: function () {
      return _utils.BUILDER_KEYS;
    }
  });
  Object.defineProperty(exports$4h, "DEPRECATED_ALIASES", {
    enumerable: true,
    get: function () {
      return _deprecatedAliases.DEPRECATED_ALIASES;
    }
  });
  Object.defineProperty(exports$4h, "DEPRECATED_KEYS", {
    enumerable: true,
    get: function () {
      return _utils.DEPRECATED_KEYS;
    }
  });
  Object.defineProperty(exports$4h, "FLIPPED_ALIAS_KEYS", {
    enumerable: true,
    get: function () {
      return _utils.FLIPPED_ALIAS_KEYS;
    }
  });
  Object.defineProperty(exports$4h, "NODE_FIELDS", {
    enumerable: true,
    get: function () {
      return _utils.NODE_FIELDS;
    }
  });
  Object.defineProperty(exports$4h, "NODE_PARENT_VALIDATIONS", {
    enumerable: true,
    get: function () {
      return _utils.NODE_PARENT_VALIDATIONS;
    }
  });
  Object.defineProperty(exports$4h, "PLACEHOLDERS", {
    enumerable: true,
    get: function () {
      return _placeholders.PLACEHOLDERS;
    }
  });
  Object.defineProperty(exports$4h, "PLACEHOLDERS_ALIAS", {
    enumerable: true,
    get: function () {
      return _placeholders.PLACEHOLDERS_ALIAS;
    }
  });
  Object.defineProperty(exports$4h, "PLACEHOLDERS_FLIPPED_ALIAS", {
    enumerable: true,
    get: function () {
      return _placeholders.PLACEHOLDERS_FLIPPED_ALIAS;
    }
  });
  exports$4h.TYPES = void 0;
  Object.defineProperty(exports$4h, "VISITOR_KEYS", {
    enumerable: true,
    get: function () {
      return _utils.VISITOR_KEYS;
    }
  });
  var _toFastProperties = dew$4z();
  dew$4o();
  dew$4n();
  dew$4m();
  dew$4k();
  dew$4j();
  dew$4i();
  var _utils = dew$4p();
  var _placeholders = dew$4l();
  var _deprecatedAliases = dew$4h();
  Object.keys(_deprecatedAliases.DEPRECATED_ALIASES).forEach(deprecatedAlias => {
    _utils.FLIPPED_ALIAS_KEYS[deprecatedAlias] = _utils.FLIPPED_ALIAS_KEYS[_deprecatedAliases.DEPRECATED_ALIASES[deprecatedAlias]];
  });
  _toFastProperties(_utils.VISITOR_KEYS);
  _toFastProperties(_utils.ALIAS_KEYS);
  _toFastProperties(_utils.FLIPPED_ALIAS_KEYS);
  _toFastProperties(_utils.NODE_FIELDS);
  _toFastProperties(_utils.BUILDER_KEYS);
  _toFastProperties(_utils.DEPRECATED_KEYS);
  _toFastProperties(_placeholders.PLACEHOLDERS_ALIAS);
  _toFastProperties(_placeholders.PLACEHOLDERS_FLIPPED_ALIAS);
  exports$4h.TYPES = [].concat(Object.keys(_utils.VISITOR_KEYS), Object.keys(_utils.FLIPPED_ALIAS_KEYS), Object.keys(_utils.DEPRECATED_KEYS));
  return exports$4h;
}

var exports$4g = {},
  _dewExec$4f = false;
function dew$4f() {
  if (_dewExec$4f) return exports$4g;
  _dewExec$4f = true;
  Object.defineProperty(exports$4g, "__esModule", {
    value: true
  });
  exports$4g.default = validate;
  exports$4g.validateChild = validateChild;
  exports$4g.validateField = validateField;
  var _index = dew$4g();
  function validate(node, key, val) {
    if (!node) return;
    const fields = _index.NODE_FIELDS[node.type];
    if (!fields) return;
    const field = fields[key];
    validateField(node, key, val, field);
    validateChild(node, key, val);
  }
  function validateField(node, key, val, field) {
    if (!(field != null && field.validate)) return;
    if (field.optional && val == null) return;
    field.validate(node, key, val);
  }
  function validateChild(node, key, val) {
    if (val == null) return;
    const validate = _index.NODE_PARENT_VALIDATIONS[val.type];
    if (!validate) return;
    validate(node, key, val);
  }
  return exports$4g;
}

var exports$4f = {},
  _dewExec$4e = false;
function dew$4e() {
  if (_dewExec$4e) return exports$4f;
  _dewExec$4e = true;
  Object.defineProperty(exports$4f, "__esModule", {
    value: true
  });
  exports$4f.default = validateNode;
  var _validate = dew$4f();
  var _index = dew$3i();
  function validateNode(node) {
    const keys = _index.BUILDER_KEYS[node.type];
    for (const key of keys) {
      (0, _validate.default)(node, key, node[key]);
    }
    return node;
  }
  return exports$4f;
}

var exports$4e = {},
  _dewExec$4d = false;
function dew$4d() {
  if (_dewExec$4d) return exports$4e;
  _dewExec$4d = true;
  Object.defineProperty(exports$4e, "__esModule", {
    value: true
  });
  exports$4e.anyTypeAnnotation = anyTypeAnnotation;
  exports$4e.argumentPlaceholder = argumentPlaceholder;
  exports$4e.arrayExpression = arrayExpression;
  exports$4e.arrayPattern = arrayPattern;
  exports$4e.arrayTypeAnnotation = arrayTypeAnnotation;
  exports$4e.arrowFunctionExpression = arrowFunctionExpression;
  exports$4e.assignmentExpression = assignmentExpression;
  exports$4e.assignmentPattern = assignmentPattern;
  exports$4e.awaitExpression = awaitExpression;
  exports$4e.bigIntLiteral = bigIntLiteral;
  exports$4e.binaryExpression = binaryExpression;
  exports$4e.bindExpression = bindExpression;
  exports$4e.blockStatement = blockStatement;
  exports$4e.booleanLiteral = booleanLiteral;
  exports$4e.booleanLiteralTypeAnnotation = booleanLiteralTypeAnnotation;
  exports$4e.booleanTypeAnnotation = booleanTypeAnnotation;
  exports$4e.breakStatement = breakStatement;
  exports$4e.callExpression = callExpression;
  exports$4e.catchClause = catchClause;
  exports$4e.classAccessorProperty = classAccessorProperty;
  exports$4e.classBody = classBody;
  exports$4e.classDeclaration = classDeclaration;
  exports$4e.classExpression = classExpression;
  exports$4e.classImplements = classImplements;
  exports$4e.classMethod = classMethod;
  exports$4e.classPrivateMethod = classPrivateMethod;
  exports$4e.classPrivateProperty = classPrivateProperty;
  exports$4e.classProperty = classProperty;
  exports$4e.conditionalExpression = conditionalExpression;
  exports$4e.continueStatement = continueStatement;
  exports$4e.debuggerStatement = debuggerStatement;
  exports$4e.decimalLiteral = decimalLiteral;
  exports$4e.declareClass = declareClass;
  exports$4e.declareExportAllDeclaration = declareExportAllDeclaration;
  exports$4e.declareExportDeclaration = declareExportDeclaration;
  exports$4e.declareFunction = declareFunction;
  exports$4e.declareInterface = declareInterface;
  exports$4e.declareModule = declareModule;
  exports$4e.declareModuleExports = declareModuleExports;
  exports$4e.declareOpaqueType = declareOpaqueType;
  exports$4e.declareTypeAlias = declareTypeAlias;
  exports$4e.declareVariable = declareVariable;
  exports$4e.declaredPredicate = declaredPredicate;
  exports$4e.decorator = decorator;
  exports$4e.directive = directive;
  exports$4e.directiveLiteral = directiveLiteral;
  exports$4e.doExpression = doExpression;
  exports$4e.doWhileStatement = doWhileStatement;
  exports$4e.emptyStatement = emptyStatement;
  exports$4e.emptyTypeAnnotation = emptyTypeAnnotation;
  exports$4e.enumBooleanBody = enumBooleanBody;
  exports$4e.enumBooleanMember = enumBooleanMember;
  exports$4e.enumDeclaration = enumDeclaration;
  exports$4e.enumDefaultedMember = enumDefaultedMember;
  exports$4e.enumNumberBody = enumNumberBody;
  exports$4e.enumNumberMember = enumNumberMember;
  exports$4e.enumStringBody = enumStringBody;
  exports$4e.enumStringMember = enumStringMember;
  exports$4e.enumSymbolBody = enumSymbolBody;
  exports$4e.existsTypeAnnotation = existsTypeAnnotation;
  exports$4e.exportAllDeclaration = exportAllDeclaration;
  exports$4e.exportDefaultDeclaration = exportDefaultDeclaration;
  exports$4e.exportDefaultSpecifier = exportDefaultSpecifier;
  exports$4e.exportNamedDeclaration = exportNamedDeclaration;
  exports$4e.exportNamespaceSpecifier = exportNamespaceSpecifier;
  exports$4e.exportSpecifier = exportSpecifier;
  exports$4e.expressionStatement = expressionStatement;
  exports$4e.file = file;
  exports$4e.forInStatement = forInStatement;
  exports$4e.forOfStatement = forOfStatement;
  exports$4e.forStatement = forStatement;
  exports$4e.functionDeclaration = functionDeclaration;
  exports$4e.functionExpression = functionExpression;
  exports$4e.functionTypeAnnotation = functionTypeAnnotation;
  exports$4e.functionTypeParam = functionTypeParam;
  exports$4e.genericTypeAnnotation = genericTypeAnnotation;
  exports$4e.identifier = identifier;
  exports$4e.ifStatement = ifStatement;
  exports$4e.import = _import;
  exports$4e.importAttribute = importAttribute;
  exports$4e.importDeclaration = importDeclaration;
  exports$4e.importDefaultSpecifier = importDefaultSpecifier;
  exports$4e.importExpression = importExpression;
  exports$4e.importNamespaceSpecifier = importNamespaceSpecifier;
  exports$4e.importSpecifier = importSpecifier;
  exports$4e.indexedAccessType = indexedAccessType;
  exports$4e.inferredPredicate = inferredPredicate;
  exports$4e.interfaceDeclaration = interfaceDeclaration;
  exports$4e.interfaceExtends = interfaceExtends;
  exports$4e.interfaceTypeAnnotation = interfaceTypeAnnotation;
  exports$4e.interpreterDirective = interpreterDirective;
  exports$4e.intersectionTypeAnnotation = intersectionTypeAnnotation;
  exports$4e.jSXAttribute = exports$4e.jsxAttribute = jsxAttribute;
  exports$4e.jSXClosingElement = exports$4e.jsxClosingElement = jsxClosingElement;
  exports$4e.jSXClosingFragment = exports$4e.jsxClosingFragment = jsxClosingFragment;
  exports$4e.jSXElement = exports$4e.jsxElement = jsxElement;
  exports$4e.jSXEmptyExpression = exports$4e.jsxEmptyExpression = jsxEmptyExpression;
  exports$4e.jSXExpressionContainer = exports$4e.jsxExpressionContainer = jsxExpressionContainer;
  exports$4e.jSXFragment = exports$4e.jsxFragment = jsxFragment;
  exports$4e.jSXIdentifier = exports$4e.jsxIdentifier = jsxIdentifier;
  exports$4e.jSXMemberExpression = exports$4e.jsxMemberExpression = jsxMemberExpression;
  exports$4e.jSXNamespacedName = exports$4e.jsxNamespacedName = jsxNamespacedName;
  exports$4e.jSXOpeningElement = exports$4e.jsxOpeningElement = jsxOpeningElement;
  exports$4e.jSXOpeningFragment = exports$4e.jsxOpeningFragment = jsxOpeningFragment;
  exports$4e.jSXSpreadAttribute = exports$4e.jsxSpreadAttribute = jsxSpreadAttribute;
  exports$4e.jSXSpreadChild = exports$4e.jsxSpreadChild = jsxSpreadChild;
  exports$4e.jSXText = exports$4e.jsxText = jsxText;
  exports$4e.labeledStatement = labeledStatement;
  exports$4e.logicalExpression = logicalExpression;
  exports$4e.memberExpression = memberExpression;
  exports$4e.metaProperty = metaProperty;
  exports$4e.mixedTypeAnnotation = mixedTypeAnnotation;
  exports$4e.moduleExpression = moduleExpression;
  exports$4e.newExpression = newExpression;
  exports$4e.noop = noop;
  exports$4e.nullLiteral = nullLiteral;
  exports$4e.nullLiteralTypeAnnotation = nullLiteralTypeAnnotation;
  exports$4e.nullableTypeAnnotation = nullableTypeAnnotation;
  exports$4e.numberLiteral = NumberLiteral;
  exports$4e.numberLiteralTypeAnnotation = numberLiteralTypeAnnotation;
  exports$4e.numberTypeAnnotation = numberTypeAnnotation;
  exports$4e.numericLiteral = numericLiteral;
  exports$4e.objectExpression = objectExpression;
  exports$4e.objectMethod = objectMethod;
  exports$4e.objectPattern = objectPattern;
  exports$4e.objectProperty = objectProperty;
  exports$4e.objectTypeAnnotation = objectTypeAnnotation;
  exports$4e.objectTypeCallProperty = objectTypeCallProperty;
  exports$4e.objectTypeIndexer = objectTypeIndexer;
  exports$4e.objectTypeInternalSlot = objectTypeInternalSlot;
  exports$4e.objectTypeProperty = objectTypeProperty;
  exports$4e.objectTypeSpreadProperty = objectTypeSpreadProperty;
  exports$4e.opaqueType = opaqueType;
  exports$4e.optionalCallExpression = optionalCallExpression;
  exports$4e.optionalIndexedAccessType = optionalIndexedAccessType;
  exports$4e.optionalMemberExpression = optionalMemberExpression;
  exports$4e.parenthesizedExpression = parenthesizedExpression;
  exports$4e.pipelineBareFunction = pipelineBareFunction;
  exports$4e.pipelinePrimaryTopicReference = pipelinePrimaryTopicReference;
  exports$4e.pipelineTopicExpression = pipelineTopicExpression;
  exports$4e.placeholder = placeholder;
  exports$4e.privateName = privateName;
  exports$4e.program = program;
  exports$4e.qualifiedTypeIdentifier = qualifiedTypeIdentifier;
  exports$4e.recordExpression = recordExpression;
  exports$4e.regExpLiteral = regExpLiteral;
  exports$4e.regexLiteral = RegexLiteral;
  exports$4e.restElement = restElement;
  exports$4e.restProperty = RestProperty;
  exports$4e.returnStatement = returnStatement;
  exports$4e.sequenceExpression = sequenceExpression;
  exports$4e.spreadElement = spreadElement;
  exports$4e.spreadProperty = SpreadProperty;
  exports$4e.staticBlock = staticBlock;
  exports$4e.stringLiteral = stringLiteral;
  exports$4e.stringLiteralTypeAnnotation = stringLiteralTypeAnnotation;
  exports$4e.stringTypeAnnotation = stringTypeAnnotation;
  exports$4e.super = _super;
  exports$4e.switchCase = switchCase;
  exports$4e.switchStatement = switchStatement;
  exports$4e.symbolTypeAnnotation = symbolTypeAnnotation;
  exports$4e.taggedTemplateExpression = taggedTemplateExpression;
  exports$4e.templateElement = templateElement;
  exports$4e.templateLiteral = templateLiteral;
  exports$4e.thisExpression = thisExpression;
  exports$4e.thisTypeAnnotation = thisTypeAnnotation;
  exports$4e.throwStatement = throwStatement;
  exports$4e.topicReference = topicReference;
  exports$4e.tryStatement = tryStatement;
  exports$4e.tSAnyKeyword = exports$4e.tsAnyKeyword = tsAnyKeyword;
  exports$4e.tSArrayType = exports$4e.tsArrayType = tsArrayType;
  exports$4e.tSAsExpression = exports$4e.tsAsExpression = tsAsExpression;
  exports$4e.tSBigIntKeyword = exports$4e.tsBigIntKeyword = tsBigIntKeyword;
  exports$4e.tSBooleanKeyword = exports$4e.tsBooleanKeyword = tsBooleanKeyword;
  exports$4e.tSCallSignatureDeclaration = exports$4e.tsCallSignatureDeclaration = tsCallSignatureDeclaration;
  exports$4e.tSConditionalType = exports$4e.tsConditionalType = tsConditionalType;
  exports$4e.tSConstructSignatureDeclaration = exports$4e.tsConstructSignatureDeclaration = tsConstructSignatureDeclaration;
  exports$4e.tSConstructorType = exports$4e.tsConstructorType = tsConstructorType;
  exports$4e.tSDeclareFunction = exports$4e.tsDeclareFunction = tsDeclareFunction;
  exports$4e.tSDeclareMethod = exports$4e.tsDeclareMethod = tsDeclareMethod;
  exports$4e.tSEnumDeclaration = exports$4e.tsEnumDeclaration = tsEnumDeclaration;
  exports$4e.tSEnumMember = exports$4e.tsEnumMember = tsEnumMember;
  exports$4e.tSExportAssignment = exports$4e.tsExportAssignment = tsExportAssignment;
  exports$4e.tSExpressionWithTypeArguments = exports$4e.tsExpressionWithTypeArguments = tsExpressionWithTypeArguments;
  exports$4e.tSExternalModuleReference = exports$4e.tsExternalModuleReference = tsExternalModuleReference;
  exports$4e.tSFunctionType = exports$4e.tsFunctionType = tsFunctionType;
  exports$4e.tSImportEqualsDeclaration = exports$4e.tsImportEqualsDeclaration = tsImportEqualsDeclaration;
  exports$4e.tSImportType = exports$4e.tsImportType = tsImportType;
  exports$4e.tSIndexSignature = exports$4e.tsIndexSignature = tsIndexSignature;
  exports$4e.tSIndexedAccessType = exports$4e.tsIndexedAccessType = tsIndexedAccessType;
  exports$4e.tSInferType = exports$4e.tsInferType = tsInferType;
  exports$4e.tSInstantiationExpression = exports$4e.tsInstantiationExpression = tsInstantiationExpression;
  exports$4e.tSInterfaceBody = exports$4e.tsInterfaceBody = tsInterfaceBody;
  exports$4e.tSInterfaceDeclaration = exports$4e.tsInterfaceDeclaration = tsInterfaceDeclaration;
  exports$4e.tSIntersectionType = exports$4e.tsIntersectionType = tsIntersectionType;
  exports$4e.tSIntrinsicKeyword = exports$4e.tsIntrinsicKeyword = tsIntrinsicKeyword;
  exports$4e.tSLiteralType = exports$4e.tsLiteralType = tsLiteralType;
  exports$4e.tSMappedType = exports$4e.tsMappedType = tsMappedType;
  exports$4e.tSMethodSignature = exports$4e.tsMethodSignature = tsMethodSignature;
  exports$4e.tSModuleBlock = exports$4e.tsModuleBlock = tsModuleBlock;
  exports$4e.tSModuleDeclaration = exports$4e.tsModuleDeclaration = tsModuleDeclaration;
  exports$4e.tSNamedTupleMember = exports$4e.tsNamedTupleMember = tsNamedTupleMember;
  exports$4e.tSNamespaceExportDeclaration = exports$4e.tsNamespaceExportDeclaration = tsNamespaceExportDeclaration;
  exports$4e.tSNeverKeyword = exports$4e.tsNeverKeyword = tsNeverKeyword;
  exports$4e.tSNonNullExpression = exports$4e.tsNonNullExpression = tsNonNullExpression;
  exports$4e.tSNullKeyword = exports$4e.tsNullKeyword = tsNullKeyword;
  exports$4e.tSNumberKeyword = exports$4e.tsNumberKeyword = tsNumberKeyword;
  exports$4e.tSObjectKeyword = exports$4e.tsObjectKeyword = tsObjectKeyword;
  exports$4e.tSOptionalType = exports$4e.tsOptionalType = tsOptionalType;
  exports$4e.tSParameterProperty = exports$4e.tsParameterProperty = tsParameterProperty;
  exports$4e.tSParenthesizedType = exports$4e.tsParenthesizedType = tsParenthesizedType;
  exports$4e.tSPropertySignature = exports$4e.tsPropertySignature = tsPropertySignature;
  exports$4e.tSQualifiedName = exports$4e.tsQualifiedName = tsQualifiedName;
  exports$4e.tSRestType = exports$4e.tsRestType = tsRestType;
  exports$4e.tSSatisfiesExpression = exports$4e.tsSatisfiesExpression = tsSatisfiesExpression;
  exports$4e.tSStringKeyword = exports$4e.tsStringKeyword = tsStringKeyword;
  exports$4e.tSSymbolKeyword = exports$4e.tsSymbolKeyword = tsSymbolKeyword;
  exports$4e.tSThisType = exports$4e.tsThisType = tsThisType;
  exports$4e.tSTupleType = exports$4e.tsTupleType = tsTupleType;
  exports$4e.tSTypeAliasDeclaration = exports$4e.tsTypeAliasDeclaration = tsTypeAliasDeclaration;
  exports$4e.tSTypeAnnotation = exports$4e.tsTypeAnnotation = tsTypeAnnotation;
  exports$4e.tSTypeAssertion = exports$4e.tsTypeAssertion = tsTypeAssertion;
  exports$4e.tSTypeLiteral = exports$4e.tsTypeLiteral = tsTypeLiteral;
  exports$4e.tSTypeOperator = exports$4e.tsTypeOperator = tsTypeOperator;
  exports$4e.tSTypeParameter = exports$4e.tsTypeParameter = tsTypeParameter;
  exports$4e.tSTypeParameterDeclaration = exports$4e.tsTypeParameterDeclaration = tsTypeParameterDeclaration;
  exports$4e.tSTypeParameterInstantiation = exports$4e.tsTypeParameterInstantiation = tsTypeParameterInstantiation;
  exports$4e.tSTypePredicate = exports$4e.tsTypePredicate = tsTypePredicate;
  exports$4e.tSTypeQuery = exports$4e.tsTypeQuery = tsTypeQuery;
  exports$4e.tSTypeReference = exports$4e.tsTypeReference = tsTypeReference;
  exports$4e.tSUndefinedKeyword = exports$4e.tsUndefinedKeyword = tsUndefinedKeyword;
  exports$4e.tSUnionType = exports$4e.tsUnionType = tsUnionType;
  exports$4e.tSUnknownKeyword = exports$4e.tsUnknownKeyword = tsUnknownKeyword;
  exports$4e.tSVoidKeyword = exports$4e.tsVoidKeyword = tsVoidKeyword;
  exports$4e.tupleExpression = tupleExpression;
  exports$4e.tupleTypeAnnotation = tupleTypeAnnotation;
  exports$4e.typeAlias = typeAlias;
  exports$4e.typeAnnotation = typeAnnotation;
  exports$4e.typeCastExpression = typeCastExpression;
  exports$4e.typeParameter = typeParameter;
  exports$4e.typeParameterDeclaration = typeParameterDeclaration;
  exports$4e.typeParameterInstantiation = typeParameterInstantiation;
  exports$4e.typeofTypeAnnotation = typeofTypeAnnotation;
  exports$4e.unaryExpression = unaryExpression;
  exports$4e.unionTypeAnnotation = unionTypeAnnotation;
  exports$4e.updateExpression = updateExpression;
  exports$4e.v8IntrinsicIdentifier = v8IntrinsicIdentifier;
  exports$4e.variableDeclaration = variableDeclaration;
  exports$4e.variableDeclarator = variableDeclarator;
  exports$4e.variance = variance;
  exports$4e.voidTypeAnnotation = voidTypeAnnotation;
  exports$4e.whileStatement = whileStatement;
  exports$4e.withStatement = withStatement;
  exports$4e.yieldExpression = yieldExpression;
  var _validateNode = dew$4e();
  var _deprecationWarning = dew$4F();
  function arrayExpression(elements = []) {
    return (0, _validateNode.default)({
      type: "ArrayExpression",
      elements
    });
  }
  function assignmentExpression(operator, left, right) {
    return (0, _validateNode.default)({
      type: "AssignmentExpression",
      operator,
      left,
      right
    });
  }
  function binaryExpression(operator, left, right) {
    return (0, _validateNode.default)({
      type: "BinaryExpression",
      operator,
      left,
      right
    });
  }
  function interpreterDirective(value) {
    return (0, _validateNode.default)({
      type: "InterpreterDirective",
      value
    });
  }
  function directive(value) {
    return (0, _validateNode.default)({
      type: "Directive",
      value
    });
  }
  function directiveLiteral(value) {
    return (0, _validateNode.default)({
      type: "DirectiveLiteral",
      value
    });
  }
  function blockStatement(body, directives = []) {
    return (0, _validateNode.default)({
      type: "BlockStatement",
      body,
      directives
    });
  }
  function breakStatement(label = null) {
    return (0, _validateNode.default)({
      type: "BreakStatement",
      label
    });
  }
  function callExpression(callee, _arguments) {
    return (0, _validateNode.default)({
      type: "CallExpression",
      callee,
      arguments: _arguments
    });
  }
  function catchClause(param = null, body) {
    return (0, _validateNode.default)({
      type: "CatchClause",
      param,
      body
    });
  }
  function conditionalExpression(test, consequent, alternate) {
    return (0, _validateNode.default)({
      type: "ConditionalExpression",
      test,
      consequent,
      alternate
    });
  }
  function continueStatement(label = null) {
    return (0, _validateNode.default)({
      type: "ContinueStatement",
      label
    });
  }
  function debuggerStatement() {
    return {
      type: "DebuggerStatement"
    };
  }
  function doWhileStatement(test, body) {
    return (0, _validateNode.default)({
      type: "DoWhileStatement",
      test,
      body
    });
  }
  function emptyStatement() {
    return {
      type: "EmptyStatement"
    };
  }
  function expressionStatement(expression) {
    return (0, _validateNode.default)({
      type: "ExpressionStatement",
      expression
    });
  }
  function file(program, comments = null, tokens = null) {
    return (0, _validateNode.default)({
      type: "File",
      program,
      comments,
      tokens
    });
  }
  function forInStatement(left, right, body) {
    return (0, _validateNode.default)({
      type: "ForInStatement",
      left,
      right,
      body
    });
  }
  function forStatement(init = null, test = null, update = null, body) {
    return (0, _validateNode.default)({
      type: "ForStatement",
      init,
      test,
      update,
      body
    });
  }
  function functionDeclaration(id = null, params, body, generator = false, async = false) {
    return (0, _validateNode.default)({
      type: "FunctionDeclaration",
      id,
      params,
      body,
      generator,
      async
    });
  }
  function functionExpression(id = null, params, body, generator = false, async = false) {
    return (0, _validateNode.default)({
      type: "FunctionExpression",
      id,
      params,
      body,
      generator,
      async
    });
  }
  function identifier(name) {
    return (0, _validateNode.default)({
      type: "Identifier",
      name
    });
  }
  function ifStatement(test, consequent, alternate = null) {
    return (0, _validateNode.default)({
      type: "IfStatement",
      test,
      consequent,
      alternate
    });
  }
  function labeledStatement(label, body) {
    return (0, _validateNode.default)({
      type: "LabeledStatement",
      label,
      body
    });
  }
  function stringLiteral(value) {
    return (0, _validateNode.default)({
      type: "StringLiteral",
      value
    });
  }
  function numericLiteral(value) {
    return (0, _validateNode.default)({
      type: "NumericLiteral",
      value
    });
  }
  function nullLiteral() {
    return {
      type: "NullLiteral"
    };
  }
  function booleanLiteral(value) {
    return (0, _validateNode.default)({
      type: "BooleanLiteral",
      value
    });
  }
  function regExpLiteral(pattern, flags = "") {
    return (0, _validateNode.default)({
      type: "RegExpLiteral",
      pattern,
      flags
    });
  }
  function logicalExpression(operator, left, right) {
    return (0, _validateNode.default)({
      type: "LogicalExpression",
      operator,
      left,
      right
    });
  }
  function memberExpression(object, property, computed = false, optional = null) {
    return (0, _validateNode.default)({
      type: "MemberExpression",
      object,
      property,
      computed,
      optional
    });
  }
  function newExpression(callee, _arguments) {
    return (0, _validateNode.default)({
      type: "NewExpression",
      callee,
      arguments: _arguments
    });
  }
  function program(body, directives = [], sourceType = "script", interpreter = null) {
    return (0, _validateNode.default)({
      type: "Program",
      body,
      directives,
      sourceType,
      interpreter
    });
  }
  function objectExpression(properties) {
    return (0, _validateNode.default)({
      type: "ObjectExpression",
      properties
    });
  }
  function objectMethod(kind = "method", key, params, body, computed = false, generator = false, async = false) {
    return (0, _validateNode.default)({
      type: "ObjectMethod",
      kind,
      key,
      params,
      body,
      computed,
      generator,
      async
    });
  }
  function objectProperty(key, value, computed = false, shorthand = false, decorators = null) {
    return (0, _validateNode.default)({
      type: "ObjectProperty",
      key,
      value,
      computed,
      shorthand,
      decorators
    });
  }
  function restElement(argument) {
    return (0, _validateNode.default)({
      type: "RestElement",
      argument
    });
  }
  function returnStatement(argument = null) {
    return (0, _validateNode.default)({
      type: "ReturnStatement",
      argument
    });
  }
  function sequenceExpression(expressions) {
    return (0, _validateNode.default)({
      type: "SequenceExpression",
      expressions
    });
  }
  function parenthesizedExpression(expression) {
    return (0, _validateNode.default)({
      type: "ParenthesizedExpression",
      expression
    });
  }
  function switchCase(test = null, consequent) {
    return (0, _validateNode.default)({
      type: "SwitchCase",
      test,
      consequent
    });
  }
  function switchStatement(discriminant, cases) {
    return (0, _validateNode.default)({
      type: "SwitchStatement",
      discriminant,
      cases
    });
  }
  function thisExpression() {
    return {
      type: "ThisExpression"
    };
  }
  function throwStatement(argument) {
    return (0, _validateNode.default)({
      type: "ThrowStatement",
      argument
    });
  }
  function tryStatement(block, handler = null, finalizer = null) {
    return (0, _validateNode.default)({
      type: "TryStatement",
      block,
      handler,
      finalizer
    });
  }
  function unaryExpression(operator, argument, prefix = true) {
    return (0, _validateNode.default)({
      type: "UnaryExpression",
      operator,
      argument,
      prefix
    });
  }
  function updateExpression(operator, argument, prefix = false) {
    return (0, _validateNode.default)({
      type: "UpdateExpression",
      operator,
      argument,
      prefix
    });
  }
  function variableDeclaration(kind, declarations) {
    return (0, _validateNode.default)({
      type: "VariableDeclaration",
      kind,
      declarations
    });
  }
  function variableDeclarator(id, init = null) {
    return (0, _validateNode.default)({
      type: "VariableDeclarator",
      id,
      init
    });
  }
  function whileStatement(test, body) {
    return (0, _validateNode.default)({
      type: "WhileStatement",
      test,
      body
    });
  }
  function withStatement(object, body) {
    return (0, _validateNode.default)({
      type: "WithStatement",
      object,
      body
    });
  }
  function assignmentPattern(left, right) {
    return (0, _validateNode.default)({
      type: "AssignmentPattern",
      left,
      right
    });
  }
  function arrayPattern(elements) {
    return (0, _validateNode.default)({
      type: "ArrayPattern",
      elements
    });
  }
  function arrowFunctionExpression(params, body, async = false) {
    return (0, _validateNode.default)({
      type: "ArrowFunctionExpression",
      params,
      body,
      async,
      expression: null
    });
  }
  function classBody(body) {
    return (0, _validateNode.default)({
      type: "ClassBody",
      body
    });
  }
  function classExpression(id = null, superClass = null, body, decorators = null) {
    return (0, _validateNode.default)({
      type: "ClassExpression",
      id,
      superClass,
      body,
      decorators
    });
  }
  function classDeclaration(id = null, superClass = null, body, decorators = null) {
    return (0, _validateNode.default)({
      type: "ClassDeclaration",
      id,
      superClass,
      body,
      decorators
    });
  }
  function exportAllDeclaration(source) {
    return (0, _validateNode.default)({
      type: "ExportAllDeclaration",
      source
    });
  }
  function exportDefaultDeclaration(declaration) {
    return (0, _validateNode.default)({
      type: "ExportDefaultDeclaration",
      declaration
    });
  }
  function exportNamedDeclaration(declaration = null, specifiers = [], source = null) {
    return (0, _validateNode.default)({
      type: "ExportNamedDeclaration",
      declaration,
      specifiers,
      source
    });
  }
  function exportSpecifier(local, exported) {
    return (0, _validateNode.default)({
      type: "ExportSpecifier",
      local,
      exported
    });
  }
  function forOfStatement(left, right, body, _await = false) {
    return (0, _validateNode.default)({
      type: "ForOfStatement",
      left,
      right,
      body,
      await: _await
    });
  }
  function importDeclaration(specifiers, source) {
    return (0, _validateNode.default)({
      type: "ImportDeclaration",
      specifiers,
      source
    });
  }
  function importDefaultSpecifier(local) {
    return (0, _validateNode.default)({
      type: "ImportDefaultSpecifier",
      local
    });
  }
  function importNamespaceSpecifier(local) {
    return (0, _validateNode.default)({
      type: "ImportNamespaceSpecifier",
      local
    });
  }
  function importSpecifier(local, imported) {
    return (0, _validateNode.default)({
      type: "ImportSpecifier",
      local,
      imported
    });
  }
  function importExpression(source, options = null) {
    return (0, _validateNode.default)({
      type: "ImportExpression",
      source,
      options
    });
  }
  function metaProperty(meta, property) {
    return (0, _validateNode.default)({
      type: "MetaProperty",
      meta,
      property
    });
  }
  function classMethod(kind = "method", key, params, body, computed = false, _static = false, generator = false, async = false) {
    return (0, _validateNode.default)({
      type: "ClassMethod",
      kind,
      key,
      params,
      body,
      computed,
      static: _static,
      generator,
      async
    });
  }
  function objectPattern(properties) {
    return (0, _validateNode.default)({
      type: "ObjectPattern",
      properties
    });
  }
  function spreadElement(argument) {
    return (0, _validateNode.default)({
      type: "SpreadElement",
      argument
    });
  }
  function _super() {
    return {
      type: "Super"
    };
  }
  function taggedTemplateExpression(tag, quasi) {
    return (0, _validateNode.default)({
      type: "TaggedTemplateExpression",
      tag,
      quasi
    });
  }
  function templateElement(value, tail = false) {
    return (0, _validateNode.default)({
      type: "TemplateElement",
      value,
      tail
    });
  }
  function templateLiteral(quasis, expressions) {
    return (0, _validateNode.default)({
      type: "TemplateLiteral",
      quasis,
      expressions
    });
  }
  function yieldExpression(argument = null, delegate = false) {
    return (0, _validateNode.default)({
      type: "YieldExpression",
      argument,
      delegate
    });
  }
  function awaitExpression(argument) {
    return (0, _validateNode.default)({
      type: "AwaitExpression",
      argument
    });
  }
  function _import() {
    return {
      type: "Import"
    };
  }
  function bigIntLiteral(value) {
    return (0, _validateNode.default)({
      type: "BigIntLiteral",
      value
    });
  }
  function exportNamespaceSpecifier(exported) {
    return (0, _validateNode.default)({
      type: "ExportNamespaceSpecifier",
      exported
    });
  }
  function optionalMemberExpression(object, property, computed = false, optional) {
    return (0, _validateNode.default)({
      type: "OptionalMemberExpression",
      object,
      property,
      computed,
      optional
    });
  }
  function optionalCallExpression(callee, _arguments, optional) {
    return (0, _validateNode.default)({
      type: "OptionalCallExpression",
      callee,
      arguments: _arguments,
      optional
    });
  }
  function classProperty(key, value = null, typeAnnotation = null, decorators = null, computed = false, _static = false) {
    return (0, _validateNode.default)({
      type: "ClassProperty",
      key,
      value,
      typeAnnotation,
      decorators,
      computed,
      static: _static
    });
  }
  function classAccessorProperty(key, value = null, typeAnnotation = null, decorators = null, computed = false, _static = false) {
    return (0, _validateNode.default)({
      type: "ClassAccessorProperty",
      key,
      value,
      typeAnnotation,
      decorators,
      computed,
      static: _static
    });
  }
  function classPrivateProperty(key, value = null, decorators = null, _static = false) {
    return (0, _validateNode.default)({
      type: "ClassPrivateProperty",
      key,
      value,
      decorators,
      static: _static
    });
  }
  function classPrivateMethod(kind = "method", key, params, body, _static = false) {
    return (0, _validateNode.default)({
      type: "ClassPrivateMethod",
      kind,
      key,
      params,
      body,
      static: _static
    });
  }
  function privateName(id) {
    return (0, _validateNode.default)({
      type: "PrivateName",
      id
    });
  }
  function staticBlock(body) {
    return (0, _validateNode.default)({
      type: "StaticBlock",
      body
    });
  }
  function anyTypeAnnotation() {
    return {
      type: "AnyTypeAnnotation"
    };
  }
  function arrayTypeAnnotation(elementType) {
    return (0, _validateNode.default)({
      type: "ArrayTypeAnnotation",
      elementType
    });
  }
  function booleanTypeAnnotation() {
    return {
      type: "BooleanTypeAnnotation"
    };
  }
  function booleanLiteralTypeAnnotation(value) {
    return (0, _validateNode.default)({
      type: "BooleanLiteralTypeAnnotation",
      value
    });
  }
  function nullLiteralTypeAnnotation() {
    return {
      type: "NullLiteralTypeAnnotation"
    };
  }
  function classImplements(id, typeParameters = null) {
    return (0, _validateNode.default)({
      type: "ClassImplements",
      id,
      typeParameters
    });
  }
  function declareClass(id, typeParameters = null, _extends = null, body) {
    return (0, _validateNode.default)({
      type: "DeclareClass",
      id,
      typeParameters,
      extends: _extends,
      body
    });
  }
  function declareFunction(id) {
    return (0, _validateNode.default)({
      type: "DeclareFunction",
      id
    });
  }
  function declareInterface(id, typeParameters = null, _extends = null, body) {
    return (0, _validateNode.default)({
      type: "DeclareInterface",
      id,
      typeParameters,
      extends: _extends,
      body
    });
  }
  function declareModule(id, body, kind = null) {
    return (0, _validateNode.default)({
      type: "DeclareModule",
      id,
      body,
      kind
    });
  }
  function declareModuleExports(typeAnnotation) {
    return (0, _validateNode.default)({
      type: "DeclareModuleExports",
      typeAnnotation
    });
  }
  function declareTypeAlias(id, typeParameters = null, right) {
    return (0, _validateNode.default)({
      type: "DeclareTypeAlias",
      id,
      typeParameters,
      right
    });
  }
  function declareOpaqueType(id, typeParameters = null, supertype = null) {
    return (0, _validateNode.default)({
      type: "DeclareOpaqueType",
      id,
      typeParameters,
      supertype
    });
  }
  function declareVariable(id) {
    return (0, _validateNode.default)({
      type: "DeclareVariable",
      id
    });
  }
  function declareExportDeclaration(declaration = null, specifiers = null, source = null) {
    return (0, _validateNode.default)({
      type: "DeclareExportDeclaration",
      declaration,
      specifiers,
      source
    });
  }
  function declareExportAllDeclaration(source) {
    return (0, _validateNode.default)({
      type: "DeclareExportAllDeclaration",
      source
    });
  }
  function declaredPredicate(value) {
    return (0, _validateNode.default)({
      type: "DeclaredPredicate",
      value
    });
  }
  function existsTypeAnnotation() {
    return {
      type: "ExistsTypeAnnotation"
    };
  }
  function functionTypeAnnotation(typeParameters = null, params, rest = null, returnType) {
    return (0, _validateNode.default)({
      type: "FunctionTypeAnnotation",
      typeParameters,
      params,
      rest,
      returnType
    });
  }
  function functionTypeParam(name = null, typeAnnotation) {
    return (0, _validateNode.default)({
      type: "FunctionTypeParam",
      name,
      typeAnnotation
    });
  }
  function genericTypeAnnotation(id, typeParameters = null) {
    return (0, _validateNode.default)({
      type: "GenericTypeAnnotation",
      id,
      typeParameters
    });
  }
  function inferredPredicate() {
    return {
      type: "InferredPredicate"
    };
  }
  function interfaceExtends(id, typeParameters = null) {
    return (0, _validateNode.default)({
      type: "InterfaceExtends",
      id,
      typeParameters
    });
  }
  function interfaceDeclaration(id, typeParameters = null, _extends = null, body) {
    return (0, _validateNode.default)({
      type: "InterfaceDeclaration",
      id,
      typeParameters,
      extends: _extends,
      body
    });
  }
  function interfaceTypeAnnotation(_extends = null, body) {
    return (0, _validateNode.default)({
      type: "InterfaceTypeAnnotation",
      extends: _extends,
      body
    });
  }
  function intersectionTypeAnnotation(types) {
    return (0, _validateNode.default)({
      type: "IntersectionTypeAnnotation",
      types
    });
  }
  function mixedTypeAnnotation() {
    return {
      type: "MixedTypeAnnotation"
    };
  }
  function emptyTypeAnnotation() {
    return {
      type: "EmptyTypeAnnotation"
    };
  }
  function nullableTypeAnnotation(typeAnnotation) {
    return (0, _validateNode.default)({
      type: "NullableTypeAnnotation",
      typeAnnotation
    });
  }
  function numberLiteralTypeAnnotation(value) {
    return (0, _validateNode.default)({
      type: "NumberLiteralTypeAnnotation",
      value
    });
  }
  function numberTypeAnnotation() {
    return {
      type: "NumberTypeAnnotation"
    };
  }
  function objectTypeAnnotation(properties, indexers = [], callProperties = [], internalSlots = [], exact = false) {
    return (0, _validateNode.default)({
      type: "ObjectTypeAnnotation",
      properties,
      indexers,
      callProperties,
      internalSlots,
      exact
    });
  }
  function objectTypeInternalSlot(id, value, optional, _static, method) {
    return (0, _validateNode.default)({
      type: "ObjectTypeInternalSlot",
      id,
      value,
      optional,
      static: _static,
      method
    });
  }
  function objectTypeCallProperty(value) {
    return (0, _validateNode.default)({
      type: "ObjectTypeCallProperty",
      value,
      static: null
    });
  }
  function objectTypeIndexer(id = null, key, value, variance = null) {
    return (0, _validateNode.default)({
      type: "ObjectTypeIndexer",
      id,
      key,
      value,
      variance,
      static: null
    });
  }
  function objectTypeProperty(key, value, variance = null) {
    return (0, _validateNode.default)({
      type: "ObjectTypeProperty",
      key,
      value,
      variance,
      kind: null,
      method: null,
      optional: null,
      proto: null,
      static: null
    });
  }
  function objectTypeSpreadProperty(argument) {
    return (0, _validateNode.default)({
      type: "ObjectTypeSpreadProperty",
      argument
    });
  }
  function opaqueType(id, typeParameters = null, supertype = null, impltype) {
    return (0, _validateNode.default)({
      type: "OpaqueType",
      id,
      typeParameters,
      supertype,
      impltype
    });
  }
  function qualifiedTypeIdentifier(id, qualification) {
    return (0, _validateNode.default)({
      type: "QualifiedTypeIdentifier",
      id,
      qualification
    });
  }
  function stringLiteralTypeAnnotation(value) {
    return (0, _validateNode.default)({
      type: "StringLiteralTypeAnnotation",
      value
    });
  }
  function stringTypeAnnotation() {
    return {
      type: "StringTypeAnnotation"
    };
  }
  function symbolTypeAnnotation() {
    return {
      type: "SymbolTypeAnnotation"
    };
  }
  function thisTypeAnnotation() {
    return {
      type: "ThisTypeAnnotation"
    };
  }
  function tupleTypeAnnotation(types) {
    return (0, _validateNode.default)({
      type: "TupleTypeAnnotation",
      types
    });
  }
  function typeofTypeAnnotation(argument) {
    return (0, _validateNode.default)({
      type: "TypeofTypeAnnotation",
      argument
    });
  }
  function typeAlias(id, typeParameters = null, right) {
    return (0, _validateNode.default)({
      type: "TypeAlias",
      id,
      typeParameters,
      right
    });
  }
  function typeAnnotation(typeAnnotation) {
    return (0, _validateNode.default)({
      type: "TypeAnnotation",
      typeAnnotation
    });
  }
  function typeCastExpression(expression, typeAnnotation) {
    return (0, _validateNode.default)({
      type: "TypeCastExpression",
      expression,
      typeAnnotation
    });
  }
  function typeParameter(bound = null, _default = null, variance = null) {
    return (0, _validateNode.default)({
      type: "TypeParameter",
      bound,
      default: _default,
      variance,
      name: null
    });
  }
  function typeParameterDeclaration(params) {
    return (0, _validateNode.default)({
      type: "TypeParameterDeclaration",
      params
    });
  }
  function typeParameterInstantiation(params) {
    return (0, _validateNode.default)({
      type: "TypeParameterInstantiation",
      params
    });
  }
  function unionTypeAnnotation(types) {
    return (0, _validateNode.default)({
      type: "UnionTypeAnnotation",
      types
    });
  }
  function variance(kind) {
    return (0, _validateNode.default)({
      type: "Variance",
      kind
    });
  }
  function voidTypeAnnotation() {
    return {
      type: "VoidTypeAnnotation"
    };
  }
  function enumDeclaration(id, body) {
    return (0, _validateNode.default)({
      type: "EnumDeclaration",
      id,
      body
    });
  }
  function enumBooleanBody(members) {
    return (0, _validateNode.default)({
      type: "EnumBooleanBody",
      members,
      explicitType: null,
      hasUnknownMembers: null
    });
  }
  function enumNumberBody(members) {
    return (0, _validateNode.default)({
      type: "EnumNumberBody",
      members,
      explicitType: null,
      hasUnknownMembers: null
    });
  }
  function enumStringBody(members) {
    return (0, _validateNode.default)({
      type: "EnumStringBody",
      members,
      explicitType: null,
      hasUnknownMembers: null
    });
  }
  function enumSymbolBody(members) {
    return (0, _validateNode.default)({
      type: "EnumSymbolBody",
      members,
      hasUnknownMembers: null
    });
  }
  function enumBooleanMember(id) {
    return (0, _validateNode.default)({
      type: "EnumBooleanMember",
      id,
      init: null
    });
  }
  function enumNumberMember(id, init) {
    return (0, _validateNode.default)({
      type: "EnumNumberMember",
      id,
      init
    });
  }
  function enumStringMember(id, init) {
    return (0, _validateNode.default)({
      type: "EnumStringMember",
      id,
      init
    });
  }
  function enumDefaultedMember(id) {
    return (0, _validateNode.default)({
      type: "EnumDefaultedMember",
      id
    });
  }
  function indexedAccessType(objectType, indexType) {
    return (0, _validateNode.default)({
      type: "IndexedAccessType",
      objectType,
      indexType
    });
  }
  function optionalIndexedAccessType(objectType, indexType) {
    return (0, _validateNode.default)({
      type: "OptionalIndexedAccessType",
      objectType,
      indexType,
      optional: null
    });
  }
  function jsxAttribute(name, value = null) {
    return (0, _validateNode.default)({
      type: "JSXAttribute",
      name,
      value
    });
  }
  function jsxClosingElement(name) {
    return (0, _validateNode.default)({
      type: "JSXClosingElement",
      name
    });
  }
  function jsxElement(openingElement, closingElement = null, children, selfClosing = null) {
    return (0, _validateNode.default)({
      type: "JSXElement",
      openingElement,
      closingElement,
      children,
      selfClosing
    });
  }
  function jsxEmptyExpression() {
    return {
      type: "JSXEmptyExpression"
    };
  }
  function jsxExpressionContainer(expression) {
    return (0, _validateNode.default)({
      type: "JSXExpressionContainer",
      expression
    });
  }
  function jsxSpreadChild(expression) {
    return (0, _validateNode.default)({
      type: "JSXSpreadChild",
      expression
    });
  }
  function jsxIdentifier(name) {
    return (0, _validateNode.default)({
      type: "JSXIdentifier",
      name
    });
  }
  function jsxMemberExpression(object, property) {
    return (0, _validateNode.default)({
      type: "JSXMemberExpression",
      object,
      property
    });
  }
  function jsxNamespacedName(namespace, name) {
    return (0, _validateNode.default)({
      type: "JSXNamespacedName",
      namespace,
      name
    });
  }
  function jsxOpeningElement(name, attributes, selfClosing = false) {
    return (0, _validateNode.default)({
      type: "JSXOpeningElement",
      name,
      attributes,
      selfClosing
    });
  }
  function jsxSpreadAttribute(argument) {
    return (0, _validateNode.default)({
      type: "JSXSpreadAttribute",
      argument
    });
  }
  function jsxText(value) {
    return (0, _validateNode.default)({
      type: "JSXText",
      value
    });
  }
  function jsxFragment(openingFragment, closingFragment, children) {
    return (0, _validateNode.default)({
      type: "JSXFragment",
      openingFragment,
      closingFragment,
      children
    });
  }
  function jsxOpeningFragment() {
    return {
      type: "JSXOpeningFragment"
    };
  }
  function jsxClosingFragment() {
    return {
      type: "JSXClosingFragment"
    };
  }
  function noop() {
    return {
      type: "Noop"
    };
  }
  function placeholder(expectedNode, name) {
    return (0, _validateNode.default)({
      type: "Placeholder",
      expectedNode,
      name
    });
  }
  function v8IntrinsicIdentifier(name) {
    return (0, _validateNode.default)({
      type: "V8IntrinsicIdentifier",
      name
    });
  }
  function argumentPlaceholder() {
    return {
      type: "ArgumentPlaceholder"
    };
  }
  function bindExpression(object, callee) {
    return (0, _validateNode.default)({
      type: "BindExpression",
      object,
      callee
    });
  }
  function importAttribute(key, value) {
    return (0, _validateNode.default)({
      type: "ImportAttribute",
      key,
      value
    });
  }
  function decorator(expression) {
    return (0, _validateNode.default)({
      type: "Decorator",
      expression
    });
  }
  function doExpression(body, async = false) {
    return (0, _validateNode.default)({
      type: "DoExpression",
      body,
      async
    });
  }
  function exportDefaultSpecifier(exported) {
    return (0, _validateNode.default)({
      type: "ExportDefaultSpecifier",
      exported
    });
  }
  function recordExpression(properties) {
    return (0, _validateNode.default)({
      type: "RecordExpression",
      properties
    });
  }
  function tupleExpression(elements = []) {
    return (0, _validateNode.default)({
      type: "TupleExpression",
      elements
    });
  }
  function decimalLiteral(value) {
    return (0, _validateNode.default)({
      type: "DecimalLiteral",
      value
    });
  }
  function moduleExpression(body) {
    return (0, _validateNode.default)({
      type: "ModuleExpression",
      body
    });
  }
  function topicReference() {
    return {
      type: "TopicReference"
    };
  }
  function pipelineTopicExpression(expression) {
    return (0, _validateNode.default)({
      type: "PipelineTopicExpression",
      expression
    });
  }
  function pipelineBareFunction(callee) {
    return (0, _validateNode.default)({
      type: "PipelineBareFunction",
      callee
    });
  }
  function pipelinePrimaryTopicReference() {
    return {
      type: "PipelinePrimaryTopicReference"
    };
  }
  function tsParameterProperty(parameter) {
    return (0, _validateNode.default)({
      type: "TSParameterProperty",
      parameter
    });
  }
  function tsDeclareFunction(id = null, typeParameters = null, params, returnType = null) {
    return (0, _validateNode.default)({
      type: "TSDeclareFunction",
      id,
      typeParameters,
      params,
      returnType
    });
  }
  function tsDeclareMethod(decorators = null, key, typeParameters = null, params, returnType = null) {
    return (0, _validateNode.default)({
      type: "TSDeclareMethod",
      decorators,
      key,
      typeParameters,
      params,
      returnType
    });
  }
  function tsQualifiedName(left, right) {
    return (0, _validateNode.default)({
      type: "TSQualifiedName",
      left,
      right
    });
  }
  function tsCallSignatureDeclaration(typeParameters = null, parameters, typeAnnotation = null) {
    return (0, _validateNode.default)({
      type: "TSCallSignatureDeclaration",
      typeParameters,
      parameters,
      typeAnnotation
    });
  }
  function tsConstructSignatureDeclaration(typeParameters = null, parameters, typeAnnotation = null) {
    return (0, _validateNode.default)({
      type: "TSConstructSignatureDeclaration",
      typeParameters,
      parameters,
      typeAnnotation
    });
  }
  function tsPropertySignature(key, typeAnnotation = null) {
    return (0, _validateNode.default)({
      type: "TSPropertySignature",
      key,
      typeAnnotation,
      kind: null
    });
  }
  function tsMethodSignature(key, typeParameters = null, parameters, typeAnnotation = null) {
    return (0, _validateNode.default)({
      type: "TSMethodSignature",
      key,
      typeParameters,
      parameters,
      typeAnnotation,
      kind: null
    });
  }
  function tsIndexSignature(parameters, typeAnnotation = null) {
    return (0, _validateNode.default)({
      type: "TSIndexSignature",
      parameters,
      typeAnnotation
    });
  }
  function tsAnyKeyword() {
    return {
      type: "TSAnyKeyword"
    };
  }
  function tsBooleanKeyword() {
    return {
      type: "TSBooleanKeyword"
    };
  }
  function tsBigIntKeyword() {
    return {
      type: "TSBigIntKeyword"
    };
  }
  function tsIntrinsicKeyword() {
    return {
      type: "TSIntrinsicKeyword"
    };
  }
  function tsNeverKeyword() {
    return {
      type: "TSNeverKeyword"
    };
  }
  function tsNullKeyword() {
    return {
      type: "TSNullKeyword"
    };
  }
  function tsNumberKeyword() {
    return {
      type: "TSNumberKeyword"
    };
  }
  function tsObjectKeyword() {
    return {
      type: "TSObjectKeyword"
    };
  }
  function tsStringKeyword() {
    return {
      type: "TSStringKeyword"
    };
  }
  function tsSymbolKeyword() {
    return {
      type: "TSSymbolKeyword"
    };
  }
  function tsUndefinedKeyword() {
    return {
      type: "TSUndefinedKeyword"
    };
  }
  function tsUnknownKeyword() {
    return {
      type: "TSUnknownKeyword"
    };
  }
  function tsVoidKeyword() {
    return {
      type: "TSVoidKeyword"
    };
  }
  function tsThisType() {
    return {
      type: "TSThisType"
    };
  }
  function tsFunctionType(typeParameters = null, parameters, typeAnnotation = null) {
    return (0, _validateNode.default)({
      type: "TSFunctionType",
      typeParameters,
      parameters,
      typeAnnotation
    });
  }
  function tsConstructorType(typeParameters = null, parameters, typeAnnotation = null) {
    return (0, _validateNode.default)({
      type: "TSConstructorType",
      typeParameters,
      parameters,
      typeAnnotation
    });
  }
  function tsTypeReference(typeName, typeParameters = null) {
    return (0, _validateNode.default)({
      type: "TSTypeReference",
      typeName,
      typeParameters
    });
  }
  function tsTypePredicate(parameterName, typeAnnotation = null, asserts = null) {
    return (0, _validateNode.default)({
      type: "TSTypePredicate",
      parameterName,
      typeAnnotation,
      asserts
    });
  }
  function tsTypeQuery(exprName, typeParameters = null) {
    return (0, _validateNode.default)({
      type: "TSTypeQuery",
      exprName,
      typeParameters
    });
  }
  function tsTypeLiteral(members) {
    return (0, _validateNode.default)({
      type: "TSTypeLiteral",
      members
    });
  }
  function tsArrayType(elementType) {
    return (0, _validateNode.default)({
      type: "TSArrayType",
      elementType
    });
  }
  function tsTupleType(elementTypes) {
    return (0, _validateNode.default)({
      type: "TSTupleType",
      elementTypes
    });
  }
  function tsOptionalType(typeAnnotation) {
    return (0, _validateNode.default)({
      type: "TSOptionalType",
      typeAnnotation
    });
  }
  function tsRestType(typeAnnotation) {
    return (0, _validateNode.default)({
      type: "TSRestType",
      typeAnnotation
    });
  }
  function tsNamedTupleMember(label, elementType, optional = false) {
    return (0, _validateNode.default)({
      type: "TSNamedTupleMember",
      label,
      elementType,
      optional
    });
  }
  function tsUnionType(types) {
    return (0, _validateNode.default)({
      type: "TSUnionType",
      types
    });
  }
  function tsIntersectionType(types) {
    return (0, _validateNode.default)({
      type: "TSIntersectionType",
      types
    });
  }
  function tsConditionalType(checkType, extendsType, trueType, falseType) {
    return (0, _validateNode.default)({
      type: "TSConditionalType",
      checkType,
      extendsType,
      trueType,
      falseType
    });
  }
  function tsInferType(typeParameter) {
    return (0, _validateNode.default)({
      type: "TSInferType",
      typeParameter
    });
  }
  function tsParenthesizedType(typeAnnotation) {
    return (0, _validateNode.default)({
      type: "TSParenthesizedType",
      typeAnnotation
    });
  }
  function tsTypeOperator(typeAnnotation) {
    return (0, _validateNode.default)({
      type: "TSTypeOperator",
      typeAnnotation,
      operator: null
    });
  }
  function tsIndexedAccessType(objectType, indexType) {
    return (0, _validateNode.default)({
      type: "TSIndexedAccessType",
      objectType,
      indexType
    });
  }
  function tsMappedType(typeParameter, typeAnnotation = null, nameType = null) {
    return (0, _validateNode.default)({
      type: "TSMappedType",
      typeParameter,
      typeAnnotation,
      nameType
    });
  }
  function tsLiteralType(literal) {
    return (0, _validateNode.default)({
      type: "TSLiteralType",
      literal
    });
  }
  function tsExpressionWithTypeArguments(expression, typeParameters = null) {
    return (0, _validateNode.default)({
      type: "TSExpressionWithTypeArguments",
      expression,
      typeParameters
    });
  }
  function tsInterfaceDeclaration(id, typeParameters = null, _extends = null, body) {
    return (0, _validateNode.default)({
      type: "TSInterfaceDeclaration",
      id,
      typeParameters,
      extends: _extends,
      body
    });
  }
  function tsInterfaceBody(body) {
    return (0, _validateNode.default)({
      type: "TSInterfaceBody",
      body
    });
  }
  function tsTypeAliasDeclaration(id, typeParameters = null, typeAnnotation) {
    return (0, _validateNode.default)({
      type: "TSTypeAliasDeclaration",
      id,
      typeParameters,
      typeAnnotation
    });
  }
  function tsInstantiationExpression(expression, typeParameters = null) {
    return (0, _validateNode.default)({
      type: "TSInstantiationExpression",
      expression,
      typeParameters
    });
  }
  function tsAsExpression(expression, typeAnnotation) {
    return (0, _validateNode.default)({
      type: "TSAsExpression",
      expression,
      typeAnnotation
    });
  }
  function tsSatisfiesExpression(expression, typeAnnotation) {
    return (0, _validateNode.default)({
      type: "TSSatisfiesExpression",
      expression,
      typeAnnotation
    });
  }
  function tsTypeAssertion(typeAnnotation, expression) {
    return (0, _validateNode.default)({
      type: "TSTypeAssertion",
      typeAnnotation,
      expression
    });
  }
  function tsEnumDeclaration(id, members) {
    return (0, _validateNode.default)({
      type: "TSEnumDeclaration",
      id,
      members
    });
  }
  function tsEnumMember(id, initializer = null) {
    return (0, _validateNode.default)({
      type: "TSEnumMember",
      id,
      initializer
    });
  }
  function tsModuleDeclaration(id, body) {
    return (0, _validateNode.default)({
      type: "TSModuleDeclaration",
      id,
      body
    });
  }
  function tsModuleBlock(body) {
    return (0, _validateNode.default)({
      type: "TSModuleBlock",
      body
    });
  }
  function tsImportType(argument, qualifier = null, typeParameters = null) {
    return (0, _validateNode.default)({
      type: "TSImportType",
      argument,
      qualifier,
      typeParameters
    });
  }
  function tsImportEqualsDeclaration(id, moduleReference) {
    return (0, _validateNode.default)({
      type: "TSImportEqualsDeclaration",
      id,
      moduleReference,
      isExport: null
    });
  }
  function tsExternalModuleReference(expression) {
    return (0, _validateNode.default)({
      type: "TSExternalModuleReference",
      expression
    });
  }
  function tsNonNullExpression(expression) {
    return (0, _validateNode.default)({
      type: "TSNonNullExpression",
      expression
    });
  }
  function tsExportAssignment(expression) {
    return (0, _validateNode.default)({
      type: "TSExportAssignment",
      expression
    });
  }
  function tsNamespaceExportDeclaration(id) {
    return (0, _validateNode.default)({
      type: "TSNamespaceExportDeclaration",
      id
    });
  }
  function tsTypeAnnotation(typeAnnotation) {
    return (0, _validateNode.default)({
      type: "TSTypeAnnotation",
      typeAnnotation
    });
  }
  function tsTypeParameterInstantiation(params) {
    return (0, _validateNode.default)({
      type: "TSTypeParameterInstantiation",
      params
    });
  }
  function tsTypeParameterDeclaration(params) {
    return (0, _validateNode.default)({
      type: "TSTypeParameterDeclaration",
      params
    });
  }
  function tsTypeParameter(constraint = null, _default = null, name) {
    return (0, _validateNode.default)({
      type: "TSTypeParameter",
      constraint,
      default: _default,
      name
    });
  }
  function NumberLiteral(value) {
    (0, _deprecationWarning.default)("NumberLiteral", "NumericLiteral", "The node type ");
    return numericLiteral(value);
  }
  function RegexLiteral(pattern, flags = "") {
    (0, _deprecationWarning.default)("RegexLiteral", "RegExpLiteral", "The node type ");
    return regExpLiteral(pattern, flags);
  }
  function RestProperty(argument) {
    (0, _deprecationWarning.default)("RestProperty", "RestElement", "The node type ");
    return restElement(argument);
  }
  function SpreadProperty(argument) {
    (0, _deprecationWarning.default)("SpreadProperty", "SpreadElement", "The node type ");
    return spreadElement(argument);
  }
  return exports$4e;
}

var exports$4d = {},
  _dewExec$4c = false;
function dew$4c() {
  if (_dewExec$4c) return exports$4d;
  _dewExec$4c = true;
  Object.defineProperty(exports$4d, "__esModule", {
    value: true
  });
  exports$4d.default = cleanJSXElementLiteralChild;
  var _index = dew$4d();
  var _index2 = dew$3i();
  function cleanJSXElementLiteralChild(child, args) {
    const lines = child.value.split(/\r\n|\n|\r/);
    let lastNonEmptyLine = 0;
    for (let i = 0; i < lines.length; i++) {
      if (/[^ \t]/.exec(lines[i])) {
        lastNonEmptyLine = i;
      }
    }
    let str = "";
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i];
      const isFirstLine = i === 0;
      const isLastLine = i === lines.length - 1;
      const isLastNonEmptyLine = i === lastNonEmptyLine;
      let trimmedLine = line.replace(/\t/g, " ");
      if (!isFirstLine) {
        trimmedLine = trimmedLine.replace(/^ +/, "");
      }
      if (!isLastLine) {
        trimmedLine = trimmedLine.replace(/ +$/, "");
      }
      if (trimmedLine) {
        if (!isLastNonEmptyLine) {
          trimmedLine += " ";
        }
        str += trimmedLine;
      }
    }
    if (str) args.push((0, _index2.inherits)((0, _index.stringLiteral)(str), child));
  }
  return exports$4d;
}

var exports$4c = {},
  _dewExec$4b = false;
function dew$4b() {
  if (_dewExec$4b) return exports$4c;
  _dewExec$4b = true;
  Object.defineProperty(exports$4c, "__esModule", {
    value: true
  });
  exports$4c.default = buildChildren;
  var _index = dew$4E();
  var _cleanJSXElementLiteralChild = dew$4c();
  function buildChildren(node) {
    const elements = [];
    for (let i = 0; i < node.children.length; i++) {
      let child = node.children[i];
      if ((0, _index.isJSXText)(child)) {
        (0, _cleanJSXElementLiteralChild.default)(child, elements);
        continue;
      }
      if ((0, _index.isJSXExpressionContainer)(child)) child = child.expression;
      if ((0, _index.isJSXEmptyExpression)(child)) continue;
      elements.push(child);
    }
    return elements;
  }
  return exports$4c;
}

var exports$4b = {},
  _dewExec$4a = false;
function dew$4a() {
  if (_dewExec$4a) return exports$4b;
  _dewExec$4a = true;
  Object.defineProperty(exports$4b, "__esModule", {
    value: true
  });
  exports$4b.default = isNode;
  var _index = dew$4g();
  function isNode(node) {
    return !!(node && _index.VISITOR_KEYS[node.type]);
  }
  return exports$4b;
}

var exports$4a = {},
  _dewExec$49 = false;
function dew$49() {
  if (_dewExec$49) return exports$4a;
  _dewExec$49 = true;
  Object.defineProperty(exports$4a, "__esModule", {
    value: true
  });
  exports$4a.default = assertNode;
  var _isNode = dew$4a();
  function assertNode(node) {
    if (!(0, _isNode.default)(node)) {
      var _node$type;
      const type = (_node$type = node == null ? void 0 : node.type) != null ? _node$type : JSON.stringify(node);
      throw new TypeError(`Not a valid node of type "${type}"`);
    }
  }
  return exports$4a;
}

var exports$49 = {},
  _dewExec$48 = false;
function dew$48() {
  if (_dewExec$48) return exports$49;
  _dewExec$48 = true;
  Object.defineProperty(exports$49, "__esModule", {
    value: true
  });
  exports$49.assertAccessor = assertAccessor;
  exports$49.assertAnyTypeAnnotation = assertAnyTypeAnnotation;
  exports$49.assertArgumentPlaceholder = assertArgumentPlaceholder;
  exports$49.assertArrayExpression = assertArrayExpression;
  exports$49.assertArrayPattern = assertArrayPattern;
  exports$49.assertArrayTypeAnnotation = assertArrayTypeAnnotation;
  exports$49.assertArrowFunctionExpression = assertArrowFunctionExpression;
  exports$49.assertAssignmentExpression = assertAssignmentExpression;
  exports$49.assertAssignmentPattern = assertAssignmentPattern;
  exports$49.assertAwaitExpression = assertAwaitExpression;
  exports$49.assertBigIntLiteral = assertBigIntLiteral;
  exports$49.assertBinary = assertBinary;
  exports$49.assertBinaryExpression = assertBinaryExpression;
  exports$49.assertBindExpression = assertBindExpression;
  exports$49.assertBlock = assertBlock;
  exports$49.assertBlockParent = assertBlockParent;
  exports$49.assertBlockStatement = assertBlockStatement;
  exports$49.assertBooleanLiteral = assertBooleanLiteral;
  exports$49.assertBooleanLiteralTypeAnnotation = assertBooleanLiteralTypeAnnotation;
  exports$49.assertBooleanTypeAnnotation = assertBooleanTypeAnnotation;
  exports$49.assertBreakStatement = assertBreakStatement;
  exports$49.assertCallExpression = assertCallExpression;
  exports$49.assertCatchClause = assertCatchClause;
  exports$49.assertClass = assertClass;
  exports$49.assertClassAccessorProperty = assertClassAccessorProperty;
  exports$49.assertClassBody = assertClassBody;
  exports$49.assertClassDeclaration = assertClassDeclaration;
  exports$49.assertClassExpression = assertClassExpression;
  exports$49.assertClassImplements = assertClassImplements;
  exports$49.assertClassMethod = assertClassMethod;
  exports$49.assertClassPrivateMethod = assertClassPrivateMethod;
  exports$49.assertClassPrivateProperty = assertClassPrivateProperty;
  exports$49.assertClassProperty = assertClassProperty;
  exports$49.assertCompletionStatement = assertCompletionStatement;
  exports$49.assertConditional = assertConditional;
  exports$49.assertConditionalExpression = assertConditionalExpression;
  exports$49.assertContinueStatement = assertContinueStatement;
  exports$49.assertDebuggerStatement = assertDebuggerStatement;
  exports$49.assertDecimalLiteral = assertDecimalLiteral;
  exports$49.assertDeclaration = assertDeclaration;
  exports$49.assertDeclareClass = assertDeclareClass;
  exports$49.assertDeclareExportAllDeclaration = assertDeclareExportAllDeclaration;
  exports$49.assertDeclareExportDeclaration = assertDeclareExportDeclaration;
  exports$49.assertDeclareFunction = assertDeclareFunction;
  exports$49.assertDeclareInterface = assertDeclareInterface;
  exports$49.assertDeclareModule = assertDeclareModule;
  exports$49.assertDeclareModuleExports = assertDeclareModuleExports;
  exports$49.assertDeclareOpaqueType = assertDeclareOpaqueType;
  exports$49.assertDeclareTypeAlias = assertDeclareTypeAlias;
  exports$49.assertDeclareVariable = assertDeclareVariable;
  exports$49.assertDeclaredPredicate = assertDeclaredPredicate;
  exports$49.assertDecorator = assertDecorator;
  exports$49.assertDirective = assertDirective;
  exports$49.assertDirectiveLiteral = assertDirectiveLiteral;
  exports$49.assertDoExpression = assertDoExpression;
  exports$49.assertDoWhileStatement = assertDoWhileStatement;
  exports$49.assertEmptyStatement = assertEmptyStatement;
  exports$49.assertEmptyTypeAnnotation = assertEmptyTypeAnnotation;
  exports$49.assertEnumBody = assertEnumBody;
  exports$49.assertEnumBooleanBody = assertEnumBooleanBody;
  exports$49.assertEnumBooleanMember = assertEnumBooleanMember;
  exports$49.assertEnumDeclaration = assertEnumDeclaration;
  exports$49.assertEnumDefaultedMember = assertEnumDefaultedMember;
  exports$49.assertEnumMember = assertEnumMember;
  exports$49.assertEnumNumberBody = assertEnumNumberBody;
  exports$49.assertEnumNumberMember = assertEnumNumberMember;
  exports$49.assertEnumStringBody = assertEnumStringBody;
  exports$49.assertEnumStringMember = assertEnumStringMember;
  exports$49.assertEnumSymbolBody = assertEnumSymbolBody;
  exports$49.assertExistsTypeAnnotation = assertExistsTypeAnnotation;
  exports$49.assertExportAllDeclaration = assertExportAllDeclaration;
  exports$49.assertExportDeclaration = assertExportDeclaration;
  exports$49.assertExportDefaultDeclaration = assertExportDefaultDeclaration;
  exports$49.assertExportDefaultSpecifier = assertExportDefaultSpecifier;
  exports$49.assertExportNamedDeclaration = assertExportNamedDeclaration;
  exports$49.assertExportNamespaceSpecifier = assertExportNamespaceSpecifier;
  exports$49.assertExportSpecifier = assertExportSpecifier;
  exports$49.assertExpression = assertExpression;
  exports$49.assertExpressionStatement = assertExpressionStatement;
  exports$49.assertExpressionWrapper = assertExpressionWrapper;
  exports$49.assertFile = assertFile;
  exports$49.assertFlow = assertFlow;
  exports$49.assertFlowBaseAnnotation = assertFlowBaseAnnotation;
  exports$49.assertFlowDeclaration = assertFlowDeclaration;
  exports$49.assertFlowPredicate = assertFlowPredicate;
  exports$49.assertFlowType = assertFlowType;
  exports$49.assertFor = assertFor;
  exports$49.assertForInStatement = assertForInStatement;
  exports$49.assertForOfStatement = assertForOfStatement;
  exports$49.assertForStatement = assertForStatement;
  exports$49.assertForXStatement = assertForXStatement;
  exports$49.assertFunction = assertFunction;
  exports$49.assertFunctionDeclaration = assertFunctionDeclaration;
  exports$49.assertFunctionExpression = assertFunctionExpression;
  exports$49.assertFunctionParent = assertFunctionParent;
  exports$49.assertFunctionTypeAnnotation = assertFunctionTypeAnnotation;
  exports$49.assertFunctionTypeParam = assertFunctionTypeParam;
  exports$49.assertGenericTypeAnnotation = assertGenericTypeAnnotation;
  exports$49.assertIdentifier = assertIdentifier;
  exports$49.assertIfStatement = assertIfStatement;
  exports$49.assertImmutable = assertImmutable;
  exports$49.assertImport = assertImport;
  exports$49.assertImportAttribute = assertImportAttribute;
  exports$49.assertImportDeclaration = assertImportDeclaration;
  exports$49.assertImportDefaultSpecifier = assertImportDefaultSpecifier;
  exports$49.assertImportExpression = assertImportExpression;
  exports$49.assertImportNamespaceSpecifier = assertImportNamespaceSpecifier;
  exports$49.assertImportOrExportDeclaration = assertImportOrExportDeclaration;
  exports$49.assertImportSpecifier = assertImportSpecifier;
  exports$49.assertIndexedAccessType = assertIndexedAccessType;
  exports$49.assertInferredPredicate = assertInferredPredicate;
  exports$49.assertInterfaceDeclaration = assertInterfaceDeclaration;
  exports$49.assertInterfaceExtends = assertInterfaceExtends;
  exports$49.assertInterfaceTypeAnnotation = assertInterfaceTypeAnnotation;
  exports$49.assertInterpreterDirective = assertInterpreterDirective;
  exports$49.assertIntersectionTypeAnnotation = assertIntersectionTypeAnnotation;
  exports$49.assertJSX = assertJSX;
  exports$49.assertJSXAttribute = assertJSXAttribute;
  exports$49.assertJSXClosingElement = assertJSXClosingElement;
  exports$49.assertJSXClosingFragment = assertJSXClosingFragment;
  exports$49.assertJSXElement = assertJSXElement;
  exports$49.assertJSXEmptyExpression = assertJSXEmptyExpression;
  exports$49.assertJSXExpressionContainer = assertJSXExpressionContainer;
  exports$49.assertJSXFragment = assertJSXFragment;
  exports$49.assertJSXIdentifier = assertJSXIdentifier;
  exports$49.assertJSXMemberExpression = assertJSXMemberExpression;
  exports$49.assertJSXNamespacedName = assertJSXNamespacedName;
  exports$49.assertJSXOpeningElement = assertJSXOpeningElement;
  exports$49.assertJSXOpeningFragment = assertJSXOpeningFragment;
  exports$49.assertJSXSpreadAttribute = assertJSXSpreadAttribute;
  exports$49.assertJSXSpreadChild = assertJSXSpreadChild;
  exports$49.assertJSXText = assertJSXText;
  exports$49.assertLVal = assertLVal;
  exports$49.assertLabeledStatement = assertLabeledStatement;
  exports$49.assertLiteral = assertLiteral;
  exports$49.assertLogicalExpression = assertLogicalExpression;
  exports$49.assertLoop = assertLoop;
  exports$49.assertMemberExpression = assertMemberExpression;
  exports$49.assertMetaProperty = assertMetaProperty;
  exports$49.assertMethod = assertMethod;
  exports$49.assertMiscellaneous = assertMiscellaneous;
  exports$49.assertMixedTypeAnnotation = assertMixedTypeAnnotation;
  exports$49.assertModuleDeclaration = assertModuleDeclaration;
  exports$49.assertModuleExpression = assertModuleExpression;
  exports$49.assertModuleSpecifier = assertModuleSpecifier;
  exports$49.assertNewExpression = assertNewExpression;
  exports$49.assertNoop = assertNoop;
  exports$49.assertNullLiteral = assertNullLiteral;
  exports$49.assertNullLiteralTypeAnnotation = assertNullLiteralTypeAnnotation;
  exports$49.assertNullableTypeAnnotation = assertNullableTypeAnnotation;
  exports$49.assertNumberLiteral = assertNumberLiteral;
  exports$49.assertNumberLiteralTypeAnnotation = assertNumberLiteralTypeAnnotation;
  exports$49.assertNumberTypeAnnotation = assertNumberTypeAnnotation;
  exports$49.assertNumericLiteral = assertNumericLiteral;
  exports$49.assertObjectExpression = assertObjectExpression;
  exports$49.assertObjectMember = assertObjectMember;
  exports$49.assertObjectMethod = assertObjectMethod;
  exports$49.assertObjectPattern = assertObjectPattern;
  exports$49.assertObjectProperty = assertObjectProperty;
  exports$49.assertObjectTypeAnnotation = assertObjectTypeAnnotation;
  exports$49.assertObjectTypeCallProperty = assertObjectTypeCallProperty;
  exports$49.assertObjectTypeIndexer = assertObjectTypeIndexer;
  exports$49.assertObjectTypeInternalSlot = assertObjectTypeInternalSlot;
  exports$49.assertObjectTypeProperty = assertObjectTypeProperty;
  exports$49.assertObjectTypeSpreadProperty = assertObjectTypeSpreadProperty;
  exports$49.assertOpaqueType = assertOpaqueType;
  exports$49.assertOptionalCallExpression = assertOptionalCallExpression;
  exports$49.assertOptionalIndexedAccessType = assertOptionalIndexedAccessType;
  exports$49.assertOptionalMemberExpression = assertOptionalMemberExpression;
  exports$49.assertParenthesizedExpression = assertParenthesizedExpression;
  exports$49.assertPattern = assertPattern;
  exports$49.assertPatternLike = assertPatternLike;
  exports$49.assertPipelineBareFunction = assertPipelineBareFunction;
  exports$49.assertPipelinePrimaryTopicReference = assertPipelinePrimaryTopicReference;
  exports$49.assertPipelineTopicExpression = assertPipelineTopicExpression;
  exports$49.assertPlaceholder = assertPlaceholder;
  exports$49.assertPrivate = assertPrivate;
  exports$49.assertPrivateName = assertPrivateName;
  exports$49.assertProgram = assertProgram;
  exports$49.assertProperty = assertProperty;
  exports$49.assertPureish = assertPureish;
  exports$49.assertQualifiedTypeIdentifier = assertQualifiedTypeIdentifier;
  exports$49.assertRecordExpression = assertRecordExpression;
  exports$49.assertRegExpLiteral = assertRegExpLiteral;
  exports$49.assertRegexLiteral = assertRegexLiteral;
  exports$49.assertRestElement = assertRestElement;
  exports$49.assertRestProperty = assertRestProperty;
  exports$49.assertReturnStatement = assertReturnStatement;
  exports$49.assertScopable = assertScopable;
  exports$49.assertSequenceExpression = assertSequenceExpression;
  exports$49.assertSpreadElement = assertSpreadElement;
  exports$49.assertSpreadProperty = assertSpreadProperty;
  exports$49.assertStandardized = assertStandardized;
  exports$49.assertStatement = assertStatement;
  exports$49.assertStaticBlock = assertStaticBlock;
  exports$49.assertStringLiteral = assertStringLiteral;
  exports$49.assertStringLiteralTypeAnnotation = assertStringLiteralTypeAnnotation;
  exports$49.assertStringTypeAnnotation = assertStringTypeAnnotation;
  exports$49.assertSuper = assertSuper;
  exports$49.assertSwitchCase = assertSwitchCase;
  exports$49.assertSwitchStatement = assertSwitchStatement;
  exports$49.assertSymbolTypeAnnotation = assertSymbolTypeAnnotation;
  exports$49.assertTSAnyKeyword = assertTSAnyKeyword;
  exports$49.assertTSArrayType = assertTSArrayType;
  exports$49.assertTSAsExpression = assertTSAsExpression;
  exports$49.assertTSBaseType = assertTSBaseType;
  exports$49.assertTSBigIntKeyword = assertTSBigIntKeyword;
  exports$49.assertTSBooleanKeyword = assertTSBooleanKeyword;
  exports$49.assertTSCallSignatureDeclaration = assertTSCallSignatureDeclaration;
  exports$49.assertTSConditionalType = assertTSConditionalType;
  exports$49.assertTSConstructSignatureDeclaration = assertTSConstructSignatureDeclaration;
  exports$49.assertTSConstructorType = assertTSConstructorType;
  exports$49.assertTSDeclareFunction = assertTSDeclareFunction;
  exports$49.assertTSDeclareMethod = assertTSDeclareMethod;
  exports$49.assertTSEntityName = assertTSEntityName;
  exports$49.assertTSEnumDeclaration = assertTSEnumDeclaration;
  exports$49.assertTSEnumMember = assertTSEnumMember;
  exports$49.assertTSExportAssignment = assertTSExportAssignment;
  exports$49.assertTSExpressionWithTypeArguments = assertTSExpressionWithTypeArguments;
  exports$49.assertTSExternalModuleReference = assertTSExternalModuleReference;
  exports$49.assertTSFunctionType = assertTSFunctionType;
  exports$49.assertTSImportEqualsDeclaration = assertTSImportEqualsDeclaration;
  exports$49.assertTSImportType = assertTSImportType;
  exports$49.assertTSIndexSignature = assertTSIndexSignature;
  exports$49.assertTSIndexedAccessType = assertTSIndexedAccessType;
  exports$49.assertTSInferType = assertTSInferType;
  exports$49.assertTSInstantiationExpression = assertTSInstantiationExpression;
  exports$49.assertTSInterfaceBody = assertTSInterfaceBody;
  exports$49.assertTSInterfaceDeclaration = assertTSInterfaceDeclaration;
  exports$49.assertTSIntersectionType = assertTSIntersectionType;
  exports$49.assertTSIntrinsicKeyword = assertTSIntrinsicKeyword;
  exports$49.assertTSLiteralType = assertTSLiteralType;
  exports$49.assertTSMappedType = assertTSMappedType;
  exports$49.assertTSMethodSignature = assertTSMethodSignature;
  exports$49.assertTSModuleBlock = assertTSModuleBlock;
  exports$49.assertTSModuleDeclaration = assertTSModuleDeclaration;
  exports$49.assertTSNamedTupleMember = assertTSNamedTupleMember;
  exports$49.assertTSNamespaceExportDeclaration = assertTSNamespaceExportDeclaration;
  exports$49.assertTSNeverKeyword = assertTSNeverKeyword;
  exports$49.assertTSNonNullExpression = assertTSNonNullExpression;
  exports$49.assertTSNullKeyword = assertTSNullKeyword;
  exports$49.assertTSNumberKeyword = assertTSNumberKeyword;
  exports$49.assertTSObjectKeyword = assertTSObjectKeyword;
  exports$49.assertTSOptionalType = assertTSOptionalType;
  exports$49.assertTSParameterProperty = assertTSParameterProperty;
  exports$49.assertTSParenthesizedType = assertTSParenthesizedType;
  exports$49.assertTSPropertySignature = assertTSPropertySignature;
  exports$49.assertTSQualifiedName = assertTSQualifiedName;
  exports$49.assertTSRestType = assertTSRestType;
  exports$49.assertTSSatisfiesExpression = assertTSSatisfiesExpression;
  exports$49.assertTSStringKeyword = assertTSStringKeyword;
  exports$49.assertTSSymbolKeyword = assertTSSymbolKeyword;
  exports$49.assertTSThisType = assertTSThisType;
  exports$49.assertTSTupleType = assertTSTupleType;
  exports$49.assertTSType = assertTSType;
  exports$49.assertTSTypeAliasDeclaration = assertTSTypeAliasDeclaration;
  exports$49.assertTSTypeAnnotation = assertTSTypeAnnotation;
  exports$49.assertTSTypeAssertion = assertTSTypeAssertion;
  exports$49.assertTSTypeElement = assertTSTypeElement;
  exports$49.assertTSTypeLiteral = assertTSTypeLiteral;
  exports$49.assertTSTypeOperator = assertTSTypeOperator;
  exports$49.assertTSTypeParameter = assertTSTypeParameter;
  exports$49.assertTSTypeParameterDeclaration = assertTSTypeParameterDeclaration;
  exports$49.assertTSTypeParameterInstantiation = assertTSTypeParameterInstantiation;
  exports$49.assertTSTypePredicate = assertTSTypePredicate;
  exports$49.assertTSTypeQuery = assertTSTypeQuery;
  exports$49.assertTSTypeReference = assertTSTypeReference;
  exports$49.assertTSUndefinedKeyword = assertTSUndefinedKeyword;
  exports$49.assertTSUnionType = assertTSUnionType;
  exports$49.assertTSUnknownKeyword = assertTSUnknownKeyword;
  exports$49.assertTSVoidKeyword = assertTSVoidKeyword;
  exports$49.assertTaggedTemplateExpression = assertTaggedTemplateExpression;
  exports$49.assertTemplateElement = assertTemplateElement;
  exports$49.assertTemplateLiteral = assertTemplateLiteral;
  exports$49.assertTerminatorless = assertTerminatorless;
  exports$49.assertThisExpression = assertThisExpression;
  exports$49.assertThisTypeAnnotation = assertThisTypeAnnotation;
  exports$49.assertThrowStatement = assertThrowStatement;
  exports$49.assertTopicReference = assertTopicReference;
  exports$49.assertTryStatement = assertTryStatement;
  exports$49.assertTupleExpression = assertTupleExpression;
  exports$49.assertTupleTypeAnnotation = assertTupleTypeAnnotation;
  exports$49.assertTypeAlias = assertTypeAlias;
  exports$49.assertTypeAnnotation = assertTypeAnnotation;
  exports$49.assertTypeCastExpression = assertTypeCastExpression;
  exports$49.assertTypeParameter = assertTypeParameter;
  exports$49.assertTypeParameterDeclaration = assertTypeParameterDeclaration;
  exports$49.assertTypeParameterInstantiation = assertTypeParameterInstantiation;
  exports$49.assertTypeScript = assertTypeScript;
  exports$49.assertTypeofTypeAnnotation = assertTypeofTypeAnnotation;
  exports$49.assertUnaryExpression = assertUnaryExpression;
  exports$49.assertUnaryLike = assertUnaryLike;
  exports$49.assertUnionTypeAnnotation = assertUnionTypeAnnotation;
  exports$49.assertUpdateExpression = assertUpdateExpression;
  exports$49.assertUserWhitespacable = assertUserWhitespacable;
  exports$49.assertV8IntrinsicIdentifier = assertV8IntrinsicIdentifier;
  exports$49.assertVariableDeclaration = assertVariableDeclaration;
  exports$49.assertVariableDeclarator = assertVariableDeclarator;
  exports$49.assertVariance = assertVariance;
  exports$49.assertVoidTypeAnnotation = assertVoidTypeAnnotation;
  exports$49.assertWhile = assertWhile;
  exports$49.assertWhileStatement = assertWhileStatement;
  exports$49.assertWithStatement = assertWithStatement;
  exports$49.assertYieldExpression = assertYieldExpression;
  var _is = dew$4w();
  var _deprecationWarning = dew$4F();
  function assert(type, node, opts) {
    if (!(0, _is.default)(type, node, opts)) {
      throw new Error(`Expected type "${type}" with option ${JSON.stringify(opts)}, ` + `but instead got "${node.type}".`);
    }
  }
  function assertArrayExpression(node, opts) {
    assert("ArrayExpression", node, opts);
  }
  function assertAssignmentExpression(node, opts) {
    assert("AssignmentExpression", node, opts);
  }
  function assertBinaryExpression(node, opts) {
    assert("BinaryExpression", node, opts);
  }
  function assertInterpreterDirective(node, opts) {
    assert("InterpreterDirective", node, opts);
  }
  function assertDirective(node, opts) {
    assert("Directive", node, opts);
  }
  function assertDirectiveLiteral(node, opts) {
    assert("DirectiveLiteral", node, opts);
  }
  function assertBlockStatement(node, opts) {
    assert("BlockStatement", node, opts);
  }
  function assertBreakStatement(node, opts) {
    assert("BreakStatement", node, opts);
  }
  function assertCallExpression(node, opts) {
    assert("CallExpression", node, opts);
  }
  function assertCatchClause(node, opts) {
    assert("CatchClause", node, opts);
  }
  function assertConditionalExpression(node, opts) {
    assert("ConditionalExpression", node, opts);
  }
  function assertContinueStatement(node, opts) {
    assert("ContinueStatement", node, opts);
  }
  function assertDebuggerStatement(node, opts) {
    assert("DebuggerStatement", node, opts);
  }
  function assertDoWhileStatement(node, opts) {
    assert("DoWhileStatement", node, opts);
  }
  function assertEmptyStatement(node, opts) {
    assert("EmptyStatement", node, opts);
  }
  function assertExpressionStatement(node, opts) {
    assert("ExpressionStatement", node, opts);
  }
  function assertFile(node, opts) {
    assert("File", node, opts);
  }
  function assertForInStatement(node, opts) {
    assert("ForInStatement", node, opts);
  }
  function assertForStatement(node, opts) {
    assert("ForStatement", node, opts);
  }
  function assertFunctionDeclaration(node, opts) {
    assert("FunctionDeclaration", node, opts);
  }
  function assertFunctionExpression(node, opts) {
    assert("FunctionExpression", node, opts);
  }
  function assertIdentifier(node, opts) {
    assert("Identifier", node, opts);
  }
  function assertIfStatement(node, opts) {
    assert("IfStatement", node, opts);
  }
  function assertLabeledStatement(node, opts) {
    assert("LabeledStatement", node, opts);
  }
  function assertStringLiteral(node, opts) {
    assert("StringLiteral", node, opts);
  }
  function assertNumericLiteral(node, opts) {
    assert("NumericLiteral", node, opts);
  }
  function assertNullLiteral(node, opts) {
    assert("NullLiteral", node, opts);
  }
  function assertBooleanLiteral(node, opts) {
    assert("BooleanLiteral", node, opts);
  }
  function assertRegExpLiteral(node, opts) {
    assert("RegExpLiteral", node, opts);
  }
  function assertLogicalExpression(node, opts) {
    assert("LogicalExpression", node, opts);
  }
  function assertMemberExpression(node, opts) {
    assert("MemberExpression", node, opts);
  }
  function assertNewExpression(node, opts) {
    assert("NewExpression", node, opts);
  }
  function assertProgram(node, opts) {
    assert("Program", node, opts);
  }
  function assertObjectExpression(node, opts) {
    assert("ObjectExpression", node, opts);
  }
  function assertObjectMethod(node, opts) {
    assert("ObjectMethod", node, opts);
  }
  function assertObjectProperty(node, opts) {
    assert("ObjectProperty", node, opts);
  }
  function assertRestElement(node, opts) {
    assert("RestElement", node, opts);
  }
  function assertReturnStatement(node, opts) {
    assert("ReturnStatement", node, opts);
  }
  function assertSequenceExpression(node, opts) {
    assert("SequenceExpression", node, opts);
  }
  function assertParenthesizedExpression(node, opts) {
    assert("ParenthesizedExpression", node, opts);
  }
  function assertSwitchCase(node, opts) {
    assert("SwitchCase", node, opts);
  }
  function assertSwitchStatement(node, opts) {
    assert("SwitchStatement", node, opts);
  }
  function assertThisExpression(node, opts) {
    assert("ThisExpression", node, opts);
  }
  function assertThrowStatement(node, opts) {
    assert("ThrowStatement", node, opts);
  }
  function assertTryStatement(node, opts) {
    assert("TryStatement", node, opts);
  }
  function assertUnaryExpression(node, opts) {
    assert("UnaryExpression", node, opts);
  }
  function assertUpdateExpression(node, opts) {
    assert("UpdateExpression", node, opts);
  }
  function assertVariableDeclaration(node, opts) {
    assert("VariableDeclaration", node, opts);
  }
  function assertVariableDeclarator(node, opts) {
    assert("VariableDeclarator", node, opts);
  }
  function assertWhileStatement(node, opts) {
    assert("WhileStatement", node, opts);
  }
  function assertWithStatement(node, opts) {
    assert("WithStatement", node, opts);
  }
  function assertAssignmentPattern(node, opts) {
    assert("AssignmentPattern", node, opts);
  }
  function assertArrayPattern(node, opts) {
    assert("ArrayPattern", node, opts);
  }
  function assertArrowFunctionExpression(node, opts) {
    assert("ArrowFunctionExpression", node, opts);
  }
  function assertClassBody(node, opts) {
    assert("ClassBody", node, opts);
  }
  function assertClassExpression(node, opts) {
    assert("ClassExpression", node, opts);
  }
  function assertClassDeclaration(node, opts) {
    assert("ClassDeclaration", node, opts);
  }
  function assertExportAllDeclaration(node, opts) {
    assert("ExportAllDeclaration", node, opts);
  }
  function assertExportDefaultDeclaration(node, opts) {
    assert("ExportDefaultDeclaration", node, opts);
  }
  function assertExportNamedDeclaration(node, opts) {
    assert("ExportNamedDeclaration", node, opts);
  }
  function assertExportSpecifier(node, opts) {
    assert("ExportSpecifier", node, opts);
  }
  function assertForOfStatement(node, opts) {
    assert("ForOfStatement", node, opts);
  }
  function assertImportDeclaration(node, opts) {
    assert("ImportDeclaration", node, opts);
  }
  function assertImportDefaultSpecifier(node, opts) {
    assert("ImportDefaultSpecifier", node, opts);
  }
  function assertImportNamespaceSpecifier(node, opts) {
    assert("ImportNamespaceSpecifier", node, opts);
  }
  function assertImportSpecifier(node, opts) {
    assert("ImportSpecifier", node, opts);
  }
  function assertImportExpression(node, opts) {
    assert("ImportExpression", node, opts);
  }
  function assertMetaProperty(node, opts) {
    assert("MetaProperty", node, opts);
  }
  function assertClassMethod(node, opts) {
    assert("ClassMethod", node, opts);
  }
  function assertObjectPattern(node, opts) {
    assert("ObjectPattern", node, opts);
  }
  function assertSpreadElement(node, opts) {
    assert("SpreadElement", node, opts);
  }
  function assertSuper(node, opts) {
    assert("Super", node, opts);
  }
  function assertTaggedTemplateExpression(node, opts) {
    assert("TaggedTemplateExpression", node, opts);
  }
  function assertTemplateElement(node, opts) {
    assert("TemplateElement", node, opts);
  }
  function assertTemplateLiteral(node, opts) {
    assert("TemplateLiteral", node, opts);
  }
  function assertYieldExpression(node, opts) {
    assert("YieldExpression", node, opts);
  }
  function assertAwaitExpression(node, opts) {
    assert("AwaitExpression", node, opts);
  }
  function assertImport(node, opts) {
    assert("Import", node, opts);
  }
  function assertBigIntLiteral(node, opts) {
    assert("BigIntLiteral", node, opts);
  }
  function assertExportNamespaceSpecifier(node, opts) {
    assert("ExportNamespaceSpecifier", node, opts);
  }
  function assertOptionalMemberExpression(node, opts) {
    assert("OptionalMemberExpression", node, opts);
  }
  function assertOptionalCallExpression(node, opts) {
    assert("OptionalCallExpression", node, opts);
  }
  function assertClassProperty(node, opts) {
    assert("ClassProperty", node, opts);
  }
  function assertClassAccessorProperty(node, opts) {
    assert("ClassAccessorProperty", node, opts);
  }
  function assertClassPrivateProperty(node, opts) {
    assert("ClassPrivateProperty", node, opts);
  }
  function assertClassPrivateMethod(node, opts) {
    assert("ClassPrivateMethod", node, opts);
  }
  function assertPrivateName(node, opts) {
    assert("PrivateName", node, opts);
  }
  function assertStaticBlock(node, opts) {
    assert("StaticBlock", node, opts);
  }
  function assertAnyTypeAnnotation(node, opts) {
    assert("AnyTypeAnnotation", node, opts);
  }
  function assertArrayTypeAnnotation(node, opts) {
    assert("ArrayTypeAnnotation", node, opts);
  }
  function assertBooleanTypeAnnotation(node, opts) {
    assert("BooleanTypeAnnotation", node, opts);
  }
  function assertBooleanLiteralTypeAnnotation(node, opts) {
    assert("BooleanLiteralTypeAnnotation", node, opts);
  }
  function assertNullLiteralTypeAnnotation(node, opts) {
    assert("NullLiteralTypeAnnotation", node, opts);
  }
  function assertClassImplements(node, opts) {
    assert("ClassImplements", node, opts);
  }
  function assertDeclareClass(node, opts) {
    assert("DeclareClass", node, opts);
  }
  function assertDeclareFunction(node, opts) {
    assert("DeclareFunction", node, opts);
  }
  function assertDeclareInterface(node, opts) {
    assert("DeclareInterface", node, opts);
  }
  function assertDeclareModule(node, opts) {
    assert("DeclareModule", node, opts);
  }
  function assertDeclareModuleExports(node, opts) {
    assert("DeclareModuleExports", node, opts);
  }
  function assertDeclareTypeAlias(node, opts) {
    assert("DeclareTypeAlias", node, opts);
  }
  function assertDeclareOpaqueType(node, opts) {
    assert("DeclareOpaqueType", node, opts);
  }
  function assertDeclareVariable(node, opts) {
    assert("DeclareVariable", node, opts);
  }
  function assertDeclareExportDeclaration(node, opts) {
    assert("DeclareExportDeclaration", node, opts);
  }
  function assertDeclareExportAllDeclaration(node, opts) {
    assert("DeclareExportAllDeclaration", node, opts);
  }
  function assertDeclaredPredicate(node, opts) {
    assert("DeclaredPredicate", node, opts);
  }
  function assertExistsTypeAnnotation(node, opts) {
    assert("ExistsTypeAnnotation", node, opts);
  }
  function assertFunctionTypeAnnotation(node, opts) {
    assert("FunctionTypeAnnotation", node, opts);
  }
  function assertFunctionTypeParam(node, opts) {
    assert("FunctionTypeParam", node, opts);
  }
  function assertGenericTypeAnnotation(node, opts) {
    assert("GenericTypeAnnotation", node, opts);
  }
  function assertInferredPredicate(node, opts) {
    assert("InferredPredicate", node, opts);
  }
  function assertInterfaceExtends(node, opts) {
    assert("InterfaceExtends", node, opts);
  }
  function assertInterfaceDeclaration(node, opts) {
    assert("InterfaceDeclaration", node, opts);
  }
  function assertInterfaceTypeAnnotation(node, opts) {
    assert("InterfaceTypeAnnotation", node, opts);
  }
  function assertIntersectionTypeAnnotation(node, opts) {
    assert("IntersectionTypeAnnotation", node, opts);
  }
  function assertMixedTypeAnnotation(node, opts) {
    assert("MixedTypeAnnotation", node, opts);
  }
  function assertEmptyTypeAnnotation(node, opts) {
    assert("EmptyTypeAnnotation", node, opts);
  }
  function assertNullableTypeAnnotation(node, opts) {
    assert("NullableTypeAnnotation", node, opts);
  }
  function assertNumberLiteralTypeAnnotation(node, opts) {
    assert("NumberLiteralTypeAnnotation", node, opts);
  }
  function assertNumberTypeAnnotation(node, opts) {
    assert("NumberTypeAnnotation", node, opts);
  }
  function assertObjectTypeAnnotation(node, opts) {
    assert("ObjectTypeAnnotation", node, opts);
  }
  function assertObjectTypeInternalSlot(node, opts) {
    assert("ObjectTypeInternalSlot", node, opts);
  }
  function assertObjectTypeCallProperty(node, opts) {
    assert("ObjectTypeCallProperty", node, opts);
  }
  function assertObjectTypeIndexer(node, opts) {
    assert("ObjectTypeIndexer", node, opts);
  }
  function assertObjectTypeProperty(node, opts) {
    assert("ObjectTypeProperty", node, opts);
  }
  function assertObjectTypeSpreadProperty(node, opts) {
    assert("ObjectTypeSpreadProperty", node, opts);
  }
  function assertOpaqueType(node, opts) {
    assert("OpaqueType", node, opts);
  }
  function assertQualifiedTypeIdentifier(node, opts) {
    assert("QualifiedTypeIdentifier", node, opts);
  }
  function assertStringLiteralTypeAnnotation(node, opts) {
    assert("StringLiteralTypeAnnotation", node, opts);
  }
  function assertStringTypeAnnotation(node, opts) {
    assert("StringTypeAnnotation", node, opts);
  }
  function assertSymbolTypeAnnotation(node, opts) {
    assert("SymbolTypeAnnotation", node, opts);
  }
  function assertThisTypeAnnotation(node, opts) {
    assert("ThisTypeAnnotation", node, opts);
  }
  function assertTupleTypeAnnotation(node, opts) {
    assert("TupleTypeAnnotation", node, opts);
  }
  function assertTypeofTypeAnnotation(node, opts) {
    assert("TypeofTypeAnnotation", node, opts);
  }
  function assertTypeAlias(node, opts) {
    assert("TypeAlias", node, opts);
  }
  function assertTypeAnnotation(node, opts) {
    assert("TypeAnnotation", node, opts);
  }
  function assertTypeCastExpression(node, opts) {
    assert("TypeCastExpression", node, opts);
  }
  function assertTypeParameter(node, opts) {
    assert("TypeParameter", node, opts);
  }
  function assertTypeParameterDeclaration(node, opts) {
    assert("TypeParameterDeclaration", node, opts);
  }
  function assertTypeParameterInstantiation(node, opts) {
    assert("TypeParameterInstantiation", node, opts);
  }
  function assertUnionTypeAnnotation(node, opts) {
    assert("UnionTypeAnnotation", node, opts);
  }
  function assertVariance(node, opts) {
    assert("Variance", node, opts);
  }
  function assertVoidTypeAnnotation(node, opts) {
    assert("VoidTypeAnnotation", node, opts);
  }
  function assertEnumDeclaration(node, opts) {
    assert("EnumDeclaration", node, opts);
  }
  function assertEnumBooleanBody(node, opts) {
    assert("EnumBooleanBody", node, opts);
  }
  function assertEnumNumberBody(node, opts) {
    assert("EnumNumberBody", node, opts);
  }
  function assertEnumStringBody(node, opts) {
    assert("EnumStringBody", node, opts);
  }
  function assertEnumSymbolBody(node, opts) {
    assert("EnumSymbolBody", node, opts);
  }
  function assertEnumBooleanMember(node, opts) {
    assert("EnumBooleanMember", node, opts);
  }
  function assertEnumNumberMember(node, opts) {
    assert("EnumNumberMember", node, opts);
  }
  function assertEnumStringMember(node, opts) {
    assert("EnumStringMember", node, opts);
  }
  function assertEnumDefaultedMember(node, opts) {
    assert("EnumDefaultedMember", node, opts);
  }
  function assertIndexedAccessType(node, opts) {
    assert("IndexedAccessType", node, opts);
  }
  function assertOptionalIndexedAccessType(node, opts) {
    assert("OptionalIndexedAccessType", node, opts);
  }
  function assertJSXAttribute(node, opts) {
    assert("JSXAttribute", node, opts);
  }
  function assertJSXClosingElement(node, opts) {
    assert("JSXClosingElement", node, opts);
  }
  function assertJSXElement(node, opts) {
    assert("JSXElement", node, opts);
  }
  function assertJSXEmptyExpression(node, opts) {
    assert("JSXEmptyExpression", node, opts);
  }
  function assertJSXExpressionContainer(node, opts) {
    assert("JSXExpressionContainer", node, opts);
  }
  function assertJSXSpreadChild(node, opts) {
    assert("JSXSpreadChild", node, opts);
  }
  function assertJSXIdentifier(node, opts) {
    assert("JSXIdentifier", node, opts);
  }
  function assertJSXMemberExpression(node, opts) {
    assert("JSXMemberExpression", node, opts);
  }
  function assertJSXNamespacedName(node, opts) {
    assert("JSXNamespacedName", node, opts);
  }
  function assertJSXOpeningElement(node, opts) {
    assert("JSXOpeningElement", node, opts);
  }
  function assertJSXSpreadAttribute(node, opts) {
    assert("JSXSpreadAttribute", node, opts);
  }
  function assertJSXText(node, opts) {
    assert("JSXText", node, opts);
  }
  function assertJSXFragment(node, opts) {
    assert("JSXFragment", node, opts);
  }
  function assertJSXOpeningFragment(node, opts) {
    assert("JSXOpeningFragment", node, opts);
  }
  function assertJSXClosingFragment(node, opts) {
    assert("JSXClosingFragment", node, opts);
  }
  function assertNoop(node, opts) {
    assert("Noop", node, opts);
  }
  function assertPlaceholder(node, opts) {
    assert("Placeholder", node, opts);
  }
  function assertV8IntrinsicIdentifier(node, opts) {
    assert("V8IntrinsicIdentifier", node, opts);
  }
  function assertArgumentPlaceholder(node, opts) {
    assert("ArgumentPlaceholder", node, opts);
  }
  function assertBindExpression(node, opts) {
    assert("BindExpression", node, opts);
  }
  function assertImportAttribute(node, opts) {
    assert("ImportAttribute", node, opts);
  }
  function assertDecorator(node, opts) {
    assert("Decorator", node, opts);
  }
  function assertDoExpression(node, opts) {
    assert("DoExpression", node, opts);
  }
  function assertExportDefaultSpecifier(node, opts) {
    assert("ExportDefaultSpecifier", node, opts);
  }
  function assertRecordExpression(node, opts) {
    assert("RecordExpression", node, opts);
  }
  function assertTupleExpression(node, opts) {
    assert("TupleExpression", node, opts);
  }
  function assertDecimalLiteral(node, opts) {
    assert("DecimalLiteral", node, opts);
  }
  function assertModuleExpression(node, opts) {
    assert("ModuleExpression", node, opts);
  }
  function assertTopicReference(node, opts) {
    assert("TopicReference", node, opts);
  }
  function assertPipelineTopicExpression(node, opts) {
    assert("PipelineTopicExpression", node, opts);
  }
  function assertPipelineBareFunction(node, opts) {
    assert("PipelineBareFunction", node, opts);
  }
  function assertPipelinePrimaryTopicReference(node, opts) {
    assert("PipelinePrimaryTopicReference", node, opts);
  }
  function assertTSParameterProperty(node, opts) {
    assert("TSParameterProperty", node, opts);
  }
  function assertTSDeclareFunction(node, opts) {
    assert("TSDeclareFunction", node, opts);
  }
  function assertTSDeclareMethod(node, opts) {
    assert("TSDeclareMethod", node, opts);
  }
  function assertTSQualifiedName(node, opts) {
    assert("TSQualifiedName", node, opts);
  }
  function assertTSCallSignatureDeclaration(node, opts) {
    assert("TSCallSignatureDeclaration", node, opts);
  }
  function assertTSConstructSignatureDeclaration(node, opts) {
    assert("TSConstructSignatureDeclaration", node, opts);
  }
  function assertTSPropertySignature(node, opts) {
    assert("TSPropertySignature", node, opts);
  }
  function assertTSMethodSignature(node, opts) {
    assert("TSMethodSignature", node, opts);
  }
  function assertTSIndexSignature(node, opts) {
    assert("TSIndexSignature", node, opts);
  }
  function assertTSAnyKeyword(node, opts) {
    assert("TSAnyKeyword", node, opts);
  }
  function assertTSBooleanKeyword(node, opts) {
    assert("TSBooleanKeyword", node, opts);
  }
  function assertTSBigIntKeyword(node, opts) {
    assert("TSBigIntKeyword", node, opts);
  }
  function assertTSIntrinsicKeyword(node, opts) {
    assert("TSIntrinsicKeyword", node, opts);
  }
  function assertTSNeverKeyword(node, opts) {
    assert("TSNeverKeyword", node, opts);
  }
  function assertTSNullKeyword(node, opts) {
    assert("TSNullKeyword", node, opts);
  }
  function assertTSNumberKeyword(node, opts) {
    assert("TSNumberKeyword", node, opts);
  }
  function assertTSObjectKeyword(node, opts) {
    assert("TSObjectKeyword", node, opts);
  }
  function assertTSStringKeyword(node, opts) {
    assert("TSStringKeyword", node, opts);
  }
  function assertTSSymbolKeyword(node, opts) {
    assert("TSSymbolKeyword", node, opts);
  }
  function assertTSUndefinedKeyword(node, opts) {
    assert("TSUndefinedKeyword", node, opts);
  }
  function assertTSUnknownKeyword(node, opts) {
    assert("TSUnknownKeyword", node, opts);
  }
  function assertTSVoidKeyword(node, opts) {
    assert("TSVoidKeyword", node, opts);
  }
  function assertTSThisType(node, opts) {
    assert("TSThisType", node, opts);
  }
  function assertTSFunctionType(node, opts) {
    assert("TSFunctionType", node, opts);
  }
  function assertTSConstructorType(node, opts) {
    assert("TSConstructorType", node, opts);
  }
  function assertTSTypeReference(node, opts) {
    assert("TSTypeReference", node, opts);
  }
  function assertTSTypePredicate(node, opts) {
    assert("TSTypePredicate", node, opts);
  }
  function assertTSTypeQuery(node, opts) {
    assert("TSTypeQuery", node, opts);
  }
  function assertTSTypeLiteral(node, opts) {
    assert("TSTypeLiteral", node, opts);
  }
  function assertTSArrayType(node, opts) {
    assert("TSArrayType", node, opts);
  }
  function assertTSTupleType(node, opts) {
    assert("TSTupleType", node, opts);
  }
  function assertTSOptionalType(node, opts) {
    assert("TSOptionalType", node, opts);
  }
  function assertTSRestType(node, opts) {
    assert("TSRestType", node, opts);
  }
  function assertTSNamedTupleMember(node, opts) {
    assert("TSNamedTupleMember", node, opts);
  }
  function assertTSUnionType(node, opts) {
    assert("TSUnionType", node, opts);
  }
  function assertTSIntersectionType(node, opts) {
    assert("TSIntersectionType", node, opts);
  }
  function assertTSConditionalType(node, opts) {
    assert("TSConditionalType", node, opts);
  }
  function assertTSInferType(node, opts) {
    assert("TSInferType", node, opts);
  }
  function assertTSParenthesizedType(node, opts) {
    assert("TSParenthesizedType", node, opts);
  }
  function assertTSTypeOperator(node, opts) {
    assert("TSTypeOperator", node, opts);
  }
  function assertTSIndexedAccessType(node, opts) {
    assert("TSIndexedAccessType", node, opts);
  }
  function assertTSMappedType(node, opts) {
    assert("TSMappedType", node, opts);
  }
  function assertTSLiteralType(node, opts) {
    assert("TSLiteralType", node, opts);
  }
  function assertTSExpressionWithTypeArguments(node, opts) {
    assert("TSExpressionWithTypeArguments", node, opts);
  }
  function assertTSInterfaceDeclaration(node, opts) {
    assert("TSInterfaceDeclaration", node, opts);
  }
  function assertTSInterfaceBody(node, opts) {
    assert("TSInterfaceBody", node, opts);
  }
  function assertTSTypeAliasDeclaration(node, opts) {
    assert("TSTypeAliasDeclaration", node, opts);
  }
  function assertTSInstantiationExpression(node, opts) {
    assert("TSInstantiationExpression", node, opts);
  }
  function assertTSAsExpression(node, opts) {
    assert("TSAsExpression", node, opts);
  }
  function assertTSSatisfiesExpression(node, opts) {
    assert("TSSatisfiesExpression", node, opts);
  }
  function assertTSTypeAssertion(node, opts) {
    assert("TSTypeAssertion", node, opts);
  }
  function assertTSEnumDeclaration(node, opts) {
    assert("TSEnumDeclaration", node, opts);
  }
  function assertTSEnumMember(node, opts) {
    assert("TSEnumMember", node, opts);
  }
  function assertTSModuleDeclaration(node, opts) {
    assert("TSModuleDeclaration", node, opts);
  }
  function assertTSModuleBlock(node, opts) {
    assert("TSModuleBlock", node, opts);
  }
  function assertTSImportType(node, opts) {
    assert("TSImportType", node, opts);
  }
  function assertTSImportEqualsDeclaration(node, opts) {
    assert("TSImportEqualsDeclaration", node, opts);
  }
  function assertTSExternalModuleReference(node, opts) {
    assert("TSExternalModuleReference", node, opts);
  }
  function assertTSNonNullExpression(node, opts) {
    assert("TSNonNullExpression", node, opts);
  }
  function assertTSExportAssignment(node, opts) {
    assert("TSExportAssignment", node, opts);
  }
  function assertTSNamespaceExportDeclaration(node, opts) {
    assert("TSNamespaceExportDeclaration", node, opts);
  }
  function assertTSTypeAnnotation(node, opts) {
    assert("TSTypeAnnotation", node, opts);
  }
  function assertTSTypeParameterInstantiation(node, opts) {
    assert("TSTypeParameterInstantiation", node, opts);
  }
  function assertTSTypeParameterDeclaration(node, opts) {
    assert("TSTypeParameterDeclaration", node, opts);
  }
  function assertTSTypeParameter(node, opts) {
    assert("TSTypeParameter", node, opts);
  }
  function assertStandardized(node, opts) {
    assert("Standardized", node, opts);
  }
  function assertExpression(node, opts) {
    assert("Expression", node, opts);
  }
  function assertBinary(node, opts) {
    assert("Binary", node, opts);
  }
  function assertScopable(node, opts) {
    assert("Scopable", node, opts);
  }
  function assertBlockParent(node, opts) {
    assert("BlockParent", node, opts);
  }
  function assertBlock(node, opts) {
    assert("Block", node, opts);
  }
  function assertStatement(node, opts) {
    assert("Statement", node, opts);
  }
  function assertTerminatorless(node, opts) {
    assert("Terminatorless", node, opts);
  }
  function assertCompletionStatement(node, opts) {
    assert("CompletionStatement", node, opts);
  }
  function assertConditional(node, opts) {
    assert("Conditional", node, opts);
  }
  function assertLoop(node, opts) {
    assert("Loop", node, opts);
  }
  function assertWhile(node, opts) {
    assert("While", node, opts);
  }
  function assertExpressionWrapper(node, opts) {
    assert("ExpressionWrapper", node, opts);
  }
  function assertFor(node, opts) {
    assert("For", node, opts);
  }
  function assertForXStatement(node, opts) {
    assert("ForXStatement", node, opts);
  }
  function assertFunction(node, opts) {
    assert("Function", node, opts);
  }
  function assertFunctionParent(node, opts) {
    assert("FunctionParent", node, opts);
  }
  function assertPureish(node, opts) {
    assert("Pureish", node, opts);
  }
  function assertDeclaration(node, opts) {
    assert("Declaration", node, opts);
  }
  function assertPatternLike(node, opts) {
    assert("PatternLike", node, opts);
  }
  function assertLVal(node, opts) {
    assert("LVal", node, opts);
  }
  function assertTSEntityName(node, opts) {
    assert("TSEntityName", node, opts);
  }
  function assertLiteral(node, opts) {
    assert("Literal", node, opts);
  }
  function assertImmutable(node, opts) {
    assert("Immutable", node, opts);
  }
  function assertUserWhitespacable(node, opts) {
    assert("UserWhitespacable", node, opts);
  }
  function assertMethod(node, opts) {
    assert("Method", node, opts);
  }
  function assertObjectMember(node, opts) {
    assert("ObjectMember", node, opts);
  }
  function assertProperty(node, opts) {
    assert("Property", node, opts);
  }
  function assertUnaryLike(node, opts) {
    assert("UnaryLike", node, opts);
  }
  function assertPattern(node, opts) {
    assert("Pattern", node, opts);
  }
  function assertClass(node, opts) {
    assert("Class", node, opts);
  }
  function assertImportOrExportDeclaration(node, opts) {
    assert("ImportOrExportDeclaration", node, opts);
  }
  function assertExportDeclaration(node, opts) {
    assert("ExportDeclaration", node, opts);
  }
  function assertModuleSpecifier(node, opts) {
    assert("ModuleSpecifier", node, opts);
  }
  function assertAccessor(node, opts) {
    assert("Accessor", node, opts);
  }
  function assertPrivate(node, opts) {
    assert("Private", node, opts);
  }
  function assertFlow(node, opts) {
    assert("Flow", node, opts);
  }
  function assertFlowType(node, opts) {
    assert("FlowType", node, opts);
  }
  function assertFlowBaseAnnotation(node, opts) {
    assert("FlowBaseAnnotation", node, opts);
  }
  function assertFlowDeclaration(node, opts) {
    assert("FlowDeclaration", node, opts);
  }
  function assertFlowPredicate(node, opts) {
    assert("FlowPredicate", node, opts);
  }
  function assertEnumBody(node, opts) {
    assert("EnumBody", node, opts);
  }
  function assertEnumMember(node, opts) {
    assert("EnumMember", node, opts);
  }
  function assertJSX(node, opts) {
    assert("JSX", node, opts);
  }
  function assertMiscellaneous(node, opts) {
    assert("Miscellaneous", node, opts);
  }
  function assertTypeScript(node, opts) {
    assert("TypeScript", node, opts);
  }
  function assertTSTypeElement(node, opts) {
    assert("TSTypeElement", node, opts);
  }
  function assertTSType(node, opts) {
    assert("TSType", node, opts);
  }
  function assertTSBaseType(node, opts) {
    assert("TSBaseType", node, opts);
  }
  function assertNumberLiteral(node, opts) {
    (0, _deprecationWarning.default)("assertNumberLiteral", "assertNumericLiteral");
    assert("NumberLiteral", node, opts);
  }
  function assertRegexLiteral(node, opts) {
    (0, _deprecationWarning.default)("assertRegexLiteral", "assertRegExpLiteral");
    assert("RegexLiteral", node, opts);
  }
  function assertRestProperty(node, opts) {
    (0, _deprecationWarning.default)("assertRestProperty", "assertRestElement");
    assert("RestProperty", node, opts);
  }
  function assertSpreadProperty(node, opts) {
    (0, _deprecationWarning.default)("assertSpreadProperty", "assertSpreadElement");
    assert("SpreadProperty", node, opts);
  }
  function assertModuleDeclaration(node, opts) {
    (0, _deprecationWarning.default)("assertModuleDeclaration", "assertImportOrExportDeclaration");
    assert("ModuleDeclaration", node, opts);
  }
  return exports$49;
}

var exports$48 = {},
  _dewExec$47 = false;
function dew$47() {
  if (_dewExec$47) return exports$48;
  _dewExec$47 = true;
  Object.defineProperty(exports$48, "__esModule", {
    value: true
  });
  exports$48.default = void 0;
  var _index = dew$4d();
  exports$48.default = createTypeAnnotationBasedOnTypeof;
  function createTypeAnnotationBasedOnTypeof(type) {
    switch (type) {
      case "string":
        return (0, _index.stringTypeAnnotation)();
      case "number":
        return (0, _index.numberTypeAnnotation)();
      case "undefined":
        return (0, _index.voidTypeAnnotation)();
      case "boolean":
        return (0, _index.booleanTypeAnnotation)();
      case "function":
        return (0, _index.genericTypeAnnotation)((0, _index.identifier)("Function"));
      case "object":
        return (0, _index.genericTypeAnnotation)((0, _index.identifier)("Object"));
      case "symbol":
        return (0, _index.genericTypeAnnotation)((0, _index.identifier)("Symbol"));
      case "bigint":
        return (0, _index.anyTypeAnnotation)();
    }
    throw new Error("Invalid typeof value: " + type);
  }
  return exports$48;
}

var exports$47 = {},
  _dewExec$46 = false;
function dew$46() {
  if (_dewExec$46) return exports$47;
  _dewExec$46 = true;
  Object.defineProperty(exports$47, "__esModule", {
    value: true
  });
  exports$47.default = removeTypeDuplicates;
  var _index = dew$4E();
  function getQualifiedName(node) {
    return (0, _index.isIdentifier)(node) ? node.name : `${node.id.name}.${getQualifiedName(node.qualification)}`;
  }
  function removeTypeDuplicates(nodesIn) {
    const nodes = Array.from(nodesIn);
    const generics = new Map();
    const bases = new Map();
    const typeGroups = new Set();
    const types = [];
    for (let i = 0; i < nodes.length; i++) {
      const node = nodes[i];
      if (!node) continue;
      if (types.includes(node)) {
        continue;
      }
      if ((0, _index.isAnyTypeAnnotation)(node)) {
        return [node];
      }
      if ((0, _index.isFlowBaseAnnotation)(node)) {
        bases.set(node.type, node);
        continue;
      }
      if ((0, _index.isUnionTypeAnnotation)(node)) {
        if (!typeGroups.has(node.types)) {
          nodes.push(...node.types);
          typeGroups.add(node.types);
        }
        continue;
      }
      if ((0, _index.isGenericTypeAnnotation)(node)) {
        const name = getQualifiedName(node.id);
        if (generics.has(name)) {
          let existing = generics.get(name);
          if (existing.typeParameters) {
            if (node.typeParameters) {
              existing.typeParameters.params.push(...node.typeParameters.params);
              existing.typeParameters.params = removeTypeDuplicates(existing.typeParameters.params);
            }
          } else {
            existing = node.typeParameters;
          }
        } else {
          generics.set(name, node);
        }
        continue;
      }
      types.push(node);
    }
    for (const [, baseType] of bases) {
      types.push(baseType);
    }
    for (const [, genericName] of generics) {
      types.push(genericName);
    }
    return types;
  }
  return exports$47;
}

var exports$46 = {},
  _dewExec$45 = false;
function dew$45() {
  if (_dewExec$45) return exports$46;
  _dewExec$45 = true;
  Object.defineProperty(exports$46, "__esModule", {
    value: true
  });
  exports$46.default = createFlowUnionType;
  var _index = dew$4d();
  var _removeTypeDuplicates = dew$46();
  function createFlowUnionType(types) {
    const flattened = (0, _removeTypeDuplicates.default)(types);
    if (flattened.length === 1) {
      return flattened[0];
    } else {
      return (0, _index.unionTypeAnnotation)(flattened);
    }
  }
  return exports$46;
}

var exports$45 = {},
  _dewExec$44 = false;
function dew$44() {
  if (_dewExec$44) return exports$45;
  _dewExec$44 = true;
  Object.defineProperty(exports$45, "__esModule", {
    value: true
  });
  exports$45.default = removeTypeDuplicates;
  var _index = dew$4E();
  function getQualifiedName(node) {
    return (0, _index.isIdentifier)(node) ? node.name : `${node.right.name}.${getQualifiedName(node.left)}`;
  }
  function removeTypeDuplicates(nodesIn) {
    const nodes = Array.from(nodesIn);
    const generics = new Map();
    const bases = new Map();
    const typeGroups = new Set();
    const types = [];
    for (let i = 0; i < nodes.length; i++) {
      const node = nodes[i];
      if (!node) continue;
      if (types.includes(node)) {
        continue;
      }
      if ((0, _index.isTSAnyKeyword)(node)) {
        return [node];
      }
      if ((0, _index.isTSBaseType)(node)) {
        bases.set(node.type, node);
        continue;
      }
      if ((0, _index.isTSUnionType)(node)) {
        if (!typeGroups.has(node.types)) {
          nodes.push(...node.types);
          typeGroups.add(node.types);
        }
        continue;
      }
      if ((0, _index.isTSTypeReference)(node) && node.typeParameters) {
        const name = getQualifiedName(node.typeName);
        if (generics.has(name)) {
          let existing = generics.get(name);
          if (existing.typeParameters) {
            if (node.typeParameters) {
              existing.typeParameters.params.push(...node.typeParameters.params);
              existing.typeParameters.params = removeTypeDuplicates(existing.typeParameters.params);
            }
          } else {
            existing = node.typeParameters;
          }
        } else {
          generics.set(name, node);
        }
        continue;
      }
      types.push(node);
    }
    for (const [, baseType] of bases) {
      types.push(baseType);
    }
    for (const [, genericName] of generics) {
      types.push(genericName);
    }
    return types;
  }
  return exports$45;
}

var exports$44 = {},
  _dewExec$43 = false;
function dew$43() {
  if (_dewExec$43) return exports$44;
  _dewExec$43 = true;
  Object.defineProperty(exports$44, "__esModule", {
    value: true
  });
  exports$44.default = createTSUnionType;
  var _index = dew$4d();
  var _removeTypeDuplicates = dew$44();
  var _index2 = dew$4E();
  function createTSUnionType(typeAnnotations) {
    const types = typeAnnotations.map(type => {
      return (0, _index2.isTSTypeAnnotation)(type) ? type.typeAnnotation : type;
    });
    const flattened = (0, _removeTypeDuplicates.default)(types);
    if (flattened.length === 1) {
      return flattened[0];
    } else {
      return (0, _index.tsUnionType)(flattened);
    }
  }
  return exports$44;
}

var exports$43 = {},
  _dewExec$42 = false;
function dew$42() {
  if (_dewExec$42) return exports$43;
  _dewExec$42 = true;
  Object.defineProperty(exports$43, "__esModule", {
    value: true
  });
  Object.defineProperty(exports$43, "AnyTypeAnnotation", {
    enumerable: true,
    get: function () {
      return _index.anyTypeAnnotation;
    }
  });
  Object.defineProperty(exports$43, "ArgumentPlaceholder", {
    enumerable: true,
    get: function () {
      return _index.argumentPlaceholder;
    }
  });
  Object.defineProperty(exports$43, "ArrayExpression", {
    enumerable: true,
    get: function () {
      return _index.arrayExpression;
    }
  });
  Object.defineProperty(exports$43, "ArrayPattern", {
    enumerable: true,
    get: function () {
      return _index.arrayPattern;
    }
  });
  Object.defineProperty(exports$43, "ArrayTypeAnnotation", {
    enumerable: true,
    get: function () {
      return _index.arrayTypeAnnotation;
    }
  });
  Object.defineProperty(exports$43, "ArrowFunctionExpression", {
    enumerable: true,
    get: function () {
      return _index.arrowFunctionExpression;
    }
  });
  Object.defineProperty(exports$43, "AssignmentExpression", {
    enumerable: true,
    get: function () {
      return _index.assignmentExpression;
    }
  });
  Object.defineProperty(exports$43, "AssignmentPattern", {
    enumerable: true,
    get: function () {
      return _index.assignmentPattern;
    }
  });
  Object.defineProperty(exports$43, "AwaitExpression", {
    enumerable: true,
    get: function () {
      return _index.awaitExpression;
    }
  });
  Object.defineProperty(exports$43, "BigIntLiteral", {
    enumerable: true,
    get: function () {
      return _index.bigIntLiteral;
    }
  });
  Object.defineProperty(exports$43, "BinaryExpression", {
    enumerable: true,
    get: function () {
      return _index.binaryExpression;
    }
  });
  Object.defineProperty(exports$43, "BindExpression", {
    enumerable: true,
    get: function () {
      return _index.bindExpression;
    }
  });
  Object.defineProperty(exports$43, "BlockStatement", {
    enumerable: true,
    get: function () {
      return _index.blockStatement;
    }
  });
  Object.defineProperty(exports$43, "BooleanLiteral", {
    enumerable: true,
    get: function () {
      return _index.booleanLiteral;
    }
  });
  Object.defineProperty(exports$43, "BooleanLiteralTypeAnnotation", {
    enumerable: true,
    get: function () {
      return _index.booleanLiteralTypeAnnotation;
    }
  });
  Object.defineProperty(exports$43, "BooleanTypeAnnotation", {
    enumerable: true,
    get: function () {
      return _index.booleanTypeAnnotation;
    }
  });
  Object.defineProperty(exports$43, "BreakStatement", {
    enumerable: true,
    get: function () {
      return _index.breakStatement;
    }
  });
  Object.defineProperty(exports$43, "CallExpression", {
    enumerable: true,
    get: function () {
      return _index.callExpression;
    }
  });
  Object.defineProperty(exports$43, "CatchClause", {
    enumerable: true,
    get: function () {
      return _index.catchClause;
    }
  });
  Object.defineProperty(exports$43, "ClassAccessorProperty", {
    enumerable: true,
    get: function () {
      return _index.classAccessorProperty;
    }
  });
  Object.defineProperty(exports$43, "ClassBody", {
    enumerable: true,
    get: function () {
      return _index.classBody;
    }
  });
  Object.defineProperty(exports$43, "ClassDeclaration", {
    enumerable: true,
    get: function () {
      return _index.classDeclaration;
    }
  });
  Object.defineProperty(exports$43, "ClassExpression", {
    enumerable: true,
    get: function () {
      return _index.classExpression;
    }
  });
  Object.defineProperty(exports$43, "ClassImplements", {
    enumerable: true,
    get: function () {
      return _index.classImplements;
    }
  });
  Object.defineProperty(exports$43, "ClassMethod", {
    enumerable: true,
    get: function () {
      return _index.classMethod;
    }
  });
  Object.defineProperty(exports$43, "ClassPrivateMethod", {
    enumerable: true,
    get: function () {
      return _index.classPrivateMethod;
    }
  });
  Object.defineProperty(exports$43, "ClassPrivateProperty", {
    enumerable: true,
    get: function () {
      return _index.classPrivateProperty;
    }
  });
  Object.defineProperty(exports$43, "ClassProperty", {
    enumerable: true,
    get: function () {
      return _index.classProperty;
    }
  });
  Object.defineProperty(exports$43, "ConditionalExpression", {
    enumerable: true,
    get: function () {
      return _index.conditionalExpression;
    }
  });
  Object.defineProperty(exports$43, "ContinueStatement", {
    enumerable: true,
    get: function () {
      return _index.continueStatement;
    }
  });
  Object.defineProperty(exports$43, "DebuggerStatement", {
    enumerable: true,
    get: function () {
      return _index.debuggerStatement;
    }
  });
  Object.defineProperty(exports$43, "DecimalLiteral", {
    enumerable: true,
    get: function () {
      return _index.decimalLiteral;
    }
  });
  Object.defineProperty(exports$43, "DeclareClass", {
    enumerable: true,
    get: function () {
      return _index.declareClass;
    }
  });
  Object.defineProperty(exports$43, "DeclareExportAllDeclaration", {
    enumerable: true,
    get: function () {
      return _index.declareExportAllDeclaration;
    }
  });
  Object.defineProperty(exports$43, "DeclareExportDeclaration", {
    enumerable: true,
    get: function () {
      return _index.declareExportDeclaration;
    }
  });
  Object.defineProperty(exports$43, "DeclareFunction", {
    enumerable: true,
    get: function () {
      return _index.declareFunction;
    }
  });
  Object.defineProperty(exports$43, "DeclareInterface", {
    enumerable: true,
    get: function () {
      return _index.declareInterface;
    }
  });
  Object.defineProperty(exports$43, "DeclareModule", {
    enumerable: true,
    get: function () {
      return _index.declareModule;
    }
  });
  Object.defineProperty(exports$43, "DeclareModuleExports", {
    enumerable: true,
    get: function () {
      return _index.declareModuleExports;
    }
  });
  Object.defineProperty(exports$43, "DeclareOpaqueType", {
    enumerable: true,
    get: function () {
      return _index.declareOpaqueType;
    }
  });
  Object.defineProperty(exports$43, "DeclareTypeAlias", {
    enumerable: true,
    get: function () {
      return _index.declareTypeAlias;
    }
  });
  Object.defineProperty(exports$43, "DeclareVariable", {
    enumerable: true,
    get: function () {
      return _index.declareVariable;
    }
  });
  Object.defineProperty(exports$43, "DeclaredPredicate", {
    enumerable: true,
    get: function () {
      return _index.declaredPredicate;
    }
  });
  Object.defineProperty(exports$43, "Decorator", {
    enumerable: true,
    get: function () {
      return _index.decorator;
    }
  });
  Object.defineProperty(exports$43, "Directive", {
    enumerable: true,
    get: function () {
      return _index.directive;
    }
  });
  Object.defineProperty(exports$43, "DirectiveLiteral", {
    enumerable: true,
    get: function () {
      return _index.directiveLiteral;
    }
  });
  Object.defineProperty(exports$43, "DoExpression", {
    enumerable: true,
    get: function () {
      return _index.doExpression;
    }
  });
  Object.defineProperty(exports$43, "DoWhileStatement", {
    enumerable: true,
    get: function () {
      return _index.doWhileStatement;
    }
  });
  Object.defineProperty(exports$43, "EmptyStatement", {
    enumerable: true,
    get: function () {
      return _index.emptyStatement;
    }
  });
  Object.defineProperty(exports$43, "EmptyTypeAnnotation", {
    enumerable: true,
    get: function () {
      return _index.emptyTypeAnnotation;
    }
  });
  Object.defineProperty(exports$43, "EnumBooleanBody", {
    enumerable: true,
    get: function () {
      return _index.enumBooleanBody;
    }
  });
  Object.defineProperty(exports$43, "EnumBooleanMember", {
    enumerable: true,
    get: function () {
      return _index.enumBooleanMember;
    }
  });
  Object.defineProperty(exports$43, "EnumDeclaration", {
    enumerable: true,
    get: function () {
      return _index.enumDeclaration;
    }
  });
  Object.defineProperty(exports$43, "EnumDefaultedMember", {
    enumerable: true,
    get: function () {
      return _index.enumDefaultedMember;
    }
  });
  Object.defineProperty(exports$43, "EnumNumberBody", {
    enumerable: true,
    get: function () {
      return _index.enumNumberBody;
    }
  });
  Object.defineProperty(exports$43, "EnumNumberMember", {
    enumerable: true,
    get: function () {
      return _index.enumNumberMember;
    }
  });
  Object.defineProperty(exports$43, "EnumStringBody", {
    enumerable: true,
    get: function () {
      return _index.enumStringBody;
    }
  });
  Object.defineProperty(exports$43, "EnumStringMember", {
    enumerable: true,
    get: function () {
      return _index.enumStringMember;
    }
  });
  Object.defineProperty(exports$43, "EnumSymbolBody", {
    enumerable: true,
    get: function () {
      return _index.enumSymbolBody;
    }
  });
  Object.defineProperty(exports$43, "ExistsTypeAnnotation", {
    enumerable: true,
    get: function () {
      return _index.existsTypeAnnotation;
    }
  });
  Object.defineProperty(exports$43, "ExportAllDeclaration", {
    enumerable: true,
    get: function () {
      return _index.exportAllDeclaration;
    }
  });
  Object.defineProperty(exports$43, "ExportDefaultDeclaration", {
    enumerable: true,
    get: function () {
      return _index.exportDefaultDeclaration;
    }
  });
  Object.defineProperty(exports$43, "ExportDefaultSpecifier", {
    enumerable: true,
    get: function () {
      return _index.exportDefaultSpecifier;
    }
  });
  Object.defineProperty(exports$43, "ExportNamedDeclaration", {
    enumerable: true,
    get: function () {
      return _index.exportNamedDeclaration;
    }
  });
  Object.defineProperty(exports$43, "ExportNamespaceSpecifier", {
    enumerable: true,
    get: function () {
      return _index.exportNamespaceSpecifier;
    }
  });
  Object.defineProperty(exports$43, "ExportSpecifier", {
    enumerable: true,
    get: function () {
      return _index.exportSpecifier;
    }
  });
  Object.defineProperty(exports$43, "ExpressionStatement", {
    enumerable: true,
    get: function () {
      return _index.expressionStatement;
    }
  });
  Object.defineProperty(exports$43, "File", {
    enumerable: true,
    get: function () {
      return _index.file;
    }
  });
  Object.defineProperty(exports$43, "ForInStatement", {
    enumerable: true,
    get: function () {
      return _index.forInStatement;
    }
  });
  Object.defineProperty(exports$43, "ForOfStatement", {
    enumerable: true,
    get: function () {
      return _index.forOfStatement;
    }
  });
  Object.defineProperty(exports$43, "ForStatement", {
    enumerable: true,
    get: function () {
      return _index.forStatement;
    }
  });
  Object.defineProperty(exports$43, "FunctionDeclaration", {
    enumerable: true,
    get: function () {
      return _index.functionDeclaration;
    }
  });
  Object.defineProperty(exports$43, "FunctionExpression", {
    enumerable: true,
    get: function () {
      return _index.functionExpression;
    }
  });
  Object.defineProperty(exports$43, "FunctionTypeAnnotation", {
    enumerable: true,
    get: function () {
      return _index.functionTypeAnnotation;
    }
  });
  Object.defineProperty(exports$43, "FunctionTypeParam", {
    enumerable: true,
    get: function () {
      return _index.functionTypeParam;
    }
  });
  Object.defineProperty(exports$43, "GenericTypeAnnotation", {
    enumerable: true,
    get: function () {
      return _index.genericTypeAnnotation;
    }
  });
  Object.defineProperty(exports$43, "Identifier", {
    enumerable: true,
    get: function () {
      return _index.identifier;
    }
  });
  Object.defineProperty(exports$43, "IfStatement", {
    enumerable: true,
    get: function () {
      return _index.ifStatement;
    }
  });
  Object.defineProperty(exports$43, "Import", {
    enumerable: true,
    get: function () {
      return _index.import;
    }
  });
  Object.defineProperty(exports$43, "ImportAttribute", {
    enumerable: true,
    get: function () {
      return _index.importAttribute;
    }
  });
  Object.defineProperty(exports$43, "ImportDeclaration", {
    enumerable: true,
    get: function () {
      return _index.importDeclaration;
    }
  });
  Object.defineProperty(exports$43, "ImportDefaultSpecifier", {
    enumerable: true,
    get: function () {
      return _index.importDefaultSpecifier;
    }
  });
  Object.defineProperty(exports$43, "ImportExpression", {
    enumerable: true,
    get: function () {
      return _index.importExpression;
    }
  });
  Object.defineProperty(exports$43, "ImportNamespaceSpecifier", {
    enumerable: true,
    get: function () {
      return _index.importNamespaceSpecifier;
    }
  });
  Object.defineProperty(exports$43, "ImportSpecifier", {
    enumerable: true,
    get: function () {
      return _index.importSpecifier;
    }
  });
  Object.defineProperty(exports$43, "IndexedAccessType", {
    enumerable: true,
    get: function () {
      return _index.indexedAccessType;
    }
  });
  Object.defineProperty(exports$43, "InferredPredicate", {
    enumerable: true,
    get: function () {
      return _index.inferredPredicate;
    }
  });
  Object.defineProperty(exports$43, "InterfaceDeclaration", {
    enumerable: true,
    get: function () {
      return _index.interfaceDeclaration;
    }
  });
  Object.defineProperty(exports$43, "InterfaceExtends", {
    enumerable: true,
    get: function () {
      return _index.interfaceExtends;
    }
  });
  Object.defineProperty(exports$43, "InterfaceTypeAnnotation", {
    enumerable: true,
    get: function () {
      return _index.interfaceTypeAnnotation;
    }
  });
  Object.defineProperty(exports$43, "InterpreterDirective", {
    enumerable: true,
    get: function () {
      return _index.interpreterDirective;
    }
  });
  Object.defineProperty(exports$43, "IntersectionTypeAnnotation", {
    enumerable: true,
    get: function () {
      return _index.intersectionTypeAnnotation;
    }
  });
  Object.defineProperty(exports$43, "JSXAttribute", {
    enumerable: true,
    get: function () {
      return _index.jsxAttribute;
    }
  });
  Object.defineProperty(exports$43, "JSXClosingElement", {
    enumerable: true,
    get: function () {
      return _index.jsxClosingElement;
    }
  });
  Object.defineProperty(exports$43, "JSXClosingFragment", {
    enumerable: true,
    get: function () {
      return _index.jsxClosingFragment;
    }
  });
  Object.defineProperty(exports$43, "JSXElement", {
    enumerable: true,
    get: function () {
      return _index.jsxElement;
    }
  });
  Object.defineProperty(exports$43, "JSXEmptyExpression", {
    enumerable: true,
    get: function () {
      return _index.jsxEmptyExpression;
    }
  });
  Object.defineProperty(exports$43, "JSXExpressionContainer", {
    enumerable: true,
    get: function () {
      return _index.jsxExpressionContainer;
    }
  });
  Object.defineProperty(exports$43, "JSXFragment", {
    enumerable: true,
    get: function () {
      return _index.jsxFragment;
    }
  });
  Object.defineProperty(exports$43, "JSXIdentifier", {
    enumerable: true,
    get: function () {
      return _index.jsxIdentifier;
    }
  });
  Object.defineProperty(exports$43, "JSXMemberExpression", {
    enumerable: true,
    get: function () {
      return _index.jsxMemberExpression;
    }
  });
  Object.defineProperty(exports$43, "JSXNamespacedName", {
    enumerable: true,
    get: function () {
      return _index.jsxNamespacedName;
    }
  });
  Object.defineProperty(exports$43, "JSXOpeningElement", {
    enumerable: true,
    get: function () {
      return _index.jsxOpeningElement;
    }
  });
  Object.defineProperty(exports$43, "JSXOpeningFragment", {
    enumerable: true,
    get: function () {
      return _index.jsxOpeningFragment;
    }
  });
  Object.defineProperty(exports$43, "JSXSpreadAttribute", {
    enumerable: true,
    get: function () {
      return _index.jsxSpreadAttribute;
    }
  });
  Object.defineProperty(exports$43, "JSXSpreadChild", {
    enumerable: true,
    get: function () {
      return _index.jsxSpreadChild;
    }
  });
  Object.defineProperty(exports$43, "JSXText", {
    enumerable: true,
    get: function () {
      return _index.jsxText;
    }
  });
  Object.defineProperty(exports$43, "LabeledStatement", {
    enumerable: true,
    get: function () {
      return _index.labeledStatement;
    }
  });
  Object.defineProperty(exports$43, "LogicalExpression", {
    enumerable: true,
    get: function () {
      return _index.logicalExpression;
    }
  });
  Object.defineProperty(exports$43, "MemberExpression", {
    enumerable: true,
    get: function () {
      return _index.memberExpression;
    }
  });
  Object.defineProperty(exports$43, "MetaProperty", {
    enumerable: true,
    get: function () {
      return _index.metaProperty;
    }
  });
  Object.defineProperty(exports$43, "MixedTypeAnnotation", {
    enumerable: true,
    get: function () {
      return _index.mixedTypeAnnotation;
    }
  });
  Object.defineProperty(exports$43, "ModuleExpression", {
    enumerable: true,
    get: function () {
      return _index.moduleExpression;
    }
  });
  Object.defineProperty(exports$43, "NewExpression", {
    enumerable: true,
    get: function () {
      return _index.newExpression;
    }
  });
  Object.defineProperty(exports$43, "Noop", {
    enumerable: true,
    get: function () {
      return _index.noop;
    }
  });
  Object.defineProperty(exports$43, "NullLiteral", {
    enumerable: true,
    get: function () {
      return _index.nullLiteral;
    }
  });
  Object.defineProperty(exports$43, "NullLiteralTypeAnnotation", {
    enumerable: true,
    get: function () {
      return _index.nullLiteralTypeAnnotation;
    }
  });
  Object.defineProperty(exports$43, "NullableTypeAnnotation", {
    enumerable: true,
    get: function () {
      return _index.nullableTypeAnnotation;
    }
  });
  Object.defineProperty(exports$43, "NumberLiteral", {
    enumerable: true,
    get: function () {
      return _index.numberLiteral;
    }
  });
  Object.defineProperty(exports$43, "NumberLiteralTypeAnnotation", {
    enumerable: true,
    get: function () {
      return _index.numberLiteralTypeAnnotation;
    }
  });
  Object.defineProperty(exports$43, "NumberTypeAnnotation", {
    enumerable: true,
    get: function () {
      return _index.numberTypeAnnotation;
    }
  });
  Object.defineProperty(exports$43, "NumericLiteral", {
    enumerable: true,
    get: function () {
      return _index.numericLiteral;
    }
  });
  Object.defineProperty(exports$43, "ObjectExpression", {
    enumerable: true,
    get: function () {
      return _index.objectExpression;
    }
  });
  Object.defineProperty(exports$43, "ObjectMethod", {
    enumerable: true,
    get: function () {
      return _index.objectMethod;
    }
  });
  Object.defineProperty(exports$43, "ObjectPattern", {
    enumerable: true,
    get: function () {
      return _index.objectPattern;
    }
  });
  Object.defineProperty(exports$43, "ObjectProperty", {
    enumerable: true,
    get: function () {
      return _index.objectProperty;
    }
  });
  Object.defineProperty(exports$43, "ObjectTypeAnnotation", {
    enumerable: true,
    get: function () {
      return _index.objectTypeAnnotation;
    }
  });
  Object.defineProperty(exports$43, "ObjectTypeCallProperty", {
    enumerable: true,
    get: function () {
      return _index.objectTypeCallProperty;
    }
  });
  Object.defineProperty(exports$43, "ObjectTypeIndexer", {
    enumerable: true,
    get: function () {
      return _index.objectTypeIndexer;
    }
  });
  Object.defineProperty(exports$43, "ObjectTypeInternalSlot", {
    enumerable: true,
    get: function () {
      return _index.objectTypeInternalSlot;
    }
  });
  Object.defineProperty(exports$43, "ObjectTypeProperty", {
    enumerable: true,
    get: function () {
      return _index.objectTypeProperty;
    }
  });
  Object.defineProperty(exports$43, "ObjectTypeSpreadProperty", {
    enumerable: true,
    get: function () {
      return _index.objectTypeSpreadProperty;
    }
  });
  Object.defineProperty(exports$43, "OpaqueType", {
    enumerable: true,
    get: function () {
      return _index.opaqueType;
    }
  });
  Object.defineProperty(exports$43, "OptionalCallExpression", {
    enumerable: true,
    get: function () {
      return _index.optionalCallExpression;
    }
  });
  Object.defineProperty(exports$43, "OptionalIndexedAccessType", {
    enumerable: true,
    get: function () {
      return _index.optionalIndexedAccessType;
    }
  });
  Object.defineProperty(exports$43, "OptionalMemberExpression", {
    enumerable: true,
    get: function () {
      return _index.optionalMemberExpression;
    }
  });
  Object.defineProperty(exports$43, "ParenthesizedExpression", {
    enumerable: true,
    get: function () {
      return _index.parenthesizedExpression;
    }
  });
  Object.defineProperty(exports$43, "PipelineBareFunction", {
    enumerable: true,
    get: function () {
      return _index.pipelineBareFunction;
    }
  });
  Object.defineProperty(exports$43, "PipelinePrimaryTopicReference", {
    enumerable: true,
    get: function () {
      return _index.pipelinePrimaryTopicReference;
    }
  });
  Object.defineProperty(exports$43, "PipelineTopicExpression", {
    enumerable: true,
    get: function () {
      return _index.pipelineTopicExpression;
    }
  });
  Object.defineProperty(exports$43, "Placeholder", {
    enumerable: true,
    get: function () {
      return _index.placeholder;
    }
  });
  Object.defineProperty(exports$43, "PrivateName", {
    enumerable: true,
    get: function () {
      return _index.privateName;
    }
  });
  Object.defineProperty(exports$43, "Program", {
    enumerable: true,
    get: function () {
      return _index.program;
    }
  });
  Object.defineProperty(exports$43, "QualifiedTypeIdentifier", {
    enumerable: true,
    get: function () {
      return _index.qualifiedTypeIdentifier;
    }
  });
  Object.defineProperty(exports$43, "RecordExpression", {
    enumerable: true,
    get: function () {
      return _index.recordExpression;
    }
  });
  Object.defineProperty(exports$43, "RegExpLiteral", {
    enumerable: true,
    get: function () {
      return _index.regExpLiteral;
    }
  });
  Object.defineProperty(exports$43, "RegexLiteral", {
    enumerable: true,
    get: function () {
      return _index.regexLiteral;
    }
  });
  Object.defineProperty(exports$43, "RestElement", {
    enumerable: true,
    get: function () {
      return _index.restElement;
    }
  });
  Object.defineProperty(exports$43, "RestProperty", {
    enumerable: true,
    get: function () {
      return _index.restProperty;
    }
  });
  Object.defineProperty(exports$43, "ReturnStatement", {
    enumerable: true,
    get: function () {
      return _index.returnStatement;
    }
  });
  Object.defineProperty(exports$43, "SequenceExpression", {
    enumerable: true,
    get: function () {
      return _index.sequenceExpression;
    }
  });
  Object.defineProperty(exports$43, "SpreadElement", {
    enumerable: true,
    get: function () {
      return _index.spreadElement;
    }
  });
  Object.defineProperty(exports$43, "SpreadProperty", {
    enumerable: true,
    get: function () {
      return _index.spreadProperty;
    }
  });
  Object.defineProperty(exports$43, "StaticBlock", {
    enumerable: true,
    get: function () {
      return _index.staticBlock;
    }
  });
  Object.defineProperty(exports$43, "StringLiteral", {
    enumerable: true,
    get: function () {
      return _index.stringLiteral;
    }
  });
  Object.defineProperty(exports$43, "StringLiteralTypeAnnotation", {
    enumerable: true,
    get: function () {
      return _index.stringLiteralTypeAnnotation;
    }
  });
  Object.defineProperty(exports$43, "StringTypeAnnotation", {
    enumerable: true,
    get: function () {
      return _index.stringTypeAnnotation;
    }
  });
  Object.defineProperty(exports$43, "Super", {
    enumerable: true,
    get: function () {
      return _index.super;
    }
  });
  Object.defineProperty(exports$43, "SwitchCase", {
    enumerable: true,
    get: function () {
      return _index.switchCase;
    }
  });
  Object.defineProperty(exports$43, "SwitchStatement", {
    enumerable: true,
    get: function () {
      return _index.switchStatement;
    }
  });
  Object.defineProperty(exports$43, "SymbolTypeAnnotation", {
    enumerable: true,
    get: function () {
      return _index.symbolTypeAnnotation;
    }
  });
  Object.defineProperty(exports$43, "TSAnyKeyword", {
    enumerable: true,
    get: function () {
      return _index.tsAnyKeyword;
    }
  });
  Object.defineProperty(exports$43, "TSArrayType", {
    enumerable: true,
    get: function () {
      return _index.tsArrayType;
    }
  });
  Object.defineProperty(exports$43, "TSAsExpression", {
    enumerable: true,
    get: function () {
      return _index.tsAsExpression;
    }
  });
  Object.defineProperty(exports$43, "TSBigIntKeyword", {
    enumerable: true,
    get: function () {
      return _index.tsBigIntKeyword;
    }
  });
  Object.defineProperty(exports$43, "TSBooleanKeyword", {
    enumerable: true,
    get: function () {
      return _index.tsBooleanKeyword;
    }
  });
  Object.defineProperty(exports$43, "TSCallSignatureDeclaration", {
    enumerable: true,
    get: function () {
      return _index.tsCallSignatureDeclaration;
    }
  });
  Object.defineProperty(exports$43, "TSConditionalType", {
    enumerable: true,
    get: function () {
      return _index.tsConditionalType;
    }
  });
  Object.defineProperty(exports$43, "TSConstructSignatureDeclaration", {
    enumerable: true,
    get: function () {
      return _index.tsConstructSignatureDeclaration;
    }
  });
  Object.defineProperty(exports$43, "TSConstructorType", {
    enumerable: true,
    get: function () {
      return _index.tsConstructorType;
    }
  });
  Object.defineProperty(exports$43, "TSDeclareFunction", {
    enumerable: true,
    get: function () {
      return _index.tsDeclareFunction;
    }
  });
  Object.defineProperty(exports$43, "TSDeclareMethod", {
    enumerable: true,
    get: function () {
      return _index.tsDeclareMethod;
    }
  });
  Object.defineProperty(exports$43, "TSEnumDeclaration", {
    enumerable: true,
    get: function () {
      return _index.tsEnumDeclaration;
    }
  });
  Object.defineProperty(exports$43, "TSEnumMember", {
    enumerable: true,
    get: function () {
      return _index.tsEnumMember;
    }
  });
  Object.defineProperty(exports$43, "TSExportAssignment", {
    enumerable: true,
    get: function () {
      return _index.tsExportAssignment;
    }
  });
  Object.defineProperty(exports$43, "TSExpressionWithTypeArguments", {
    enumerable: true,
    get: function () {
      return _index.tsExpressionWithTypeArguments;
    }
  });
  Object.defineProperty(exports$43, "TSExternalModuleReference", {
    enumerable: true,
    get: function () {
      return _index.tsExternalModuleReference;
    }
  });
  Object.defineProperty(exports$43, "TSFunctionType", {
    enumerable: true,
    get: function () {
      return _index.tsFunctionType;
    }
  });
  Object.defineProperty(exports$43, "TSImportEqualsDeclaration", {
    enumerable: true,
    get: function () {
      return _index.tsImportEqualsDeclaration;
    }
  });
  Object.defineProperty(exports$43, "TSImportType", {
    enumerable: true,
    get: function () {
      return _index.tsImportType;
    }
  });
  Object.defineProperty(exports$43, "TSIndexSignature", {
    enumerable: true,
    get: function () {
      return _index.tsIndexSignature;
    }
  });
  Object.defineProperty(exports$43, "TSIndexedAccessType", {
    enumerable: true,
    get: function () {
      return _index.tsIndexedAccessType;
    }
  });
  Object.defineProperty(exports$43, "TSInferType", {
    enumerable: true,
    get: function () {
      return _index.tsInferType;
    }
  });
  Object.defineProperty(exports$43, "TSInstantiationExpression", {
    enumerable: true,
    get: function () {
      return _index.tsInstantiationExpression;
    }
  });
  Object.defineProperty(exports$43, "TSInterfaceBody", {
    enumerable: true,
    get: function () {
      return _index.tsInterfaceBody;
    }
  });
  Object.defineProperty(exports$43, "TSInterfaceDeclaration", {
    enumerable: true,
    get: function () {
      return _index.tsInterfaceDeclaration;
    }
  });
  Object.defineProperty(exports$43, "TSIntersectionType", {
    enumerable: true,
    get: function () {
      return _index.tsIntersectionType;
    }
  });
  Object.defineProperty(exports$43, "TSIntrinsicKeyword", {
    enumerable: true,
    get: function () {
      return _index.tsIntrinsicKeyword;
    }
  });
  Object.defineProperty(exports$43, "TSLiteralType", {
    enumerable: true,
    get: function () {
      return _index.tsLiteralType;
    }
  });
  Object.defineProperty(exports$43, "TSMappedType", {
    enumerable: true,
    get: function () {
      return _index.tsMappedType;
    }
  });
  Object.defineProperty(exports$43, "TSMethodSignature", {
    enumerable: true,
    get: function () {
      return _index.tsMethodSignature;
    }
  });
  Object.defineProperty(exports$43, "TSModuleBlock", {
    enumerable: true,
    get: function () {
      return _index.tsModuleBlock;
    }
  });
  Object.defineProperty(exports$43, "TSModuleDeclaration", {
    enumerable: true,
    get: function () {
      return _index.tsModuleDeclaration;
    }
  });
  Object.defineProperty(exports$43, "TSNamedTupleMember", {
    enumerable: true,
    get: function () {
      return _index.tsNamedTupleMember;
    }
  });
  Object.defineProperty(exports$43, "TSNamespaceExportDeclaration", {
    enumerable: true,
    get: function () {
      return _index.tsNamespaceExportDeclaration;
    }
  });
  Object.defineProperty(exports$43, "TSNeverKeyword", {
    enumerable: true,
    get: function () {
      return _index.tsNeverKeyword;
    }
  });
  Object.defineProperty(exports$43, "TSNonNullExpression", {
    enumerable: true,
    get: function () {
      return _index.tsNonNullExpression;
    }
  });
  Object.defineProperty(exports$43, "TSNullKeyword", {
    enumerable: true,
    get: function () {
      return _index.tsNullKeyword;
    }
  });
  Object.defineProperty(exports$43, "TSNumberKeyword", {
    enumerable: true,
    get: function () {
      return _index.tsNumberKeyword;
    }
  });
  Object.defineProperty(exports$43, "TSObjectKeyword", {
    enumerable: true,
    get: function () {
      return _index.tsObjectKeyword;
    }
  });
  Object.defineProperty(exports$43, "TSOptionalType", {
    enumerable: true,
    get: function () {
      return _index.tsOptionalType;
    }
  });
  Object.defineProperty(exports$43, "TSParameterProperty", {
    enumerable: true,
    get: function () {
      return _index.tsParameterProperty;
    }
  });
  Object.defineProperty(exports$43, "TSParenthesizedType", {
    enumerable: true,
    get: function () {
      return _index.tsParenthesizedType;
    }
  });
  Object.defineProperty(exports$43, "TSPropertySignature", {
    enumerable: true,
    get: function () {
      return _index.tsPropertySignature;
    }
  });
  Object.defineProperty(exports$43, "TSQualifiedName", {
    enumerable: true,
    get: function () {
      return _index.tsQualifiedName;
    }
  });
  Object.defineProperty(exports$43, "TSRestType", {
    enumerable: true,
    get: function () {
      return _index.tsRestType;
    }
  });
  Object.defineProperty(exports$43, "TSSatisfiesExpression", {
    enumerable: true,
    get: function () {
      return _index.tsSatisfiesExpression;
    }
  });
  Object.defineProperty(exports$43, "TSStringKeyword", {
    enumerable: true,
    get: function () {
      return _index.tsStringKeyword;
    }
  });
  Object.defineProperty(exports$43, "TSSymbolKeyword", {
    enumerable: true,
    get: function () {
      return _index.tsSymbolKeyword;
    }
  });
  Object.defineProperty(exports$43, "TSThisType", {
    enumerable: true,
    get: function () {
      return _index.tsThisType;
    }
  });
  Object.defineProperty(exports$43, "TSTupleType", {
    enumerable: true,
    get: function () {
      return _index.tsTupleType;
    }
  });
  Object.defineProperty(exports$43, "TSTypeAliasDeclaration", {
    enumerable: true,
    get: function () {
      return _index.tsTypeAliasDeclaration;
    }
  });
  Object.defineProperty(exports$43, "TSTypeAnnotation", {
    enumerable: true,
    get: function () {
      return _index.tsTypeAnnotation;
    }
  });
  Object.defineProperty(exports$43, "TSTypeAssertion", {
    enumerable: true,
    get: function () {
      return _index.tsTypeAssertion;
    }
  });
  Object.defineProperty(exports$43, "TSTypeLiteral", {
    enumerable: true,
    get: function () {
      return _index.tsTypeLiteral;
    }
  });
  Object.defineProperty(exports$43, "TSTypeOperator", {
    enumerable: true,
    get: function () {
      return _index.tsTypeOperator;
    }
  });
  Object.defineProperty(exports$43, "TSTypeParameter", {
    enumerable: true,
    get: function () {
      return _index.tsTypeParameter;
    }
  });
  Object.defineProperty(exports$43, "TSTypeParameterDeclaration", {
    enumerable: true,
    get: function () {
      return _index.tsTypeParameterDeclaration;
    }
  });
  Object.defineProperty(exports$43, "TSTypeParameterInstantiation", {
    enumerable: true,
    get: function () {
      return _index.tsTypeParameterInstantiation;
    }
  });
  Object.defineProperty(exports$43, "TSTypePredicate", {
    enumerable: true,
    get: function () {
      return _index.tsTypePredicate;
    }
  });
  Object.defineProperty(exports$43, "TSTypeQuery", {
    enumerable: true,
    get: function () {
      return _index.tsTypeQuery;
    }
  });
  Object.defineProperty(exports$43, "TSTypeReference", {
    enumerable: true,
    get: function () {
      return _index.tsTypeReference;
    }
  });
  Object.defineProperty(exports$43, "TSUndefinedKeyword", {
    enumerable: true,
    get: function () {
      return _index.tsUndefinedKeyword;
    }
  });
  Object.defineProperty(exports$43, "TSUnionType", {
    enumerable: true,
    get: function () {
      return _index.tsUnionType;
    }
  });
  Object.defineProperty(exports$43, "TSUnknownKeyword", {
    enumerable: true,
    get: function () {
      return _index.tsUnknownKeyword;
    }
  });
  Object.defineProperty(exports$43, "TSVoidKeyword", {
    enumerable: true,
    get: function () {
      return _index.tsVoidKeyword;
    }
  });
  Object.defineProperty(exports$43, "TaggedTemplateExpression", {
    enumerable: true,
    get: function () {
      return _index.taggedTemplateExpression;
    }
  });
  Object.defineProperty(exports$43, "TemplateElement", {
    enumerable: true,
    get: function () {
      return _index.templateElement;
    }
  });
  Object.defineProperty(exports$43, "TemplateLiteral", {
    enumerable: true,
    get: function () {
      return _index.templateLiteral;
    }
  });
  Object.defineProperty(exports$43, "ThisExpression", {
    enumerable: true,
    get: function () {
      return _index.thisExpression;
    }
  });
  Object.defineProperty(exports$43, "ThisTypeAnnotation", {
    enumerable: true,
    get: function () {
      return _index.thisTypeAnnotation;
    }
  });
  Object.defineProperty(exports$43, "ThrowStatement", {
    enumerable: true,
    get: function () {
      return _index.throwStatement;
    }
  });
  Object.defineProperty(exports$43, "TopicReference", {
    enumerable: true,
    get: function () {
      return _index.topicReference;
    }
  });
  Object.defineProperty(exports$43, "TryStatement", {
    enumerable: true,
    get: function () {
      return _index.tryStatement;
    }
  });
  Object.defineProperty(exports$43, "TupleExpression", {
    enumerable: true,
    get: function () {
      return _index.tupleExpression;
    }
  });
  Object.defineProperty(exports$43, "TupleTypeAnnotation", {
    enumerable: true,
    get: function () {
      return _index.tupleTypeAnnotation;
    }
  });
  Object.defineProperty(exports$43, "TypeAlias", {
    enumerable: true,
    get: function () {
      return _index.typeAlias;
    }
  });
  Object.defineProperty(exports$43, "TypeAnnotation", {
    enumerable: true,
    get: function () {
      return _index.typeAnnotation;
    }
  });
  Object.defineProperty(exports$43, "TypeCastExpression", {
    enumerable: true,
    get: function () {
      return _index.typeCastExpression;
    }
  });
  Object.defineProperty(exports$43, "TypeParameter", {
    enumerable: true,
    get: function () {
      return _index.typeParameter;
    }
  });
  Object.defineProperty(exports$43, "TypeParameterDeclaration", {
    enumerable: true,
    get: function () {
      return _index.typeParameterDeclaration;
    }
  });
  Object.defineProperty(exports$43, "TypeParameterInstantiation", {
    enumerable: true,
    get: function () {
      return _index.typeParameterInstantiation;
    }
  });
  Object.defineProperty(exports$43, "TypeofTypeAnnotation", {
    enumerable: true,
    get: function () {
      return _index.typeofTypeAnnotation;
    }
  });
  Object.defineProperty(exports$43, "UnaryExpression", {
    enumerable: true,
    get: function () {
      return _index.unaryExpression;
    }
  });
  Object.defineProperty(exports$43, "UnionTypeAnnotation", {
    enumerable: true,
    get: function () {
      return _index.unionTypeAnnotation;
    }
  });
  Object.defineProperty(exports$43, "UpdateExpression", {
    enumerable: true,
    get: function () {
      return _index.updateExpression;
    }
  });
  Object.defineProperty(exports$43, "V8IntrinsicIdentifier", {
    enumerable: true,
    get: function () {
      return _index.v8IntrinsicIdentifier;
    }
  });
  Object.defineProperty(exports$43, "VariableDeclaration", {
    enumerable: true,
    get: function () {
      return _index.variableDeclaration;
    }
  });
  Object.defineProperty(exports$43, "VariableDeclarator", {
    enumerable: true,
    get: function () {
      return _index.variableDeclarator;
    }
  });
  Object.defineProperty(exports$43, "Variance", {
    enumerable: true,
    get: function () {
      return _index.variance;
    }
  });
  Object.defineProperty(exports$43, "VoidTypeAnnotation", {
    enumerable: true,
    get: function () {
      return _index.voidTypeAnnotation;
    }
  });
  Object.defineProperty(exports$43, "WhileStatement", {
    enumerable: true,
    get: function () {
      return _index.whileStatement;
    }
  });
  Object.defineProperty(exports$43, "WithStatement", {
    enumerable: true,
    get: function () {
      return _index.withStatement;
    }
  });
  Object.defineProperty(exports$43, "YieldExpression", {
    enumerable: true,
    get: function () {
      return _index.yieldExpression;
    }
  });
  var _index = dew$4d();
  return exports$43;
}

var exports$42 = {},
  _dewExec$41 = false;
function dew$41() {
  if (_dewExec$41) return exports$42;
  _dewExec$41 = true;
  Object.defineProperty(exports$42, "__esModule", {
    value: true
  });
  exports$42.buildUndefinedNode = buildUndefinedNode;
  var _index = dew$4d();
  function buildUndefinedNode() {
    return (0, _index.unaryExpression)("void", (0, _index.numericLiteral)(0), true);
  }
  return exports$42;
}

var exports$41 = {},
  _dewExec$40 = false;
function dew$40() {
  if (_dewExec$40) return exports$41;
  _dewExec$40 = true;
  Object.defineProperty(exports$41, "__esModule", {
    value: true
  });
  exports$41.default = cloneNode;
  var _index = dew$4g();
  var _index2 = dew$4E();
  const {
    hasOwn
  } = {
    hasOwn: Function.call.bind(Object.prototype.hasOwnProperty)
  };
  function cloneIfNode(obj, deep, withoutLoc, commentsCache) {
    if (obj && typeof obj.type === "string") {
      return cloneNodeInternal(obj, deep, withoutLoc, commentsCache);
    }
    return obj;
  }
  function cloneIfNodeOrArray(obj, deep, withoutLoc, commentsCache) {
    if (Array.isArray(obj)) {
      return obj.map(node => cloneIfNode(node, deep, withoutLoc, commentsCache));
    }
    return cloneIfNode(obj, deep, withoutLoc, commentsCache);
  }
  function cloneNode(node, deep = true, withoutLoc = false) {
    return cloneNodeInternal(node, deep, withoutLoc, new Map());
  }
  function cloneNodeInternal(node, deep = true, withoutLoc = false, commentsCache) {
    if (!node) return node;
    const {
      type
    } = node;
    const newNode = {
      type: node.type
    };
    if ((0, _index2.isIdentifier)(node)) {
      newNode.name = node.name;
      if (hasOwn(node, "optional") && typeof node.optional === "boolean") {
        newNode.optional = node.optional;
      }
      if (hasOwn(node, "typeAnnotation")) {
        newNode.typeAnnotation = deep ? cloneIfNodeOrArray(node.typeAnnotation, true, withoutLoc, commentsCache) : node.typeAnnotation;
      }
      if (hasOwn(node, "decorators")) {
        newNode.decorators = deep ? cloneIfNodeOrArray(node.decorators, true, withoutLoc, commentsCache) : node.decorators;
      }
    } else if (!hasOwn(_index.NODE_FIELDS, type)) {
      throw new Error(`Unknown node type: "${type}"`);
    } else {
      for (const field of Object.keys(_index.NODE_FIELDS[type])) {
        if (hasOwn(node, field)) {
          if (deep) {
            newNode[field] = (0, _index2.isFile)(node) && field === "comments" ? maybeCloneComments(node.comments, deep, withoutLoc, commentsCache) : cloneIfNodeOrArray(node[field], true, withoutLoc, commentsCache);
          } else {
            newNode[field] = node[field];
          }
        }
      }
    }
    if (hasOwn(node, "loc")) {
      if (withoutLoc) {
        newNode.loc = null;
      } else {
        newNode.loc = node.loc;
      }
    }
    if (hasOwn(node, "leadingComments")) {
      newNode.leadingComments = maybeCloneComments(node.leadingComments, deep, withoutLoc, commentsCache);
    }
    if (hasOwn(node, "innerComments")) {
      newNode.innerComments = maybeCloneComments(node.innerComments, deep, withoutLoc, commentsCache);
    }
    if (hasOwn(node, "trailingComments")) {
      newNode.trailingComments = maybeCloneComments(node.trailingComments, deep, withoutLoc, commentsCache);
    }
    if (hasOwn(node, "extra")) {
      newNode.extra = Object.assign({}, node.extra);
    }
    return newNode;
  }
  function maybeCloneComments(comments, deep, withoutLoc, commentsCache) {
    if (!comments || !deep) {
      return comments;
    }
    return comments.map(comment => {
      const cache = commentsCache.get(comment);
      if (cache) return cache;
      const {
        type,
        value,
        loc
      } = comment;
      const ret = {
        type,
        value,
        loc
      };
      if (withoutLoc) {
        ret.loc = null;
      }
      commentsCache.set(comment, ret);
      return ret;
    });
  }
  return exports$41;
}

var exports$40 = {},
  _dewExec$3$ = false;
function dew$3$() {
  if (_dewExec$3$) return exports$40;
  _dewExec$3$ = true;
  Object.defineProperty(exports$40, "__esModule", {
    value: true
  });
  exports$40.default = clone;
  var _cloneNode = dew$40();
  function clone(node) {
    return (0, _cloneNode.default)(node, false);
  }
  return exports$40;
}

var exports$3$ = {},
  _dewExec$3_ = false;
function dew$3_() {
  if (_dewExec$3_) return exports$3$;
  _dewExec$3_ = true;
  Object.defineProperty(exports$3$, "__esModule", {
    value: true
  });
  exports$3$.default = cloneDeep;
  var _cloneNode = dew$40();
  function cloneDeep(node) {
    return (0, _cloneNode.default)(node);
  }
  return exports$3$;
}

var exports$3_ = {},
  _dewExec$3Z = false;
function dew$3Z() {
  if (_dewExec$3Z) return exports$3_;
  _dewExec$3Z = true;
  Object.defineProperty(exports$3_, "__esModule", {
    value: true
  });
  exports$3_.default = cloneDeepWithoutLoc;
  var _cloneNode = dew$40();
  function cloneDeepWithoutLoc(node) {
    return (0, _cloneNode.default)(node, true, true);
  }
  return exports$3_;
}

var exports$3Z = {},
  _dewExec$3Y = false;
function dew$3Y() {
  if (_dewExec$3Y) return exports$3Z;
  _dewExec$3Y = true;
  Object.defineProperty(exports$3Z, "__esModule", {
    value: true
  });
  exports$3Z.default = cloneWithoutLoc;
  var _cloneNode = dew$40();
  function cloneWithoutLoc(node) {
    return (0, _cloneNode.default)(node, false, true);
  }
  return exports$3Z;
}

var exports$3Y = {},
  _dewExec$3X = false;
function dew$3X() {
  if (_dewExec$3X) return exports$3Y;
  _dewExec$3X = true;
  Object.defineProperty(exports$3Y, "__esModule", {
    value: true
  });
  exports$3Y.default = addComments;
  function addComments(node, type, comments) {
    if (!comments || !node) return node;
    const key = `${type}Comments`;
    if (node[key]) {
      if (type === "leading") {
        node[key] = comments.concat(node[key]);
      } else {
        node[key].push(...comments);
      }
    } else {
      node[key] = comments;
    }
    return node;
  }
  return exports$3Y;
}

var exports$3X = {},
  _dewExec$3W = false;
function dew$3W() {
  if (_dewExec$3W) return exports$3X;
  _dewExec$3W = true;
  Object.defineProperty(exports$3X, "__esModule", {
    value: true
  });
  exports$3X.default = addComment;
  var _addComments = dew$3X();
  function addComment(node, type, content, line) {
    return (0, _addComments.default)(node, type, [{
      type: line ? "CommentLine" : "CommentBlock",
      value: content
    }]);
  }
  return exports$3X;
}

var exports$3W = {},
  _dewExec$3V = false;
function dew$3V() {
  if (_dewExec$3V) return exports$3W;
  _dewExec$3V = true;
  Object.defineProperty(exports$3W, "__esModule", {
    value: true
  });
  exports$3W.default = inherit;
  function inherit(key, child, parent) {
    if (child && parent) {
      child[key] = Array.from(new Set([].concat(child[key], parent[key]).filter(Boolean)));
    }
  }
  return exports$3W;
}

var exports$3V = {},
  _dewExec$3U = false;
function dew$3U() {
  if (_dewExec$3U) return exports$3V;
  _dewExec$3U = true;
  Object.defineProperty(exports$3V, "__esModule", {
    value: true
  });
  exports$3V.default = inheritInnerComments;
  var _inherit = dew$3V();
  function inheritInnerComments(child, parent) {
    (0, _inherit.default)("innerComments", child, parent);
  }
  return exports$3V;
}

var exports$3U = {},
  _dewExec$3T = false;
function dew$3T() {
  if (_dewExec$3T) return exports$3U;
  _dewExec$3T = true;
  Object.defineProperty(exports$3U, "__esModule", {
    value: true
  });
  exports$3U.default = inheritLeadingComments;
  var _inherit = dew$3V();
  function inheritLeadingComments(child, parent) {
    (0, _inherit.default)("leadingComments", child, parent);
  }
  return exports$3U;
}

var exports$3T = {},
  _dewExec$3S = false;
function dew$3S() {
  if (_dewExec$3S) return exports$3T;
  _dewExec$3S = true;
  Object.defineProperty(exports$3T, "__esModule", {
    value: true
  });
  exports$3T.default = inheritTrailingComments;
  var _inherit = dew$3V();
  function inheritTrailingComments(child, parent) {
    (0, _inherit.default)("trailingComments", child, parent);
  }
  return exports$3T;
}

var exports$3S = {},
  _dewExec$3R = false;
function dew$3R() {
  if (_dewExec$3R) return exports$3S;
  _dewExec$3R = true;
  Object.defineProperty(exports$3S, "__esModule", {
    value: true
  });
  exports$3S.default = inheritsComments;
  var _inheritTrailingComments = dew$3S();
  var _inheritLeadingComments = dew$3T();
  var _inheritInnerComments = dew$3U();
  function inheritsComments(child, parent) {
    (0, _inheritTrailingComments.default)(child, parent);
    (0, _inheritLeadingComments.default)(child, parent);
    (0, _inheritInnerComments.default)(child, parent);
    return child;
  }
  return exports$3S;
}

var exports$3R = {},
  _dewExec$3Q = false;
function dew$3Q() {
  if (_dewExec$3Q) return exports$3R;
  _dewExec$3Q = true;
  Object.defineProperty(exports$3R, "__esModule", {
    value: true
  });
  exports$3R.default = removeComments;
  var _index = dew$4q();
  function removeComments(node) {
    _index.COMMENT_KEYS.forEach(key => {
      node[key] = null;
    });
    return node;
  }
  return exports$3R;
}

var exports$3Q = {},
  _dewExec$3P = false;
function dew$3P() {
  if (_dewExec$3P) return exports$3Q;
  _dewExec$3P = true;
  Object.defineProperty(exports$3Q, "__esModule", {
    value: true
  });
  exports$3Q.WHILE_TYPES = exports$3Q.USERWHITESPACABLE_TYPES = exports$3Q.UNARYLIKE_TYPES = exports$3Q.TYPESCRIPT_TYPES = exports$3Q.TSTYPE_TYPES = exports$3Q.TSTYPEELEMENT_TYPES = exports$3Q.TSENTITYNAME_TYPES = exports$3Q.TSBASETYPE_TYPES = exports$3Q.TERMINATORLESS_TYPES = exports$3Q.STATEMENT_TYPES = exports$3Q.STANDARDIZED_TYPES = exports$3Q.SCOPABLE_TYPES = exports$3Q.PUREISH_TYPES = exports$3Q.PROPERTY_TYPES = exports$3Q.PRIVATE_TYPES = exports$3Q.PATTERN_TYPES = exports$3Q.PATTERNLIKE_TYPES = exports$3Q.OBJECTMEMBER_TYPES = exports$3Q.MODULESPECIFIER_TYPES = exports$3Q.MODULEDECLARATION_TYPES = exports$3Q.MISCELLANEOUS_TYPES = exports$3Q.METHOD_TYPES = exports$3Q.LVAL_TYPES = exports$3Q.LOOP_TYPES = exports$3Q.LITERAL_TYPES = exports$3Q.JSX_TYPES = exports$3Q.IMPORTOREXPORTDECLARATION_TYPES = exports$3Q.IMMUTABLE_TYPES = exports$3Q.FUNCTION_TYPES = exports$3Q.FUNCTIONPARENT_TYPES = exports$3Q.FOR_TYPES = exports$3Q.FORXSTATEMENT_TYPES = exports$3Q.FLOW_TYPES = exports$3Q.FLOWTYPE_TYPES = exports$3Q.FLOWPREDICATE_TYPES = exports$3Q.FLOWDECLARATION_TYPES = exports$3Q.FLOWBASEANNOTATION_TYPES = exports$3Q.EXPRESSION_TYPES = exports$3Q.EXPRESSIONWRAPPER_TYPES = exports$3Q.EXPORTDECLARATION_TYPES = exports$3Q.ENUMMEMBER_TYPES = exports$3Q.ENUMBODY_TYPES = exports$3Q.DECLARATION_TYPES = exports$3Q.CONDITIONAL_TYPES = exports$3Q.COMPLETIONSTATEMENT_TYPES = exports$3Q.CLASS_TYPES = exports$3Q.BLOCK_TYPES = exports$3Q.BLOCKPARENT_TYPES = exports$3Q.BINARY_TYPES = exports$3Q.ACCESSOR_TYPES = void 0;
  var _index = dew$4g();
  exports$3Q.STANDARDIZED_TYPES = _index.FLIPPED_ALIAS_KEYS["Standardized"];
  exports$3Q.EXPRESSION_TYPES = _index.FLIPPED_ALIAS_KEYS["Expression"];
  exports$3Q.BINARY_TYPES = _index.FLIPPED_ALIAS_KEYS["Binary"];
  exports$3Q.SCOPABLE_TYPES = _index.FLIPPED_ALIAS_KEYS["Scopable"];
  exports$3Q.BLOCKPARENT_TYPES = _index.FLIPPED_ALIAS_KEYS["BlockParent"];
  exports$3Q.BLOCK_TYPES = _index.FLIPPED_ALIAS_KEYS["Block"];
  exports$3Q.STATEMENT_TYPES = _index.FLIPPED_ALIAS_KEYS["Statement"];
  exports$3Q.TERMINATORLESS_TYPES = _index.FLIPPED_ALIAS_KEYS["Terminatorless"];
  exports$3Q.COMPLETIONSTATEMENT_TYPES = _index.FLIPPED_ALIAS_KEYS["CompletionStatement"];
  exports$3Q.CONDITIONAL_TYPES = _index.FLIPPED_ALIAS_KEYS["Conditional"];
  exports$3Q.LOOP_TYPES = _index.FLIPPED_ALIAS_KEYS["Loop"];
  exports$3Q.WHILE_TYPES = _index.FLIPPED_ALIAS_KEYS["While"];
  exports$3Q.EXPRESSIONWRAPPER_TYPES = _index.FLIPPED_ALIAS_KEYS["ExpressionWrapper"];
  exports$3Q.FOR_TYPES = _index.FLIPPED_ALIAS_KEYS["For"];
  exports$3Q.FORXSTATEMENT_TYPES = _index.FLIPPED_ALIAS_KEYS["ForXStatement"];
  exports$3Q.FUNCTION_TYPES = _index.FLIPPED_ALIAS_KEYS["Function"];
  exports$3Q.FUNCTIONPARENT_TYPES = _index.FLIPPED_ALIAS_KEYS["FunctionParent"];
  exports$3Q.PUREISH_TYPES = _index.FLIPPED_ALIAS_KEYS["Pureish"];
  exports$3Q.DECLARATION_TYPES = _index.FLIPPED_ALIAS_KEYS["Declaration"];
  exports$3Q.PATTERNLIKE_TYPES = _index.FLIPPED_ALIAS_KEYS["PatternLike"];
  exports$3Q.LVAL_TYPES = _index.FLIPPED_ALIAS_KEYS["LVal"];
  exports$3Q.TSENTITYNAME_TYPES = _index.FLIPPED_ALIAS_KEYS["TSEntityName"];
  exports$3Q.LITERAL_TYPES = _index.FLIPPED_ALIAS_KEYS["Literal"];
  exports$3Q.IMMUTABLE_TYPES = _index.FLIPPED_ALIAS_KEYS["Immutable"];
  exports$3Q.USERWHITESPACABLE_TYPES = _index.FLIPPED_ALIAS_KEYS["UserWhitespacable"];
  exports$3Q.METHOD_TYPES = _index.FLIPPED_ALIAS_KEYS["Method"];
  exports$3Q.OBJECTMEMBER_TYPES = _index.FLIPPED_ALIAS_KEYS["ObjectMember"];
  exports$3Q.PROPERTY_TYPES = _index.FLIPPED_ALIAS_KEYS["Property"];
  exports$3Q.UNARYLIKE_TYPES = _index.FLIPPED_ALIAS_KEYS["UnaryLike"];
  exports$3Q.PATTERN_TYPES = _index.FLIPPED_ALIAS_KEYS["Pattern"];
  exports$3Q.CLASS_TYPES = _index.FLIPPED_ALIAS_KEYS["Class"];
  const IMPORTOREXPORTDECLARATION_TYPES = exports$3Q.IMPORTOREXPORTDECLARATION_TYPES = _index.FLIPPED_ALIAS_KEYS["ImportOrExportDeclaration"];
  exports$3Q.EXPORTDECLARATION_TYPES = _index.FLIPPED_ALIAS_KEYS["ExportDeclaration"];
  exports$3Q.MODULESPECIFIER_TYPES = _index.FLIPPED_ALIAS_KEYS["ModuleSpecifier"];
  exports$3Q.ACCESSOR_TYPES = _index.FLIPPED_ALIAS_KEYS["Accessor"];
  exports$3Q.PRIVATE_TYPES = _index.FLIPPED_ALIAS_KEYS["Private"];
  exports$3Q.FLOW_TYPES = _index.FLIPPED_ALIAS_KEYS["Flow"];
  exports$3Q.FLOWTYPE_TYPES = _index.FLIPPED_ALIAS_KEYS["FlowType"];
  exports$3Q.FLOWBASEANNOTATION_TYPES = _index.FLIPPED_ALIAS_KEYS["FlowBaseAnnotation"];
  exports$3Q.FLOWDECLARATION_TYPES = _index.FLIPPED_ALIAS_KEYS["FlowDeclaration"];
  exports$3Q.FLOWPREDICATE_TYPES = _index.FLIPPED_ALIAS_KEYS["FlowPredicate"];
  exports$3Q.ENUMBODY_TYPES = _index.FLIPPED_ALIAS_KEYS["EnumBody"];
  exports$3Q.ENUMMEMBER_TYPES = _index.FLIPPED_ALIAS_KEYS["EnumMember"];
  exports$3Q.JSX_TYPES = _index.FLIPPED_ALIAS_KEYS["JSX"];
  exports$3Q.MISCELLANEOUS_TYPES = _index.FLIPPED_ALIAS_KEYS["Miscellaneous"];
  exports$3Q.TYPESCRIPT_TYPES = _index.FLIPPED_ALIAS_KEYS["TypeScript"];
  exports$3Q.TSTYPEELEMENT_TYPES = _index.FLIPPED_ALIAS_KEYS["TSTypeElement"];
  exports$3Q.TSTYPE_TYPES = _index.FLIPPED_ALIAS_KEYS["TSType"];
  exports$3Q.TSBASETYPE_TYPES = _index.FLIPPED_ALIAS_KEYS["TSBaseType"];
  exports$3Q.MODULEDECLARATION_TYPES = IMPORTOREXPORTDECLARATION_TYPES;
  return exports$3Q;
}

var exports$3P = {},
  _dewExec$3O = false;
function dew$3O() {
  if (_dewExec$3O) return exports$3P;
  _dewExec$3O = true;
  Object.defineProperty(exports$3P, "__esModule", {
    value: true
  });
  exports$3P.default = toBlock;
  var _index = dew$4E();
  var _index2 = dew$4d();
  function toBlock(node, parent) {
    if ((0, _index.isBlockStatement)(node)) {
      return node;
    }
    let blockNodes = [];
    if ((0, _index.isEmptyStatement)(node)) {
      blockNodes = [];
    } else {
      if (!(0, _index.isStatement)(node)) {
        if ((0, _index.isFunction)(parent)) {
          node = (0, _index2.returnStatement)(node);
        } else {
          node = (0, _index2.expressionStatement)(node);
        }
      }
      blockNodes = [node];
    }
    return (0, _index2.blockStatement)(blockNodes);
  }
  return exports$3P;
}

var exports$3O = {},
  _dewExec$3N = false;
function dew$3N() {
  if (_dewExec$3N) return exports$3O;
  _dewExec$3N = true;
  Object.defineProperty(exports$3O, "__esModule", {
    value: true
  });
  exports$3O.default = ensureBlock;
  var _toBlock = dew$3O();
  function ensureBlock(node, key = "body") {
    const result = (0, _toBlock.default)(node[key], node);
    node[key] = result;
    return result;
  }
  return exports$3O;
}

var exports$3N = {},
  _dewExec$3M = false;
function dew$3M() {
  if (_dewExec$3M) return exports$3N;
  _dewExec$3M = true;
  Object.defineProperty(exports$3N, "__esModule", {
    value: true
  });
  exports$3N.default = toIdentifier;
  var _isValidIdentifier = dew$4s();
  var _helperValidatorIdentifier = dew$4t();
  function toIdentifier(input) {
    input = input + "";
    let name = "";
    for (const c of input) {
      name += (0, _helperValidatorIdentifier.isIdentifierChar)(c.codePointAt(0)) ? c : "-";
    }
    name = name.replace(/^[-0-9]+/, "");
    name = name.replace(/[-\s]+(.)?/g, function (match, c) {
      return c ? c.toUpperCase() : "";
    });
    if (!(0, _isValidIdentifier.default)(name)) {
      name = `_${name}`;
    }
    return name || "_";
  }
  return exports$3N;
}

var exports$3M = {},
  _dewExec$3L = false;
function dew$3L() {
  if (_dewExec$3L) return exports$3M;
  _dewExec$3L = true;
  Object.defineProperty(exports$3M, "__esModule", {
    value: true
  });
  exports$3M.default = toBindingIdentifierName;
  var _toIdentifier = dew$3M();
  function toBindingIdentifierName(name) {
    name = (0, _toIdentifier.default)(name);
    if (name === "eval" || name === "arguments") name = "_" + name;
    return name;
  }
  return exports$3M;
}

var exports$3L = {},
  _dewExec$3K = false;
function dew$3K() {
  if (_dewExec$3K) return exports$3L;
  _dewExec$3K = true;
  Object.defineProperty(exports$3L, "__esModule", {
    value: true
  });
  exports$3L.default = toComputedKey;
  var _index = dew$4E();
  var _index2 = dew$4d();
  function toComputedKey(node, key = node.key || node.property) {
    if (!node.computed && (0, _index.isIdentifier)(key)) key = (0, _index2.stringLiteral)(key.name);
    return key;
  }
  return exports$3L;
}

var exports$3K = {},
  _dewExec$3J = false;
function dew$3J() {
  if (_dewExec$3J) return exports$3K;
  _dewExec$3J = true;
  Object.defineProperty(exports$3K, "__esModule", {
    value: true
  });
  exports$3K.default = void 0;
  var _index = dew$4E();
  exports$3K.default = toExpression;
  function toExpression(node) {
    if ((0, _index.isExpressionStatement)(node)) {
      node = node.expression;
    }
    if ((0, _index.isExpression)(node)) {
      return node;
    }
    if ((0, _index.isClass)(node)) {
      node.type = "ClassExpression";
    } else if ((0, _index.isFunction)(node)) {
      node.type = "FunctionExpression";
    }
    if (!(0, _index.isExpression)(node)) {
      throw new Error(`cannot turn ${node.type} to an expression`);
    }
    return node;
  }
  return exports$3K;
}

var exports$3J = {},
  _dewExec$3I = false;
function dew$3I() {
  if (_dewExec$3I) return exports$3J;
  _dewExec$3I = true;
  Object.defineProperty(exports$3J, "__esModule", {
    value: true
  });
  exports$3J.default = traverseFast;
  var _index = dew$4g();
  function traverseFast(node, enter, opts) {
    if (!node) return;
    const keys = _index.VISITOR_KEYS[node.type];
    if (!keys) return;
    opts = opts || {};
    enter(node, opts);
    for (const key of keys) {
      const subNode = node[key];
      if (Array.isArray(subNode)) {
        for (const node of subNode) {
          traverseFast(node, enter, opts);
        }
      } else {
        traverseFast(subNode, enter, opts);
      }
    }
  }
  return exports$3J;
}

var exports$3I = {},
  _dewExec$3H = false;
function dew$3H() {
  if (_dewExec$3H) return exports$3I;
  _dewExec$3H = true;
  Object.defineProperty(exports$3I, "__esModule", {
    value: true
  });
  exports$3I.default = removeProperties;
  var _index = dew$4q();
  const CLEAR_KEYS = ["tokens", "start", "end", "loc", "raw", "rawValue"];
  const CLEAR_KEYS_PLUS_COMMENTS = [..._index.COMMENT_KEYS, "comments", ...CLEAR_KEYS];
  function removeProperties(node, opts = {}) {
    const map = opts.preserveComments ? CLEAR_KEYS : CLEAR_KEYS_PLUS_COMMENTS;
    for (const key of map) {
      if (node[key] != null) node[key] = undefined;
    }
    for (const key of Object.keys(node)) {
      if (key[0] === "_" && node[key] != null) node[key] = undefined;
    }
    const symbols = Object.getOwnPropertySymbols(node);
    for (const sym of symbols) {
      node[sym] = null;
    }
  }
  return exports$3I;
}

var exports$3H = {},
  _dewExec$3G = false;
function dew$3G() {
  if (_dewExec$3G) return exports$3H;
  _dewExec$3G = true;
  Object.defineProperty(exports$3H, "__esModule", {
    value: true
  });
  exports$3H.default = removePropertiesDeep;
  var _traverseFast = dew$3I();
  var _removeProperties = dew$3H();
  function removePropertiesDeep(tree, opts) {
    (0, _traverseFast.default)(tree, _removeProperties.default, opts);
    return tree;
  }
  return exports$3H;
}

var exports$3G = {},
  _dewExec$3F = false;
function dew$3F() {
  if (_dewExec$3F) return exports$3G;
  _dewExec$3F = true;
  Object.defineProperty(exports$3G, "__esModule", {
    value: true
  });
  exports$3G.default = toKeyAlias;
  var _index = dew$4E();
  var _cloneNode = dew$40();
  var _removePropertiesDeep = dew$3G();
  function toKeyAlias(node, key = node.key) {
    let alias;
    if (node.kind === "method") {
      return toKeyAlias.increment() + "";
    } else if ((0, _index.isIdentifier)(key)) {
      alias = key.name;
    } else if ((0, _index.isStringLiteral)(key)) {
      alias = JSON.stringify(key.value);
    } else {
      alias = JSON.stringify((0, _removePropertiesDeep.default)((0, _cloneNode.default)(key)));
    }
    if (node.computed) {
      alias = `[${alias}]`;
    }
    if (node.static) {
      alias = `static:${alias}`;
    }
    return alias;
  }
  toKeyAlias.uid = 0;
  toKeyAlias.increment = function () {
    if (toKeyAlias.uid >= Number.MAX_SAFE_INTEGER) {
      return toKeyAlias.uid = 0;
    } else {
      return toKeyAlias.uid++;
    }
  };
  return exports$3G;
}

var exports$3F = {},
  _dewExec$3E = false;
function dew$3E() {
  if (_dewExec$3E) return exports$3F;
  _dewExec$3E = true;
  Object.defineProperty(exports$3F, "__esModule", {
    value: true
  });
  exports$3F.default = void 0;
  var _index = dew$4E();
  var _index2 = dew$4d();
  exports$3F.default = toStatement;
  function toStatement(node, ignore) {
    if ((0, _index.isStatement)(node)) {
      return node;
    }
    let mustHaveId = false;
    let newType;
    if ((0, _index.isClass)(node)) {
      mustHaveId = true;
      newType = "ClassDeclaration";
    } else if ((0, _index.isFunction)(node)) {
      mustHaveId = true;
      newType = "FunctionDeclaration";
    } else if ((0, _index.isAssignmentExpression)(node)) {
      return (0, _index2.expressionStatement)(node);
    }
    if (mustHaveId && !node.id) {
      newType = false;
    }
    if (!newType) {
      if (ignore) {
        return false;
      } else {
        throw new Error(`cannot turn ${node.type} to a statement`);
      }
    }
    node.type = newType;
    return node;
  }
  return exports$3F;
}

var exports$3E = {},
  _dewExec$3D = false;
function dew$3D() {
  if (_dewExec$3D) return exports$3E;
  _dewExec$3D = true;
  Object.defineProperty(exports$3E, "__esModule", {
    value: true
  });
  exports$3E.default = void 0;
  var _isValidIdentifier = dew$4s();
  var _index = dew$4d();
  exports$3E.default = valueToNode;
  const objectToString = Function.call.bind(Object.prototype.toString);
  function isRegExp(value) {
    return objectToString(value) === "[object RegExp]";
  }
  function isPlainObject(value) {
    if (typeof value !== "object" || value === null || Object.prototype.toString.call(value) !== "[object Object]") {
      return false;
    }
    const proto = Object.getPrototypeOf(value);
    return proto === null || Object.getPrototypeOf(proto) === null;
  }
  function valueToNode(value) {
    if (value === undefined) {
      return (0, _index.identifier)("undefined");
    }
    if (value === true || value === false) {
      return (0, _index.booleanLiteral)(value);
    }
    if (value === null) {
      return (0, _index.nullLiteral)();
    }
    if (typeof value === "string") {
      return (0, _index.stringLiteral)(value);
    }
    if (typeof value === "number") {
      let result;
      if (Number.isFinite(value)) {
        result = (0, _index.numericLiteral)(Math.abs(value));
      } else {
        let numerator;
        if (Number.isNaN(value)) {
          numerator = (0, _index.numericLiteral)(0);
        } else {
          numerator = (0, _index.numericLiteral)(1);
        }
        result = (0, _index.binaryExpression)("/", numerator, (0, _index.numericLiteral)(0));
      }
      if (value < 0 || Object.is(value, -0)) {
        result = (0, _index.unaryExpression)("-", result);
      }
      return result;
    }
    if (isRegExp(value)) {
      const pattern = value.source;
      const flags = /\/([a-z]*)$/.exec(value.toString())[1];
      return (0, _index.regExpLiteral)(pattern, flags);
    }
    if (Array.isArray(value)) {
      return (0, _index.arrayExpression)(value.map(valueToNode));
    }
    if (isPlainObject(value)) {
      const props = [];
      for (const key of Object.keys(value)) {
        let nodeKey;
        if ((0, _isValidIdentifier.default)(key)) {
          nodeKey = (0, _index.identifier)(key);
        } else {
          nodeKey = (0, _index.stringLiteral)(key);
        }
        props.push((0, _index.objectProperty)(nodeKey, valueToNode(value[key])));
      }
      return (0, _index.objectExpression)(props);
    }
    throw new Error("don't know how to turn this value into a node");
  }
  return exports$3E;
}

var exports$3D = {},
  _dewExec$3C = false;
function dew$3C() {
  if (_dewExec$3C) return exports$3D;
  _dewExec$3C = true;
  Object.defineProperty(exports$3D, "__esModule", {
    value: true
  });
  exports$3D.default = appendToMemberExpression;
  var _index = dew$4d();
  function appendToMemberExpression(member, append, computed = false) {
    member.object = (0, _index.memberExpression)(member.object, member.property, member.computed);
    member.property = append;
    member.computed = !!computed;
    return member;
  }
  return exports$3D;
}

var exports$3C = {},
  _dewExec$3B = false;
function dew$3B() {
  if (_dewExec$3B) return exports$3C;
  _dewExec$3B = true;
  Object.defineProperty(exports$3C, "__esModule", {
    value: true
  });
  exports$3C.default = inherits;
  var _index = dew$4q();
  var _inheritsComments = dew$3R();
  function inherits(child, parent) {
    if (!child || !parent) return child;
    for (const key of _index.INHERIT_KEYS.optional) {
      if (child[key] == null) {
        child[key] = parent[key];
      }
    }
    for (const key of Object.keys(parent)) {
      if (key[0] === "_" && key !== "__clone") {
        child[key] = parent[key];
      }
    }
    for (const key of _index.INHERIT_KEYS.force) {
      child[key] = parent[key];
    }
    (0, _inheritsComments.default)(child, parent);
    return child;
  }
  return exports$3C;
}

var exports$3B = {},
  _dewExec$3A = false;
function dew$3A() {
  if (_dewExec$3A) return exports$3B;
  _dewExec$3A = true;
  Object.defineProperty(exports$3B, "__esModule", {
    value: true
  });
  exports$3B.default = prependToMemberExpression;
  var _index = dew$4d();
  var _index2 = dew$3i();
  function prependToMemberExpression(member, prepend) {
    if ((0, _index2.isSuper)(member.object)) {
      throw new Error("Cannot prepend node to super property access (`super.foo`).");
    }
    member.object = (0, _index.memberExpression)(prepend, member.object);
    return member;
  }
  return exports$3B;
}

var exports$3A = {},
  _dewExec$3z = false;
function dew$3z() {
  if (_dewExec$3z) return exports$3A;
  _dewExec$3z = true;
  Object.defineProperty(exports$3A, "__esModule", {
    value: true
  });
  exports$3A.default = getAssignmentIdentifiers;
  function getAssignmentIdentifiers(node) {
    const search = [].concat(node);
    const ids = Object.create(null);
    while (search.length) {
      const id = search.pop();
      if (!id) continue;
      switch (id.type) {
        case "ArrayPattern":
          search.push(...id.elements);
          break;
        case "AssignmentExpression":
        case "AssignmentPattern":
        case "ForInStatement":
        case "ForOfStatement":
          search.push(id.left);
          break;
        case "ObjectPattern":
          search.push(...id.properties);
          break;
        case "ObjectProperty":
          search.push(id.value);
          break;
        case "RestElement":
        case "UpdateExpression":
          search.push(id.argument);
          break;
        case "UnaryExpression":
          if (id.operator === "delete") {
            search.push(id.argument);
          }
          break;
        case "Identifier":
          ids[id.name] = id;
          break;
      }
    }
    return ids;
  }
  return exports$3A;
}

var exports$3z = {},
  _dewExec$3y = false;
function dew$3y() {
  if (_dewExec$3y) return exports$3z;
  _dewExec$3y = true;
  Object.defineProperty(exports$3z, "__esModule", {
    value: true
  });
  exports$3z.default = getBindingIdentifiers;
  var _index = dew$4E();
  function getBindingIdentifiers(node, duplicates, outerOnly, newBindingsOnly) {
    const search = [].concat(node);
    const ids = Object.create(null);
    while (search.length) {
      const id = search.shift();
      if (!id) continue;
      if (newBindingsOnly && ((0, _index.isAssignmentExpression)(id) || (0, _index.isUnaryExpression)(id) || (0, _index.isUpdateExpression)(id))) {
        continue;
      }
      if ((0, _index.isIdentifier)(id)) {
        if (duplicates) {
          const _ids = ids[id.name] = ids[id.name] || [];
          _ids.push(id);
        } else {
          ids[id.name] = id;
        }
        continue;
      }
      if ((0, _index.isExportDeclaration)(id) && !(0, _index.isExportAllDeclaration)(id)) {
        if ((0, _index.isDeclaration)(id.declaration)) {
          search.push(id.declaration);
        }
        continue;
      }
      if (outerOnly) {
        if ((0, _index.isFunctionDeclaration)(id)) {
          search.push(id.id);
          continue;
        }
        if ((0, _index.isFunctionExpression)(id)) {
          continue;
        }
      }
      const keys = getBindingIdentifiers.keys[id.type];
      if (keys) {
        for (let i = 0; i < keys.length; i++) {
          const key = keys[i];
          const nodes = id[key];
          if (nodes) {
            if (Array.isArray(nodes)) {
              search.push(...nodes);
            } else {
              search.push(nodes);
            }
          }
        }
      }
    }
    return ids;
  }
  const keys = {
    DeclareClass: ["id"],
    DeclareFunction: ["id"],
    DeclareModule: ["id"],
    DeclareVariable: ["id"],
    DeclareInterface: ["id"],
    DeclareTypeAlias: ["id"],
    DeclareOpaqueType: ["id"],
    InterfaceDeclaration: ["id"],
    TypeAlias: ["id"],
    OpaqueType: ["id"],
    CatchClause: ["param"],
    LabeledStatement: ["label"],
    UnaryExpression: ["argument"],
    AssignmentExpression: ["left"],
    ImportSpecifier: ["local"],
    ImportNamespaceSpecifier: ["local"],
    ImportDefaultSpecifier: ["local"],
    ImportDeclaration: ["specifiers"],
    ExportSpecifier: ["exported"],
    ExportNamespaceSpecifier: ["exported"],
    ExportDefaultSpecifier: ["exported"],
    FunctionDeclaration: ["id", "params"],
    FunctionExpression: ["id", "params"],
    ArrowFunctionExpression: ["params"],
    ObjectMethod: ["params"],
    ClassMethod: ["params"],
    ClassPrivateMethod: ["params"],
    ForInStatement: ["left"],
    ForOfStatement: ["left"],
    ClassDeclaration: ["id"],
    ClassExpression: ["id"],
    RestElement: ["argument"],
    UpdateExpression: ["argument"],
    ObjectProperty: ["value"],
    AssignmentPattern: ["left"],
    ArrayPattern: ["elements"],
    ObjectPattern: ["properties"],
    VariableDeclaration: ["declarations"],
    VariableDeclarator: ["id"]
  };
  getBindingIdentifiers.keys = keys;
  return exports$3z;
}

var exports$3y = {},
  _dewExec$3x = false;
function dew$3x() {
  if (_dewExec$3x) return exports$3y;
  _dewExec$3x = true;
  Object.defineProperty(exports$3y, "__esModule", {
    value: true
  });
  exports$3y.default = void 0;
  var _getBindingIdentifiers = dew$3y();
  exports$3y.default = getOuterBindingIdentifiers;
  function getOuterBindingIdentifiers(node, duplicates) {
    return (0, _getBindingIdentifiers.default)(node, duplicates, true);
  }
  return exports$3y;
}

var exports$3x = {},
  _dewExec$3w = false;
function dew$3w() {
  if (_dewExec$3w) return exports$3x;
  _dewExec$3w = true;
  Object.defineProperty(exports$3x, "__esModule", {
    value: true
  });
  exports$3x.default = getFunctionName;
  var _index = dew$4E();
  function getNameFromLiteralId(id) {
    if ((0, _index.isNullLiteral)(id)) {
      return "null";
    }
    if ((0, _index.isRegExpLiteral)(id)) {
      return `/${id.pattern}/${id.flags}`;
    }
    if ((0, _index.isTemplateLiteral)(id)) {
      return id.quasis.map(quasi => quasi.value.raw).join("");
    }
    if (id.value !== undefined) {
      return String(id.value);
    }
    return null;
  }
  function getObjectMemberKey(node) {
    if (!node.computed || (0, _index.isLiteral)(node.key)) {
      return node.key;
    }
  }
  function getFunctionName(node, parent) {
    if ("id" in node && node.id) {
      return {
        name: node.id.name,
        originalNode: node.id
      };
    }
    let prefix = "";
    let id;
    if ((0, _index.isObjectProperty)(parent, {
      value: node
    })) {
      id = getObjectMemberKey(parent);
    } else if ((0, _index.isObjectMethod)(node) || (0, _index.isClassMethod)(node)) {
      id = getObjectMemberKey(node);
      if (node.kind === "get") prefix = "get ";else if (node.kind === "set") prefix = "set ";
    } else if ((0, _index.isVariableDeclarator)(parent, {
      init: node
    })) {
      id = parent.id;
    } else if ((0, _index.isAssignmentExpression)(parent, {
      operator: "=",
      right: node
    })) {
      id = parent.left;
    }
    if (!id) return null;
    const name = (0, _index.isLiteral)(id) ? getNameFromLiteralId(id) : (0, _index.isIdentifier)(id) ? id.name : (0, _index.isPrivateName)(id) ? id.id.name : null;
    if (name == null) return null;
    return {
      name: prefix + name,
      originalNode: id
    };
  }
  return exports$3x;
}

var exports$3w = {},
  _dewExec$3v = false;
function dew$3v() {
  if (_dewExec$3v) return exports$3w;
  _dewExec$3v = true;
  Object.defineProperty(exports$3w, "__esModule", {
    value: true
  });
  exports$3w.default = traverse;
  var _index = dew$4g();
  function traverse(node, handlers, state) {
    if (typeof handlers === "function") {
      handlers = {
        enter: handlers
      };
    }
    const {
      enter,
      exit
    } = handlers;
    traverseSimpleImpl(node, enter, exit, state, []);
  }
  function traverseSimpleImpl(node, enter, exit, state, ancestors) {
    const keys = _index.VISITOR_KEYS[node.type];
    if (!keys) return;
    if (enter) enter(node, ancestors, state);
    for (const key of keys) {
      const subNode = node[key];
      if (Array.isArray(subNode)) {
        for (let i = 0; i < subNode.length; i++) {
          const child = subNode[i];
          if (!child) continue;
          ancestors.push({
            node,
            key,
            index: i
          });
          traverseSimpleImpl(child, enter, exit, state, ancestors);
          ancestors.pop();
        }
      } else if (subNode) {
        ancestors.push({
          node,
          key
        });
        traverseSimpleImpl(subNode, enter, exit, state, ancestors);
        ancestors.pop();
      }
    }
    if (exit) exit(node, ancestors, state);
  }
  return exports$3w;
}

var exports$3v = {},
  _dewExec$3u = false;
function dew$3u() {
  if (_dewExec$3u) return exports$3v;
  _dewExec$3u = true;
  Object.defineProperty(exports$3v, "__esModule", {
    value: true
  });
  exports$3v.default = isBinding;
  var _getBindingIdentifiers = dew$3y();
  function isBinding(node, parent, grandparent) {
    if (grandparent && node.type === "Identifier" && parent.type === "ObjectProperty" && grandparent.type === "ObjectExpression") {
      return false;
    }
    const keys = _getBindingIdentifiers.default.keys[parent.type];
    if (keys) {
      for (let i = 0; i < keys.length; i++) {
        const key = keys[i];
        const val = parent[key];
        if (Array.isArray(val)) {
          if (val.includes(node)) return true;
        } else {
          if (val === node) return true;
        }
      }
    }
    return false;
  }
  return exports$3v;
}

var exports$3u = {},
  _dewExec$3t = false;
function dew$3t() {
  if (_dewExec$3t) return exports$3u;
  _dewExec$3t = true;
  Object.defineProperty(exports$3u, "__esModule", {
    value: true
  });
  exports$3u.default = isLet;
  var _index = dew$4E();
  var _index2 = dew$4q();
  function isLet(node) {
    return (0, _index.isVariableDeclaration)(node) && (node.kind !== "var" || node[_index2.BLOCK_SCOPED_SYMBOL]);
  }
  return exports$3u;
}

var exports$3t = {},
  _dewExec$3s = false;
function dew$3s() {
  if (_dewExec$3s) return exports$3t;
  _dewExec$3s = true;
  Object.defineProperty(exports$3t, "__esModule", {
    value: true
  });
  exports$3t.default = isBlockScoped;
  var _index = dew$4E();
  var _isLet = dew$3t();
  function isBlockScoped(node) {
    return (0, _index.isFunctionDeclaration)(node) || (0, _index.isClassDeclaration)(node) || (0, _isLet.default)(node);
  }
  return exports$3t;
}

var exports$3s = {},
  _dewExec$3r = false;
function dew$3r() {
  if (_dewExec$3r) return exports$3s;
  _dewExec$3r = true;
  Object.defineProperty(exports$3s, "__esModule", {
    value: true
  });
  exports$3s.default = isImmutable;
  var _isType = dew$4y();
  var _index = dew$4E();
  function isImmutable(node) {
    if ((0, _isType.default)(node.type, "Immutable")) return true;
    if ((0, _index.isIdentifier)(node)) {
      if (node.name === "undefined") {
        return true;
      } else {
        return false;
      }
    }
    return false;
  }
  return exports$3s;
}

var exports$3r = {},
  _dewExec$3q = false;
function dew$3q() {
  if (_dewExec$3q) return exports$3r;
  _dewExec$3q = true;
  Object.defineProperty(exports$3r, "__esModule", {
    value: true
  });
  exports$3r.default = isNodesEquivalent;
  var _index = dew$4g();
  function isNodesEquivalent(a, b) {
    if (typeof a !== "object" || typeof b !== "object" || a == null || b == null) {
      return a === b;
    }
    if (a.type !== b.type) {
      return false;
    }
    const fields = Object.keys(_index.NODE_FIELDS[a.type] || a.type);
    const visitorKeys = _index.VISITOR_KEYS[a.type];
    for (const field of fields) {
      const val_a = a[field];
      const val_b = b[field];
      if (typeof val_a !== typeof val_b) {
        return false;
      }
      if (val_a == null && val_b == null) {
        continue;
      } else if (val_a == null || val_b == null) {
        return false;
      }
      if (Array.isArray(val_a)) {
        if (!Array.isArray(val_b)) {
          return false;
        }
        if (val_a.length !== val_b.length) {
          return false;
        }
        for (let i = 0; i < val_a.length; i++) {
          if (!isNodesEquivalent(val_a[i], val_b[i])) {
            return false;
          }
        }
        continue;
      }
      if (typeof val_a === "object" && !(visitorKeys != null && visitorKeys.includes(field))) {
        for (const key of Object.keys(val_a)) {
          if (val_a[key] !== val_b[key]) {
            return false;
          }
        }
        continue;
      }
      if (!isNodesEquivalent(val_a, val_b)) {
        return false;
      }
    }
    return true;
  }
  return exports$3r;
}

var exports$3q = {},
  _dewExec$3p = false;
function dew$3p() {
  if (_dewExec$3p) return exports$3q;
  _dewExec$3p = true;
  Object.defineProperty(exports$3q, "__esModule", {
    value: true
  });
  exports$3q.default = isReferenced;
  function isReferenced(node, parent, grandparent) {
    switch (parent.type) {
      case "MemberExpression":
      case "OptionalMemberExpression":
        if (parent.property === node) {
          return !!parent.computed;
        }
        return parent.object === node;
      case "JSXMemberExpression":
        return parent.object === node;
      case "VariableDeclarator":
        return parent.init === node;
      case "ArrowFunctionExpression":
        return parent.body === node;
      case "PrivateName":
        return false;
      case "ClassMethod":
      case "ClassPrivateMethod":
      case "ObjectMethod":
        if (parent.key === node) {
          return !!parent.computed;
        }
        return false;
      case "ObjectProperty":
        if (parent.key === node) {
          return !!parent.computed;
        }
        return !grandparent || grandparent.type !== "ObjectPattern";
      case "ClassProperty":
      case "ClassAccessorProperty":
        if (parent.key === node) {
          return !!parent.computed;
        }
        return true;
      case "ClassPrivateProperty":
        return parent.key !== node;
      case "ClassDeclaration":
      case "ClassExpression":
        return parent.superClass === node;
      case "AssignmentExpression":
        return parent.right === node;
      case "AssignmentPattern":
        return parent.right === node;
      case "LabeledStatement":
        return false;
      case "CatchClause":
        return false;
      case "RestElement":
        return false;
      case "BreakStatement":
      case "ContinueStatement":
        return false;
      case "FunctionDeclaration":
      case "FunctionExpression":
        return false;
      case "ExportNamespaceSpecifier":
      case "ExportDefaultSpecifier":
        return false;
      case "ExportSpecifier":
        if (grandparent != null && grandparent.source) {
          return false;
        }
        return parent.local === node;
      case "ImportDefaultSpecifier":
      case "ImportNamespaceSpecifier":
      case "ImportSpecifier":
        return false;
      case "ImportAttribute":
        return false;
      case "JSXAttribute":
        return false;
      case "ObjectPattern":
      case "ArrayPattern":
        return false;
      case "MetaProperty":
        return false;
      case "ObjectTypeProperty":
        return parent.key !== node;
      case "TSEnumMember":
        return parent.id !== node;
      case "TSPropertySignature":
        if (parent.key === node) {
          return !!parent.computed;
        }
        return true;
    }
    return true;
  }
  return exports$3q;
}

var exports$3p = {},
  _dewExec$3o = false;
function dew$3o() {
  if (_dewExec$3o) return exports$3p;
  _dewExec$3o = true;
  Object.defineProperty(exports$3p, "__esModule", {
    value: true
  });
  exports$3p.default = isScope;
  var _index = dew$4E();
  function isScope(node, parent) {
    if ((0, _index.isBlockStatement)(node) && ((0, _index.isFunction)(parent) || (0, _index.isCatchClause)(parent))) {
      return false;
    }
    if ((0, _index.isPattern)(node) && ((0, _index.isFunction)(parent) || (0, _index.isCatchClause)(parent))) {
      return true;
    }
    return (0, _index.isScopable)(node);
  }
  return exports$3p;
}

var exports$3o = {},
  _dewExec$3n = false;
function dew$3n() {
  if (_dewExec$3n) return exports$3o;
  _dewExec$3n = true;
  Object.defineProperty(exports$3o, "__esModule", {
    value: true
  });
  exports$3o.default = isSpecifierDefault;
  var _index = dew$4E();
  function isSpecifierDefault(specifier) {
    return (0, _index.isImportDefaultSpecifier)(specifier) || (0, _index.isIdentifier)(specifier.imported || specifier.exported, {
      name: "default"
    });
  }
  return exports$3o;
}

var exports$3n = {},
  _dewExec$3m = false;
function dew$3m() {
  if (_dewExec$3m) return exports$3n;
  _dewExec$3m = true;
  Object.defineProperty(exports$3n, "__esModule", {
    value: true
  });
  exports$3n.default = isValidES3Identifier;
  var _isValidIdentifier = dew$4s();
  const RESERVED_WORDS_ES3_ONLY = new Set(["abstract", "boolean", "byte", "char", "double", "enum", "final", "float", "goto", "implements", "int", "interface", "long", "native", "package", "private", "protected", "public", "short", "static", "synchronized", "throws", "transient", "volatile"]);
  function isValidES3Identifier(name) {
    return (0, _isValidIdentifier.default)(name) && !RESERVED_WORDS_ES3_ONLY.has(name);
  }
  return exports$3n;
}

var exports$3m = {},
  _dewExec$3l = false;
function dew$3l() {
  if (_dewExec$3l) return exports$3m;
  _dewExec$3l = true;
  Object.defineProperty(exports$3m, "__esModule", {
    value: true
  });
  exports$3m.default = isVar;
  var _index = dew$4E();
  var _index2 = dew$4q();
  function isVar(node) {
    return (0, _index.isVariableDeclaration)(node, {
      kind: "var"
    }) && !node[_index2.BLOCK_SCOPED_SYMBOL];
  }
  return exports$3m;
}

var exports$3l = {},
  _dewExec$3k = false;
function dew$3k() {
  if (_dewExec$3k) return exports$3l;
  _dewExec$3k = true;
  Object.defineProperty(exports$3l, "__esModule", {
    value: true
  });
  exports$3l.default = gatherSequenceExpressions;
  var _getBindingIdentifiers = dew$3y();
  var _index = dew$4E();
  var _index2 = dew$4d();
  var _productions = dew$41();
  var _cloneNode = dew$40();
  function gatherSequenceExpressions(nodes, declars) {
    const exprs = [];
    let ensureLastUndefined = true;
    for (const node of nodes) {
      if (!(0, _index.isEmptyStatement)(node)) {
        ensureLastUndefined = false;
      }
      if ((0, _index.isExpression)(node)) {
        exprs.push(node);
      } else if ((0, _index.isExpressionStatement)(node)) {
        exprs.push(node.expression);
      } else if ((0, _index.isVariableDeclaration)(node)) {
        if (node.kind !== "var") return;
        for (const declar of node.declarations) {
          const bindings = (0, _getBindingIdentifiers.default)(declar);
          for (const key of Object.keys(bindings)) {
            declars.push({
              kind: node.kind,
              id: (0, _cloneNode.default)(bindings[key])
            });
          }
          if (declar.init) {
            exprs.push((0, _index2.assignmentExpression)("=", declar.id, declar.init));
          }
        }
        ensureLastUndefined = true;
      } else if ((0, _index.isIfStatement)(node)) {
        const consequent = node.consequent ? gatherSequenceExpressions([node.consequent], declars) : (0, _productions.buildUndefinedNode)();
        const alternate = node.alternate ? gatherSequenceExpressions([node.alternate], declars) : (0, _productions.buildUndefinedNode)();
        if (!consequent || !alternate) return;
        exprs.push((0, _index2.conditionalExpression)(node.test, consequent, alternate));
      } else if ((0, _index.isBlockStatement)(node)) {
        const body = gatherSequenceExpressions(node.body, declars);
        if (!body) return;
        exprs.push(body);
      } else if ((0, _index.isEmptyStatement)(node)) {
        if (nodes.indexOf(node) === 0) {
          ensureLastUndefined = true;
        }
      } else {
        return;
      }
    }
    if (ensureLastUndefined) {
      exprs.push((0, _productions.buildUndefinedNode)());
    }
    if (exprs.length === 1) {
      return exprs[0];
    } else {
      return (0, _index2.sequenceExpression)(exprs);
    }
  }
  return exports$3l;
}

var exports$3k = {},
  _dewExec$3j = false;
function dew$3j() {
  if (_dewExec$3j) return exports$3k;
  _dewExec$3j = true;
  Object.defineProperty(exports$3k, "__esModule", {
    value: true
  });
  exports$3k.default = toSequenceExpression;
  var _gatherSequenceExpressions = dew$3k();
  function toSequenceExpression(nodes, scope) {
    if (!(nodes != null && nodes.length)) return;
    const declars = [];
    const result = (0, _gatherSequenceExpressions.default)(nodes, declars);
    if (!result) return;
    for (const declar of declars) {
      scope.push(declar);
    }
    return result;
  }
  return exports$3k;
}

var exports$3j = {},
  _dewExec$3i = false;
function dew$3i() {
  if (_dewExec$3i) return exports$3j;
  _dewExec$3i = true;
  Object.defineProperty(exports$3j, "__esModule", {
    value: true
  });
  var _exportNames = {
    react: true,
    assertNode: true,
    createTypeAnnotationBasedOnTypeof: true,
    createUnionTypeAnnotation: true,
    createFlowUnionType: true,
    createTSUnionType: true,
    cloneNode: true,
    clone: true,
    cloneDeep: true,
    cloneDeepWithoutLoc: true,
    cloneWithoutLoc: true,
    addComment: true,
    addComments: true,
    inheritInnerComments: true,
    inheritLeadingComments: true,
    inheritsComments: true,
    inheritTrailingComments: true,
    removeComments: true,
    ensureBlock: true,
    toBindingIdentifierName: true,
    toBlock: true,
    toComputedKey: true,
    toExpression: true,
    toIdentifier: true,
    toKeyAlias: true,
    toStatement: true,
    valueToNode: true,
    appendToMemberExpression: true,
    inherits: true,
    prependToMemberExpression: true,
    removeProperties: true,
    removePropertiesDeep: true,
    removeTypeDuplicates: true,
    getAssignmentIdentifiers: true,
    getBindingIdentifiers: true,
    getOuterBindingIdentifiers: true,
    getFunctionName: true,
    traverse: true,
    traverseFast: true,
    shallowEqual: true,
    is: true,
    isBinding: true,
    isBlockScoped: true,
    isImmutable: true,
    isLet: true,
    isNode: true,
    isNodesEquivalent: true,
    isPlaceholderType: true,
    isReferenced: true,
    isScope: true,
    isSpecifierDefault: true,
    isType: true,
    isValidES3Identifier: true,
    isValidIdentifier: true,
    isVar: true,
    matchesPattern: true,
    validate: true,
    buildMatchMemberExpression: true,
    __internal__deprecationWarning: true
  };
  Object.defineProperty(exports$3j, "__internal__deprecationWarning", {
    enumerable: true,
    get: function () {
      return _deprecationWarning.default;
    }
  });
  Object.defineProperty(exports$3j, "addComment", {
    enumerable: true,
    get: function () {
      return _addComment.default;
    }
  });
  Object.defineProperty(exports$3j, "addComments", {
    enumerable: true,
    get: function () {
      return _addComments.default;
    }
  });
  Object.defineProperty(exports$3j, "appendToMemberExpression", {
    enumerable: true,
    get: function () {
      return _appendToMemberExpression.default;
    }
  });
  Object.defineProperty(exports$3j, "assertNode", {
    enumerable: true,
    get: function () {
      return _assertNode.default;
    }
  });
  Object.defineProperty(exports$3j, "buildMatchMemberExpression", {
    enumerable: true,
    get: function () {
      return _buildMatchMemberExpression.default;
    }
  });
  Object.defineProperty(exports$3j, "clone", {
    enumerable: true,
    get: function () {
      return _clone.default;
    }
  });
  Object.defineProperty(exports$3j, "cloneDeep", {
    enumerable: true,
    get: function () {
      return _cloneDeep.default;
    }
  });
  Object.defineProperty(exports$3j, "cloneDeepWithoutLoc", {
    enumerable: true,
    get: function () {
      return _cloneDeepWithoutLoc.default;
    }
  });
  Object.defineProperty(exports$3j, "cloneNode", {
    enumerable: true,
    get: function () {
      return _cloneNode.default;
    }
  });
  Object.defineProperty(exports$3j, "cloneWithoutLoc", {
    enumerable: true,
    get: function () {
      return _cloneWithoutLoc.default;
    }
  });
  Object.defineProperty(exports$3j, "createFlowUnionType", {
    enumerable: true,
    get: function () {
      return _createFlowUnionType.default;
    }
  });
  Object.defineProperty(exports$3j, "createTSUnionType", {
    enumerable: true,
    get: function () {
      return _createTSUnionType.default;
    }
  });
  Object.defineProperty(exports$3j, "createTypeAnnotationBasedOnTypeof", {
    enumerable: true,
    get: function () {
      return _createTypeAnnotationBasedOnTypeof.default;
    }
  });
  Object.defineProperty(exports$3j, "createUnionTypeAnnotation", {
    enumerable: true,
    get: function () {
      return _createFlowUnionType.default;
    }
  });
  Object.defineProperty(exports$3j, "ensureBlock", {
    enumerable: true,
    get: function () {
      return _ensureBlock.default;
    }
  });
  Object.defineProperty(exports$3j, "getAssignmentIdentifiers", {
    enumerable: true,
    get: function () {
      return _getAssignmentIdentifiers.default;
    }
  });
  Object.defineProperty(exports$3j, "getBindingIdentifiers", {
    enumerable: true,
    get: function () {
      return _getBindingIdentifiers.default;
    }
  });
  Object.defineProperty(exports$3j, "getFunctionName", {
    enumerable: true,
    get: function () {
      return _getFunctionName.default;
    }
  });
  Object.defineProperty(exports$3j, "getOuterBindingIdentifiers", {
    enumerable: true,
    get: function () {
      return _getOuterBindingIdentifiers.default;
    }
  });
  Object.defineProperty(exports$3j, "inheritInnerComments", {
    enumerable: true,
    get: function () {
      return _inheritInnerComments.default;
    }
  });
  Object.defineProperty(exports$3j, "inheritLeadingComments", {
    enumerable: true,
    get: function () {
      return _inheritLeadingComments.default;
    }
  });
  Object.defineProperty(exports$3j, "inheritTrailingComments", {
    enumerable: true,
    get: function () {
      return _inheritTrailingComments.default;
    }
  });
  Object.defineProperty(exports$3j, "inherits", {
    enumerable: true,
    get: function () {
      return _inherits.default;
    }
  });
  Object.defineProperty(exports$3j, "inheritsComments", {
    enumerable: true,
    get: function () {
      return _inheritsComments.default;
    }
  });
  Object.defineProperty(exports$3j, "is", {
    enumerable: true,
    get: function () {
      return _is.default;
    }
  });
  Object.defineProperty(exports$3j, "isBinding", {
    enumerable: true,
    get: function () {
      return _isBinding.default;
    }
  });
  Object.defineProperty(exports$3j, "isBlockScoped", {
    enumerable: true,
    get: function () {
      return _isBlockScoped.default;
    }
  });
  Object.defineProperty(exports$3j, "isImmutable", {
    enumerable: true,
    get: function () {
      return _isImmutable.default;
    }
  });
  Object.defineProperty(exports$3j, "isLet", {
    enumerable: true,
    get: function () {
      return _isLet.default;
    }
  });
  Object.defineProperty(exports$3j, "isNode", {
    enumerable: true,
    get: function () {
      return _isNode.default;
    }
  });
  Object.defineProperty(exports$3j, "isNodesEquivalent", {
    enumerable: true,
    get: function () {
      return _isNodesEquivalent.default;
    }
  });
  Object.defineProperty(exports$3j, "isPlaceholderType", {
    enumerable: true,
    get: function () {
      return _isPlaceholderType.default;
    }
  });
  Object.defineProperty(exports$3j, "isReferenced", {
    enumerable: true,
    get: function () {
      return _isReferenced.default;
    }
  });
  Object.defineProperty(exports$3j, "isScope", {
    enumerable: true,
    get: function () {
      return _isScope.default;
    }
  });
  Object.defineProperty(exports$3j, "isSpecifierDefault", {
    enumerable: true,
    get: function () {
      return _isSpecifierDefault.default;
    }
  });
  Object.defineProperty(exports$3j, "isType", {
    enumerable: true,
    get: function () {
      return _isType.default;
    }
  });
  Object.defineProperty(exports$3j, "isValidES3Identifier", {
    enumerable: true,
    get: function () {
      return _isValidES3Identifier.default;
    }
  });
  Object.defineProperty(exports$3j, "isValidIdentifier", {
    enumerable: true,
    get: function () {
      return _isValidIdentifier.default;
    }
  });
  Object.defineProperty(exports$3j, "isVar", {
    enumerable: true,
    get: function () {
      return _isVar.default;
    }
  });
  Object.defineProperty(exports$3j, "matchesPattern", {
    enumerable: true,
    get: function () {
      return _matchesPattern.default;
    }
  });
  Object.defineProperty(exports$3j, "prependToMemberExpression", {
    enumerable: true,
    get: function () {
      return _prependToMemberExpression.default;
    }
  });
  exports$3j.react = void 0;
  Object.defineProperty(exports$3j, "removeComments", {
    enumerable: true,
    get: function () {
      return _removeComments.default;
    }
  });
  Object.defineProperty(exports$3j, "removeProperties", {
    enumerable: true,
    get: function () {
      return _removeProperties.default;
    }
  });
  Object.defineProperty(exports$3j, "removePropertiesDeep", {
    enumerable: true,
    get: function () {
      return _removePropertiesDeep.default;
    }
  });
  Object.defineProperty(exports$3j, "removeTypeDuplicates", {
    enumerable: true,
    get: function () {
      return _removeTypeDuplicates.default;
    }
  });
  Object.defineProperty(exports$3j, "shallowEqual", {
    enumerable: true,
    get: function () {
      return _shallowEqual.default;
    }
  });
  Object.defineProperty(exports$3j, "toBindingIdentifierName", {
    enumerable: true,
    get: function () {
      return _toBindingIdentifierName.default;
    }
  });
  Object.defineProperty(exports$3j, "toBlock", {
    enumerable: true,
    get: function () {
      return _toBlock.default;
    }
  });
  Object.defineProperty(exports$3j, "toComputedKey", {
    enumerable: true,
    get: function () {
      return _toComputedKey.default;
    }
  });
  Object.defineProperty(exports$3j, "toExpression", {
    enumerable: true,
    get: function () {
      return _toExpression.default;
    }
  });
  Object.defineProperty(exports$3j, "toIdentifier", {
    enumerable: true,
    get: function () {
      return _toIdentifier.default;
    }
  });
  Object.defineProperty(exports$3j, "toKeyAlias", {
    enumerable: true,
    get: function () {
      return _toKeyAlias.default;
    }
  });
  Object.defineProperty(exports$3j, "toStatement", {
    enumerable: true,
    get: function () {
      return _toStatement.default;
    }
  });
  Object.defineProperty(exports$3j, "traverse", {
    enumerable: true,
    get: function () {
      return _traverse.default;
    }
  });
  Object.defineProperty(exports$3j, "traverseFast", {
    enumerable: true,
    get: function () {
      return _traverseFast.default;
    }
  });
  Object.defineProperty(exports$3j, "validate", {
    enumerable: true,
    get: function () {
      return _validate.default;
    }
  });
  Object.defineProperty(exports$3j, "valueToNode", {
    enumerable: true,
    get: function () {
      return _valueToNode.default;
    }
  });
  var _isReactComponent = dew$4B();
  var _isCompatTag = dew$4A();
  var _buildChildren = dew$4b();
  var _assertNode = dew$49();
  var _index = dew$48();
  Object.keys(_index).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports$3j && exports$3j[key] === _index[key]) return;
    Object.defineProperty(exports$3j, key, {
      enumerable: true,
      get: function () {
        return _index[key];
      }
    });
  });
  var _createTypeAnnotationBasedOnTypeof = dew$47();
  var _createFlowUnionType = dew$45();
  var _createTSUnionType = dew$43();
  var _index2 = dew$4d();
  Object.keys(_index2).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports$3j && exports$3j[key] === _index2[key]) return;
    Object.defineProperty(exports$3j, key, {
      enumerable: true,
      get: function () {
        return _index2[key];
      }
    });
  });
  var _uppercase = dew$42();
  Object.keys(_uppercase).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports$3j && exports$3j[key] === _uppercase[key]) return;
    Object.defineProperty(exports$3j, key, {
      enumerable: true,
      get: function () {
        return _uppercase[key];
      }
    });
  });
  var _productions = dew$41();
  Object.keys(_productions).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports$3j && exports$3j[key] === _productions[key]) return;
    Object.defineProperty(exports$3j, key, {
      enumerable: true,
      get: function () {
        return _productions[key];
      }
    });
  });
  var _cloneNode = dew$40();
  var _clone = dew$3$();
  var _cloneDeep = dew$3_();
  var _cloneDeepWithoutLoc = dew$3Z();
  var _cloneWithoutLoc = dew$3Y();
  var _addComment = dew$3W();
  var _addComments = dew$3X();
  var _inheritInnerComments = dew$3U();
  var _inheritLeadingComments = dew$3T();
  var _inheritsComments = dew$3R();
  var _inheritTrailingComments = dew$3S();
  var _removeComments = dew$3Q();
  var _index3 = dew$3P();
  Object.keys(_index3).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports$3j && exports$3j[key] === _index3[key]) return;
    Object.defineProperty(exports$3j, key, {
      enumerable: true,
      get: function () {
        return _index3[key];
      }
    });
  });
  var _index4 = dew$4q();
  Object.keys(_index4).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports$3j && exports$3j[key] === _index4[key]) return;
    Object.defineProperty(exports$3j, key, {
      enumerable: true,
      get: function () {
        return _index4[key];
      }
    });
  });
  var _ensureBlock = dew$3N();
  var _toBindingIdentifierName = dew$3L();
  var _toBlock = dew$3O();
  var _toComputedKey = dew$3K();
  var _toExpression = dew$3J();
  var _toIdentifier = dew$3M();
  var _toKeyAlias = dew$3F();
  var _toStatement = dew$3E();
  var _valueToNode = dew$3D();
  var _index5 = dew$4g();
  Object.keys(_index5).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports$3j && exports$3j[key] === _index5[key]) return;
    Object.defineProperty(exports$3j, key, {
      enumerable: true,
      get: function () {
        return _index5[key];
      }
    });
  });
  var _appendToMemberExpression = dew$3C();
  var _inherits = dew$3B();
  var _prependToMemberExpression = dew$3A();
  var _removeProperties = dew$3H();
  var _removePropertiesDeep = dew$3G();
  var _removeTypeDuplicates = dew$46();
  var _getAssignmentIdentifiers = dew$3z();
  var _getBindingIdentifiers = dew$3y();
  var _getOuterBindingIdentifiers = dew$3x();
  var _getFunctionName = dew$3w();
  var _traverse = dew$3v();
  Object.keys(_traverse).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports$3j && exports$3j[key] === _traverse[key]) return;
    Object.defineProperty(exports$3j, key, {
      enumerable: true,
      get: function () {
        return _traverse[key];
      }
    });
  });
  var _traverseFast = dew$3I();
  var _shallowEqual = dew$4G();
  var _is = dew$4w();
  var _isBinding = dew$3u();
  var _isBlockScoped = dew$3s();
  var _isImmutable = dew$3r();
  var _isLet = dew$3t();
  var _isNode = dew$4a();
  var _isNodesEquivalent = dew$3q();
  var _isPlaceholderType = dew$4x();
  var _isReferenced = dew$3p();
  var _isScope = dew$3o();
  var _isSpecifierDefault = dew$3n();
  var _isType = dew$4y();
  var _isValidES3Identifier = dew$3m();
  var _isValidIdentifier = dew$4s();
  var _isVar = dew$3l();
  var _matchesPattern = dew$4D();
  var _validate = dew$4f();
  var _buildMatchMemberExpression = dew$4C();
  var _index6 = dew$4E();
  Object.keys(_index6).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports$3j && exports$3j[key] === _index6[key]) return;
    Object.defineProperty(exports$3j, key, {
      enumerable: true,
      get: function () {
        return _index6[key];
      }
    });
  });
  var _deprecationWarning = dew$4F();
  exports$3j.react = {
    isReactComponent: _isReactComponent.default,
    isCompatTag: _isCompatTag.default,
    buildChildren: _buildChildren.default
  };
  {
    exports$3j.toSequenceExpression = dew$3j().default;
  }
  return exports$3j;
}

var exports$3i = {},
  _dewExec$3h = false;
function dew$3h() {
  if (_dewExec$3h) return exports$3i;
  _dewExec$3h = true;
  Object.defineProperty(exports$3i, "__esModule", {
    value: true
  });
  exports$3i.statements = exports$3i.statement = exports$3i.smart = exports$3i.program = exports$3i.expression = void 0;
  var _t = dew$3i();
  const {
    assertExpressionStatement
  } = _t;
  function makeStatementFormatter(fn) {
    return {
      code: str => `/* @babel/template */;\n${str}`,
      validate: () => {},
      unwrap: ast => {
        return fn(ast.program.body.slice(1));
      }
    };
  }
  exports$3i.smart = makeStatementFormatter(body => {
    if (body.length > 1) {
      return body;
    } else {
      return body[0];
    }
  });
  exports$3i.statements = makeStatementFormatter(body => body);
  exports$3i.statement = makeStatementFormatter(body => {
    if (body.length === 0) {
      throw new Error("Found nothing to return.");
    }
    if (body.length > 1) {
      throw new Error("Found multiple statements but wanted one");
    }
    return body[0];
  });
  const expression = exports$3i.expression = {
    code: str => `(\n${str}\n)`,
    validate: ast => {
      if (ast.program.body.length > 1) {
        throw new Error("Found multiple statements but wanted one");
      }
      if (expression.unwrap(ast).start === 0) {
        throw new Error("Parse result included parens.");
      }
    },
    unwrap: ({
      program
    }) => {
      const [stmt] = program.body;
      assertExpressionStatement(stmt);
      return stmt.expression;
    }
  };
  exports$3i.program = {
    code: str => str,
    validate: () => {},
    unwrap: ast => ast.program
  };
  return exports$3i;
}

var exports$3h = {},
  _dewExec$3g = false;
function dew$3g() {
  if (_dewExec$3g) return exports$3h;
  _dewExec$3g = true;
  Object.defineProperty(exports$3h, "__esModule", {
    value: true
  });
  exports$3h.merge = merge;
  exports$3h.normalizeReplacements = normalizeReplacements;
  exports$3h.validate = validate;
  const _excluded = ["placeholderWhitelist", "placeholderPattern", "preserveComments", "syntacticPlaceholders"];
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }
    return target;
  }
  function merge(a, b) {
    const {
      placeholderWhitelist = a.placeholderWhitelist,
      placeholderPattern = a.placeholderPattern,
      preserveComments = a.preserveComments,
      syntacticPlaceholders = a.syntacticPlaceholders
    } = b;
    return {
      parser: Object.assign({}, a.parser, b.parser),
      placeholderWhitelist,
      placeholderPattern,
      preserveComments,
      syntacticPlaceholders
    };
  }
  function validate(opts) {
    if (opts != null && typeof opts !== "object") {
      throw new Error("Unknown template options.");
    }
    const _ref = opts || {},
      {
        placeholderWhitelist,
        placeholderPattern,
        preserveComments,
        syntacticPlaceholders
      } = _ref,
      parser = _objectWithoutPropertiesLoose(_ref, _excluded);
    if (placeholderWhitelist != null && !(placeholderWhitelist instanceof Set)) {
      throw new Error("'.placeholderWhitelist' must be a Set, null, or undefined");
    }
    if (placeholderPattern != null && !(placeholderPattern instanceof RegExp) && placeholderPattern !== false) {
      throw new Error("'.placeholderPattern' must be a RegExp, false, null, or undefined");
    }
    if (preserveComments != null && typeof preserveComments !== "boolean") {
      throw new Error("'.preserveComments' must be a boolean, null, or undefined");
    }
    if (syntacticPlaceholders != null && typeof syntacticPlaceholders !== "boolean") {
      throw new Error("'.syntacticPlaceholders' must be a boolean, null, or undefined");
    }
    if (syntacticPlaceholders === true && (placeholderWhitelist != null || placeholderPattern != null)) {
      throw new Error("'.placeholderWhitelist' and '.placeholderPattern' aren't compatible" + " with '.syntacticPlaceholders: true'");
    }
    return {
      parser,
      placeholderWhitelist: placeholderWhitelist || undefined,
      placeholderPattern: placeholderPattern == null ? undefined : placeholderPattern,
      preserveComments: preserveComments == null ? undefined : preserveComments,
      syntacticPlaceholders: syntacticPlaceholders == null ? undefined : syntacticPlaceholders
    };
  }
  function normalizeReplacements(replacements) {
    if (Array.isArray(replacements)) {
      return replacements.reduce((acc, replacement, i) => {
        acc["$" + i] = replacement;
        return acc;
      }, {});
    } else if (typeof replacements === "object" || replacements == null) {
      return replacements || undefined;
    }
    throw new Error("Template replacements must be an array, object, null, or undefined");
  }
  return exports$3h;
}

var exports$3g = {},
  _dewExec$3f = false;
function dew$3f() {
  if (_dewExec$3f) return exports$3g;
  _dewExec$3f = true;
  Object.defineProperty(exports$3g, "__esModule", {
    value: true
  });
  function _objectWithoutPropertiesLoose(r, e) {
    if (null == r) return {};
    var t = {};
    for (var n in r) if ({}.hasOwnProperty.call(r, n)) {
      if (e.includes(n)) continue;
      t[n] = r[n];
    }
    return t;
  }
  class Position {
    constructor(line, col, index) {
      this.line = void 0;
      this.column = void 0;
      this.index = void 0;
      this.line = line;
      this.column = col;
      this.index = index;
    }
  }
  class SourceLocation {
    constructor(start, end) {
      this.start = void 0;
      this.end = void 0;
      this.filename = void 0;
      this.identifierName = void 0;
      this.start = start;
      this.end = end;
    }
  }
  function createPositionWithColumnOffset(position, columnOffset) {
    const {
      line,
      column,
      index
    } = position;
    return new Position(line, column + columnOffset, index + columnOffset);
  }
  const code = "BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED";
  var ModuleErrors = {
    ImportMetaOutsideModule: {
      message: `import.meta may appear only with 'sourceType: "module"'`,
      code
    },
    ImportOutsideModule: {
      message: `'import' and 'export' may appear only with 'sourceType: "module"'`,
      code
    }
  };
  const NodeDescriptions = {
    ArrayPattern: "array destructuring pattern",
    AssignmentExpression: "assignment expression",
    AssignmentPattern: "assignment expression",
    ArrowFunctionExpression: "arrow function expression",
    ConditionalExpression: "conditional expression",
    CatchClause: "catch clause",
    ForOfStatement: "for-of statement",
    ForInStatement: "for-in statement",
    ForStatement: "for-loop",
    FormalParameters: "function parameter list",
    Identifier: "identifier",
    ImportSpecifier: "import specifier",
    ImportDefaultSpecifier: "import default specifier",
    ImportNamespaceSpecifier: "import namespace specifier",
    ObjectPattern: "object destructuring pattern",
    ParenthesizedExpression: "parenthesized expression",
    RestElement: "rest element",
    UpdateExpression: {
      true: "prefix operation",
      false: "postfix operation"
    },
    VariableDeclarator: "variable declaration",
    YieldExpression: "yield expression"
  };
  const toNodeDescription = node => node.type === "UpdateExpression" ? NodeDescriptions.UpdateExpression[`${node.prefix}`] : NodeDescriptions[node.type];
  var StandardErrors = {
    AccessorIsGenerator: ({
      kind
    }) => `A ${kind}ter cannot be a generator.`,
    ArgumentsInClass: "'arguments' is only allowed in functions and class methods.",
    AsyncFunctionInSingleStatementContext: "Async functions can only be declared at the top level or inside a block.",
    AwaitBindingIdentifier: "Can not use 'await' as identifier inside an async function.",
    AwaitBindingIdentifierInStaticBlock: "Can not use 'await' as identifier inside a static block.",
    AwaitExpressionFormalParameter: "'await' is not allowed in async function parameters.",
    AwaitUsingNotInAsyncContext: "'await using' is only allowed within async functions and at the top levels of modules.",
    AwaitNotInAsyncContext: "'await' is only allowed within async functions and at the top levels of modules.",
    AwaitNotInAsyncFunction: "'await' is only allowed within async functions.",
    BadGetterArity: "A 'get' accessor must not have any formal parameters.",
    BadSetterArity: "A 'set' accessor must have exactly one formal parameter.",
    BadSetterRestParameter: "A 'set' accessor function argument must not be a rest parameter.",
    ConstructorClassField: "Classes may not have a field named 'constructor'.",
    ConstructorClassPrivateField: "Classes may not have a private field named '#constructor'.",
    ConstructorIsAccessor: "Class constructor may not be an accessor.",
    ConstructorIsAsync: "Constructor can't be an async function.",
    ConstructorIsGenerator: "Constructor can't be a generator.",
    DeclarationMissingInitializer: ({
      kind
    }) => `Missing initializer in ${kind} declaration.`,
    DecoratorArgumentsOutsideParentheses: "Decorator arguments must be moved inside parentheses: use '@(decorator(args))' instead of '@(decorator)(args)'.",
    DecoratorBeforeExport: "Decorators must be placed *before* the 'export' keyword. Remove the 'decoratorsBeforeExport: true' option to use the 'export @decorator class {}' syntax.",
    DecoratorsBeforeAfterExport: "Decorators can be placed *either* before or after the 'export' keyword, but not in both locations at the same time.",
    DecoratorConstructor: "Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?",
    DecoratorExportClass: "Decorators must be placed *after* the 'export' keyword. Remove the 'decoratorsBeforeExport: false' option to use the '@decorator export class {}' syntax.",
    DecoratorSemicolon: "Decorators must not be followed by a semicolon.",
    DecoratorStaticBlock: "Decorators can't be used with a static block.",
    DeferImportRequiresNamespace: "Only `import defer * as x from \"./module\"` is valid.",
    DeletePrivateField: "Deleting a private field is not allowed.",
    DestructureNamedImport: "ES2015 named imports do not destructure. Use another statement for destructuring after the import.",
    DuplicateConstructor: "Duplicate constructor in the same class.",
    DuplicateDefaultExport: "Only one default export allowed per module.",
    DuplicateExport: ({
      exportName
    }) => `\`${exportName}\` has already been exported. Exported identifiers must be unique.`,
    DuplicateProto: "Redefinition of __proto__ property.",
    DuplicateRegExpFlags: "Duplicate regular expression flag.",
    DynamicImportPhaseRequiresImportExpressions: ({
      phase
    }) => `'import.${phase}(...)' can only be parsed when using the 'createImportExpressions' option.`,
    ElementAfterRest: "Rest element must be last element.",
    EscapedCharNotAnIdentifier: "Invalid Unicode escape.",
    ExportBindingIsString: ({
      localName,
      exportName
    }) => `A string literal cannot be used as an exported binding without \`from\`.\n- Did you mean \`export { '${localName}' as '${exportName}' } from 'some-module'\`?`,
    ExportDefaultFromAsIdentifier: "'from' is not allowed as an identifier after 'export default'.",
    ForInOfLoopInitializer: ({
      type
    }) => `'${type === "ForInStatement" ? "for-in" : "for-of"}' loop variable declaration may not have an initializer.`,
    ForInUsing: "For-in loop may not start with 'using' declaration.",
    ForOfAsync: "The left-hand side of a for-of loop may not be 'async'.",
    ForOfLet: "The left-hand side of a for-of loop may not start with 'let'.",
    GeneratorInSingleStatementContext: "Generators can only be declared at the top level or inside a block.",
    IllegalBreakContinue: ({
      type
    }) => `Unsyntactic ${type === "BreakStatement" ? "break" : "continue"}.`,
    IllegalLanguageModeDirective: "Illegal 'use strict' directive in function with non-simple parameter list.",
    IllegalReturn: "'return' outside of function.",
    ImportAttributesUseAssert: "The `assert` keyword in import attributes is deprecated and it has been replaced by the `with` keyword. You can enable the `deprecatedAssertSyntax: true` option in the import attributes plugin to suppress this error.",
    ImportBindingIsString: ({
      importName
    }) => `A string literal cannot be used as an imported binding.\n- Did you mean \`import { "${importName}" as foo }\`?`,
    ImportCallArgumentTrailingComma: "Trailing comma is disallowed inside import(...) arguments.",
    ImportCallArity: ({
      maxArgumentCount
    }) => `\`import()\` requires exactly ${maxArgumentCount === 1 ? "one argument" : "one or two arguments"}.`,
    ImportCallNotNewExpression: "Cannot use new with import(...).",
    ImportCallSpreadArgument: "`...` is not allowed in `import()`.",
    ImportJSONBindingNotDefault: "A JSON module can only be imported with `default`.",
    ImportReflectionHasAssertion: "`import module x` cannot have assertions.",
    ImportReflectionNotBinding: "Only `import module x from \"./module\"` is valid.",
    IncompatibleRegExpUVFlags: "The 'u' and 'v' regular expression flags cannot be enabled at the same time.",
    InvalidBigIntLiteral: "Invalid BigIntLiteral.",
    InvalidCodePoint: "Code point out of bounds.",
    InvalidCoverInitializedName: "Invalid shorthand property initializer.",
    InvalidDecimal: "Invalid decimal.",
    InvalidDigit: ({
      radix
    }) => `Expected number in radix ${radix}.`,
    InvalidEscapeSequence: "Bad character escape sequence.",
    InvalidEscapeSequenceTemplate: "Invalid escape sequence in template.",
    InvalidEscapedReservedWord: ({
      reservedWord
    }) => `Escape sequence in keyword ${reservedWord}.`,
    InvalidIdentifier: ({
      identifierName
    }) => `Invalid identifier ${identifierName}.`,
    InvalidLhs: ({
      ancestor
    }) => `Invalid left-hand side in ${toNodeDescription(ancestor)}.`,
    InvalidLhsBinding: ({
      ancestor
    }) => `Binding invalid left-hand side in ${toNodeDescription(ancestor)}.`,
    InvalidLhsOptionalChaining: ({
      ancestor
    }) => `Invalid optional chaining in the left-hand side of ${toNodeDescription(ancestor)}.`,
    InvalidNumber: "Invalid number.",
    InvalidOrMissingExponent: "Floating-point numbers require a valid exponent after the 'e'.",
    InvalidOrUnexpectedToken: ({
      unexpected
    }) => `Unexpected character '${unexpected}'.`,
    InvalidParenthesizedAssignment: "Invalid parenthesized assignment pattern.",
    InvalidPrivateFieldResolution: ({
      identifierName
    }) => `Private name #${identifierName} is not defined.`,
    InvalidPropertyBindingPattern: "Binding member expression.",
    InvalidRecordProperty: "Only properties and spread elements are allowed in record definitions.",
    InvalidRestAssignmentPattern: "Invalid rest operator's argument.",
    LabelRedeclaration: ({
      labelName
    }) => `Label '${labelName}' is already declared.`,
    LetInLexicalBinding: "'let' is disallowed as a lexically bound name.",
    LineTerminatorBeforeArrow: "No line break is allowed before '=>'.",
    MalformedRegExpFlags: "Invalid regular expression flag.",
    MissingClassName: "A class name is required.",
    MissingEqInAssignment: "Only '=' operator can be used for specifying default value.",
    MissingSemicolon: "Missing semicolon.",
    MissingPlugin: ({
      missingPlugin
    }) => `This experimental syntax requires enabling the parser plugin: ${missingPlugin.map(name => JSON.stringify(name)).join(", ")}.`,
    MissingOneOfPlugins: ({
      missingPlugin
    }) => `This experimental syntax requires enabling one of the following parser plugin(s): ${missingPlugin.map(name => JSON.stringify(name)).join(", ")}.`,
    MissingUnicodeEscape: "Expecting Unicode escape sequence \\uXXXX.",
    MixingCoalesceWithLogical: "Nullish coalescing operator(??) requires parens when mixing with logical operators.",
    ModuleAttributeDifferentFromType: "The only accepted module attribute is `type`.",
    ModuleAttributeInvalidValue: "Only string literals are allowed as module attribute values.",
    ModuleAttributesWithDuplicateKeys: ({
      key
    }) => `Duplicate key "${key}" is not allowed in module attributes.`,
    ModuleExportNameHasLoneSurrogate: ({
      surrogateCharCode
    }) => `An export name cannot include a lone surrogate, found '\\u${surrogateCharCode.toString(16)}'.`,
    ModuleExportUndefined: ({
      localName
    }) => `Export '${localName}' is not defined.`,
    MultipleDefaultsInSwitch: "Multiple default clauses.",
    NewlineAfterThrow: "Illegal newline after throw.",
    NoCatchOrFinally: "Missing catch or finally clause.",
    NumberIdentifier: "Identifier directly after number.",
    NumericSeparatorInEscapeSequence: "Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.",
    ObsoleteAwaitStar: "'await*' has been removed from the async functions proposal. Use Promise.all() instead.",
    OptionalChainingNoNew: "Constructors in/after an Optional Chain are not allowed.",
    OptionalChainingNoTemplate: "Tagged Template Literals are not allowed in optionalChain.",
    OverrideOnConstructor: "'override' modifier cannot appear on a constructor declaration.",
    ParamDupe: "Argument name clash.",
    PatternHasAccessor: "Object pattern can't contain getter or setter.",
    PatternHasMethod: "Object pattern can't contain methods.",
    PrivateInExpectedIn: ({
      identifierName
    }) => `Private names are only allowed in property accesses (\`obj.#${identifierName}\`) or in \`in\` expressions (\`#${identifierName} in obj\`).`,
    PrivateNameRedeclaration: ({
      identifierName
    }) => `Duplicate private name #${identifierName}.`,
    RecordExpressionBarIncorrectEndSyntaxType: "Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.",
    RecordExpressionBarIncorrectStartSyntaxType: "Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.",
    RecordExpressionHashIncorrectStartSyntaxType: "Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.",
    RecordNoProto: "'__proto__' is not allowed in Record expressions.",
    RestTrailingComma: "Unexpected trailing comma after rest element.",
    SloppyFunction: "In non-strict mode code, functions can only be declared at top level or inside a block.",
    SloppyFunctionAnnexB: "In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.",
    SourcePhaseImportRequiresDefault: "Only `import source x from \"./module\"` is valid.",
    StaticPrototype: "Classes may not have static property named prototype.",
    SuperNotAllowed: "`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?",
    SuperPrivateField: "Private fields can't be accessed on super.",
    TrailingDecorator: "Decorators must be attached to a class element.",
    TupleExpressionBarIncorrectEndSyntaxType: "Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.",
    TupleExpressionBarIncorrectStartSyntaxType: "Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.",
    TupleExpressionHashIncorrectStartSyntaxType: "Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.",
    UnexpectedArgumentPlaceholder: "Unexpected argument placeholder.",
    UnexpectedAwaitAfterPipelineBody: "Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal.",
    UnexpectedDigitAfterHash: "Unexpected digit after hash token.",
    UnexpectedImportExport: "'import' and 'export' may only appear at the top level.",
    UnexpectedKeyword: ({
      keyword
    }) => `Unexpected keyword '${keyword}'.`,
    UnexpectedLeadingDecorator: "Leading decorators must be attached to a class declaration.",
    UnexpectedLexicalDeclaration: "Lexical declaration cannot appear in a single-statement context.",
    UnexpectedNewTarget: "`new.target` can only be used in functions or class properties.",
    UnexpectedNumericSeparator: "A numeric separator is only allowed between two digits.",
    UnexpectedPrivateField: "Unexpected private name.",
    UnexpectedReservedWord: ({
      reservedWord
    }) => `Unexpected reserved word '${reservedWord}'.`,
    UnexpectedSuper: "'super' is only allowed in object methods and classes.",
    UnexpectedToken: ({
      expected,
      unexpected
    }) => `Unexpected token${unexpected ? ` '${unexpected}'.` : ""}${expected ? `, expected "${expected}"` : ""}`,
    UnexpectedTokenUnaryExponentiation: "Illegal expression. Wrap left hand side or entire exponentiation in parentheses.",
    UnexpectedUsingDeclaration: "Using declaration cannot appear in the top level when source type is `script`.",
    UnsupportedBind: "Binding should be performed on object property.",
    UnsupportedDecoratorExport: "A decorated export must export a class declaration.",
    UnsupportedDefaultExport: "Only expressions, functions or classes are allowed as the `default` export.",
    UnsupportedImport: "`import` can only be used in `import()` or `import.meta`.",
    UnsupportedMetaProperty: ({
      target,
      onlyValidPropertyName
    }) => `The only valid meta property for ${target} is ${target}.${onlyValidPropertyName}.`,
    UnsupportedParameterDecorator: "Decorators cannot be used to decorate parameters.",
    UnsupportedPropertyDecorator: "Decorators cannot be used to decorate object literal properties.",
    UnsupportedSuper: "'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).",
    UnterminatedComment: "Unterminated comment.",
    UnterminatedRegExp: "Unterminated regular expression.",
    UnterminatedString: "Unterminated string constant.",
    UnterminatedTemplate: "Unterminated template.",
    UsingDeclarationExport: "Using declaration cannot be exported.",
    UsingDeclarationHasBindingPattern: "Using declaration cannot have destructuring patterns.",
    VarRedeclaration: ({
      identifierName
    }) => `Identifier '${identifierName}' has already been declared.`,
    YieldBindingIdentifier: "Can not use 'yield' as identifier inside a generator.",
    YieldInParameter: "Yield expression is not allowed in formal parameters.",
    ZeroDigitNumericSeparator: "Numeric separator can not be used after leading 0."
  };
  var StrictModeErrors = {
    StrictDelete: "Deleting local variable in strict mode.",
    StrictEvalArguments: ({
      referenceName
    }) => `Assigning to '${referenceName}' in strict mode.`,
    StrictEvalArgumentsBinding: ({
      bindingName
    }) => `Binding '${bindingName}' in strict mode.`,
    StrictFunction: "In strict mode code, functions can only be declared at top level or inside a block.",
    StrictNumericEscape: "The only valid numeric escape in strict mode is '\\0'.",
    StrictOctalLiteral: "Legacy octal literals are not allowed in strict mode.",
    StrictWith: "'with' in strict mode."
  };
  const UnparenthesizedPipeBodyDescriptions = new Set(["ArrowFunctionExpression", "AssignmentExpression", "ConditionalExpression", "YieldExpression"]);
  var PipelineOperatorErrors = {
    PipeBodyIsTighter: "Unexpected yield after pipeline body; any yield expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.",
    PipeTopicRequiresHackPipes: "Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.",
    PipeTopicUnbound: "Topic reference is unbound; it must be inside a pipe body.",
    PipeTopicUnconfiguredToken: ({
      token
    }) => `Invalid topic token ${token}. In order to use ${token} as a topic reference, the pipelineOperator plugin must be configured with { "proposal": "hack", "topicToken": "${token}" }.`,
    PipeTopicUnused: "Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.",
    PipeUnparenthesizedBody: ({
      type
    }) => `Hack-style pipe body cannot be an unparenthesized ${toNodeDescription({
      type
    })}; please wrap it in parentheses.`,
    PipelineBodyNoArrow: "Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized.",
    PipelineBodySequenceExpression: "Pipeline body may not be a comma-separated sequence expression.",
    PipelineHeadSequenceExpression: "Pipeline head should not be a comma-separated sequence expression.",
    PipelineTopicUnused: "Pipeline is in topic style but does not use topic reference.",
    PrimaryTopicNotAllowed: "Topic reference was used in a lexical context without topic binding.",
    PrimaryTopicRequiresSmartPipeline: "Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option."
  };
  const _excluded = ["message"];
  function defineHidden(obj, key, value) {
    Object.defineProperty(obj, key, {
      enumerable: false,
      configurable: true,
      value
    });
  }
  function toParseErrorConstructor({
    toMessage,
    code,
    reasonCode,
    syntaxPlugin
  }) {
    const hasMissingPlugin = reasonCode === "MissingPlugin" || reasonCode === "MissingOneOfPlugins";
    return function constructor(loc, details) {
      const error = new SyntaxError();
      error.code = code;
      error.reasonCode = reasonCode;
      error.loc = loc;
      error.pos = loc.index;
      error.syntaxPlugin = syntaxPlugin;
      if (hasMissingPlugin) {
        error.missingPlugin = details.missingPlugin;
      }
      defineHidden(error, "clone", function clone(overrides = {}) {
        var _overrides$loc;
        const {
          line,
          column,
          index
        } = (_overrides$loc = overrides.loc) != null ? _overrides$loc : loc;
        return constructor(new Position(line, column, index), Object.assign({}, details, overrides.details));
      });
      defineHidden(error, "details", details);
      Object.defineProperty(error, "message", {
        configurable: true,
        get() {
          const message = `${toMessage(details)} (${loc.line}:${loc.column})`;
          this.message = message;
          return message;
        },
        set(value) {
          Object.defineProperty(this, "message", {
            value,
            writable: true
          });
        }
      });
      return error;
    };
  }
  function ParseErrorEnum(argument, syntaxPlugin) {
    if (Array.isArray(argument)) {
      return parseErrorTemplates => ParseErrorEnum(parseErrorTemplates, argument[0]);
    }
    const ParseErrorConstructors = {};
    for (const reasonCode of Object.keys(argument)) {
      const template = argument[reasonCode];
      const _ref = typeof template === "string" ? {
          message: () => template
        } : typeof template === "function" ? {
          message: template
        } : template,
        {
          message
        } = _ref,
        rest = _objectWithoutPropertiesLoose(_ref, _excluded);
      const toMessage = typeof message === "string" ? () => message : message;
      ParseErrorConstructors[reasonCode] = toParseErrorConstructor(Object.assign({
        code: "BABEL_PARSER_SYNTAX_ERROR",
        reasonCode,
        toMessage
      }, syntaxPlugin ? {
        syntaxPlugin
      } : {}, rest));
    }
    return ParseErrorConstructors;
  }
  const Errors = Object.assign({}, ParseErrorEnum(ModuleErrors), ParseErrorEnum(StandardErrors), ParseErrorEnum(StrictModeErrors), ParseErrorEnum`pipelineOperator`(PipelineOperatorErrors));
  const {
    defineProperty
  } = Object;
  const toUnenumerable = (object, key) => {
    if (object) {
      defineProperty(object, key, {
        enumerable: false,
        value: object[key]
      });
    }
  };
  function toESTreeLocation(node) {
    toUnenumerable(node.loc.start, "index");
    toUnenumerable(node.loc.end, "index");
    return node;
  }
  var estree = superClass => class ESTreeParserMixin extends superClass {
    parse() {
      const file = toESTreeLocation(super.parse());
      if (this.options.tokens) {
        file.tokens = file.tokens.map(toESTreeLocation);
      }
      return file;
    }
    parseRegExpLiteral({
      pattern,
      flags
    }) {
      let regex = null;
      try {
        regex = new RegExp(pattern, flags);
      } catch (_) {}
      const node = this.estreeParseLiteral(regex);
      node.regex = {
        pattern,
        flags
      };
      return node;
    }
    parseBigIntLiteral(value) {
      let bigInt;
      try {
        bigInt = BigInt(value);
      } catch (_unused) {
        bigInt = null;
      }
      const node = this.estreeParseLiteral(bigInt);
      node.bigint = String(node.value || value);
      return node;
    }
    parseDecimalLiteral(value) {
      const decimal = null;
      const node = this.estreeParseLiteral(decimal);
      node.decimal = String(node.value || value);
      return node;
    }
    estreeParseLiteral(value) {
      return this.parseLiteral(value, "Literal");
    }
    parseStringLiteral(value) {
      return this.estreeParseLiteral(value);
    }
    parseNumericLiteral(value) {
      return this.estreeParseLiteral(value);
    }
    parseNullLiteral() {
      return this.estreeParseLiteral(null);
    }
    parseBooleanLiteral(value) {
      return this.estreeParseLiteral(value);
    }
    directiveToStmt(directive) {
      const expression = directive.value;
      delete directive.value;
      expression.type = "Literal";
      expression.raw = expression.extra.raw;
      expression.value = expression.extra.expressionValue;
      const stmt = directive;
      stmt.type = "ExpressionStatement";
      stmt.expression = expression;
      stmt.directive = expression.extra.rawValue;
      delete expression.extra;
      return stmt;
    }
    initFunction(node, isAsync) {
      super.initFunction(node, isAsync);
      node.expression = false;
    }
    checkDeclaration(node) {
      if (node != null && this.isObjectProperty(node)) {
        this.checkDeclaration(node.value);
      } else {
        super.checkDeclaration(node);
      }
    }
    getObjectOrClassMethodParams(method) {
      return method.value.params;
    }
    isValidDirective(stmt) {
      var _stmt$expression$extr;
      return stmt.type === "ExpressionStatement" && stmt.expression.type === "Literal" && typeof stmt.expression.value === "string" && !((_stmt$expression$extr = stmt.expression.extra) != null && _stmt$expression$extr.parenthesized);
    }
    parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {
      super.parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse);
      const directiveStatements = node.directives.map(d => this.directiveToStmt(d));
      node.body = directiveStatements.concat(node.body);
      delete node.directives;
    }
    pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
      this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, "ClassMethod", true);
      if (method.typeParameters) {
        method.value.typeParameters = method.typeParameters;
        delete method.typeParameters;
      }
      classBody.body.push(method);
    }
    parsePrivateName() {
      const node = super.parsePrivateName();
      {
        if (!this.getPluginOption("estree", "classFeatures")) {
          return node;
        }
      }
      return this.convertPrivateNameToPrivateIdentifier(node);
    }
    convertPrivateNameToPrivateIdentifier(node) {
      const name = super.getPrivateNameSV(node);
      node = node;
      delete node.id;
      node.name = name;
      node.type = "PrivateIdentifier";
      return node;
    }
    isPrivateName(node) {
      {
        if (!this.getPluginOption("estree", "classFeatures")) {
          return super.isPrivateName(node);
        }
      }
      return node.type === "PrivateIdentifier";
    }
    getPrivateNameSV(node) {
      {
        if (!this.getPluginOption("estree", "classFeatures")) {
          return super.getPrivateNameSV(node);
        }
      }
      return node.name;
    }
    parseLiteral(value, type) {
      const node = super.parseLiteral(value, type);
      node.raw = node.extra.raw;
      delete node.extra;
      return node;
    }
    parseFunctionBody(node, allowExpression, isMethod = false) {
      super.parseFunctionBody(node, allowExpression, isMethod);
      node.expression = node.body.type !== "BlockStatement";
    }
    parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {
      let funcNode = this.startNode();
      funcNode.kind = node.kind;
      funcNode = super.parseMethod(funcNode, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);
      funcNode.type = "FunctionExpression";
      delete funcNode.kind;
      node.value = funcNode;
      if (type === "ClassPrivateMethod") {
        node.computed = false;
      }
      return this.finishNode(node, "MethodDefinition");
    }
    nameIsConstructor(key) {
      if (key.type === "Literal") return key.value === "constructor";
      return super.nameIsConstructor(key);
    }
    parseClassProperty(...args) {
      const propertyNode = super.parseClassProperty(...args);
      {
        if (!this.getPluginOption("estree", "classFeatures")) {
          return propertyNode;
        }
      }
      propertyNode.type = "PropertyDefinition";
      return propertyNode;
    }
    parseClassPrivateProperty(...args) {
      const propertyNode = super.parseClassPrivateProperty(...args);
      {
        if (!this.getPluginOption("estree", "classFeatures")) {
          return propertyNode;
        }
      }
      propertyNode.type = "PropertyDefinition";
      propertyNode.computed = false;
      return propertyNode;
    }
    parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {
      const node = super.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor);
      if (node) {
        node.type = "Property";
        if (node.kind === "method") {
          node.kind = "init";
        }
        node.shorthand = false;
      }
      return node;
    }
    parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors) {
      const node = super.parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors);
      if (node) {
        node.kind = "init";
        node.type = "Property";
      }
      return node;
    }
    isValidLVal(type, isUnparenthesizedInAssign, binding) {
      return type === "Property" ? "value" : super.isValidLVal(type, isUnparenthesizedInAssign, binding);
    }
    isAssignable(node, isBinding) {
      if (node != null && this.isObjectProperty(node)) {
        return this.isAssignable(node.value, isBinding);
      }
      return super.isAssignable(node, isBinding);
    }
    toAssignable(node, isLHS = false) {
      if (node != null && this.isObjectProperty(node)) {
        const {
          key,
          value
        } = node;
        if (this.isPrivateName(key)) {
          this.classScope.usePrivateName(this.getPrivateNameSV(key), key.loc.start);
        }
        this.toAssignable(value, isLHS);
      } else {
        super.toAssignable(node, isLHS);
      }
    }
    toAssignableObjectExpressionProp(prop, isLast, isLHS) {
      if (prop.type === "Property" && (prop.kind === "get" || prop.kind === "set")) {
        this.raise(Errors.PatternHasAccessor, prop.key);
      } else if (prop.type === "Property" && prop.method) {
        this.raise(Errors.PatternHasMethod, prop.key);
      } else {
        super.toAssignableObjectExpressionProp(prop, isLast, isLHS);
      }
    }
    finishCallExpression(unfinished, optional) {
      const node = super.finishCallExpression(unfinished, optional);
      if (node.callee.type === "Import") {
        node.type = "ImportExpression";
        node.source = node.arguments[0];
        if (this.hasPlugin("importAttributes") || this.hasPlugin("importAssertions")) {
          var _ref, _ref2;
          node.options = (_ref = node.arguments[1]) != null ? _ref : null;
          node.attributes = (_ref2 = node.arguments[1]) != null ? _ref2 : null;
        }
        delete node.arguments;
        delete node.callee;
      }
      return node;
    }
    toReferencedArguments(node) {
      if (node.type === "ImportExpression") {
        return;
      }
      super.toReferencedArguments(node);
    }
    parseExport(unfinished, decorators) {
      const exportStartLoc = this.state.lastTokStartLoc;
      const node = super.parseExport(unfinished, decorators);
      switch (node.type) {
        case "ExportAllDeclaration":
          node.exported = null;
          break;
        case "ExportNamedDeclaration":
          if (node.specifiers.length === 1 && node.specifiers[0].type === "ExportNamespaceSpecifier") {
            node.type = "ExportAllDeclaration";
            node.exported = node.specifiers[0].exported;
            delete node.specifiers;
          }
        case "ExportDefaultDeclaration":
          {
            var _declaration$decorato;
            const {
              declaration
            } = node;
            if ((declaration == null ? void 0 : declaration.type) === "ClassDeclaration" && ((_declaration$decorato = declaration.decorators) == null ? void 0 : _declaration$decorato.length) > 0 && declaration.start === node.start) {
              this.resetStartLocation(node, exportStartLoc);
            }
          }
          break;
      }
      return node;
    }
    parseSubscript(base, startLoc, noCalls, state) {
      const node = super.parseSubscript(base, startLoc, noCalls, state);
      if (state.optionalChainMember) {
        if (node.type === "OptionalMemberExpression" || node.type === "OptionalCallExpression") {
          node.type = node.type.substring(8);
        }
        if (state.stop) {
          const chain = this.startNodeAtNode(node);
          chain.expression = node;
          return this.finishNode(chain, "ChainExpression");
        }
      } else if (node.type === "MemberExpression" || node.type === "CallExpression") {
        node.optional = false;
      }
      return node;
    }
    isOptionalMemberExpression(node) {
      if (node.type === "ChainExpression") {
        return node.expression.type === "MemberExpression";
      }
      return super.isOptionalMemberExpression(node);
    }
    hasPropertyAsPrivateName(node) {
      if (node.type === "ChainExpression") {
        node = node.expression;
      }
      return super.hasPropertyAsPrivateName(node);
    }
    isObjectProperty(node) {
      return node.type === "Property" && node.kind === "init" && !node.method;
    }
    isObjectMethod(node) {
      return node.type === "Property" && (node.method || node.kind === "get" || node.kind === "set");
    }
    finishNodeAt(node, type, endLoc) {
      return toESTreeLocation(super.finishNodeAt(node, type, endLoc));
    }
    resetStartLocation(node, startLoc) {
      super.resetStartLocation(node, startLoc);
      toESTreeLocation(node);
    }
    resetEndLocation(node, endLoc = this.state.lastTokEndLoc) {
      super.resetEndLocation(node, endLoc);
      toESTreeLocation(node);
    }
  };
  class TokContext {
    constructor(token, preserveSpace) {
      this.token = void 0;
      this.preserveSpace = void 0;
      this.token = token;
      this.preserveSpace = !!preserveSpace;
    }
  }
  const types = {
    brace: new TokContext("{"),
    j_oTag: new TokContext("<tag"),
    j_cTag: new TokContext("</tag"),
    j_expr: new TokContext("<tag>...</tag>", true)
  };
  {
    types.template = new TokContext("`", true);
  }
  const beforeExpr = true;
  const startsExpr = true;
  const isLoop = true;
  const isAssign = true;
  const prefix = true;
  const postfix = true;
  class ExportedTokenType {
    constructor(label, conf = {}) {
      this.label = void 0;
      this.keyword = void 0;
      this.beforeExpr = void 0;
      this.startsExpr = void 0;
      this.rightAssociative = void 0;
      this.isLoop = void 0;
      this.isAssign = void 0;
      this.prefix = void 0;
      this.postfix = void 0;
      this.binop = void 0;
      this.label = label;
      this.keyword = conf.keyword;
      this.beforeExpr = !!conf.beforeExpr;
      this.startsExpr = !!conf.startsExpr;
      this.rightAssociative = !!conf.rightAssociative;
      this.isLoop = !!conf.isLoop;
      this.isAssign = !!conf.isAssign;
      this.prefix = !!conf.prefix;
      this.postfix = !!conf.postfix;
      this.binop = conf.binop != null ? conf.binop : null;
      {
        this.updateContext = null;
      }
    }
  }
  const keywords$1 = new Map();
  function createKeyword(name, options = {}) {
    options.keyword = name;
    const token = createToken(name, options);
    keywords$1.set(name, token);
    return token;
  }
  function createBinop(name, binop) {
    return createToken(name, {
      beforeExpr,
      binop
    });
  }
  let tokenTypeCounter = -1;
  const tokenTypes = [];
  const tokenLabels = [];
  const tokenBinops = [];
  const tokenBeforeExprs = [];
  const tokenStartsExprs = [];
  const tokenPrefixes = [];
  function createToken(name, options = {}) {
    var _options$binop, _options$beforeExpr, _options$startsExpr, _options$prefix;
    ++tokenTypeCounter;
    tokenLabels.push(name);
    tokenBinops.push((_options$binop = options.binop) != null ? _options$binop : -1);
    tokenBeforeExprs.push((_options$beforeExpr = options.beforeExpr) != null ? _options$beforeExpr : false);
    tokenStartsExprs.push((_options$startsExpr = options.startsExpr) != null ? _options$startsExpr : false);
    tokenPrefixes.push((_options$prefix = options.prefix) != null ? _options$prefix : false);
    tokenTypes.push(new ExportedTokenType(name, options));
    return tokenTypeCounter;
  }
  function createKeywordLike(name, options = {}) {
    var _options$binop2, _options$beforeExpr2, _options$startsExpr2, _options$prefix2;
    ++tokenTypeCounter;
    keywords$1.set(name, tokenTypeCounter);
    tokenLabels.push(name);
    tokenBinops.push((_options$binop2 = options.binop) != null ? _options$binop2 : -1);
    tokenBeforeExprs.push((_options$beforeExpr2 = options.beforeExpr) != null ? _options$beforeExpr2 : false);
    tokenStartsExprs.push((_options$startsExpr2 = options.startsExpr) != null ? _options$startsExpr2 : false);
    tokenPrefixes.push((_options$prefix2 = options.prefix) != null ? _options$prefix2 : false);
    tokenTypes.push(new ExportedTokenType("name", options));
    return tokenTypeCounter;
  }
  const tt = {
    bracketL: createToken("[", {
      beforeExpr,
      startsExpr
    }),
    bracketHashL: createToken("#[", {
      beforeExpr,
      startsExpr
    }),
    bracketBarL: createToken("[|", {
      beforeExpr,
      startsExpr
    }),
    bracketR: createToken("]"),
    bracketBarR: createToken("|]"),
    braceL: createToken("{", {
      beforeExpr,
      startsExpr
    }),
    braceBarL: createToken("{|", {
      beforeExpr,
      startsExpr
    }),
    braceHashL: createToken("#{", {
      beforeExpr,
      startsExpr
    }),
    braceR: createToken("}"),
    braceBarR: createToken("|}"),
    parenL: createToken("(", {
      beforeExpr,
      startsExpr
    }),
    parenR: createToken(")"),
    comma: createToken(",", {
      beforeExpr
    }),
    semi: createToken(";", {
      beforeExpr
    }),
    colon: createToken(":", {
      beforeExpr
    }),
    doubleColon: createToken("::", {
      beforeExpr
    }),
    dot: createToken("."),
    question: createToken("?", {
      beforeExpr
    }),
    questionDot: createToken("?."),
    arrow: createToken("=>", {
      beforeExpr
    }),
    template: createToken("template"),
    ellipsis: createToken("...", {
      beforeExpr
    }),
    backQuote: createToken("`", {
      startsExpr
    }),
    dollarBraceL: createToken("${", {
      beforeExpr,
      startsExpr
    }),
    templateTail: createToken("...`", {
      startsExpr
    }),
    templateNonTail: createToken("...${", {
      beforeExpr,
      startsExpr
    }),
    at: createToken("@"),
    hash: createToken("#", {
      startsExpr
    }),
    interpreterDirective: createToken("#!..."),
    eq: createToken("=", {
      beforeExpr,
      isAssign
    }),
    assign: createToken("_=", {
      beforeExpr,
      isAssign
    }),
    slashAssign: createToken("_=", {
      beforeExpr,
      isAssign
    }),
    xorAssign: createToken("_=", {
      beforeExpr,
      isAssign
    }),
    moduloAssign: createToken("_=", {
      beforeExpr,
      isAssign
    }),
    incDec: createToken("++/--", {
      prefix,
      postfix,
      startsExpr
    }),
    bang: createToken("!", {
      beforeExpr,
      prefix,
      startsExpr
    }),
    tilde: createToken("~", {
      beforeExpr,
      prefix,
      startsExpr
    }),
    doubleCaret: createToken("^^", {
      startsExpr
    }),
    doubleAt: createToken("@@", {
      startsExpr
    }),
    pipeline: createBinop("|>", 0),
    nullishCoalescing: createBinop("??", 1),
    logicalOR: createBinop("||", 1),
    logicalAND: createBinop("&&", 2),
    bitwiseOR: createBinop("|", 3),
    bitwiseXOR: createBinop("^", 4),
    bitwiseAND: createBinop("&", 5),
    equality: createBinop("==/!=/===/!==", 6),
    lt: createBinop("</>/<=/>=", 7),
    gt: createBinop("</>/<=/>=", 7),
    relational: createBinop("</>/<=/>=", 7),
    bitShift: createBinop("<</>>/>>>", 8),
    bitShiftL: createBinop("<</>>/>>>", 8),
    bitShiftR: createBinop("<</>>/>>>", 8),
    plusMin: createToken("+/-", {
      beforeExpr,
      binop: 9,
      prefix,
      startsExpr
    }),
    modulo: createToken("%", {
      binop: 10,
      startsExpr
    }),
    star: createToken("*", {
      binop: 10
    }),
    slash: createBinop("/", 10),
    exponent: createToken("**", {
      beforeExpr,
      binop: 11,
      rightAssociative: true
    }),
    _in: createKeyword("in", {
      beforeExpr,
      binop: 7
    }),
    _instanceof: createKeyword("instanceof", {
      beforeExpr,
      binop: 7
    }),
    _break: createKeyword("break"),
    _case: createKeyword("case", {
      beforeExpr
    }),
    _catch: createKeyword("catch"),
    _continue: createKeyword("continue"),
    _debugger: createKeyword("debugger"),
    _default: createKeyword("default", {
      beforeExpr
    }),
    _else: createKeyword("else", {
      beforeExpr
    }),
    _finally: createKeyword("finally"),
    _function: createKeyword("function", {
      startsExpr
    }),
    _if: createKeyword("if"),
    _return: createKeyword("return", {
      beforeExpr
    }),
    _switch: createKeyword("switch"),
    _throw: createKeyword("throw", {
      beforeExpr,
      prefix,
      startsExpr
    }),
    _try: createKeyword("try"),
    _var: createKeyword("var"),
    _const: createKeyword("const"),
    _with: createKeyword("with"),
    _new: createKeyword("new", {
      beforeExpr,
      startsExpr
    }),
    _this: createKeyword("this", {
      startsExpr
    }),
    _super: createKeyword("super", {
      startsExpr
    }),
    _class: createKeyword("class", {
      startsExpr
    }),
    _extends: createKeyword("extends", {
      beforeExpr
    }),
    _export: createKeyword("export"),
    _import: createKeyword("import", {
      startsExpr
    }),
    _null: createKeyword("null", {
      startsExpr
    }),
    _true: createKeyword("true", {
      startsExpr
    }),
    _false: createKeyword("false", {
      startsExpr
    }),
    _typeof: createKeyword("typeof", {
      beforeExpr,
      prefix,
      startsExpr
    }),
    _void: createKeyword("void", {
      beforeExpr,
      prefix,
      startsExpr
    }),
    _delete: createKeyword("delete", {
      beforeExpr,
      prefix,
      startsExpr
    }),
    _do: createKeyword("do", {
      isLoop,
      beforeExpr
    }),
    _for: createKeyword("for", {
      isLoop
    }),
    _while: createKeyword("while", {
      isLoop
    }),
    _as: createKeywordLike("as", {
      startsExpr
    }),
    _assert: createKeywordLike("assert", {
      startsExpr
    }),
    _async: createKeywordLike("async", {
      startsExpr
    }),
    _await: createKeywordLike("await", {
      startsExpr
    }),
    _defer: createKeywordLike("defer", {
      startsExpr
    }),
    _from: createKeywordLike("from", {
      startsExpr
    }),
    _get: createKeywordLike("get", {
      startsExpr
    }),
    _let: createKeywordLike("let", {
      startsExpr
    }),
    _meta: createKeywordLike("meta", {
      startsExpr
    }),
    _of: createKeywordLike("of", {
      startsExpr
    }),
    _sent: createKeywordLike("sent", {
      startsExpr
    }),
    _set: createKeywordLike("set", {
      startsExpr
    }),
    _source: createKeywordLike("source", {
      startsExpr
    }),
    _static: createKeywordLike("static", {
      startsExpr
    }),
    _using: createKeywordLike("using", {
      startsExpr
    }),
    _yield: createKeywordLike("yield", {
      startsExpr
    }),
    _asserts: createKeywordLike("asserts", {
      startsExpr
    }),
    _checks: createKeywordLike("checks", {
      startsExpr
    }),
    _exports: createKeywordLike("exports", {
      startsExpr
    }),
    _global: createKeywordLike("global", {
      startsExpr
    }),
    _implements: createKeywordLike("implements", {
      startsExpr
    }),
    _intrinsic: createKeywordLike("intrinsic", {
      startsExpr
    }),
    _infer: createKeywordLike("infer", {
      startsExpr
    }),
    _is: createKeywordLike("is", {
      startsExpr
    }),
    _mixins: createKeywordLike("mixins", {
      startsExpr
    }),
    _proto: createKeywordLike("proto", {
      startsExpr
    }),
    _require: createKeywordLike("require", {
      startsExpr
    }),
    _satisfies: createKeywordLike("satisfies", {
      startsExpr
    }),
    _keyof: createKeywordLike("keyof", {
      startsExpr
    }),
    _readonly: createKeywordLike("readonly", {
      startsExpr
    }),
    _unique: createKeywordLike("unique", {
      startsExpr
    }),
    _abstract: createKeywordLike("abstract", {
      startsExpr
    }),
    _declare: createKeywordLike("declare", {
      startsExpr
    }),
    _enum: createKeywordLike("enum", {
      startsExpr
    }),
    _module: createKeywordLike("module", {
      startsExpr
    }),
    _namespace: createKeywordLike("namespace", {
      startsExpr
    }),
    _interface: createKeywordLike("interface", {
      startsExpr
    }),
    _type: createKeywordLike("type", {
      startsExpr
    }),
    _opaque: createKeywordLike("opaque", {
      startsExpr
    }),
    name: createToken("name", {
      startsExpr
    }),
    string: createToken("string", {
      startsExpr
    }),
    num: createToken("num", {
      startsExpr
    }),
    bigint: createToken("bigint", {
      startsExpr
    }),
    decimal: createToken("decimal", {
      startsExpr
    }),
    regexp: createToken("regexp", {
      startsExpr
    }),
    privateName: createToken("#name", {
      startsExpr
    }),
    eof: createToken("eof"),
    jsxName: createToken("jsxName"),
    jsxText: createToken("jsxText", {
      beforeExpr: true
    }),
    jsxTagStart: createToken("jsxTagStart", {
      startsExpr: true
    }),
    jsxTagEnd: createToken("jsxTagEnd"),
    placeholder: createToken("%%", {
      startsExpr: true
    })
  };
  function tokenIsIdentifier(token) {
    return token >= 93 && token <= 132;
  }
  function tokenKeywordOrIdentifierIsKeyword(token) {
    return token <= 92;
  }
  function tokenIsKeywordOrIdentifier(token) {
    return token >= 58 && token <= 132;
  }
  function tokenIsLiteralPropertyName(token) {
    return token >= 58 && token <= 136;
  }
  function tokenComesBeforeExpression(token) {
    return tokenBeforeExprs[token];
  }
  function tokenCanStartExpression(token) {
    return tokenStartsExprs[token];
  }
  function tokenIsAssignment(token) {
    return token >= 29 && token <= 33;
  }
  function tokenIsFlowInterfaceOrTypeOrOpaque(token) {
    return token >= 129 && token <= 131;
  }
  function tokenIsLoop(token) {
    return token >= 90 && token <= 92;
  }
  function tokenIsKeyword(token) {
    return token >= 58 && token <= 92;
  }
  function tokenIsOperator(token) {
    return token >= 39 && token <= 59;
  }
  function tokenIsPostfix(token) {
    return token === 34;
  }
  function tokenIsPrefix(token) {
    return tokenPrefixes[token];
  }
  function tokenIsTSTypeOperator(token) {
    return token >= 121 && token <= 123;
  }
  function tokenIsTSDeclarationStart(token) {
    return token >= 124 && token <= 130;
  }
  function tokenLabelName(token) {
    return tokenLabels[token];
  }
  function tokenOperatorPrecedence(token) {
    return tokenBinops[token];
  }
  function tokenIsRightAssociative(token) {
    return token === 57;
  }
  function tokenIsTemplate(token) {
    return token >= 24 && token <= 25;
  }
  function getExportedToken(token) {
    return tokenTypes[token];
  }
  {
    tokenTypes[8].updateContext = context => {
      context.pop();
    };
    tokenTypes[5].updateContext = tokenTypes[7].updateContext = tokenTypes[23].updateContext = context => {
      context.push(types.brace);
    };
    tokenTypes[22].updateContext = context => {
      if (context[context.length - 1] === types.template) {
        context.pop();
      } else {
        context.push(types.template);
      }
    };
    tokenTypes[142].updateContext = context => {
      context.push(types.j_expr, types.j_oTag);
    };
  }
  let nonASCIIidentifierStartChars = "\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC";
  let nonASCIIidentifierChars = "\u200C\u200D\xB7\u0300-\u036F\u0387\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u0669\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u06F0-\u06F9\u0711\u0730-\u074A\u07A6-\u07B0\u07C0-\u07C9\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u0898-\u089F\u08CA-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0966-\u096F\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09E6-\u09EF\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A66-\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AE6-\u0AEF\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B66-\u0B6F\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0BE6-\u0BEF\u0C00-\u0C04\u0C3C\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0CE6-\u0CEF\u0CF3\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D66-\u0D6F\u0D81-\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0E50-\u0E59\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECE\u0ED0-\u0ED9\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1040-\u1049\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F-\u109D\u135D-\u135F\u1369-\u1371\u1712-\u1715\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u17E0-\u17E9\u180B-\u180D\u180F-\u1819\u18A9\u1920-\u192B\u1930-\u193B\u1946-\u194F\u19D0-\u19DA\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AB0-\u1ABD\u1ABF-\u1ACE\u1B00-\u1B04\u1B34-\u1B44\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BB0-\u1BB9\u1BE6-\u1BF3\u1C24-\u1C37\u1C40-\u1C49\u1C50-\u1C59\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DFF\u200C\u200D\u203F\u2040\u2054\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\u30FB\uA620-\uA629\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA82C\uA880\uA881\uA8B4-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F1\uA8FF-\uA909\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9D0-\uA9D9\uA9E5\uA9F0-\uA9F9\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA50-\uAA59\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uABF0-\uABF9\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFF10-\uFF19\uFF3F\uFF65";
  const nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");
  const nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");
  nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;
  const astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 68, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 20, 1, 64, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 16, 0, 2, 12, 2, 33, 125, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1071, 18, 5, 4026, 582, 8634, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8936, 3, 2, 6, 2, 1, 2, 290, 16, 0, 30, 2, 3, 0, 15, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 7, 5, 262, 61, 147, 44, 11, 6, 17, 0, 322, 29, 19, 43, 485, 27, 757, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4153, 7, 221, 3, 5761, 15, 7472, 16, 621, 2467, 541, 1507, 4938, 6, 4191];
  const astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 81, 2, 71, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 3, 0, 158, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 10, 1, 2, 0, 49, 6, 4, 4, 14, 9, 5351, 0, 7, 14, 13835, 9, 87, 9, 39, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4706, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 101, 0, 161, 6, 10, 9, 357, 0, 62, 13, 499, 13, 983, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];
  function isInAstralSet(code, set) {
    let pos = 65536;
    for (let i = 0, length = set.length; i < length; i += 2) {
      pos += set[i];
      if (pos > code) return false;
      pos += set[i + 1];
      if (pos >= code) return true;
    }
    return false;
  }
  function isIdentifierStart(code) {
    if (code < 65) return code === 36;
    if (code <= 90) return true;
    if (code < 97) return code === 95;
    if (code <= 122) return true;
    if (code <= 65535) {
      return code >= 170 && nonASCIIidentifierStart.test(String.fromCharCode(code));
    }
    return isInAstralSet(code, astralIdentifierStartCodes);
  }
  function isIdentifierChar(code) {
    if (code < 48) return code === 36;
    if (code < 58) return true;
    if (code < 65) return false;
    if (code <= 90) return true;
    if (code < 97) return code === 95;
    if (code <= 122) return true;
    if (code <= 65535) {
      return code >= 170 && nonASCIIidentifier.test(String.fromCharCode(code));
    }
    return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);
  }
  const reservedWords = {
    keyword: ["break", "case", "catch", "continue", "debugger", "default", "do", "else", "finally", "for", "function", "if", "return", "switch", "throw", "try", "var", "const", "while", "with", "new", "this", "super", "class", "extends", "export", "import", "null", "true", "false", "in", "instanceof", "typeof", "void", "delete"],
    strict: ["implements", "interface", "let", "package", "private", "protected", "public", "static", "yield"],
    strictBind: ["eval", "arguments"]
  };
  const keywords = new Set(reservedWords.keyword);
  const reservedWordsStrictSet = new Set(reservedWords.strict);
  const reservedWordsStrictBindSet = new Set(reservedWords.strictBind);
  function isReservedWord(word, inModule) {
    return inModule && word === "await" || word === "enum";
  }
  function isStrictReservedWord(word, inModule) {
    return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);
  }
  function isStrictBindOnlyReservedWord(word) {
    return reservedWordsStrictBindSet.has(word);
  }
  function isStrictBindReservedWord(word, inModule) {
    return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);
  }
  function isKeyword(word) {
    return keywords.has(word);
  }
  function isIteratorStart(current, next, next2) {
    return current === 64 && next === 64 && isIdentifierStart(next2);
  }
  const reservedWordLikeSet = new Set(["break", "case", "catch", "continue", "debugger", "default", "do", "else", "finally", "for", "function", "if", "return", "switch", "throw", "try", "var", "const", "while", "with", "new", "this", "super", "class", "extends", "export", "import", "null", "true", "false", "in", "instanceof", "typeof", "void", "delete", "implements", "interface", "let", "package", "private", "protected", "public", "static", "yield", "eval", "arguments", "enum", "await"]);
  function canBeReservedWord(word) {
    return reservedWordLikeSet.has(word);
  }
  class Scope {
    constructor(flags) {
      this.flags = 0;
      this.names = new Map();
      this.firstLexicalName = "";
      this.flags = flags;
    }
  }
  class ScopeHandler {
    constructor(parser, inModule) {
      this.parser = void 0;
      this.scopeStack = [];
      this.inModule = void 0;
      this.undefinedExports = new Map();
      this.parser = parser;
      this.inModule = inModule;
    }
    get inTopLevel() {
      return (this.currentScope().flags & 1) > 0;
    }
    get inFunction() {
      return (this.currentVarScopeFlags() & 2) > 0;
    }
    get allowSuper() {
      return (this.currentThisScopeFlags() & 16) > 0;
    }
    get allowDirectSuper() {
      return (this.currentThisScopeFlags() & 32) > 0;
    }
    get inClass() {
      return (this.currentThisScopeFlags() & 64) > 0;
    }
    get inClassAndNotInNonArrowFunction() {
      const flags = this.currentThisScopeFlags();
      return (flags & 64) > 0 && (flags & 2) === 0;
    }
    get inStaticBlock() {
      for (let i = this.scopeStack.length - 1;; i--) {
        const {
          flags
        } = this.scopeStack[i];
        if (flags & 128) {
          return true;
        }
        if (flags & (387 | 64)) {
          return false;
        }
      }
    }
    get inNonArrowFunction() {
      return (this.currentThisScopeFlags() & 2) > 0;
    }
    get treatFunctionsAsVar() {
      return this.treatFunctionsAsVarInScope(this.currentScope());
    }
    createScope(flags) {
      return new Scope(flags);
    }
    enter(flags) {
      this.scopeStack.push(this.createScope(flags));
    }
    exit() {
      const scope = this.scopeStack.pop();
      return scope.flags;
    }
    treatFunctionsAsVarInScope(scope) {
      return !!(scope.flags & (2 | 128) || !this.parser.inModule && scope.flags & 1);
    }
    declareName(name, bindingType, loc) {
      let scope = this.currentScope();
      if (bindingType & 8 || bindingType & 16) {
        this.checkRedeclarationInScope(scope, name, bindingType, loc);
        let type = scope.names.get(name) || 0;
        if (bindingType & 16) {
          type = type | 4;
        } else {
          if (!scope.firstLexicalName) {
            scope.firstLexicalName = name;
          }
          type = type | 2;
        }
        scope.names.set(name, type);
        if (bindingType & 8) {
          this.maybeExportDefined(scope, name);
        }
      } else if (bindingType & 4) {
        for (let i = this.scopeStack.length - 1; i >= 0; --i) {
          scope = this.scopeStack[i];
          this.checkRedeclarationInScope(scope, name, bindingType, loc);
          scope.names.set(name, (scope.names.get(name) || 0) | 1);
          this.maybeExportDefined(scope, name);
          if (scope.flags & 387) break;
        }
      }
      if (this.parser.inModule && scope.flags & 1) {
        this.undefinedExports.delete(name);
      }
    }
    maybeExportDefined(scope, name) {
      if (this.parser.inModule && scope.flags & 1) {
        this.undefinedExports.delete(name);
      }
    }
    checkRedeclarationInScope(scope, name, bindingType, loc) {
      if (this.isRedeclaredInScope(scope, name, bindingType)) {
        this.parser.raise(Errors.VarRedeclaration, loc, {
          identifierName: name
        });
      }
    }
    isRedeclaredInScope(scope, name, bindingType) {
      if (!(bindingType & 1)) return false;
      if (bindingType & 8) {
        return scope.names.has(name);
      }
      const type = scope.names.get(name);
      if (bindingType & 16) {
        return (type & 2) > 0 || !this.treatFunctionsAsVarInScope(scope) && (type & 1) > 0;
      }
      return (type & 2) > 0 && !(scope.flags & 8 && scope.firstLexicalName === name) || !this.treatFunctionsAsVarInScope(scope) && (type & 4) > 0;
    }
    checkLocalExport(id) {
      const {
        name
      } = id;
      const topLevelScope = this.scopeStack[0];
      if (!topLevelScope.names.has(name)) {
        this.undefinedExports.set(name, id.loc.start);
      }
    }
    currentScope() {
      return this.scopeStack[this.scopeStack.length - 1];
    }
    currentVarScopeFlags() {
      for (let i = this.scopeStack.length - 1;; i--) {
        const {
          flags
        } = this.scopeStack[i];
        if (flags & 387) {
          return flags;
        }
      }
    }
    currentThisScopeFlags() {
      for (let i = this.scopeStack.length - 1;; i--) {
        const {
          flags
        } = this.scopeStack[i];
        if (flags & (387 | 64) && !(flags & 4)) {
          return flags;
        }
      }
    }
  }
  class FlowScope extends Scope {
    constructor(...args) {
      super(...args);
      this.declareFunctions = new Set();
    }
  }
  class FlowScopeHandler extends ScopeHandler {
    createScope(flags) {
      return new FlowScope(flags);
    }
    declareName(name, bindingType, loc) {
      const scope = this.currentScope();
      if (bindingType & 2048) {
        this.checkRedeclarationInScope(scope, name, bindingType, loc);
        this.maybeExportDefined(scope, name);
        scope.declareFunctions.add(name);
        return;
      }
      super.declareName(name, bindingType, loc);
    }
    isRedeclaredInScope(scope, name, bindingType) {
      if (super.isRedeclaredInScope(scope, name, bindingType)) return true;
      if (bindingType & 2048 && !scope.declareFunctions.has(name)) {
        const type = scope.names.get(name);
        return (type & 4) > 0 || (type & 2) > 0;
      }
      return false;
    }
    checkLocalExport(id) {
      if (!this.scopeStack[0].declareFunctions.has(id.name)) {
        super.checkLocalExport(id);
      }
    }
  }
  class BaseParser {
    constructor() {
      this.sawUnambiguousESM = false;
      this.ambiguousScriptDifferentAst = false;
    }
    hasPlugin(pluginConfig) {
      if (typeof pluginConfig === "string") {
        return this.plugins.has(pluginConfig);
      } else {
        const [pluginName, pluginOptions] = pluginConfig;
        if (!this.hasPlugin(pluginName)) {
          return false;
        }
        const actualOptions = this.plugins.get(pluginName);
        for (const key of Object.keys(pluginOptions)) {
          if ((actualOptions == null ? void 0 : actualOptions[key]) !== pluginOptions[key]) {
            return false;
          }
        }
        return true;
      }
    }
    getPluginOption(plugin, name) {
      var _this$plugins$get;
      return (_this$plugins$get = this.plugins.get(plugin)) == null ? void 0 : _this$plugins$get[name];
    }
  }
  function setTrailingComments(node, comments) {
    if (node.trailingComments === undefined) {
      node.trailingComments = comments;
    } else {
      node.trailingComments.unshift(...comments);
    }
  }
  function setLeadingComments(node, comments) {
    if (node.leadingComments === undefined) {
      node.leadingComments = comments;
    } else {
      node.leadingComments.unshift(...comments);
    }
  }
  function setInnerComments(node, comments) {
    if (node.innerComments === undefined) {
      node.innerComments = comments;
    } else {
      node.innerComments.unshift(...comments);
    }
  }
  function adjustInnerComments(node, elements, commentWS) {
    let lastElement = null;
    let i = elements.length;
    while (lastElement === null && i > 0) {
      lastElement = elements[--i];
    }
    if (lastElement === null || lastElement.start > commentWS.start) {
      setInnerComments(node, commentWS.comments);
    } else {
      setTrailingComments(lastElement, commentWS.comments);
    }
  }
  class CommentsParser extends BaseParser {
    addComment(comment) {
      if (this.filename) comment.loc.filename = this.filename;
      const {
        commentsLen
      } = this.state;
      if (this.comments.length !== commentsLen) {
        this.comments.length = commentsLen;
      }
      this.comments.push(comment);
      this.state.commentsLen++;
    }
    processComment(node) {
      const {
        commentStack
      } = this.state;
      const commentStackLength = commentStack.length;
      if (commentStackLength === 0) return;
      let i = commentStackLength - 1;
      const lastCommentWS = commentStack[i];
      if (lastCommentWS.start === node.end) {
        lastCommentWS.leadingNode = node;
        i--;
      }
      const {
        start: nodeStart
      } = node;
      for (; i >= 0; i--) {
        const commentWS = commentStack[i];
        const commentEnd = commentWS.end;
        if (commentEnd > nodeStart) {
          commentWS.containingNode = node;
          this.finalizeComment(commentWS);
          commentStack.splice(i, 1);
        } else {
          if (commentEnd === nodeStart) {
            commentWS.trailingNode = node;
          }
          break;
        }
      }
    }
    finalizeComment(commentWS) {
      const {
        comments
      } = commentWS;
      if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {
        if (commentWS.leadingNode !== null) {
          setTrailingComments(commentWS.leadingNode, comments);
        }
        if (commentWS.trailingNode !== null) {
          setLeadingComments(commentWS.trailingNode, comments);
        }
      } else {
        const {
          containingNode: node,
          start: commentStart
        } = commentWS;
        if (this.input.charCodeAt(commentStart - 1) === 44) {
          switch (node.type) {
            case "ObjectExpression":
            case "ObjectPattern":
            case "RecordExpression":
              adjustInnerComments(node, node.properties, commentWS);
              break;
            case "CallExpression":
            case "OptionalCallExpression":
              adjustInnerComments(node, node.arguments, commentWS);
              break;
            case "FunctionDeclaration":
            case "FunctionExpression":
            case "ArrowFunctionExpression":
            case "ObjectMethod":
            case "ClassMethod":
            case "ClassPrivateMethod":
              adjustInnerComments(node, node.params, commentWS);
              break;
            case "ArrayExpression":
            case "ArrayPattern":
            case "TupleExpression":
              adjustInnerComments(node, node.elements, commentWS);
              break;
            case "ExportNamedDeclaration":
            case "ImportDeclaration":
              adjustInnerComments(node, node.specifiers, commentWS);
              break;
            default:
              {
                setInnerComments(node, comments);
              }
          }
        } else {
          setInnerComments(node, comments);
        }
      }
    }
    finalizeRemainingComments() {
      const {
        commentStack
      } = this.state;
      for (let i = commentStack.length - 1; i >= 0; i--) {
        this.finalizeComment(commentStack[i]);
      }
      this.state.commentStack = [];
    }
    resetPreviousNodeTrailingComments(node) {
      const {
        commentStack
      } = this.state;
      const {
        length
      } = commentStack;
      if (length === 0) return;
      const commentWS = commentStack[length - 1];
      if (commentWS.leadingNode === node) {
        commentWS.leadingNode = null;
      }
    }
    resetPreviousIdentifierLeadingComments(node) {
      const {
        commentStack
      } = this.state;
      const {
        length
      } = commentStack;
      if (length === 0) return;
      if (commentStack[length - 1].trailingNode === node) {
        commentStack[length - 1].trailingNode = null;
      } else if (length >= 2 && commentStack[length - 2].trailingNode === node) {
        commentStack[length - 2].trailingNode = null;
      }
    }
    takeSurroundingComments(node, start, end) {
      const {
        commentStack
      } = this.state;
      const commentStackLength = commentStack.length;
      if (commentStackLength === 0) return;
      let i = commentStackLength - 1;
      for (; i >= 0; i--) {
        const commentWS = commentStack[i];
        const commentEnd = commentWS.end;
        const commentStart = commentWS.start;
        if (commentStart === end) {
          commentWS.leadingNode = node;
        } else if (commentEnd === start) {
          commentWS.trailingNode = node;
        } else if (commentEnd < start) {
          break;
        }
      }
    }
  }
  const lineBreak = /\r\n|[\r\n\u2028\u2029]/;
  const lineBreakG = new RegExp(lineBreak.source, "g");
  function isNewLine(code) {
    switch (code) {
      case 10:
      case 13:
      case 8232:
      case 8233:
        return true;
      default:
        return false;
    }
  }
  function hasNewLine(input, start, end) {
    for (let i = start; i < end; i++) {
      if (isNewLine(input.charCodeAt(i))) {
        return true;
      }
    }
    return false;
  }
  const skipWhiteSpace = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g;
  const skipWhiteSpaceInLine = /(?:[^\S\n\r\u2028\u2029]|\/\/.*|\/\*.*?\*\/)*/g;
  function isWhitespace(code) {
    switch (code) {
      case 9:
      case 11:
      case 12:
      case 32:
      case 160:
      case 5760:
      case 8192:
      case 8193:
      case 8194:
      case 8195:
      case 8196:
      case 8197:
      case 8198:
      case 8199:
      case 8200:
      case 8201:
      case 8202:
      case 8239:
      case 8287:
      case 12288:
      case 65279:
        return true;
      default:
        return false;
    }
  }
  class State {
    constructor() {
      this.flags = 1024;
      this.curLine = void 0;
      this.lineStart = void 0;
      this.startLoc = void 0;
      this.endLoc = void 0;
      this.errors = [];
      this.potentialArrowAt = -1;
      this.noArrowAt = [];
      this.noArrowParamsConversionAt = [];
      this.topicContext = {
        maxNumOfResolvableTopics: 0,
        maxTopicIndex: null
      };
      this.labels = [];
      this.commentsLen = 0;
      this.commentStack = [];
      this.pos = 0;
      this.type = 139;
      this.value = null;
      this.start = 0;
      this.end = 0;
      this.lastTokEndLoc = null;
      this.lastTokStartLoc = null;
      this.context = [types.brace];
      this.firstInvalidTemplateEscapePos = null;
      this.strictErrors = new Map();
      this.tokensLength = 0;
    }
    get strict() {
      return (this.flags & 1) > 0;
    }
    set strict(v) {
      if (v) this.flags |= 1;else this.flags &= -2;
    }
    init({
      strictMode,
      sourceType,
      startLine,
      startColumn
    }) {
      this.strict = strictMode === false ? false : strictMode === true ? true : sourceType === "module";
      this.curLine = startLine;
      this.lineStart = -startColumn;
      this.startLoc = this.endLoc = new Position(startLine, startColumn, 0);
    }
    get maybeInArrowParameters() {
      return (this.flags & 2) > 0;
    }
    set maybeInArrowParameters(v) {
      if (v) this.flags |= 2;else this.flags &= -3;
    }
    get inType() {
      return (this.flags & 4) > 0;
    }
    set inType(v) {
      if (v) this.flags |= 4;else this.flags &= -5;
    }
    get noAnonFunctionType() {
      return (this.flags & 8) > 0;
    }
    set noAnonFunctionType(v) {
      if (v) this.flags |= 8;else this.flags &= -9;
    }
    get hasFlowComment() {
      return (this.flags & 16) > 0;
    }
    set hasFlowComment(v) {
      if (v) this.flags |= 16;else this.flags &= -17;
    }
    get isAmbientContext() {
      return (this.flags & 32) > 0;
    }
    set isAmbientContext(v) {
      if (v) this.flags |= 32;else this.flags &= -33;
    }
    get inAbstractClass() {
      return (this.flags & 64) > 0;
    }
    set inAbstractClass(v) {
      if (v) this.flags |= 64;else this.flags &= -65;
    }
    get inDisallowConditionalTypesContext() {
      return (this.flags & 128) > 0;
    }
    set inDisallowConditionalTypesContext(v) {
      if (v) this.flags |= 128;else this.flags &= -129;
    }
    get soloAwait() {
      return (this.flags & 256) > 0;
    }
    set soloAwait(v) {
      if (v) this.flags |= 256;else this.flags &= -257;
    }
    get inFSharpPipelineDirectBody() {
      return (this.flags & 512) > 0;
    }
    set inFSharpPipelineDirectBody(v) {
      if (v) this.flags |= 512;else this.flags &= -513;
    }
    get canStartJSXElement() {
      return (this.flags & 1024) > 0;
    }
    set canStartJSXElement(v) {
      if (v) this.flags |= 1024;else this.flags &= -1025;
    }
    get containsEsc() {
      return (this.flags & 2048) > 0;
    }
    set containsEsc(v) {
      if (v) this.flags |= 2048;else this.flags &= -2049;
    }
    get hasTopLevelAwait() {
      return (this.flags & 4096) > 0;
    }
    set hasTopLevelAwait(v) {
      if (v) this.flags |= 4096;else this.flags &= -4097;
    }
    curPosition() {
      return new Position(this.curLine, this.pos - this.lineStart, this.pos);
    }
    clone() {
      const state = new State();
      state.flags = this.flags;
      state.curLine = this.curLine;
      state.lineStart = this.lineStart;
      state.startLoc = this.startLoc;
      state.endLoc = this.endLoc;
      state.errors = this.errors.slice();
      state.potentialArrowAt = this.potentialArrowAt;
      state.noArrowAt = this.noArrowAt.slice();
      state.noArrowParamsConversionAt = this.noArrowParamsConversionAt.slice();
      state.topicContext = this.topicContext;
      state.labels = this.labels.slice();
      state.commentsLen = this.commentsLen;
      state.commentStack = this.commentStack.slice();
      state.pos = this.pos;
      state.type = this.type;
      state.value = this.value;
      state.start = this.start;
      state.end = this.end;
      state.lastTokEndLoc = this.lastTokEndLoc;
      state.lastTokStartLoc = this.lastTokStartLoc;
      state.context = this.context.slice();
      state.firstInvalidTemplateEscapePos = this.firstInvalidTemplateEscapePos;
      state.strictErrors = this.strictErrors;
      state.tokensLength = this.tokensLength;
      return state;
    }
  }
  var _isDigit = function isDigit(code) {
    return code >= 48 && code <= 57;
  };
  const forbiddenNumericSeparatorSiblings = {
    decBinOct: new Set([46, 66, 69, 79, 95, 98, 101, 111]),
    hex: new Set([46, 88, 95, 120])
  };
  const isAllowedNumericSeparatorSibling = {
    bin: ch => ch === 48 || ch === 49,
    oct: ch => ch >= 48 && ch <= 55,
    dec: ch => ch >= 48 && ch <= 57,
    hex: ch => ch >= 48 && ch <= 57 || ch >= 65 && ch <= 70 || ch >= 97 && ch <= 102
  };
  function readStringContents(type, input, pos, lineStart, curLine, errors) {
    const initialPos = pos;
    const initialLineStart = lineStart;
    const initialCurLine = curLine;
    let out = "";
    let firstInvalidLoc = null;
    let chunkStart = pos;
    const {
      length
    } = input;
    for (;;) {
      if (pos >= length) {
        errors.unterminated(initialPos, initialLineStart, initialCurLine);
        out += input.slice(chunkStart, pos);
        break;
      }
      const ch = input.charCodeAt(pos);
      if (isStringEnd(type, ch, input, pos)) {
        out += input.slice(chunkStart, pos);
        break;
      }
      if (ch === 92) {
        out += input.slice(chunkStart, pos);
        const res = readEscapedChar(input, pos, lineStart, curLine, type === "template", errors);
        if (res.ch === null && !firstInvalidLoc) {
          firstInvalidLoc = {
            pos,
            lineStart,
            curLine
          };
        } else {
          out += res.ch;
        }
        ({
          pos,
          lineStart,
          curLine
        } = res);
        chunkStart = pos;
      } else if (ch === 8232 || ch === 8233) {
        ++pos;
        ++curLine;
        lineStart = pos;
      } else if (ch === 10 || ch === 13) {
        if (type === "template") {
          out += input.slice(chunkStart, pos) + "\n";
          ++pos;
          if (ch === 13 && input.charCodeAt(pos) === 10) {
            ++pos;
          }
          ++curLine;
          chunkStart = lineStart = pos;
        } else {
          errors.unterminated(initialPos, initialLineStart, initialCurLine);
        }
      } else {
        ++pos;
      }
    }
    return {
      pos,
      str: out,
      firstInvalidLoc,
      lineStart,
      curLine,
      containsInvalid: !!firstInvalidLoc
    };
  }
  function isStringEnd(type, ch, input, pos) {
    if (type === "template") {
      return ch === 96 || ch === 36 && input.charCodeAt(pos + 1) === 123;
    }
    return ch === (type === "double" ? 34 : 39);
  }
  function readEscapedChar(input, pos, lineStart, curLine, inTemplate, errors) {
    const throwOnInvalid = !inTemplate;
    pos++;
    const res = ch => ({
      pos,
      ch,
      lineStart,
      curLine
    });
    const ch = input.charCodeAt(pos++);
    switch (ch) {
      case 110:
        return res("\n");
      case 114:
        return res("\r");
      case 120:
        {
          let code;
          ({
            code,
            pos
          } = readHexChar(input, pos, lineStart, curLine, 2, false, throwOnInvalid, errors));
          return res(code === null ? null : String.fromCharCode(code));
        }
      case 117:
        {
          let code;
          ({
            code,
            pos
          } = readCodePoint(input, pos, lineStart, curLine, throwOnInvalid, errors));
          return res(code === null ? null : String.fromCodePoint(code));
        }
      case 116:
        return res("\t");
      case 98:
        return res("\b");
      case 118:
        return res("\x0B");
      case 102:
        return res("\f");
      case 13:
        if (input.charCodeAt(pos) === 10) {
          ++pos;
        }
      case 10:
        lineStart = pos;
        ++curLine;
      case 8232:
      case 8233:
        return res("");
      case 56:
      case 57:
        if (inTemplate) {
          return res(null);
        } else {
          errors.strictNumericEscape(pos - 1, lineStart, curLine);
        }
      default:
        if (ch >= 48 && ch <= 55) {
          const startPos = pos - 1;
          const match = /^[0-7]+/.exec(input.slice(startPos, pos + 2));
          let octalStr = match[0];
          let octal = parseInt(octalStr, 8);
          if (octal > 255) {
            octalStr = octalStr.slice(0, -1);
            octal = parseInt(octalStr, 8);
          }
          pos += octalStr.length - 1;
          const next = input.charCodeAt(pos);
          if (octalStr !== "0" || next === 56 || next === 57) {
            if (inTemplate) {
              return res(null);
            } else {
              errors.strictNumericEscape(startPos, lineStart, curLine);
            }
          }
          return res(String.fromCharCode(octal));
        }
        return res(String.fromCharCode(ch));
    }
  }
  function readHexChar(input, pos, lineStart, curLine, len, forceLen, throwOnInvalid, errors) {
    const initialPos = pos;
    let n;
    ({
      n,
      pos
    } = readInt(input, pos, lineStart, curLine, 16, len, forceLen, false, errors, !throwOnInvalid));
    if (n === null) {
      if (throwOnInvalid) {
        errors.invalidEscapeSequence(initialPos, lineStart, curLine);
      } else {
        pos = initialPos - 1;
      }
    }
    return {
      code: n,
      pos
    };
  }
  function readInt(input, pos, lineStart, curLine, radix, len, forceLen, allowNumSeparator, errors, bailOnError) {
    const start = pos;
    const forbiddenSiblings = radix === 16 ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct;
    const isAllowedSibling = radix === 16 ? isAllowedNumericSeparatorSibling.hex : radix === 10 ? isAllowedNumericSeparatorSibling.dec : radix === 8 ? isAllowedNumericSeparatorSibling.oct : isAllowedNumericSeparatorSibling.bin;
    let invalid = false;
    let total = 0;
    for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {
      const code = input.charCodeAt(pos);
      let val;
      if (code === 95 && allowNumSeparator !== "bail") {
        const prev = input.charCodeAt(pos - 1);
        const next = input.charCodeAt(pos + 1);
        if (!allowNumSeparator) {
          if (bailOnError) return {
            n: null,
            pos
          };
          errors.numericSeparatorInEscapeSequence(pos, lineStart, curLine);
        } else if (Number.isNaN(next) || !isAllowedSibling(next) || forbiddenSiblings.has(prev) || forbiddenSiblings.has(next)) {
          if (bailOnError) return {
            n: null,
            pos
          };
          errors.unexpectedNumericSeparator(pos, lineStart, curLine);
        }
        ++pos;
        continue;
      }
      if (code >= 97) {
        val = code - 97 + 10;
      } else if (code >= 65) {
        val = code - 65 + 10;
      } else if (_isDigit(code)) {
        val = code - 48;
      } else {
        val = Infinity;
      }
      if (val >= radix) {
        if (val <= 9 && bailOnError) {
          return {
            n: null,
            pos
          };
        } else if (val <= 9 && errors.invalidDigit(pos, lineStart, curLine, radix)) {
          val = 0;
        } else if (forceLen) {
          val = 0;
          invalid = true;
        } else {
          break;
        }
      }
      ++pos;
      total = total * radix + val;
    }
    if (pos === start || len != null && pos - start !== len || invalid) {
      return {
        n: null,
        pos
      };
    }
    return {
      n: total,
      pos
    };
  }
  function readCodePoint(input, pos, lineStart, curLine, throwOnInvalid, errors) {
    const ch = input.charCodeAt(pos);
    let code;
    if (ch === 123) {
      ++pos;
      ({
        code,
        pos
      } = readHexChar(input, pos, lineStart, curLine, input.indexOf("}", pos) - pos, true, throwOnInvalid, errors));
      ++pos;
      if (code !== null && code > 1114111) {
        if (throwOnInvalid) {
          errors.invalidCodePoint(pos, lineStart, curLine);
        } else {
          return {
            code: null,
            pos
          };
        }
      }
    } else {
      ({
        code,
        pos
      } = readHexChar(input, pos, lineStart, curLine, 4, false, throwOnInvalid, errors));
    }
    return {
      code,
      pos
    };
  }
  function buildPosition(pos, lineStart, curLine) {
    return new Position(curLine, pos - lineStart, pos);
  }
  const VALID_REGEX_FLAGS = new Set([103, 109, 115, 105, 121, 117, 100, 118]);
  class Token {
    constructor(state) {
      this.type = state.type;
      this.value = state.value;
      this.start = state.start;
      this.end = state.end;
      this.loc = new SourceLocation(state.startLoc, state.endLoc);
    }
  }
  class Tokenizer extends CommentsParser {
    constructor(options, input) {
      super();
      this.isLookahead = void 0;
      this.tokens = [];
      this.errorHandlers_readInt = {
        invalidDigit: (pos, lineStart, curLine, radix) => {
          if (!this.options.errorRecovery) return false;
          this.raise(Errors.InvalidDigit, buildPosition(pos, lineStart, curLine), {
            radix
          });
          return true;
        },
        numericSeparatorInEscapeSequence: this.errorBuilder(Errors.NumericSeparatorInEscapeSequence),
        unexpectedNumericSeparator: this.errorBuilder(Errors.UnexpectedNumericSeparator)
      };
      this.errorHandlers_readCodePoint = Object.assign({}, this.errorHandlers_readInt, {
        invalidEscapeSequence: this.errorBuilder(Errors.InvalidEscapeSequence),
        invalidCodePoint: this.errorBuilder(Errors.InvalidCodePoint)
      });
      this.errorHandlers_readStringContents_string = Object.assign({}, this.errorHandlers_readCodePoint, {
        strictNumericEscape: (pos, lineStart, curLine) => {
          this.recordStrictModeErrors(Errors.StrictNumericEscape, buildPosition(pos, lineStart, curLine));
        },
        unterminated: (pos, lineStart, curLine) => {
          throw this.raise(Errors.UnterminatedString, buildPosition(pos - 1, lineStart, curLine));
        }
      });
      this.errorHandlers_readStringContents_template = Object.assign({}, this.errorHandlers_readCodePoint, {
        strictNumericEscape: this.errorBuilder(Errors.StrictNumericEscape),
        unterminated: (pos, lineStart, curLine) => {
          throw this.raise(Errors.UnterminatedTemplate, buildPosition(pos, lineStart, curLine));
        }
      });
      this.state = new State();
      this.state.init(options);
      this.input = input;
      this.length = input.length;
      this.comments = [];
      this.isLookahead = false;
    }
    pushToken(token) {
      this.tokens.length = this.state.tokensLength;
      this.tokens.push(token);
      ++this.state.tokensLength;
    }
    next() {
      this.checkKeywordEscapes();
      if (this.options.tokens) {
        this.pushToken(new Token(this.state));
      }
      this.state.lastTokEndLoc = this.state.endLoc;
      this.state.lastTokStartLoc = this.state.startLoc;
      this.nextToken();
    }
    eat(type) {
      if (this.match(type)) {
        this.next();
        return true;
      } else {
        return false;
      }
    }
    match(type) {
      return this.state.type === type;
    }
    createLookaheadState(state) {
      return {
        pos: state.pos,
        value: null,
        type: state.type,
        start: state.start,
        end: state.end,
        context: [this.curContext()],
        inType: state.inType,
        startLoc: state.startLoc,
        lastTokEndLoc: state.lastTokEndLoc,
        curLine: state.curLine,
        lineStart: state.lineStart,
        curPosition: state.curPosition
      };
    }
    lookahead() {
      const old = this.state;
      this.state = this.createLookaheadState(old);
      this.isLookahead = true;
      this.nextToken();
      this.isLookahead = false;
      const curr = this.state;
      this.state = old;
      return curr;
    }
    nextTokenStart() {
      return this.nextTokenStartSince(this.state.pos);
    }
    nextTokenStartSince(pos) {
      skipWhiteSpace.lastIndex = pos;
      return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;
    }
    lookaheadCharCode() {
      return this.input.charCodeAt(this.nextTokenStart());
    }
    nextTokenInLineStart() {
      return this.nextTokenInLineStartSince(this.state.pos);
    }
    nextTokenInLineStartSince(pos) {
      skipWhiteSpaceInLine.lastIndex = pos;
      return skipWhiteSpaceInLine.test(this.input) ? skipWhiteSpaceInLine.lastIndex : pos;
    }
    lookaheadInLineCharCode() {
      return this.input.charCodeAt(this.nextTokenInLineStart());
    }
    codePointAtPos(pos) {
      let cp = this.input.charCodeAt(pos);
      if ((cp & 64512) === 55296 && ++pos < this.input.length) {
        const trail = this.input.charCodeAt(pos);
        if ((trail & 64512) === 56320) {
          cp = 65536 + ((cp & 1023) << 10) + (trail & 1023);
        }
      }
      return cp;
    }
    setStrict(strict) {
      this.state.strict = strict;
      if (strict) {
        this.state.strictErrors.forEach(([toParseError, at]) => this.raise(toParseError, at));
        this.state.strictErrors.clear();
      }
    }
    curContext() {
      return this.state.context[this.state.context.length - 1];
    }
    nextToken() {
      this.skipSpace();
      this.state.start = this.state.pos;
      if (!this.isLookahead) this.state.startLoc = this.state.curPosition();
      if (this.state.pos >= this.length) {
        this.finishToken(139);
        return;
      }
      this.getTokenFromCode(this.codePointAtPos(this.state.pos));
    }
    skipBlockComment(commentEnd) {
      let startLoc;
      if (!this.isLookahead) startLoc = this.state.curPosition();
      const start = this.state.pos;
      const end = this.input.indexOf(commentEnd, start + 2);
      if (end === -1) {
        throw this.raise(Errors.UnterminatedComment, this.state.curPosition());
      }
      this.state.pos = end + commentEnd.length;
      lineBreakG.lastIndex = start + 2;
      while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {
        ++this.state.curLine;
        this.state.lineStart = lineBreakG.lastIndex;
      }
      if (this.isLookahead) return;
      const comment = {
        type: "CommentBlock",
        value: this.input.slice(start + 2, end),
        start,
        end: end + commentEnd.length,
        loc: new SourceLocation(startLoc, this.state.curPosition())
      };
      if (this.options.tokens) this.pushToken(comment);
      return comment;
    }
    skipLineComment(startSkip) {
      const start = this.state.pos;
      let startLoc;
      if (!this.isLookahead) startLoc = this.state.curPosition();
      let ch = this.input.charCodeAt(this.state.pos += startSkip);
      if (this.state.pos < this.length) {
        while (!isNewLine(ch) && ++this.state.pos < this.length) {
          ch = this.input.charCodeAt(this.state.pos);
        }
      }
      if (this.isLookahead) return;
      const end = this.state.pos;
      const value = this.input.slice(start + startSkip, end);
      const comment = {
        type: "CommentLine",
        value,
        start,
        end,
        loc: new SourceLocation(startLoc, this.state.curPosition())
      };
      if (this.options.tokens) this.pushToken(comment);
      return comment;
    }
    skipSpace() {
      const spaceStart = this.state.pos;
      const comments = [];
      loop: while (this.state.pos < this.length) {
        const ch = this.input.charCodeAt(this.state.pos);
        switch (ch) {
          case 32:
          case 160:
          case 9:
            ++this.state.pos;
            break;
          case 13:
            if (this.input.charCodeAt(this.state.pos + 1) === 10) {
              ++this.state.pos;
            }
          case 10:
          case 8232:
          case 8233:
            ++this.state.pos;
            ++this.state.curLine;
            this.state.lineStart = this.state.pos;
            break;
          case 47:
            switch (this.input.charCodeAt(this.state.pos + 1)) {
              case 42:
                {
                  const comment = this.skipBlockComment("*/");
                  if (comment !== undefined) {
                    this.addComment(comment);
                    if (this.options.attachComment) comments.push(comment);
                  }
                  break;
                }
              case 47:
                {
                  const comment = this.skipLineComment(2);
                  if (comment !== undefined) {
                    this.addComment(comment);
                    if (this.options.attachComment) comments.push(comment);
                  }
                  break;
                }
              default:
                break loop;
            }
            break;
          default:
            if (isWhitespace(ch)) {
              ++this.state.pos;
            } else if (ch === 45 && !this.inModule && this.options.annexB) {
              const pos = this.state.pos;
              if (this.input.charCodeAt(pos + 1) === 45 && this.input.charCodeAt(pos + 2) === 62 && (spaceStart === 0 || this.state.lineStart > spaceStart)) {
                const comment = this.skipLineComment(3);
                if (comment !== undefined) {
                  this.addComment(comment);
                  if (this.options.attachComment) comments.push(comment);
                }
              } else {
                break loop;
              }
            } else if (ch === 60 && !this.inModule && this.options.annexB) {
              const pos = this.state.pos;
              if (this.input.charCodeAt(pos + 1) === 33 && this.input.charCodeAt(pos + 2) === 45 && this.input.charCodeAt(pos + 3) === 45) {
                const comment = this.skipLineComment(4);
                if (comment !== undefined) {
                  this.addComment(comment);
                  if (this.options.attachComment) comments.push(comment);
                }
              } else {
                break loop;
              }
            } else {
              break loop;
            }
        }
      }
      if (comments.length > 0) {
        const end = this.state.pos;
        const commentWhitespace = {
          start: spaceStart,
          end,
          comments,
          leadingNode: null,
          trailingNode: null,
          containingNode: null
        };
        this.state.commentStack.push(commentWhitespace);
      }
    }
    finishToken(type, val) {
      this.state.end = this.state.pos;
      this.state.endLoc = this.state.curPosition();
      const prevType = this.state.type;
      this.state.type = type;
      this.state.value = val;
      if (!this.isLookahead) {
        this.updateContext(prevType);
      }
    }
    replaceToken(type) {
      this.state.type = type;
      this.updateContext();
    }
    readToken_numberSign() {
      if (this.state.pos === 0 && this.readToken_interpreter()) {
        return;
      }
      const nextPos = this.state.pos + 1;
      const next = this.codePointAtPos(nextPos);
      if (next >= 48 && next <= 57) {
        throw this.raise(Errors.UnexpectedDigitAfterHash, this.state.curPosition());
      }
      if (next === 123 || next === 91 && this.hasPlugin("recordAndTuple")) {
        this.expectPlugin("recordAndTuple");
        if (this.getPluginOption("recordAndTuple", "syntaxType") === "bar") {
          throw this.raise(next === 123 ? Errors.RecordExpressionHashIncorrectStartSyntaxType : Errors.TupleExpressionHashIncorrectStartSyntaxType, this.state.curPosition());
        }
        this.state.pos += 2;
        if (next === 123) {
          this.finishToken(7);
        } else {
          this.finishToken(1);
        }
      } else if (isIdentifierStart(next)) {
        ++this.state.pos;
        this.finishToken(138, this.readWord1(next));
      } else if (next === 92) {
        ++this.state.pos;
        this.finishToken(138, this.readWord1());
      } else {
        this.finishOp(27, 1);
      }
    }
    readToken_dot() {
      const next = this.input.charCodeAt(this.state.pos + 1);
      if (next >= 48 && next <= 57) {
        this.readNumber(true);
        return;
      }
      if (next === 46 && this.input.charCodeAt(this.state.pos + 2) === 46) {
        this.state.pos += 3;
        this.finishToken(21);
      } else {
        ++this.state.pos;
        this.finishToken(16);
      }
    }
    readToken_slash() {
      const next = this.input.charCodeAt(this.state.pos + 1);
      if (next === 61) {
        this.finishOp(31, 2);
      } else {
        this.finishOp(56, 1);
      }
    }
    readToken_interpreter() {
      if (this.state.pos !== 0 || this.length < 2) return false;
      let ch = this.input.charCodeAt(this.state.pos + 1);
      if (ch !== 33) return false;
      const start = this.state.pos;
      this.state.pos += 1;
      while (!isNewLine(ch) && ++this.state.pos < this.length) {
        ch = this.input.charCodeAt(this.state.pos);
      }
      const value = this.input.slice(start + 2, this.state.pos);
      this.finishToken(28, value);
      return true;
    }
    readToken_mult_modulo(code) {
      let type = code === 42 ? 55 : 54;
      let width = 1;
      let next = this.input.charCodeAt(this.state.pos + 1);
      if (code === 42 && next === 42) {
        width++;
        next = this.input.charCodeAt(this.state.pos + 2);
        type = 57;
      }
      if (next === 61 && !this.state.inType) {
        width++;
        type = code === 37 ? 33 : 30;
      }
      this.finishOp(type, width);
    }
    readToken_pipe_amp(code) {
      const next = this.input.charCodeAt(this.state.pos + 1);
      if (next === code) {
        if (this.input.charCodeAt(this.state.pos + 2) === 61) {
          this.finishOp(30, 3);
        } else {
          this.finishOp(code === 124 ? 41 : 42, 2);
        }
        return;
      }
      if (code === 124) {
        if (next === 62) {
          this.finishOp(39, 2);
          return;
        }
        if (this.hasPlugin("recordAndTuple") && next === 125) {
          if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar") {
            throw this.raise(Errors.RecordExpressionBarIncorrectEndSyntaxType, this.state.curPosition());
          }
          this.state.pos += 2;
          this.finishToken(9);
          return;
        }
        if (this.hasPlugin("recordAndTuple") && next === 93) {
          if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar") {
            throw this.raise(Errors.TupleExpressionBarIncorrectEndSyntaxType, this.state.curPosition());
          }
          this.state.pos += 2;
          this.finishToken(4);
          return;
        }
      }
      if (next === 61) {
        this.finishOp(30, 2);
        return;
      }
      this.finishOp(code === 124 ? 43 : 45, 1);
    }
    readToken_caret() {
      const next = this.input.charCodeAt(this.state.pos + 1);
      if (next === 61 && !this.state.inType) {
        this.finishOp(32, 2);
      } else if (next === 94 && this.hasPlugin(["pipelineOperator", {
        proposal: "hack",
        topicToken: "^^"
      }])) {
        this.finishOp(37, 2);
        const lookaheadCh = this.input.codePointAt(this.state.pos);
        if (lookaheadCh === 94) {
          this.unexpected();
        }
      } else {
        this.finishOp(44, 1);
      }
    }
    readToken_atSign() {
      const next = this.input.charCodeAt(this.state.pos + 1);
      if (next === 64 && this.hasPlugin(["pipelineOperator", {
        proposal: "hack",
        topicToken: "@@"
      }])) {
        this.finishOp(38, 2);
      } else {
        this.finishOp(26, 1);
      }
    }
    readToken_plus_min(code) {
      const next = this.input.charCodeAt(this.state.pos + 1);
      if (next === code) {
        this.finishOp(34, 2);
        return;
      }
      if (next === 61) {
        this.finishOp(30, 2);
      } else {
        this.finishOp(53, 1);
      }
    }
    readToken_lt() {
      const {
        pos
      } = this.state;
      const next = this.input.charCodeAt(pos + 1);
      if (next === 60) {
        if (this.input.charCodeAt(pos + 2) === 61) {
          this.finishOp(30, 3);
          return;
        }
        this.finishOp(51, 2);
        return;
      }
      if (next === 61) {
        this.finishOp(49, 2);
        return;
      }
      this.finishOp(47, 1);
    }
    readToken_gt() {
      const {
        pos
      } = this.state;
      const next = this.input.charCodeAt(pos + 1);
      if (next === 62) {
        const size = this.input.charCodeAt(pos + 2) === 62 ? 3 : 2;
        if (this.input.charCodeAt(pos + size) === 61) {
          this.finishOp(30, size + 1);
          return;
        }
        this.finishOp(52, size);
        return;
      }
      if (next === 61) {
        this.finishOp(49, 2);
        return;
      }
      this.finishOp(48, 1);
    }
    readToken_eq_excl(code) {
      const next = this.input.charCodeAt(this.state.pos + 1);
      if (next === 61) {
        this.finishOp(46, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);
        return;
      }
      if (code === 61 && next === 62) {
        this.state.pos += 2;
        this.finishToken(19);
        return;
      }
      this.finishOp(code === 61 ? 29 : 35, 1);
    }
    readToken_question() {
      const next = this.input.charCodeAt(this.state.pos + 1);
      const next2 = this.input.charCodeAt(this.state.pos + 2);
      if (next === 63) {
        if (next2 === 61) {
          this.finishOp(30, 3);
        } else {
          this.finishOp(40, 2);
        }
      } else if (next === 46 && !(next2 >= 48 && next2 <= 57)) {
        this.state.pos += 2;
        this.finishToken(18);
      } else {
        ++this.state.pos;
        this.finishToken(17);
      }
    }
    getTokenFromCode(code) {
      switch (code) {
        case 46:
          this.readToken_dot();
          return;
        case 40:
          ++this.state.pos;
          this.finishToken(10);
          return;
        case 41:
          ++this.state.pos;
          this.finishToken(11);
          return;
        case 59:
          ++this.state.pos;
          this.finishToken(13);
          return;
        case 44:
          ++this.state.pos;
          this.finishToken(12);
          return;
        case 91:
          if (this.hasPlugin("recordAndTuple") && this.input.charCodeAt(this.state.pos + 1) === 124) {
            if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar") {
              throw this.raise(Errors.TupleExpressionBarIncorrectStartSyntaxType, this.state.curPosition());
            }
            this.state.pos += 2;
            this.finishToken(2);
          } else {
            ++this.state.pos;
            this.finishToken(0);
          }
          return;
        case 93:
          ++this.state.pos;
          this.finishToken(3);
          return;
        case 123:
          if (this.hasPlugin("recordAndTuple") && this.input.charCodeAt(this.state.pos + 1) === 124) {
            if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar") {
              throw this.raise(Errors.RecordExpressionBarIncorrectStartSyntaxType, this.state.curPosition());
            }
            this.state.pos += 2;
            this.finishToken(6);
          } else {
            ++this.state.pos;
            this.finishToken(5);
          }
          return;
        case 125:
          ++this.state.pos;
          this.finishToken(8);
          return;
        case 58:
          if (this.hasPlugin("functionBind") && this.input.charCodeAt(this.state.pos + 1) === 58) {
            this.finishOp(15, 2);
          } else {
            ++this.state.pos;
            this.finishToken(14);
          }
          return;
        case 63:
          this.readToken_question();
          return;
        case 96:
          this.readTemplateToken();
          return;
        case 48:
          {
            const next = this.input.charCodeAt(this.state.pos + 1);
            if (next === 120 || next === 88) {
              this.readRadixNumber(16);
              return;
            }
            if (next === 111 || next === 79) {
              this.readRadixNumber(8);
              return;
            }
            if (next === 98 || next === 66) {
              this.readRadixNumber(2);
              return;
            }
          }
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
          this.readNumber(false);
          return;
        case 34:
        case 39:
          this.readString(code);
          return;
        case 47:
          this.readToken_slash();
          return;
        case 37:
        case 42:
          this.readToken_mult_modulo(code);
          return;
        case 124:
        case 38:
          this.readToken_pipe_amp(code);
          return;
        case 94:
          this.readToken_caret();
          return;
        case 43:
        case 45:
          this.readToken_plus_min(code);
          return;
        case 60:
          this.readToken_lt();
          return;
        case 62:
          this.readToken_gt();
          return;
        case 61:
        case 33:
          this.readToken_eq_excl(code);
          return;
        case 126:
          this.finishOp(36, 1);
          return;
        case 64:
          this.readToken_atSign();
          return;
        case 35:
          this.readToken_numberSign();
          return;
        case 92:
          this.readWord();
          return;
        default:
          if (isIdentifierStart(code)) {
            this.readWord(code);
            return;
          }
      }
      throw this.raise(Errors.InvalidOrUnexpectedToken, this.state.curPosition(), {
        unexpected: String.fromCodePoint(code)
      });
    }
    finishOp(type, size) {
      const str = this.input.slice(this.state.pos, this.state.pos + size);
      this.state.pos += size;
      this.finishToken(type, str);
    }
    readRegexp() {
      const startLoc = this.state.startLoc;
      const start = this.state.start + 1;
      let escaped, inClass;
      let {
        pos
      } = this.state;
      for (;; ++pos) {
        if (pos >= this.length) {
          throw this.raise(Errors.UnterminatedRegExp, createPositionWithColumnOffset(startLoc, 1));
        }
        const ch = this.input.charCodeAt(pos);
        if (isNewLine(ch)) {
          throw this.raise(Errors.UnterminatedRegExp, createPositionWithColumnOffset(startLoc, 1));
        }
        if (escaped) {
          escaped = false;
        } else {
          if (ch === 91) {
            inClass = true;
          } else if (ch === 93 && inClass) {
            inClass = false;
          } else if (ch === 47 && !inClass) {
            break;
          }
          escaped = ch === 92;
        }
      }
      const content = this.input.slice(start, pos);
      ++pos;
      let mods = "";
      const nextPos = () => createPositionWithColumnOffset(startLoc, pos + 2 - start);
      while (pos < this.length) {
        const cp = this.codePointAtPos(pos);
        const char = String.fromCharCode(cp);
        if (VALID_REGEX_FLAGS.has(cp)) {
          if (cp === 118) {
            if (mods.includes("u")) {
              this.raise(Errors.IncompatibleRegExpUVFlags, nextPos());
            }
          } else if (cp === 117) {
            if (mods.includes("v")) {
              this.raise(Errors.IncompatibleRegExpUVFlags, nextPos());
            }
          }
          if (mods.includes(char)) {
            this.raise(Errors.DuplicateRegExpFlags, nextPos());
          }
        } else if (isIdentifierChar(cp) || cp === 92) {
          this.raise(Errors.MalformedRegExpFlags, nextPos());
        } else {
          break;
        }
        ++pos;
        mods += char;
      }
      this.state.pos = pos;
      this.finishToken(137, {
        pattern: content,
        flags: mods
      });
    }
    readInt(radix, len, forceLen = false, allowNumSeparator = true) {
      const {
        n,
        pos
      } = readInt(this.input, this.state.pos, this.state.lineStart, this.state.curLine, radix, len, forceLen, allowNumSeparator, this.errorHandlers_readInt, false);
      this.state.pos = pos;
      return n;
    }
    readRadixNumber(radix) {
      const startLoc = this.state.curPosition();
      let isBigInt = false;
      this.state.pos += 2;
      const val = this.readInt(radix);
      if (val == null) {
        this.raise(Errors.InvalidDigit, createPositionWithColumnOffset(startLoc, 2), {
          radix
        });
      }
      const next = this.input.charCodeAt(this.state.pos);
      if (next === 110) {
        ++this.state.pos;
        isBigInt = true;
      } else if (next === 109) {
        throw this.raise(Errors.InvalidDecimal, startLoc);
      }
      if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {
        throw this.raise(Errors.NumberIdentifier, this.state.curPosition());
      }
      if (isBigInt) {
        const str = this.input.slice(startLoc.index, this.state.pos).replace(/[_n]/g, "");
        this.finishToken(135, str);
        return;
      }
      this.finishToken(134, val);
    }
    readNumber(startsWithDot) {
      const start = this.state.pos;
      const startLoc = this.state.curPosition();
      let isFloat = false;
      let isBigInt = false;
      let isDecimal = false;
      let hasExponent = false;
      let isOctal = false;
      if (!startsWithDot && this.readInt(10) === null) {
        this.raise(Errors.InvalidNumber, this.state.curPosition());
      }
      const hasLeadingZero = this.state.pos - start >= 2 && this.input.charCodeAt(start) === 48;
      if (hasLeadingZero) {
        const integer = this.input.slice(start, this.state.pos);
        this.recordStrictModeErrors(Errors.StrictOctalLiteral, startLoc);
        if (!this.state.strict) {
          const underscorePos = integer.indexOf("_");
          if (underscorePos > 0) {
            this.raise(Errors.ZeroDigitNumericSeparator, createPositionWithColumnOffset(startLoc, underscorePos));
          }
        }
        isOctal = hasLeadingZero && !/[89]/.test(integer);
      }
      let next = this.input.charCodeAt(this.state.pos);
      if (next === 46 && !isOctal) {
        ++this.state.pos;
        this.readInt(10);
        isFloat = true;
        next = this.input.charCodeAt(this.state.pos);
      }
      if ((next === 69 || next === 101) && !isOctal) {
        next = this.input.charCodeAt(++this.state.pos);
        if (next === 43 || next === 45) {
          ++this.state.pos;
        }
        if (this.readInt(10) === null) {
          this.raise(Errors.InvalidOrMissingExponent, startLoc);
        }
        isFloat = true;
        hasExponent = true;
        next = this.input.charCodeAt(this.state.pos);
      }
      if (next === 110) {
        if (isFloat || hasLeadingZero) {
          this.raise(Errors.InvalidBigIntLiteral, startLoc);
        }
        ++this.state.pos;
        isBigInt = true;
      }
      if (next === 109) {
        this.expectPlugin("decimal", this.state.curPosition());
        if (hasExponent || hasLeadingZero) {
          this.raise(Errors.InvalidDecimal, startLoc);
        }
        ++this.state.pos;
        isDecimal = true;
      }
      if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {
        throw this.raise(Errors.NumberIdentifier, this.state.curPosition());
      }
      const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, "");
      if (isBigInt) {
        this.finishToken(135, str);
        return;
      }
      if (isDecimal) {
        this.finishToken(136, str);
        return;
      }
      const val = isOctal ? parseInt(str, 8) : parseFloat(str);
      this.finishToken(134, val);
    }
    readCodePoint(throwOnInvalid) {
      const {
        code,
        pos
      } = readCodePoint(this.input, this.state.pos, this.state.lineStart, this.state.curLine, throwOnInvalid, this.errorHandlers_readCodePoint);
      this.state.pos = pos;
      return code;
    }
    readString(quote) {
      const {
        str,
        pos,
        curLine,
        lineStart
      } = readStringContents(quote === 34 ? "double" : "single", this.input, this.state.pos + 1, this.state.lineStart, this.state.curLine, this.errorHandlers_readStringContents_string);
      this.state.pos = pos + 1;
      this.state.lineStart = lineStart;
      this.state.curLine = curLine;
      this.finishToken(133, str);
    }
    readTemplateContinuation() {
      if (!this.match(8)) {
        this.unexpected(null, 8);
      }
      this.state.pos--;
      this.readTemplateToken();
    }
    readTemplateToken() {
      const opening = this.input[this.state.pos];
      const {
        str,
        firstInvalidLoc,
        pos,
        curLine,
        lineStart
      } = readStringContents("template", this.input, this.state.pos + 1, this.state.lineStart, this.state.curLine, this.errorHandlers_readStringContents_template);
      this.state.pos = pos + 1;
      this.state.lineStart = lineStart;
      this.state.curLine = curLine;
      if (firstInvalidLoc) {
        this.state.firstInvalidTemplateEscapePos = new Position(firstInvalidLoc.curLine, firstInvalidLoc.pos - firstInvalidLoc.lineStart, firstInvalidLoc.pos);
      }
      if (this.input.codePointAt(pos) === 96) {
        this.finishToken(24, firstInvalidLoc ? null : opening + str + "`");
      } else {
        this.state.pos++;
        this.finishToken(25, firstInvalidLoc ? null : opening + str + "${");
      }
    }
    recordStrictModeErrors(toParseError, at) {
      const index = at.index;
      if (this.state.strict && !this.state.strictErrors.has(index)) {
        this.raise(toParseError, at);
      } else {
        this.state.strictErrors.set(index, [toParseError, at]);
      }
    }
    readWord1(firstCode) {
      this.state.containsEsc = false;
      let word = "";
      const start = this.state.pos;
      let chunkStart = this.state.pos;
      if (firstCode !== undefined) {
        this.state.pos += firstCode <= 65535 ? 1 : 2;
      }
      while (this.state.pos < this.length) {
        const ch = this.codePointAtPos(this.state.pos);
        if (isIdentifierChar(ch)) {
          this.state.pos += ch <= 65535 ? 1 : 2;
        } else if (ch === 92) {
          this.state.containsEsc = true;
          word += this.input.slice(chunkStart, this.state.pos);
          const escStart = this.state.curPosition();
          const identifierCheck = this.state.pos === start ? isIdentifierStart : isIdentifierChar;
          if (this.input.charCodeAt(++this.state.pos) !== 117) {
            this.raise(Errors.MissingUnicodeEscape, this.state.curPosition());
            chunkStart = this.state.pos - 1;
            continue;
          }
          ++this.state.pos;
          const esc = this.readCodePoint(true);
          if (esc !== null) {
            if (!identifierCheck(esc)) {
              this.raise(Errors.EscapedCharNotAnIdentifier, escStart);
            }
            word += String.fromCodePoint(esc);
          }
          chunkStart = this.state.pos;
        } else {
          break;
        }
      }
      return word + this.input.slice(chunkStart, this.state.pos);
    }
    readWord(firstCode) {
      const word = this.readWord1(firstCode);
      const type = keywords$1.get(word);
      if (type !== undefined) {
        this.finishToken(type, tokenLabelName(type));
      } else {
        this.finishToken(132, word);
      }
    }
    checkKeywordEscapes() {
      const {
        type
      } = this.state;
      if (tokenIsKeyword(type) && this.state.containsEsc) {
        this.raise(Errors.InvalidEscapedReservedWord, this.state.startLoc, {
          reservedWord: tokenLabelName(type)
        });
      }
    }
    raise(toParseError, at, details = {}) {
      const loc = at instanceof Position ? at : at.loc.start;
      const error = toParseError(loc, details);
      if (!this.options.errorRecovery) throw error;
      if (!this.isLookahead) this.state.errors.push(error);
      return error;
    }
    raiseOverwrite(toParseError, at, details = {}) {
      const loc = at instanceof Position ? at : at.loc.start;
      const pos = loc.index;
      const errors = this.state.errors;
      for (let i = errors.length - 1; i >= 0; i--) {
        const error = errors[i];
        if (error.loc.index === pos) {
          return errors[i] = toParseError(loc, details);
        }
        if (error.loc.index < pos) break;
      }
      return this.raise(toParseError, at, details);
    }
    updateContext(prevType) {}
    unexpected(loc, type) {
      throw this.raise(Errors.UnexpectedToken, loc != null ? loc : this.state.startLoc, {
        expected: type ? tokenLabelName(type) : null
      });
    }
    expectPlugin(pluginName, loc) {
      if (this.hasPlugin(pluginName)) {
        return true;
      }
      throw this.raise(Errors.MissingPlugin, loc != null ? loc : this.state.startLoc, {
        missingPlugin: [pluginName]
      });
    }
    expectOnePlugin(pluginNames) {
      if (!pluginNames.some(name => this.hasPlugin(name))) {
        throw this.raise(Errors.MissingOneOfPlugins, this.state.startLoc, {
          missingPlugin: pluginNames
        });
      }
    }
    errorBuilder(error) {
      return (pos, lineStart, curLine) => {
        this.raise(error, buildPosition(pos, lineStart, curLine));
      };
    }
  }
  class ClassScope {
    constructor() {
      this.privateNames = new Set();
      this.loneAccessors = new Map();
      this.undefinedPrivateNames = new Map();
    }
  }
  class ClassScopeHandler {
    constructor(parser) {
      this.parser = void 0;
      this.stack = [];
      this.undefinedPrivateNames = new Map();
      this.parser = parser;
    }
    current() {
      return this.stack[this.stack.length - 1];
    }
    enter() {
      this.stack.push(new ClassScope());
    }
    exit() {
      const oldClassScope = this.stack.pop();
      const current = this.current();
      for (const [name, loc] of Array.from(oldClassScope.undefinedPrivateNames)) {
        if (current) {
          if (!current.undefinedPrivateNames.has(name)) {
            current.undefinedPrivateNames.set(name, loc);
          }
        } else {
          this.parser.raise(Errors.InvalidPrivateFieldResolution, loc, {
            identifierName: name
          });
        }
      }
    }
    declarePrivateName(name, elementType, loc) {
      const {
        privateNames,
        loneAccessors,
        undefinedPrivateNames
      } = this.current();
      let redefined = privateNames.has(name);
      if (elementType & 3) {
        const accessor = redefined && loneAccessors.get(name);
        if (accessor) {
          const oldStatic = accessor & 4;
          const newStatic = elementType & 4;
          const oldKind = accessor & 3;
          const newKind = elementType & 3;
          redefined = oldKind === newKind || oldStatic !== newStatic;
          if (!redefined) loneAccessors.delete(name);
        } else if (!redefined) {
          loneAccessors.set(name, elementType);
        }
      }
      if (redefined) {
        this.parser.raise(Errors.PrivateNameRedeclaration, loc, {
          identifierName: name
        });
      }
      privateNames.add(name);
      undefinedPrivateNames.delete(name);
    }
    usePrivateName(name, loc) {
      let classScope;
      for (classScope of this.stack) {
        if (classScope.privateNames.has(name)) return;
      }
      if (classScope) {
        classScope.undefinedPrivateNames.set(name, loc);
      } else {
        this.parser.raise(Errors.InvalidPrivateFieldResolution, loc, {
          identifierName: name
        });
      }
    }
  }
  class ExpressionScope {
    constructor(type = 0) {
      this.type = type;
    }
    canBeArrowParameterDeclaration() {
      return this.type === 2 || this.type === 1;
    }
    isCertainlyParameterDeclaration() {
      return this.type === 3;
    }
  }
  class ArrowHeadParsingScope extends ExpressionScope {
    constructor(type) {
      super(type);
      this.declarationErrors = new Map();
    }
    recordDeclarationError(ParsingErrorClass, at) {
      const index = at.index;
      this.declarationErrors.set(index, [ParsingErrorClass, at]);
    }
    clearDeclarationError(index) {
      this.declarationErrors.delete(index);
    }
    iterateErrors(iterator) {
      this.declarationErrors.forEach(iterator);
    }
  }
  class ExpressionScopeHandler {
    constructor(parser) {
      this.parser = void 0;
      this.stack = [new ExpressionScope()];
      this.parser = parser;
    }
    enter(scope) {
      this.stack.push(scope);
    }
    exit() {
      this.stack.pop();
    }
    recordParameterInitializerError(toParseError, node) {
      const origin = node.loc.start;
      const {
        stack
      } = this;
      let i = stack.length - 1;
      let scope = stack[i];
      while (!scope.isCertainlyParameterDeclaration()) {
        if (scope.canBeArrowParameterDeclaration()) {
          scope.recordDeclarationError(toParseError, origin);
        } else {
          return;
        }
        scope = stack[--i];
      }
      this.parser.raise(toParseError, origin);
    }
    recordArrowParameterBindingError(error, node) {
      const {
        stack
      } = this;
      const scope = stack[stack.length - 1];
      const origin = node.loc.start;
      if (scope.isCertainlyParameterDeclaration()) {
        this.parser.raise(error, origin);
      } else if (scope.canBeArrowParameterDeclaration()) {
        scope.recordDeclarationError(error, origin);
      } else {
        return;
      }
    }
    recordAsyncArrowParametersError(at) {
      const {
        stack
      } = this;
      let i = stack.length - 1;
      let scope = stack[i];
      while (scope.canBeArrowParameterDeclaration()) {
        if (scope.type === 2) {
          scope.recordDeclarationError(Errors.AwaitBindingIdentifier, at);
        }
        scope = stack[--i];
      }
    }
    validateAsPattern() {
      const {
        stack
      } = this;
      const currentScope = stack[stack.length - 1];
      if (!currentScope.canBeArrowParameterDeclaration()) return;
      currentScope.iterateErrors(([toParseError, loc]) => {
        this.parser.raise(toParseError, loc);
        let i = stack.length - 2;
        let scope = stack[i];
        while (scope.canBeArrowParameterDeclaration()) {
          scope.clearDeclarationError(loc.index);
          scope = stack[--i];
        }
      });
    }
  }
  function newParameterDeclarationScope() {
    return new ExpressionScope(3);
  }
  function newArrowHeadScope() {
    return new ArrowHeadParsingScope(1);
  }
  function newAsyncArrowScope() {
    return new ArrowHeadParsingScope(2);
  }
  function newExpressionScope() {
    return new ExpressionScope();
  }
  class ProductionParameterHandler {
    constructor() {
      this.stacks = [];
    }
    enter(flags) {
      this.stacks.push(flags);
    }
    exit() {
      this.stacks.pop();
    }
    currentFlags() {
      return this.stacks[this.stacks.length - 1];
    }
    get hasAwait() {
      return (this.currentFlags() & 2) > 0;
    }
    get hasYield() {
      return (this.currentFlags() & 1) > 0;
    }
    get hasReturn() {
      return (this.currentFlags() & 4) > 0;
    }
    get hasIn() {
      return (this.currentFlags() & 8) > 0;
    }
  }
  function functionFlags(isAsync, isGenerator) {
    return (isAsync ? 2 : 0) | (isGenerator ? 1 : 0);
  }
  class UtilParser extends Tokenizer {
    addExtra(node, key, value, enumerable = true) {
      if (!node) return;
      let {
        extra
      } = node;
      if (extra == null) {
        extra = {};
        node.extra = extra;
      }
      if (enumerable) {
        extra[key] = value;
      } else {
        Object.defineProperty(extra, key, {
          enumerable,
          value
        });
      }
    }
    isContextual(token) {
      return this.state.type === token && !this.state.containsEsc;
    }
    isUnparsedContextual(nameStart, name) {
      const nameEnd = nameStart + name.length;
      if (this.input.slice(nameStart, nameEnd) === name) {
        const nextCh = this.input.charCodeAt(nameEnd);
        return !(isIdentifierChar(nextCh) || (nextCh & 64512) === 55296);
      }
      return false;
    }
    isLookaheadContextual(name) {
      const next = this.nextTokenStart();
      return this.isUnparsedContextual(next, name);
    }
    eatContextual(token) {
      if (this.isContextual(token)) {
        this.next();
        return true;
      }
      return false;
    }
    expectContextual(token, toParseError) {
      if (!this.eatContextual(token)) {
        if (toParseError != null) {
          throw this.raise(toParseError, this.state.startLoc);
        }
        this.unexpected(null, token);
      }
    }
    canInsertSemicolon() {
      return this.match(139) || this.match(8) || this.hasPrecedingLineBreak();
    }
    hasPrecedingLineBreak() {
      return hasNewLine(this.input, this.state.lastTokEndLoc.index, this.state.start);
    }
    hasFollowingLineBreak() {
      return hasNewLine(this.input, this.state.end, this.nextTokenStart());
    }
    isLineTerminator() {
      return this.eat(13) || this.canInsertSemicolon();
    }
    semicolon(allowAsi = true) {
      if (allowAsi ? this.isLineTerminator() : this.eat(13)) return;
      this.raise(Errors.MissingSemicolon, this.state.lastTokEndLoc);
    }
    expect(type, loc) {
      if (!this.eat(type)) {
        this.unexpected(loc, type);
      }
    }
    tryParse(fn, oldState = this.state.clone()) {
      const abortSignal = {
        node: null
      };
      try {
        const node = fn((node = null) => {
          abortSignal.node = node;
          throw abortSignal;
        });
        if (this.state.errors.length > oldState.errors.length) {
          const failState = this.state;
          this.state = oldState;
          this.state.tokensLength = failState.tokensLength;
          return {
            node,
            error: failState.errors[oldState.errors.length],
            thrown: false,
            aborted: false,
            failState
          };
        }
        return {
          node,
          error: null,
          thrown: false,
          aborted: false,
          failState: null
        };
      } catch (error) {
        const failState = this.state;
        this.state = oldState;
        if (error instanceof SyntaxError) {
          return {
            node: null,
            error,
            thrown: true,
            aborted: false,
            failState
          };
        }
        if (error === abortSignal) {
          return {
            node: abortSignal.node,
            error: null,
            thrown: false,
            aborted: true,
            failState
          };
        }
        throw error;
      }
    }
    checkExpressionErrors(refExpressionErrors, andThrow) {
      if (!refExpressionErrors) return false;
      const {
        shorthandAssignLoc,
        doubleProtoLoc,
        privateKeyLoc,
        optionalParametersLoc
      } = refExpressionErrors;
      const hasErrors = !!shorthandAssignLoc || !!doubleProtoLoc || !!optionalParametersLoc || !!privateKeyLoc;
      if (!andThrow) {
        return hasErrors;
      }
      if (shorthandAssignLoc != null) {
        this.raise(Errors.InvalidCoverInitializedName, shorthandAssignLoc);
      }
      if (doubleProtoLoc != null) {
        this.raise(Errors.DuplicateProto, doubleProtoLoc);
      }
      if (privateKeyLoc != null) {
        this.raise(Errors.UnexpectedPrivateField, privateKeyLoc);
      }
      if (optionalParametersLoc != null) {
        this.unexpected(optionalParametersLoc);
      }
    }
    isLiteralPropertyName() {
      return tokenIsLiteralPropertyName(this.state.type);
    }
    isPrivateName(node) {
      return node.type === "PrivateName";
    }
    getPrivateNameSV(node) {
      return node.id.name;
    }
    hasPropertyAsPrivateName(node) {
      return (node.type === "MemberExpression" || node.type === "OptionalMemberExpression") && this.isPrivateName(node.property);
    }
    isObjectProperty(node) {
      return node.type === "ObjectProperty";
    }
    isObjectMethod(node) {
      return node.type === "ObjectMethod";
    }
    initializeScopes(inModule = this.options.sourceType === "module") {
      const oldLabels = this.state.labels;
      this.state.labels = [];
      const oldExportedIdentifiers = this.exportedIdentifiers;
      this.exportedIdentifiers = new Set();
      const oldInModule = this.inModule;
      this.inModule = inModule;
      const oldScope = this.scope;
      const ScopeHandler = this.getScopeHandler();
      this.scope = new ScopeHandler(this, inModule);
      const oldProdParam = this.prodParam;
      this.prodParam = new ProductionParameterHandler();
      const oldClassScope = this.classScope;
      this.classScope = new ClassScopeHandler(this);
      const oldExpressionScope = this.expressionScope;
      this.expressionScope = new ExpressionScopeHandler(this);
      return () => {
        this.state.labels = oldLabels;
        this.exportedIdentifiers = oldExportedIdentifiers;
        this.inModule = oldInModule;
        this.scope = oldScope;
        this.prodParam = oldProdParam;
        this.classScope = oldClassScope;
        this.expressionScope = oldExpressionScope;
      };
    }
    enterInitialScopes() {
      let paramFlags = 0;
      if (this.inModule) {
        paramFlags |= 2;
      }
      this.scope.enter(1);
      this.prodParam.enter(paramFlags);
    }
    checkDestructuringPrivate(refExpressionErrors) {
      const {
        privateKeyLoc
      } = refExpressionErrors;
      if (privateKeyLoc !== null) {
        this.expectPlugin("destructuringPrivate", privateKeyLoc);
      }
    }
  }
  class ExpressionErrors {
    constructor() {
      this.shorthandAssignLoc = null;
      this.doubleProtoLoc = null;
      this.privateKeyLoc = null;
      this.optionalParametersLoc = null;
    }
  }
  class Node {
    constructor(parser, pos, loc) {
      this.type = "";
      this.start = pos;
      this.end = 0;
      this.loc = new SourceLocation(loc);
      if (parser != null && parser.options.ranges) this.range = [pos, 0];
      if (parser != null && parser.filename) this.loc.filename = parser.filename;
    }
  }
  const NodePrototype = Node.prototype;
  {
    NodePrototype.__clone = function () {
      const newNode = new Node(undefined, this.start, this.loc.start);
      const keys = Object.keys(this);
      for (let i = 0, length = keys.length; i < length; i++) {
        const key = keys[i];
        if (key !== "leadingComments" && key !== "trailingComments" && key !== "innerComments") {
          newNode[key] = this[key];
        }
      }
      return newNode;
    };
  }
  function clonePlaceholder(node) {
    return cloneIdentifier(node);
  }
  function cloneIdentifier(node) {
    const {
      type,
      start,
      end,
      loc,
      range,
      extra,
      name
    } = node;
    const cloned = Object.create(NodePrototype);
    cloned.type = type;
    cloned.start = start;
    cloned.end = end;
    cloned.loc = loc;
    cloned.range = range;
    cloned.extra = extra;
    cloned.name = name;
    if (type === "Placeholder") {
      cloned.expectedNode = node.expectedNode;
    }
    return cloned;
  }
  function cloneStringLiteral(node) {
    const {
      type,
      start,
      end,
      loc,
      range,
      extra
    } = node;
    if (type === "Placeholder") {
      return clonePlaceholder(node);
    }
    const cloned = Object.create(NodePrototype);
    cloned.type = type;
    cloned.start = start;
    cloned.end = end;
    cloned.loc = loc;
    cloned.range = range;
    if (node.raw !== undefined) {
      cloned.raw = node.raw;
    } else {
      cloned.extra = extra;
    }
    cloned.value = node.value;
    return cloned;
  }
  class NodeUtils extends UtilParser {
    startNode() {
      const loc = this.state.startLoc;
      return new Node(this, loc.index, loc);
    }
    startNodeAt(loc) {
      return new Node(this, loc.index, loc);
    }
    startNodeAtNode(type) {
      return this.startNodeAt(type.loc.start);
    }
    finishNode(node, type) {
      return this.finishNodeAt(node, type, this.state.lastTokEndLoc);
    }
    finishNodeAt(node, type, endLoc) {
      node.type = type;
      node.end = endLoc.index;
      node.loc.end = endLoc;
      if (this.options.ranges) node.range[1] = endLoc.index;
      if (this.options.attachComment) this.processComment(node);
      return node;
    }
    resetStartLocation(node, startLoc) {
      node.start = startLoc.index;
      node.loc.start = startLoc;
      if (this.options.ranges) node.range[0] = startLoc.index;
    }
    resetEndLocation(node, endLoc = this.state.lastTokEndLoc) {
      node.end = endLoc.index;
      node.loc.end = endLoc;
      if (this.options.ranges) node.range[1] = endLoc.index;
    }
    resetStartLocationFromNode(node, locationNode) {
      this.resetStartLocation(node, locationNode.loc.start);
    }
  }
  const reservedTypes = new Set(["_", "any", "bool", "boolean", "empty", "extends", "false", "interface", "mixed", "null", "number", "static", "string", "true", "typeof", "void"]);
  const FlowErrors = ParseErrorEnum`flow`({
    AmbiguousConditionalArrow: "Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.",
    AmbiguousDeclareModuleKind: "Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.",
    AssignReservedType: ({
      reservedType
    }) => `Cannot overwrite reserved type ${reservedType}.`,
    DeclareClassElement: "The `declare` modifier can only appear on class fields.",
    DeclareClassFieldInitializer: "Initializers are not allowed in fields with the `declare` modifier.",
    DuplicateDeclareModuleExports: "Duplicate `declare module.exports` statement.",
    EnumBooleanMemberNotInitialized: ({
      memberName,
      enumName
    }) => `Boolean enum members need to be initialized. Use either \`${memberName} = true,\` or \`${memberName} = false,\` in enum \`${enumName}\`.`,
    EnumDuplicateMemberName: ({
      memberName,
      enumName
    }) => `Enum member names need to be unique, but the name \`${memberName}\` has already been used before in enum \`${enumName}\`.`,
    EnumInconsistentMemberValues: ({
      enumName
    }) => `Enum \`${enumName}\` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.`,
    EnumInvalidExplicitType: ({
      invalidEnumType,
      enumName
    }) => `Enum type \`${invalidEnumType}\` is not valid. Use one of \`boolean\`, \`number\`, \`string\`, or \`symbol\` in enum \`${enumName}\`.`,
    EnumInvalidExplicitTypeUnknownSupplied: ({
      enumName
    }) => `Supplied enum type is not valid. Use one of \`boolean\`, \`number\`, \`string\`, or \`symbol\` in enum \`${enumName}\`.`,
    EnumInvalidMemberInitializerPrimaryType: ({
      enumName,
      memberName,
      explicitType
    }) => `Enum \`${enumName}\` has type \`${explicitType}\`, so the initializer of \`${memberName}\` needs to be a ${explicitType} literal.`,
    EnumInvalidMemberInitializerSymbolType: ({
      enumName,
      memberName
    }) => `Symbol enum members cannot be initialized. Use \`${memberName},\` in enum \`${enumName}\`.`,
    EnumInvalidMemberInitializerUnknownType: ({
      enumName,
      memberName
    }) => `The enum member initializer for \`${memberName}\` needs to be a literal (either a boolean, number, or string) in enum \`${enumName}\`.`,
    EnumInvalidMemberName: ({
      enumName,
      memberName,
      suggestion
    }) => `Enum member names cannot start with lowercase 'a' through 'z'. Instead of using \`${memberName}\`, consider using \`${suggestion}\`, in enum \`${enumName}\`.`,
    EnumNumberMemberNotInitialized: ({
      enumName,
      memberName
    }) => `Number enum members need to be initialized, e.g. \`${memberName} = 1\` in enum \`${enumName}\`.`,
    EnumStringMemberInconsistentlyInitialized: ({
      enumName
    }) => `String enum members need to consistently either all use initializers, or use no initializers, in enum \`${enumName}\`.`,
    GetterMayNotHaveThisParam: "A getter cannot have a `this` parameter.",
    ImportReflectionHasImportType: "An `import module` declaration can not use `type` or `typeof` keyword.",
    ImportTypeShorthandOnlyInPureImport: "The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.",
    InexactInsideExact: "Explicit inexact syntax cannot appear inside an explicit exact object type.",
    InexactInsideNonObject: "Explicit inexact syntax cannot appear in class or interface definitions.",
    InexactVariance: "Explicit inexact syntax cannot have variance.",
    InvalidNonTypeImportInDeclareModule: "Imports within a `declare module` body must always be `import type` or `import typeof`.",
    MissingTypeParamDefault: "Type parameter declaration needs a default, since a preceding type parameter declaration has a default.",
    NestedDeclareModule: "`declare module` cannot be used inside another `declare module`.",
    NestedFlowComment: "Cannot have a flow comment inside another flow comment.",
    PatternIsOptional: Object.assign({
      message: "A binding pattern parameter cannot be optional in an implementation signature."
    }, {
      reasonCode: "OptionalBindingPattern"
    }),
    SetterMayNotHaveThisParam: "A setter cannot have a `this` parameter.",
    SpreadVariance: "Spread properties cannot have variance.",
    ThisParamAnnotationRequired: "A type annotation is required for the `this` parameter.",
    ThisParamBannedInConstructor: "Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.",
    ThisParamMayNotBeOptional: "The `this` parameter cannot be optional.",
    ThisParamMustBeFirst: "The `this` parameter must be the first function parameter.",
    ThisParamNoDefault: "The `this` parameter may not have a default value.",
    TypeBeforeInitializer: "Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.",
    TypeCastInPattern: "The type cast expression is expected to be wrapped with parenthesis.",
    UnexpectedExplicitInexactInObject: "Explicit inexact syntax must appear at the end of an inexact object.",
    UnexpectedReservedType: ({
      reservedType
    }) => `Unexpected reserved type ${reservedType}.`,
    UnexpectedReservedUnderscore: "`_` is only allowed as a type argument to call or new.",
    UnexpectedSpaceBetweenModuloChecks: "Spaces between `%` and `checks` are not allowed here.",
    UnexpectedSpreadType: "Spread operator cannot appear in class or interface definitions.",
    UnexpectedSubtractionOperand: "Unexpected token, expected \"number\" or \"bigint\".",
    UnexpectedTokenAfterTypeParameter: "Expected an arrow function after this type parameter declaration.",
    UnexpectedTypeParameterBeforeAsyncArrowFunction: "Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.",
    UnsupportedDeclareExportKind: ({
      unsupportedExportKind,
      suggestion
    }) => `\`declare export ${unsupportedExportKind}\` is not supported. Use \`${suggestion}\` instead.`,
    UnsupportedStatementInDeclareModule: "Only declares and type imports are allowed inside declare module.",
    UnterminatedFlowComment: "Unterminated flow-comment."
  });
  function isEsModuleType(bodyElement) {
    return bodyElement.type === "DeclareExportAllDeclaration" || bodyElement.type === "DeclareExportDeclaration" && (!bodyElement.declaration || bodyElement.declaration.type !== "TypeAlias" && bodyElement.declaration.type !== "InterfaceDeclaration");
  }
  function hasTypeImportKind(node) {
    return node.importKind === "type" || node.importKind === "typeof";
  }
  const exportSuggestions = {
    const: "declare export var",
    let: "declare export var",
    type: "export type",
    interface: "export interface"
  };
  function partition(list, test) {
    const list1 = [];
    const list2 = [];
    for (let i = 0; i < list.length; i++) {
      (test(list[i], i, list) ? list1 : list2).push(list[i]);
    }
    return [list1, list2];
  }
  const FLOW_PRAGMA_REGEX = /\*?\s*@((?:no)?flow)\b/;
  var flow = superClass => class FlowParserMixin extends superClass {
    constructor(...args) {
      super(...args);
      this.flowPragma = undefined;
    }
    getScopeHandler() {
      return FlowScopeHandler;
    }
    shouldParseTypes() {
      return this.getPluginOption("flow", "all") || this.flowPragma === "flow";
    }
    shouldParseEnums() {
      return !!this.getPluginOption("flow", "enums");
    }
    finishToken(type, val) {
      if (type !== 133 && type !== 13 && type !== 28) {
        if (this.flowPragma === undefined) {
          this.flowPragma = null;
        }
      }
      super.finishToken(type, val);
    }
    addComment(comment) {
      if (this.flowPragma === undefined) {
        const matches = FLOW_PRAGMA_REGEX.exec(comment.value);
        if (!matches) ;else if (matches[1] === "flow") {
          this.flowPragma = "flow";
        } else if (matches[1] === "noflow") {
          this.flowPragma = "noflow";
        } else {
          throw new Error("Unexpected flow pragma");
        }
      }
      super.addComment(comment);
    }
    flowParseTypeInitialiser(tok) {
      const oldInType = this.state.inType;
      this.state.inType = true;
      this.expect(tok || 14);
      const type = this.flowParseType();
      this.state.inType = oldInType;
      return type;
    }
    flowParsePredicate() {
      const node = this.startNode();
      const moduloLoc = this.state.startLoc;
      this.next();
      this.expectContextual(110);
      if (this.state.lastTokStartLoc.index > moduloLoc.index + 1) {
        this.raise(FlowErrors.UnexpectedSpaceBetweenModuloChecks, moduloLoc);
      }
      if (this.eat(10)) {
        node.value = super.parseExpression();
        this.expect(11);
        return this.finishNode(node, "DeclaredPredicate");
      } else {
        return this.finishNode(node, "InferredPredicate");
      }
    }
    flowParseTypeAndPredicateInitialiser() {
      const oldInType = this.state.inType;
      this.state.inType = true;
      this.expect(14);
      let type = null;
      let predicate = null;
      if (this.match(54)) {
        this.state.inType = oldInType;
        predicate = this.flowParsePredicate();
      } else {
        type = this.flowParseType();
        this.state.inType = oldInType;
        if (this.match(54)) {
          predicate = this.flowParsePredicate();
        }
      }
      return [type, predicate];
    }
    flowParseDeclareClass(node) {
      this.next();
      this.flowParseInterfaceish(node, true);
      return this.finishNode(node, "DeclareClass");
    }
    flowParseDeclareFunction(node) {
      this.next();
      const id = node.id = this.parseIdentifier();
      const typeNode = this.startNode();
      const typeContainer = this.startNode();
      if (this.match(47)) {
        typeNode.typeParameters = this.flowParseTypeParameterDeclaration();
      } else {
        typeNode.typeParameters = null;
      }
      this.expect(10);
      const tmp = this.flowParseFunctionTypeParams();
      typeNode.params = tmp.params;
      typeNode.rest = tmp.rest;
      typeNode.this = tmp._this;
      this.expect(11);
      [typeNode.returnType, node.predicate] = this.flowParseTypeAndPredicateInitialiser();
      typeContainer.typeAnnotation = this.finishNode(typeNode, "FunctionTypeAnnotation");
      id.typeAnnotation = this.finishNode(typeContainer, "TypeAnnotation");
      this.resetEndLocation(id);
      this.semicolon();
      this.scope.declareName(node.id.name, 2048, node.id.loc.start);
      return this.finishNode(node, "DeclareFunction");
    }
    flowParseDeclare(node, insideModule) {
      if (this.match(80)) {
        return this.flowParseDeclareClass(node);
      } else if (this.match(68)) {
        return this.flowParseDeclareFunction(node);
      } else if (this.match(74)) {
        return this.flowParseDeclareVariable(node);
      } else if (this.eatContextual(127)) {
        if (this.match(16)) {
          return this.flowParseDeclareModuleExports(node);
        } else {
          if (insideModule) {
            this.raise(FlowErrors.NestedDeclareModule, this.state.lastTokStartLoc);
          }
          return this.flowParseDeclareModule(node);
        }
      } else if (this.isContextual(130)) {
        return this.flowParseDeclareTypeAlias(node);
      } else if (this.isContextual(131)) {
        return this.flowParseDeclareOpaqueType(node);
      } else if (this.isContextual(129)) {
        return this.flowParseDeclareInterface(node);
      } else if (this.match(82)) {
        return this.flowParseDeclareExportDeclaration(node, insideModule);
      } else {
        this.unexpected();
      }
    }
    flowParseDeclareVariable(node) {
      this.next();
      node.id = this.flowParseTypeAnnotatableIdentifier(true);
      this.scope.declareName(node.id.name, 5, node.id.loc.start);
      this.semicolon();
      return this.finishNode(node, "DeclareVariable");
    }
    flowParseDeclareModule(node) {
      this.scope.enter(0);
      if (this.match(133)) {
        node.id = super.parseExprAtom();
      } else {
        node.id = this.parseIdentifier();
      }
      const bodyNode = node.body = this.startNode();
      const body = bodyNode.body = [];
      this.expect(5);
      while (!this.match(8)) {
        let bodyNode = this.startNode();
        if (this.match(83)) {
          this.next();
          if (!this.isContextual(130) && !this.match(87)) {
            this.raise(FlowErrors.InvalidNonTypeImportInDeclareModule, this.state.lastTokStartLoc);
          }
          super.parseImport(bodyNode);
        } else {
          this.expectContextual(125, FlowErrors.UnsupportedStatementInDeclareModule);
          bodyNode = this.flowParseDeclare(bodyNode, true);
        }
        body.push(bodyNode);
      }
      this.scope.exit();
      this.expect(8);
      this.finishNode(bodyNode, "BlockStatement");
      let kind = null;
      let hasModuleExport = false;
      body.forEach(bodyElement => {
        if (isEsModuleType(bodyElement)) {
          if (kind === "CommonJS") {
            this.raise(FlowErrors.AmbiguousDeclareModuleKind, bodyElement);
          }
          kind = "ES";
        } else if (bodyElement.type === "DeclareModuleExports") {
          if (hasModuleExport) {
            this.raise(FlowErrors.DuplicateDeclareModuleExports, bodyElement);
          }
          if (kind === "ES") {
            this.raise(FlowErrors.AmbiguousDeclareModuleKind, bodyElement);
          }
          kind = "CommonJS";
          hasModuleExport = true;
        }
      });
      node.kind = kind || "CommonJS";
      return this.finishNode(node, "DeclareModule");
    }
    flowParseDeclareExportDeclaration(node, insideModule) {
      this.expect(82);
      if (this.eat(65)) {
        if (this.match(68) || this.match(80)) {
          node.declaration = this.flowParseDeclare(this.startNode());
        } else {
          node.declaration = this.flowParseType();
          this.semicolon();
        }
        node.default = true;
        return this.finishNode(node, "DeclareExportDeclaration");
      } else {
        if (this.match(75) || this.isLet() || (this.isContextual(130) || this.isContextual(129)) && !insideModule) {
          const label = this.state.value;
          throw this.raise(FlowErrors.UnsupportedDeclareExportKind, this.state.startLoc, {
            unsupportedExportKind: label,
            suggestion: exportSuggestions[label]
          });
        }
        if (this.match(74) || this.match(68) || this.match(80) || this.isContextual(131)) {
          node.declaration = this.flowParseDeclare(this.startNode());
          node.default = false;
          return this.finishNode(node, "DeclareExportDeclaration");
        } else if (this.match(55) || this.match(5) || this.isContextual(129) || this.isContextual(130) || this.isContextual(131)) {
          node = this.parseExport(node, null);
          if (node.type === "ExportNamedDeclaration") {
            node.type = "ExportDeclaration";
            node.default = false;
            delete node.exportKind;
          }
          node.type = "Declare" + node.type;
          return node;
        }
      }
      this.unexpected();
    }
    flowParseDeclareModuleExports(node) {
      this.next();
      this.expectContextual(111);
      node.typeAnnotation = this.flowParseTypeAnnotation();
      this.semicolon();
      return this.finishNode(node, "DeclareModuleExports");
    }
    flowParseDeclareTypeAlias(node) {
      this.next();
      const finished = this.flowParseTypeAlias(node);
      finished.type = "DeclareTypeAlias";
      return finished;
    }
    flowParseDeclareOpaqueType(node) {
      this.next();
      const finished = this.flowParseOpaqueType(node, true);
      finished.type = "DeclareOpaqueType";
      return finished;
    }
    flowParseDeclareInterface(node) {
      this.next();
      this.flowParseInterfaceish(node, false);
      return this.finishNode(node, "DeclareInterface");
    }
    flowParseInterfaceish(node, isClass) {
      node.id = this.flowParseRestrictedIdentifier(!isClass, true);
      this.scope.declareName(node.id.name, isClass ? 17 : 8201, node.id.loc.start);
      if (this.match(47)) {
        node.typeParameters = this.flowParseTypeParameterDeclaration();
      } else {
        node.typeParameters = null;
      }
      node.extends = [];
      if (this.eat(81)) {
        do {
          node.extends.push(this.flowParseInterfaceExtends());
        } while (!isClass && this.eat(12));
      }
      if (isClass) {
        node.implements = [];
        node.mixins = [];
        if (this.eatContextual(117)) {
          do {
            node.mixins.push(this.flowParseInterfaceExtends());
          } while (this.eat(12));
        }
        if (this.eatContextual(113)) {
          do {
            node.implements.push(this.flowParseInterfaceExtends());
          } while (this.eat(12));
        }
      }
      node.body = this.flowParseObjectType({
        allowStatic: isClass,
        allowExact: false,
        allowSpread: false,
        allowProto: isClass,
        allowInexact: false
      });
    }
    flowParseInterfaceExtends() {
      const node = this.startNode();
      node.id = this.flowParseQualifiedTypeIdentifier();
      if (this.match(47)) {
        node.typeParameters = this.flowParseTypeParameterInstantiation();
      } else {
        node.typeParameters = null;
      }
      return this.finishNode(node, "InterfaceExtends");
    }
    flowParseInterface(node) {
      this.flowParseInterfaceish(node, false);
      return this.finishNode(node, "InterfaceDeclaration");
    }
    checkNotUnderscore(word) {
      if (word === "_") {
        this.raise(FlowErrors.UnexpectedReservedUnderscore, this.state.startLoc);
      }
    }
    checkReservedType(word, startLoc, declaration) {
      if (!reservedTypes.has(word)) return;
      this.raise(declaration ? FlowErrors.AssignReservedType : FlowErrors.UnexpectedReservedType, startLoc, {
        reservedType: word
      });
    }
    flowParseRestrictedIdentifier(liberal, declaration) {
      this.checkReservedType(this.state.value, this.state.startLoc, declaration);
      return this.parseIdentifier(liberal);
    }
    flowParseTypeAlias(node) {
      node.id = this.flowParseRestrictedIdentifier(false, true);
      this.scope.declareName(node.id.name, 8201, node.id.loc.start);
      if (this.match(47)) {
        node.typeParameters = this.flowParseTypeParameterDeclaration();
      } else {
        node.typeParameters = null;
      }
      node.right = this.flowParseTypeInitialiser(29);
      this.semicolon();
      return this.finishNode(node, "TypeAlias");
    }
    flowParseOpaqueType(node, declare) {
      this.expectContextual(130);
      node.id = this.flowParseRestrictedIdentifier(true, true);
      this.scope.declareName(node.id.name, 8201, node.id.loc.start);
      if (this.match(47)) {
        node.typeParameters = this.flowParseTypeParameterDeclaration();
      } else {
        node.typeParameters = null;
      }
      node.supertype = null;
      if (this.match(14)) {
        node.supertype = this.flowParseTypeInitialiser(14);
      }
      node.impltype = null;
      if (!declare) {
        node.impltype = this.flowParseTypeInitialiser(29);
      }
      this.semicolon();
      return this.finishNode(node, "OpaqueType");
    }
    flowParseTypeParameter(requireDefault = false) {
      const nodeStartLoc = this.state.startLoc;
      const node = this.startNode();
      const variance = this.flowParseVariance();
      const ident = this.flowParseTypeAnnotatableIdentifier();
      node.name = ident.name;
      node.variance = variance;
      node.bound = ident.typeAnnotation;
      if (this.match(29)) {
        this.eat(29);
        node.default = this.flowParseType();
      } else {
        if (requireDefault) {
          this.raise(FlowErrors.MissingTypeParamDefault, nodeStartLoc);
        }
      }
      return this.finishNode(node, "TypeParameter");
    }
    flowParseTypeParameterDeclaration() {
      const oldInType = this.state.inType;
      const node = this.startNode();
      node.params = [];
      this.state.inType = true;
      if (this.match(47) || this.match(142)) {
        this.next();
      } else {
        this.unexpected();
      }
      let defaultRequired = false;
      do {
        const typeParameter = this.flowParseTypeParameter(defaultRequired);
        node.params.push(typeParameter);
        if (typeParameter.default) {
          defaultRequired = true;
        }
        if (!this.match(48)) {
          this.expect(12);
        }
      } while (!this.match(48));
      this.expect(48);
      this.state.inType = oldInType;
      return this.finishNode(node, "TypeParameterDeclaration");
    }
    flowParseTypeParameterInstantiation() {
      const node = this.startNode();
      const oldInType = this.state.inType;
      node.params = [];
      this.state.inType = true;
      this.expect(47);
      const oldNoAnonFunctionType = this.state.noAnonFunctionType;
      this.state.noAnonFunctionType = false;
      while (!this.match(48)) {
        node.params.push(this.flowParseType());
        if (!this.match(48)) {
          this.expect(12);
        }
      }
      this.state.noAnonFunctionType = oldNoAnonFunctionType;
      this.expect(48);
      this.state.inType = oldInType;
      return this.finishNode(node, "TypeParameterInstantiation");
    }
    flowParseTypeParameterInstantiationCallOrNew() {
      const node = this.startNode();
      const oldInType = this.state.inType;
      node.params = [];
      this.state.inType = true;
      this.expect(47);
      while (!this.match(48)) {
        node.params.push(this.flowParseTypeOrImplicitInstantiation());
        if (!this.match(48)) {
          this.expect(12);
        }
      }
      this.expect(48);
      this.state.inType = oldInType;
      return this.finishNode(node, "TypeParameterInstantiation");
    }
    flowParseInterfaceType() {
      const node = this.startNode();
      this.expectContextual(129);
      node.extends = [];
      if (this.eat(81)) {
        do {
          node.extends.push(this.flowParseInterfaceExtends());
        } while (this.eat(12));
      }
      node.body = this.flowParseObjectType({
        allowStatic: false,
        allowExact: false,
        allowSpread: false,
        allowProto: false,
        allowInexact: false
      });
      return this.finishNode(node, "InterfaceTypeAnnotation");
    }
    flowParseObjectPropertyKey() {
      return this.match(134) || this.match(133) ? super.parseExprAtom() : this.parseIdentifier(true);
    }
    flowParseObjectTypeIndexer(node, isStatic, variance) {
      node.static = isStatic;
      if (this.lookahead().type === 14) {
        node.id = this.flowParseObjectPropertyKey();
        node.key = this.flowParseTypeInitialiser();
      } else {
        node.id = null;
        node.key = this.flowParseType();
      }
      this.expect(3);
      node.value = this.flowParseTypeInitialiser();
      node.variance = variance;
      return this.finishNode(node, "ObjectTypeIndexer");
    }
    flowParseObjectTypeInternalSlot(node, isStatic) {
      node.static = isStatic;
      node.id = this.flowParseObjectPropertyKey();
      this.expect(3);
      this.expect(3);
      if (this.match(47) || this.match(10)) {
        node.method = true;
        node.optional = false;
        node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.loc.start));
      } else {
        node.method = false;
        if (this.eat(17)) {
          node.optional = true;
        }
        node.value = this.flowParseTypeInitialiser();
      }
      return this.finishNode(node, "ObjectTypeInternalSlot");
    }
    flowParseObjectTypeMethodish(node) {
      node.params = [];
      node.rest = null;
      node.typeParameters = null;
      node.this = null;
      if (this.match(47)) {
        node.typeParameters = this.flowParseTypeParameterDeclaration();
      }
      this.expect(10);
      if (this.match(78)) {
        node.this = this.flowParseFunctionTypeParam(true);
        node.this.name = null;
        if (!this.match(11)) {
          this.expect(12);
        }
      }
      while (!this.match(11) && !this.match(21)) {
        node.params.push(this.flowParseFunctionTypeParam(false));
        if (!this.match(11)) {
          this.expect(12);
        }
      }
      if (this.eat(21)) {
        node.rest = this.flowParseFunctionTypeParam(false);
      }
      this.expect(11);
      node.returnType = this.flowParseTypeInitialiser();
      return this.finishNode(node, "FunctionTypeAnnotation");
    }
    flowParseObjectTypeCallProperty(node, isStatic) {
      const valueNode = this.startNode();
      node.static = isStatic;
      node.value = this.flowParseObjectTypeMethodish(valueNode);
      return this.finishNode(node, "ObjectTypeCallProperty");
    }
    flowParseObjectType({
      allowStatic,
      allowExact,
      allowSpread,
      allowProto,
      allowInexact
    }) {
      const oldInType = this.state.inType;
      this.state.inType = true;
      const nodeStart = this.startNode();
      nodeStart.callProperties = [];
      nodeStart.properties = [];
      nodeStart.indexers = [];
      nodeStart.internalSlots = [];
      let endDelim;
      let exact;
      let inexact = false;
      if (allowExact && this.match(6)) {
        this.expect(6);
        endDelim = 9;
        exact = true;
      } else {
        this.expect(5);
        endDelim = 8;
        exact = false;
      }
      nodeStart.exact = exact;
      while (!this.match(endDelim)) {
        let isStatic = false;
        let protoStartLoc = null;
        let inexactStartLoc = null;
        const node = this.startNode();
        if (allowProto && this.isContextual(118)) {
          const lookahead = this.lookahead();
          if (lookahead.type !== 14 && lookahead.type !== 17) {
            this.next();
            protoStartLoc = this.state.startLoc;
            allowStatic = false;
          }
        }
        if (allowStatic && this.isContextual(106)) {
          const lookahead = this.lookahead();
          if (lookahead.type !== 14 && lookahead.type !== 17) {
            this.next();
            isStatic = true;
          }
        }
        const variance = this.flowParseVariance();
        if (this.eat(0)) {
          if (protoStartLoc != null) {
            this.unexpected(protoStartLoc);
          }
          if (this.eat(0)) {
            if (variance) {
              this.unexpected(variance.loc.start);
            }
            nodeStart.internalSlots.push(this.flowParseObjectTypeInternalSlot(node, isStatic));
          } else {
            nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic, variance));
          }
        } else if (this.match(10) || this.match(47)) {
          if (protoStartLoc != null) {
            this.unexpected(protoStartLoc);
          }
          if (variance) {
            this.unexpected(variance.loc.start);
          }
          nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, isStatic));
        } else {
          let kind = "init";
          if (this.isContextual(99) || this.isContextual(104)) {
            const lookahead = this.lookahead();
            if (tokenIsLiteralPropertyName(lookahead.type)) {
              kind = this.state.value;
              this.next();
            }
          }
          const propOrInexact = this.flowParseObjectTypeProperty(node, isStatic, protoStartLoc, variance, kind, allowSpread, allowInexact != null ? allowInexact : !exact);
          if (propOrInexact === null) {
            inexact = true;
            inexactStartLoc = this.state.lastTokStartLoc;
          } else {
            nodeStart.properties.push(propOrInexact);
          }
        }
        this.flowObjectTypeSemicolon();
        if (inexactStartLoc && !this.match(8) && !this.match(9)) {
          this.raise(FlowErrors.UnexpectedExplicitInexactInObject, inexactStartLoc);
        }
      }
      this.expect(endDelim);
      if (allowSpread) {
        nodeStart.inexact = inexact;
      }
      const out = this.finishNode(nodeStart, "ObjectTypeAnnotation");
      this.state.inType = oldInType;
      return out;
    }
    flowParseObjectTypeProperty(node, isStatic, protoStartLoc, variance, kind, allowSpread, allowInexact) {
      if (this.eat(21)) {
        const isInexactToken = this.match(12) || this.match(13) || this.match(8) || this.match(9);
        if (isInexactToken) {
          if (!allowSpread) {
            this.raise(FlowErrors.InexactInsideNonObject, this.state.lastTokStartLoc);
          } else if (!allowInexact) {
            this.raise(FlowErrors.InexactInsideExact, this.state.lastTokStartLoc);
          }
          if (variance) {
            this.raise(FlowErrors.InexactVariance, variance);
          }
          return null;
        }
        if (!allowSpread) {
          this.raise(FlowErrors.UnexpectedSpreadType, this.state.lastTokStartLoc);
        }
        if (protoStartLoc != null) {
          this.unexpected(protoStartLoc);
        }
        if (variance) {
          this.raise(FlowErrors.SpreadVariance, variance);
        }
        node.argument = this.flowParseType();
        return this.finishNode(node, "ObjectTypeSpreadProperty");
      } else {
        node.key = this.flowParseObjectPropertyKey();
        node.static = isStatic;
        node.proto = protoStartLoc != null;
        node.kind = kind;
        let optional = false;
        if (this.match(47) || this.match(10)) {
          node.method = true;
          if (protoStartLoc != null) {
            this.unexpected(protoStartLoc);
          }
          if (variance) {
            this.unexpected(variance.loc.start);
          }
          node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.loc.start));
          if (kind === "get" || kind === "set") {
            this.flowCheckGetterSetterParams(node);
          }
          if (!allowSpread && node.key.name === "constructor" && node.value.this) {
            this.raise(FlowErrors.ThisParamBannedInConstructor, node.value.this);
          }
        } else {
          if (kind !== "init") this.unexpected();
          node.method = false;
          if (this.eat(17)) {
            optional = true;
          }
          node.value = this.flowParseTypeInitialiser();
          node.variance = variance;
        }
        node.optional = optional;
        return this.finishNode(node, "ObjectTypeProperty");
      }
    }
    flowCheckGetterSetterParams(property) {
      const paramCount = property.kind === "get" ? 0 : 1;
      const length = property.value.params.length + (property.value.rest ? 1 : 0);
      if (property.value.this) {
        this.raise(property.kind === "get" ? FlowErrors.GetterMayNotHaveThisParam : FlowErrors.SetterMayNotHaveThisParam, property.value.this);
      }
      if (length !== paramCount) {
        this.raise(property.kind === "get" ? Errors.BadGetterArity : Errors.BadSetterArity, property);
      }
      if (property.kind === "set" && property.value.rest) {
        this.raise(Errors.BadSetterRestParameter, property);
      }
    }
    flowObjectTypeSemicolon() {
      if (!this.eat(13) && !this.eat(12) && !this.match(8) && !this.match(9)) {
        this.unexpected();
      }
    }
    flowParseQualifiedTypeIdentifier(startLoc, id) {
      var _startLoc;
      (_startLoc = startLoc) != null ? _startLoc : startLoc = this.state.startLoc;
      let node = id || this.flowParseRestrictedIdentifier(true);
      while (this.eat(16)) {
        const node2 = this.startNodeAt(startLoc);
        node2.qualification = node;
        node2.id = this.flowParseRestrictedIdentifier(true);
        node = this.finishNode(node2, "QualifiedTypeIdentifier");
      }
      return node;
    }
    flowParseGenericType(startLoc, id) {
      const node = this.startNodeAt(startLoc);
      node.typeParameters = null;
      node.id = this.flowParseQualifiedTypeIdentifier(startLoc, id);
      if (this.match(47)) {
        node.typeParameters = this.flowParseTypeParameterInstantiation();
      }
      return this.finishNode(node, "GenericTypeAnnotation");
    }
    flowParseTypeofType() {
      const node = this.startNode();
      this.expect(87);
      node.argument = this.flowParsePrimaryType();
      return this.finishNode(node, "TypeofTypeAnnotation");
    }
    flowParseTupleType() {
      const node = this.startNode();
      node.types = [];
      this.expect(0);
      while (this.state.pos < this.length && !this.match(3)) {
        node.types.push(this.flowParseType());
        if (this.match(3)) break;
        this.expect(12);
      }
      this.expect(3);
      return this.finishNode(node, "TupleTypeAnnotation");
    }
    flowParseFunctionTypeParam(first) {
      let name = null;
      let optional = false;
      let typeAnnotation = null;
      const node = this.startNode();
      const lh = this.lookahead();
      const isThis = this.state.type === 78;
      if (lh.type === 14 || lh.type === 17) {
        if (isThis && !first) {
          this.raise(FlowErrors.ThisParamMustBeFirst, node);
        }
        name = this.parseIdentifier(isThis);
        if (this.eat(17)) {
          optional = true;
          if (isThis) {
            this.raise(FlowErrors.ThisParamMayNotBeOptional, node);
          }
        }
        typeAnnotation = this.flowParseTypeInitialiser();
      } else {
        typeAnnotation = this.flowParseType();
      }
      node.name = name;
      node.optional = optional;
      node.typeAnnotation = typeAnnotation;
      return this.finishNode(node, "FunctionTypeParam");
    }
    reinterpretTypeAsFunctionTypeParam(type) {
      const node = this.startNodeAt(type.loc.start);
      node.name = null;
      node.optional = false;
      node.typeAnnotation = type;
      return this.finishNode(node, "FunctionTypeParam");
    }
    flowParseFunctionTypeParams(params = []) {
      let rest = null;
      let _this = null;
      if (this.match(78)) {
        _this = this.flowParseFunctionTypeParam(true);
        _this.name = null;
        if (!this.match(11)) {
          this.expect(12);
        }
      }
      while (!this.match(11) && !this.match(21)) {
        params.push(this.flowParseFunctionTypeParam(false));
        if (!this.match(11)) {
          this.expect(12);
        }
      }
      if (this.eat(21)) {
        rest = this.flowParseFunctionTypeParam(false);
      }
      return {
        params,
        rest,
        _this
      };
    }
    flowIdentToTypeAnnotation(startLoc, node, id) {
      switch (id.name) {
        case "any":
          return this.finishNode(node, "AnyTypeAnnotation");
        case "bool":
        case "boolean":
          return this.finishNode(node, "BooleanTypeAnnotation");
        case "mixed":
          return this.finishNode(node, "MixedTypeAnnotation");
        case "empty":
          return this.finishNode(node, "EmptyTypeAnnotation");
        case "number":
          return this.finishNode(node, "NumberTypeAnnotation");
        case "string":
          return this.finishNode(node, "StringTypeAnnotation");
        case "symbol":
          return this.finishNode(node, "SymbolTypeAnnotation");
        default:
          this.checkNotUnderscore(id.name);
          return this.flowParseGenericType(startLoc, id);
      }
    }
    flowParsePrimaryType() {
      const startLoc = this.state.startLoc;
      const node = this.startNode();
      let tmp;
      let type;
      let isGroupedType = false;
      const oldNoAnonFunctionType = this.state.noAnonFunctionType;
      switch (this.state.type) {
        case 5:
          return this.flowParseObjectType({
            allowStatic: false,
            allowExact: false,
            allowSpread: true,
            allowProto: false,
            allowInexact: true
          });
        case 6:
          return this.flowParseObjectType({
            allowStatic: false,
            allowExact: true,
            allowSpread: true,
            allowProto: false,
            allowInexact: false
          });
        case 0:
          this.state.noAnonFunctionType = false;
          type = this.flowParseTupleType();
          this.state.noAnonFunctionType = oldNoAnonFunctionType;
          return type;
        case 47:
          {
            const node = this.startNode();
            node.typeParameters = this.flowParseTypeParameterDeclaration();
            this.expect(10);
            tmp = this.flowParseFunctionTypeParams();
            node.params = tmp.params;
            node.rest = tmp.rest;
            node.this = tmp._this;
            this.expect(11);
            this.expect(19);
            node.returnType = this.flowParseType();
            return this.finishNode(node, "FunctionTypeAnnotation");
          }
        case 10:
          {
            const node = this.startNode();
            this.next();
            if (!this.match(11) && !this.match(21)) {
              if (tokenIsIdentifier(this.state.type) || this.match(78)) {
                const token = this.lookahead().type;
                isGroupedType = token !== 17 && token !== 14;
              } else {
                isGroupedType = true;
              }
            }
            if (isGroupedType) {
              this.state.noAnonFunctionType = false;
              type = this.flowParseType();
              this.state.noAnonFunctionType = oldNoAnonFunctionType;
              if (this.state.noAnonFunctionType || !(this.match(12) || this.match(11) && this.lookahead().type === 19)) {
                this.expect(11);
                return type;
              } else {
                this.eat(12);
              }
            }
            if (type) {
              tmp = this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(type)]);
            } else {
              tmp = this.flowParseFunctionTypeParams();
            }
            node.params = tmp.params;
            node.rest = tmp.rest;
            node.this = tmp._this;
            this.expect(11);
            this.expect(19);
            node.returnType = this.flowParseType();
            node.typeParameters = null;
            return this.finishNode(node, "FunctionTypeAnnotation");
          }
        case 133:
          return this.parseLiteral(this.state.value, "StringLiteralTypeAnnotation");
        case 85:
        case 86:
          node.value = this.match(85);
          this.next();
          return this.finishNode(node, "BooleanLiteralTypeAnnotation");
        case 53:
          if (this.state.value === "-") {
            this.next();
            if (this.match(134)) {
              return this.parseLiteralAtNode(-this.state.value, "NumberLiteralTypeAnnotation", node);
            }
            if (this.match(135)) {
              return this.parseLiteralAtNode(-this.state.value, "BigIntLiteralTypeAnnotation", node);
            }
            throw this.raise(FlowErrors.UnexpectedSubtractionOperand, this.state.startLoc);
          }
          this.unexpected();
          return;
        case 134:
          return this.parseLiteral(this.state.value, "NumberLiteralTypeAnnotation");
        case 135:
          return this.parseLiteral(this.state.value, "BigIntLiteralTypeAnnotation");
        case 88:
          this.next();
          return this.finishNode(node, "VoidTypeAnnotation");
        case 84:
          this.next();
          return this.finishNode(node, "NullLiteralTypeAnnotation");
        case 78:
          this.next();
          return this.finishNode(node, "ThisTypeAnnotation");
        case 55:
          this.next();
          return this.finishNode(node, "ExistsTypeAnnotation");
        case 87:
          return this.flowParseTypeofType();
        default:
          if (tokenIsKeyword(this.state.type)) {
            const label = tokenLabelName(this.state.type);
            this.next();
            return super.createIdentifier(node, label);
          } else if (tokenIsIdentifier(this.state.type)) {
            if (this.isContextual(129)) {
              return this.flowParseInterfaceType();
            }
            return this.flowIdentToTypeAnnotation(startLoc, node, this.parseIdentifier());
          }
      }
      this.unexpected();
    }
    flowParsePostfixType() {
      const startLoc = this.state.startLoc;
      let type = this.flowParsePrimaryType();
      let seenOptionalIndexedAccess = false;
      while ((this.match(0) || this.match(18)) && !this.canInsertSemicolon()) {
        const node = this.startNodeAt(startLoc);
        const optional = this.eat(18);
        seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;
        this.expect(0);
        if (!optional && this.match(3)) {
          node.elementType = type;
          this.next();
          type = this.finishNode(node, "ArrayTypeAnnotation");
        } else {
          node.objectType = type;
          node.indexType = this.flowParseType();
          this.expect(3);
          if (seenOptionalIndexedAccess) {
            node.optional = optional;
            type = this.finishNode(node, "OptionalIndexedAccessType");
          } else {
            type = this.finishNode(node, "IndexedAccessType");
          }
        }
      }
      return type;
    }
    flowParsePrefixType() {
      const node = this.startNode();
      if (this.eat(17)) {
        node.typeAnnotation = this.flowParsePrefixType();
        return this.finishNode(node, "NullableTypeAnnotation");
      } else {
        return this.flowParsePostfixType();
      }
    }
    flowParseAnonFunctionWithoutParens() {
      const param = this.flowParsePrefixType();
      if (!this.state.noAnonFunctionType && this.eat(19)) {
        const node = this.startNodeAt(param.loc.start);
        node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];
        node.rest = null;
        node.this = null;
        node.returnType = this.flowParseType();
        node.typeParameters = null;
        return this.finishNode(node, "FunctionTypeAnnotation");
      }
      return param;
    }
    flowParseIntersectionType() {
      const node = this.startNode();
      this.eat(45);
      const type = this.flowParseAnonFunctionWithoutParens();
      node.types = [type];
      while (this.eat(45)) {
        node.types.push(this.flowParseAnonFunctionWithoutParens());
      }
      return node.types.length === 1 ? type : this.finishNode(node, "IntersectionTypeAnnotation");
    }
    flowParseUnionType() {
      const node = this.startNode();
      this.eat(43);
      const type = this.flowParseIntersectionType();
      node.types = [type];
      while (this.eat(43)) {
        node.types.push(this.flowParseIntersectionType());
      }
      return node.types.length === 1 ? type : this.finishNode(node, "UnionTypeAnnotation");
    }
    flowParseType() {
      const oldInType = this.state.inType;
      this.state.inType = true;
      const type = this.flowParseUnionType();
      this.state.inType = oldInType;
      return type;
    }
    flowParseTypeOrImplicitInstantiation() {
      if (this.state.type === 132 && this.state.value === "_") {
        const startLoc = this.state.startLoc;
        const node = this.parseIdentifier();
        return this.flowParseGenericType(startLoc, node);
      } else {
        return this.flowParseType();
      }
    }
    flowParseTypeAnnotation() {
      const node = this.startNode();
      node.typeAnnotation = this.flowParseTypeInitialiser();
      return this.finishNode(node, "TypeAnnotation");
    }
    flowParseTypeAnnotatableIdentifier(allowPrimitiveOverride) {
      const ident = allowPrimitiveOverride ? this.parseIdentifier() : this.flowParseRestrictedIdentifier();
      if (this.match(14)) {
        ident.typeAnnotation = this.flowParseTypeAnnotation();
        this.resetEndLocation(ident);
      }
      return ident;
    }
    typeCastToParameter(node) {
      node.expression.typeAnnotation = node.typeAnnotation;
      this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);
      return node.expression;
    }
    flowParseVariance() {
      let variance = null;
      if (this.match(53)) {
        variance = this.startNode();
        if (this.state.value === "+") {
          variance.kind = "plus";
        } else {
          variance.kind = "minus";
        }
        this.next();
        return this.finishNode(variance, "Variance");
      }
      return variance;
    }
    parseFunctionBody(node, allowExpressionBody, isMethod = false) {
      if (allowExpressionBody) {
        this.forwardNoArrowParamsConversionAt(node, () => super.parseFunctionBody(node, true, isMethod));
        return;
      }
      super.parseFunctionBody(node, false, isMethod);
    }
    parseFunctionBodyAndFinish(node, type, isMethod = false) {
      if (this.match(14)) {
        const typeNode = this.startNode();
        [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();
        node.returnType = typeNode.typeAnnotation ? this.finishNode(typeNode, "TypeAnnotation") : null;
      }
      return super.parseFunctionBodyAndFinish(node, type, isMethod);
    }
    parseStatementLike(flags) {
      if (this.state.strict && this.isContextual(129)) {
        const lookahead = this.lookahead();
        if (tokenIsKeywordOrIdentifier(lookahead.type)) {
          const node = this.startNode();
          this.next();
          return this.flowParseInterface(node);
        }
      } else if (this.shouldParseEnums() && this.isContextual(126)) {
        const node = this.startNode();
        this.next();
        return this.flowParseEnumDeclaration(node);
      }
      const stmt = super.parseStatementLike(flags);
      if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {
        this.flowPragma = null;
      }
      return stmt;
    }
    parseExpressionStatement(node, expr, decorators) {
      if (expr.type === "Identifier") {
        if (expr.name === "declare") {
          if (this.match(80) || tokenIsIdentifier(this.state.type) || this.match(68) || this.match(74) || this.match(82)) {
            return this.flowParseDeclare(node);
          }
        } else if (tokenIsIdentifier(this.state.type)) {
          if (expr.name === "interface") {
            return this.flowParseInterface(node);
          } else if (expr.name === "type") {
            return this.flowParseTypeAlias(node);
          } else if (expr.name === "opaque") {
            return this.flowParseOpaqueType(node, false);
          }
        }
      }
      return super.parseExpressionStatement(node, expr, decorators);
    }
    shouldParseExportDeclaration() {
      const {
        type
      } = this.state;
      if (tokenIsFlowInterfaceOrTypeOrOpaque(type) || this.shouldParseEnums() && type === 126) {
        return !this.state.containsEsc;
      }
      return super.shouldParseExportDeclaration();
    }
    isExportDefaultSpecifier() {
      const {
        type
      } = this.state;
      if (tokenIsFlowInterfaceOrTypeOrOpaque(type) || this.shouldParseEnums() && type === 126) {
        return this.state.containsEsc;
      }
      return super.isExportDefaultSpecifier();
    }
    parseExportDefaultExpression() {
      if (this.shouldParseEnums() && this.isContextual(126)) {
        const node = this.startNode();
        this.next();
        return this.flowParseEnumDeclaration(node);
      }
      return super.parseExportDefaultExpression();
    }
    parseConditional(expr, startLoc, refExpressionErrors) {
      if (!this.match(17)) return expr;
      if (this.state.maybeInArrowParameters) {
        const nextCh = this.lookaheadCharCode();
        if (nextCh === 44 || nextCh === 61 || nextCh === 58 || nextCh === 41) {
          this.setOptionalParametersError(refExpressionErrors);
          return expr;
        }
      }
      this.expect(17);
      const state = this.state.clone();
      const originalNoArrowAt = this.state.noArrowAt;
      const node = this.startNodeAt(startLoc);
      let {
        consequent,
        failed
      } = this.tryParseConditionalConsequent();
      let [valid, invalid] = this.getArrowLikeExpressions(consequent);
      if (failed || invalid.length > 0) {
        const noArrowAt = [...originalNoArrowAt];
        if (invalid.length > 0) {
          this.state = state;
          this.state.noArrowAt = noArrowAt;
          for (let i = 0; i < invalid.length; i++) {
            noArrowAt.push(invalid[i].start);
          }
          ({
            consequent,
            failed
          } = this.tryParseConditionalConsequent());
          [valid, invalid] = this.getArrowLikeExpressions(consequent);
        }
        if (failed && valid.length > 1) {
          this.raise(FlowErrors.AmbiguousConditionalArrow, state.startLoc);
        }
        if (failed && valid.length === 1) {
          this.state = state;
          noArrowAt.push(valid[0].start);
          this.state.noArrowAt = noArrowAt;
          ({
            consequent,
            failed
          } = this.tryParseConditionalConsequent());
        }
      }
      this.getArrowLikeExpressions(consequent, true);
      this.state.noArrowAt = originalNoArrowAt;
      this.expect(14);
      node.test = expr;
      node.consequent = consequent;
      node.alternate = this.forwardNoArrowParamsConversionAt(node, () => this.parseMaybeAssign(undefined, undefined));
      return this.finishNode(node, "ConditionalExpression");
    }
    tryParseConditionalConsequent() {
      this.state.noArrowParamsConversionAt.push(this.state.start);
      const consequent = this.parseMaybeAssignAllowIn();
      const failed = !this.match(14);
      this.state.noArrowParamsConversionAt.pop();
      return {
        consequent,
        failed
      };
    }
    getArrowLikeExpressions(node, disallowInvalid) {
      const stack = [node];
      const arrows = [];
      while (stack.length !== 0) {
        const node = stack.pop();
        if (node.type === "ArrowFunctionExpression" && node.body.type !== "BlockStatement") {
          if (node.typeParameters || !node.returnType) {
            this.finishArrowValidation(node);
          } else {
            arrows.push(node);
          }
          stack.push(node.body);
        } else if (node.type === "ConditionalExpression") {
          stack.push(node.consequent);
          stack.push(node.alternate);
        }
      }
      if (disallowInvalid) {
        arrows.forEach(node => this.finishArrowValidation(node));
        return [arrows, []];
      }
      return partition(arrows, node => node.params.every(param => this.isAssignable(param, true)));
    }
    finishArrowValidation(node) {
      var _node$extra;
      this.toAssignableList(node.params, (_node$extra = node.extra) == null ? void 0 : _node$extra.trailingCommaLoc, false);
      this.scope.enter(2 | 4);
      super.checkParams(node, false, true);
      this.scope.exit();
    }
    forwardNoArrowParamsConversionAt(node, parse) {
      let result;
      if (this.state.noArrowParamsConversionAt.includes(node.start)) {
        this.state.noArrowParamsConversionAt.push(this.state.start);
        result = parse();
        this.state.noArrowParamsConversionAt.pop();
      } else {
        result = parse();
      }
      return result;
    }
    parseParenItem(node, startLoc) {
      const newNode = super.parseParenItem(node, startLoc);
      if (this.eat(17)) {
        newNode.optional = true;
        this.resetEndLocation(node);
      }
      if (this.match(14)) {
        const typeCastNode = this.startNodeAt(startLoc);
        typeCastNode.expression = newNode;
        typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();
        return this.finishNode(typeCastNode, "TypeCastExpression");
      }
      return newNode;
    }
    assertModuleNodeAllowed(node) {
      if (node.type === "ImportDeclaration" && (node.importKind === "type" || node.importKind === "typeof") || node.type === "ExportNamedDeclaration" && node.exportKind === "type" || node.type === "ExportAllDeclaration" && node.exportKind === "type") {
        return;
      }
      super.assertModuleNodeAllowed(node);
    }
    parseExportDeclaration(node) {
      if (this.isContextual(130)) {
        node.exportKind = "type";
        const declarationNode = this.startNode();
        this.next();
        if (this.match(5)) {
          node.specifiers = this.parseExportSpecifiers(true);
          super.parseExportFrom(node);
          return null;
        } else {
          return this.flowParseTypeAlias(declarationNode);
        }
      } else if (this.isContextual(131)) {
        node.exportKind = "type";
        const declarationNode = this.startNode();
        this.next();
        return this.flowParseOpaqueType(declarationNode, false);
      } else if (this.isContextual(129)) {
        node.exportKind = "type";
        const declarationNode = this.startNode();
        this.next();
        return this.flowParseInterface(declarationNode);
      } else if (this.shouldParseEnums() && this.isContextual(126)) {
        node.exportKind = "value";
        const declarationNode = this.startNode();
        this.next();
        return this.flowParseEnumDeclaration(declarationNode);
      } else {
        return super.parseExportDeclaration(node);
      }
    }
    eatExportStar(node) {
      if (super.eatExportStar(node)) return true;
      if (this.isContextual(130) && this.lookahead().type === 55) {
        node.exportKind = "type";
        this.next();
        this.next();
        return true;
      }
      return false;
    }
    maybeParseExportNamespaceSpecifier(node) {
      const {
        startLoc
      } = this.state;
      const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);
      if (hasNamespace && node.exportKind === "type") {
        this.unexpected(startLoc);
      }
      return hasNamespace;
    }
    parseClassId(node, isStatement, optionalId) {
      super.parseClassId(node, isStatement, optionalId);
      if (this.match(47)) {
        node.typeParameters = this.flowParseTypeParameterDeclaration();
      }
    }
    parseClassMember(classBody, member, state) {
      const {
        startLoc
      } = this.state;
      if (this.isContextual(125)) {
        if (super.parseClassMemberFromModifier(classBody, member)) {
          return;
        }
        member.declare = true;
      }
      super.parseClassMember(classBody, member, state);
      if (member.declare) {
        if (member.type !== "ClassProperty" && member.type !== "ClassPrivateProperty" && member.type !== "PropertyDefinition") {
          this.raise(FlowErrors.DeclareClassElement, startLoc);
        } else if (member.value) {
          this.raise(FlowErrors.DeclareClassFieldInitializer, member.value);
        }
      }
    }
    isIterator(word) {
      return word === "iterator" || word === "asyncIterator";
    }
    readIterator() {
      const word = super.readWord1();
      const fullWord = "@@" + word;
      if (!this.isIterator(word) || !this.state.inType) {
        this.raise(Errors.InvalidIdentifier, this.state.curPosition(), {
          identifierName: fullWord
        });
      }
      this.finishToken(132, fullWord);
    }
    getTokenFromCode(code) {
      const next = this.input.charCodeAt(this.state.pos + 1);
      if (code === 123 && next === 124) {
        this.finishOp(6, 2);
      } else if (this.state.inType && (code === 62 || code === 60)) {
        this.finishOp(code === 62 ? 48 : 47, 1);
      } else if (this.state.inType && code === 63) {
        if (next === 46) {
          this.finishOp(18, 2);
        } else {
          this.finishOp(17, 1);
        }
      } else if (isIteratorStart(code, next, this.input.charCodeAt(this.state.pos + 2))) {
        this.state.pos += 2;
        this.readIterator();
      } else {
        super.getTokenFromCode(code);
      }
    }
    isAssignable(node, isBinding) {
      if (node.type === "TypeCastExpression") {
        return this.isAssignable(node.expression, isBinding);
      } else {
        return super.isAssignable(node, isBinding);
      }
    }
    toAssignable(node, isLHS = false) {
      if (!isLHS && node.type === "AssignmentExpression" && node.left.type === "TypeCastExpression") {
        node.left = this.typeCastToParameter(node.left);
      }
      super.toAssignable(node, isLHS);
    }
    toAssignableList(exprList, trailingCommaLoc, isLHS) {
      for (let i = 0; i < exprList.length; i++) {
        const expr = exprList[i];
        if ((expr == null ? void 0 : expr.type) === "TypeCastExpression") {
          exprList[i] = this.typeCastToParameter(expr);
        }
      }
      super.toAssignableList(exprList, trailingCommaLoc, isLHS);
    }
    toReferencedList(exprList, isParenthesizedExpr) {
      for (let i = 0; i < exprList.length; i++) {
        var _expr$extra;
        const expr = exprList[i];
        if (expr && expr.type === "TypeCastExpression" && !((_expr$extra = expr.extra) != null && _expr$extra.parenthesized) && (exprList.length > 1 || !isParenthesizedExpr)) {
          this.raise(FlowErrors.TypeCastInPattern, expr.typeAnnotation);
        }
      }
      return exprList;
    }
    parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {
      const node = super.parseArrayLike(close, canBePattern, isTuple, refExpressionErrors);
      if (canBePattern && !this.state.maybeInArrowParameters) {
        this.toReferencedList(node.elements);
      }
      return node;
    }
    isValidLVal(type, isParenthesized, binding) {
      return type === "TypeCastExpression" || super.isValidLVal(type, isParenthesized, binding);
    }
    parseClassProperty(node) {
      if (this.match(14)) {
        node.typeAnnotation = this.flowParseTypeAnnotation();
      }
      return super.parseClassProperty(node);
    }
    parseClassPrivateProperty(node) {
      if (this.match(14)) {
        node.typeAnnotation = this.flowParseTypeAnnotation();
      }
      return super.parseClassPrivateProperty(node);
    }
    isClassMethod() {
      return this.match(47) || super.isClassMethod();
    }
    isClassProperty() {
      return this.match(14) || super.isClassProperty();
    }
    isNonstaticConstructor(method) {
      return !this.match(14) && super.isNonstaticConstructor(method);
    }
    pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
      if (method.variance) {
        this.unexpected(method.variance.loc.start);
      }
      delete method.variance;
      if (this.match(47)) {
        method.typeParameters = this.flowParseTypeParameterDeclaration();
      }
      super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);
      if (method.params && isConstructor) {
        const params = method.params;
        if (params.length > 0 && this.isThisParam(params[0])) {
          this.raise(FlowErrors.ThisParamBannedInConstructor, method);
        }
      } else if (method.type === "MethodDefinition" && isConstructor && method.value.params) {
        const params = method.value.params;
        if (params.length > 0 && this.isThisParam(params[0])) {
          this.raise(FlowErrors.ThisParamBannedInConstructor, method);
        }
      }
    }
    pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {
      if (method.variance) {
        this.unexpected(method.variance.loc.start);
      }
      delete method.variance;
      if (this.match(47)) {
        method.typeParameters = this.flowParseTypeParameterDeclaration();
      }
      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);
    }
    parseClassSuper(node) {
      super.parseClassSuper(node);
      if (node.superClass && this.match(47)) {
        node.superTypeParameters = this.flowParseTypeParameterInstantiation();
      }
      if (this.isContextual(113)) {
        this.next();
        const implemented = node.implements = [];
        do {
          const node = this.startNode();
          node.id = this.flowParseRestrictedIdentifier(true);
          if (this.match(47)) {
            node.typeParameters = this.flowParseTypeParameterInstantiation();
          } else {
            node.typeParameters = null;
          }
          implemented.push(this.finishNode(node, "ClassImplements"));
        } while (this.eat(12));
      }
    }
    checkGetterSetterParams(method) {
      super.checkGetterSetterParams(method);
      const params = this.getObjectOrClassMethodParams(method);
      if (params.length > 0) {
        const param = params[0];
        if (this.isThisParam(param) && method.kind === "get") {
          this.raise(FlowErrors.GetterMayNotHaveThisParam, param);
        } else if (this.isThisParam(param)) {
          this.raise(FlowErrors.SetterMayNotHaveThisParam, param);
        }
      }
    }
    parsePropertyNamePrefixOperator(node) {
      node.variance = this.flowParseVariance();
    }
    parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {
      if (prop.variance) {
        this.unexpected(prop.variance.loc.start);
      }
      delete prop.variance;
      let typeParameters;
      if (this.match(47) && !isAccessor) {
        typeParameters = this.flowParseTypeParameterDeclaration();
        if (!this.match(10)) this.unexpected();
      }
      const result = super.parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);
      if (typeParameters) {
        (result.value || result).typeParameters = typeParameters;
      }
      return result;
    }
    parseAssignableListItemTypes(param) {
      if (this.eat(17)) {
        if (param.type !== "Identifier") {
          this.raise(FlowErrors.PatternIsOptional, param);
        }
        if (this.isThisParam(param)) {
          this.raise(FlowErrors.ThisParamMayNotBeOptional, param);
        }
        param.optional = true;
      }
      if (this.match(14)) {
        param.typeAnnotation = this.flowParseTypeAnnotation();
      } else if (this.isThisParam(param)) {
        this.raise(FlowErrors.ThisParamAnnotationRequired, param);
      }
      if (this.match(29) && this.isThisParam(param)) {
        this.raise(FlowErrors.ThisParamNoDefault, param);
      }
      this.resetEndLocation(param);
      return param;
    }
    parseMaybeDefault(startLoc, left) {
      const node = super.parseMaybeDefault(startLoc, left);
      if (node.type === "AssignmentPattern" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {
        this.raise(FlowErrors.TypeBeforeInitializer, node.typeAnnotation);
      }
      return node;
    }
    checkImportReflection(node) {
      super.checkImportReflection(node);
      if (node.module && node.importKind !== "value") {
        this.raise(FlowErrors.ImportReflectionHasImportType, node.specifiers[0].loc.start);
      }
    }
    parseImportSpecifierLocal(node, specifier, type) {
      specifier.local = hasTypeImportKind(node) ? this.flowParseRestrictedIdentifier(true, true) : this.parseIdentifier();
      node.specifiers.push(this.finishImportSpecifier(specifier, type));
    }
    isPotentialImportPhase(isExport) {
      if (super.isPotentialImportPhase(isExport)) return true;
      if (this.isContextual(130)) {
        if (!isExport) return true;
        const ch = this.lookaheadCharCode();
        return ch === 123 || ch === 42;
      }
      return !isExport && this.isContextual(87);
    }
    applyImportPhase(node, isExport, phase, loc) {
      super.applyImportPhase(node, isExport, phase, loc);
      if (isExport) {
        if (!phase && this.match(65)) {
          return;
        }
        node.exportKind = phase === "type" ? phase : "value";
      } else {
        if (phase === "type" && this.match(55)) this.unexpected();
        node.importKind = phase === "type" || phase === "typeof" ? phase : "value";
      }
    }
    parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, bindingType) {
      const firstIdent = specifier.imported;
      let specifierTypeKind = null;
      if (firstIdent.type === "Identifier") {
        if (firstIdent.name === "type") {
          specifierTypeKind = "type";
        } else if (firstIdent.name === "typeof") {
          specifierTypeKind = "typeof";
        }
      }
      let isBinding = false;
      if (this.isContextual(93) && !this.isLookaheadContextual("as")) {
        const as_ident = this.parseIdentifier(true);
        if (specifierTypeKind !== null && !tokenIsKeywordOrIdentifier(this.state.type)) {
          specifier.imported = as_ident;
          specifier.importKind = specifierTypeKind;
          specifier.local = cloneIdentifier(as_ident);
        } else {
          specifier.imported = firstIdent;
          specifier.importKind = null;
          specifier.local = this.parseIdentifier();
        }
      } else {
        if (specifierTypeKind !== null && tokenIsKeywordOrIdentifier(this.state.type)) {
          specifier.imported = this.parseIdentifier(true);
          specifier.importKind = specifierTypeKind;
        } else {
          if (importedIsString) {
            throw this.raise(Errors.ImportBindingIsString, specifier, {
              importName: firstIdent.value
            });
          }
          specifier.imported = firstIdent;
          specifier.importKind = null;
        }
        if (this.eatContextual(93)) {
          specifier.local = this.parseIdentifier();
        } else {
          isBinding = true;
          specifier.local = cloneIdentifier(specifier.imported);
        }
      }
      const specifierIsTypeImport = hasTypeImportKind(specifier);
      if (isInTypeOnlyImport && specifierIsTypeImport) {
        this.raise(FlowErrors.ImportTypeShorthandOnlyInPureImport, specifier);
      }
      if (isInTypeOnlyImport || specifierIsTypeImport) {
        this.checkReservedType(specifier.local.name, specifier.local.loc.start, true);
      }
      if (isBinding && !isInTypeOnlyImport && !specifierIsTypeImport) {
        this.checkReservedWord(specifier.local.name, specifier.loc.start, true, true);
      }
      return this.finishImportSpecifier(specifier, "ImportSpecifier");
    }
    parseBindingAtom() {
      switch (this.state.type) {
        case 78:
          return this.parseIdentifier(true);
        default:
          return super.parseBindingAtom();
      }
    }
    parseFunctionParams(node, isConstructor) {
      const kind = node.kind;
      if (kind !== "get" && kind !== "set" && this.match(47)) {
        node.typeParameters = this.flowParseTypeParameterDeclaration();
      }
      super.parseFunctionParams(node, isConstructor);
    }
    parseVarId(decl, kind) {
      super.parseVarId(decl, kind);
      if (this.match(14)) {
        decl.id.typeAnnotation = this.flowParseTypeAnnotation();
        this.resetEndLocation(decl.id);
      }
    }
    parseAsyncArrowFromCallExpression(node, call) {
      if (this.match(14)) {
        const oldNoAnonFunctionType = this.state.noAnonFunctionType;
        this.state.noAnonFunctionType = true;
        node.returnType = this.flowParseTypeAnnotation();
        this.state.noAnonFunctionType = oldNoAnonFunctionType;
      }
      return super.parseAsyncArrowFromCallExpression(node, call);
    }
    shouldParseAsyncArrow() {
      return this.match(14) || super.shouldParseAsyncArrow();
    }
    parseMaybeAssign(refExpressionErrors, afterLeftParse) {
      var _jsx;
      let state = null;
      let jsx;
      if (this.hasPlugin("jsx") && (this.match(142) || this.match(47))) {
        state = this.state.clone();
        jsx = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state);
        if (!jsx.error) return jsx.node;
        const {
          context
        } = this.state;
        const currentContext = context[context.length - 1];
        if (currentContext === types.j_oTag || currentContext === types.j_expr) {
          context.pop();
        }
      }
      if ((_jsx = jsx) != null && _jsx.error || this.match(47)) {
        var _jsx2, _jsx3;
        state = state || this.state.clone();
        let typeParameters;
        const arrow = this.tryParse(abort => {
          var _arrowExpression$extr;
          typeParameters = this.flowParseTypeParameterDeclaration();
          const arrowExpression = this.forwardNoArrowParamsConversionAt(typeParameters, () => {
            const result = super.parseMaybeAssign(refExpressionErrors, afterLeftParse);
            this.resetStartLocationFromNode(result, typeParameters);
            return result;
          });
          if ((_arrowExpression$extr = arrowExpression.extra) != null && _arrowExpression$extr.parenthesized) abort();
          const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);
          if (expr.type !== "ArrowFunctionExpression") abort();
          expr.typeParameters = typeParameters;
          this.resetStartLocationFromNode(expr, typeParameters);
          return arrowExpression;
        }, state);
        let arrowExpression = null;
        if (arrow.node && this.maybeUnwrapTypeCastExpression(arrow.node).type === "ArrowFunctionExpression") {
          if (!arrow.error && !arrow.aborted) {
            if (arrow.node.async) {
              this.raise(FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction, typeParameters);
            }
            return arrow.node;
          }
          arrowExpression = arrow.node;
        }
        if ((_jsx2 = jsx) != null && _jsx2.node) {
          this.state = jsx.failState;
          return jsx.node;
        }
        if (arrowExpression) {
          this.state = arrow.failState;
          return arrowExpression;
        }
        if ((_jsx3 = jsx) != null && _jsx3.thrown) throw jsx.error;
        if (arrow.thrown) throw arrow.error;
        throw this.raise(FlowErrors.UnexpectedTokenAfterTypeParameter, typeParameters);
      }
      return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);
    }
    parseArrow(node) {
      if (this.match(14)) {
        const result = this.tryParse(() => {
          const oldNoAnonFunctionType = this.state.noAnonFunctionType;
          this.state.noAnonFunctionType = true;
          const typeNode = this.startNode();
          [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();
          this.state.noAnonFunctionType = oldNoAnonFunctionType;
          if (this.canInsertSemicolon()) this.unexpected();
          if (!this.match(19)) this.unexpected();
          return typeNode;
        });
        if (result.thrown) return null;
        if (result.error) this.state = result.failState;
        node.returnType = result.node.typeAnnotation ? this.finishNode(result.node, "TypeAnnotation") : null;
      }
      return super.parseArrow(node);
    }
    shouldParseArrow(params) {
      return this.match(14) || super.shouldParseArrow(params);
    }
    setArrowFunctionParameters(node, params) {
      if (this.state.noArrowParamsConversionAt.includes(node.start)) {
        node.params = params;
      } else {
        super.setArrowFunctionParameters(node, params);
      }
    }
    checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged = true) {
      if (isArrowFunction && this.state.noArrowParamsConversionAt.includes(node.start)) {
        return;
      }
      for (let i = 0; i < node.params.length; i++) {
        if (this.isThisParam(node.params[i]) && i > 0) {
          this.raise(FlowErrors.ThisParamMustBeFirst, node.params[i]);
        }
      }
      super.checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged);
    }
    parseParenAndDistinguishExpression(canBeArrow) {
      return super.parseParenAndDistinguishExpression(canBeArrow && !this.state.noArrowAt.includes(this.state.start));
    }
    parseSubscripts(base, startLoc, noCalls) {
      if (base.type === "Identifier" && base.name === "async" && this.state.noArrowAt.includes(startLoc.index)) {
        this.next();
        const node = this.startNodeAt(startLoc);
        node.callee = base;
        node.arguments = super.parseCallExpressionArguments(11, false);
        base = this.finishNode(node, "CallExpression");
      } else if (base.type === "Identifier" && base.name === "async" && this.match(47)) {
        const state = this.state.clone();
        const arrow = this.tryParse(abort => this.parseAsyncArrowWithTypeParameters(startLoc) || abort(), state);
        if (!arrow.error && !arrow.aborted) return arrow.node;
        const result = this.tryParse(() => super.parseSubscripts(base, startLoc, noCalls), state);
        if (result.node && !result.error) return result.node;
        if (arrow.node) {
          this.state = arrow.failState;
          return arrow.node;
        }
        if (result.node) {
          this.state = result.failState;
          return result.node;
        }
        throw arrow.error || result.error;
      }
      return super.parseSubscripts(base, startLoc, noCalls);
    }
    parseSubscript(base, startLoc, noCalls, subscriptState) {
      if (this.match(18) && this.isLookaheadToken_lt()) {
        subscriptState.optionalChainMember = true;
        if (noCalls) {
          subscriptState.stop = true;
          return base;
        }
        this.next();
        const node = this.startNodeAt(startLoc);
        node.callee = base;
        node.typeArguments = this.flowParseTypeParameterInstantiation();
        this.expect(10);
        node.arguments = this.parseCallExpressionArguments(11, false);
        node.optional = true;
        return this.finishCallExpression(node, true);
      } else if (!noCalls && this.shouldParseTypes() && this.match(47)) {
        const node = this.startNodeAt(startLoc);
        node.callee = base;
        const result = this.tryParse(() => {
          node.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew();
          this.expect(10);
          node.arguments = super.parseCallExpressionArguments(11, false);
          if (subscriptState.optionalChainMember) {
            node.optional = false;
          }
          return this.finishCallExpression(node, subscriptState.optionalChainMember);
        });
        if (result.node) {
          if (result.error) this.state = result.failState;
          return result.node;
        }
      }
      return super.parseSubscript(base, startLoc, noCalls, subscriptState);
    }
    parseNewCallee(node) {
      super.parseNewCallee(node);
      let targs = null;
      if (this.shouldParseTypes() && this.match(47)) {
        targs = this.tryParse(() => this.flowParseTypeParameterInstantiationCallOrNew()).node;
      }
      node.typeArguments = targs;
    }
    parseAsyncArrowWithTypeParameters(startLoc) {
      const node = this.startNodeAt(startLoc);
      this.parseFunctionParams(node, false);
      if (!this.parseArrow(node)) return;
      return super.parseArrowExpression(node, undefined, true);
    }
    readToken_mult_modulo(code) {
      const next = this.input.charCodeAt(this.state.pos + 1);
      if (code === 42 && next === 47 && this.state.hasFlowComment) {
        this.state.hasFlowComment = false;
        this.state.pos += 2;
        this.nextToken();
        return;
      }
      super.readToken_mult_modulo(code);
    }
    readToken_pipe_amp(code) {
      const next = this.input.charCodeAt(this.state.pos + 1);
      if (code === 124 && next === 125) {
        this.finishOp(9, 2);
        return;
      }
      super.readToken_pipe_amp(code);
    }
    parseTopLevel(file, program) {
      const fileNode = super.parseTopLevel(file, program);
      if (this.state.hasFlowComment) {
        this.raise(FlowErrors.UnterminatedFlowComment, this.state.curPosition());
      }
      return fileNode;
    }
    skipBlockComment() {
      if (this.hasPlugin("flowComments") && this.skipFlowComment()) {
        if (this.state.hasFlowComment) {
          throw this.raise(FlowErrors.NestedFlowComment, this.state.startLoc);
        }
        this.hasFlowCommentCompletion();
        const commentSkip = this.skipFlowComment();
        if (commentSkip) {
          this.state.pos += commentSkip;
          this.state.hasFlowComment = true;
        }
        return;
      }
      return super.skipBlockComment(this.state.hasFlowComment ? "*-/" : "*/");
    }
    skipFlowComment() {
      const {
        pos
      } = this.state;
      let shiftToFirstNonWhiteSpace = 2;
      while ([32, 9].includes(this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace))) {
        shiftToFirstNonWhiteSpace++;
      }
      const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);
      const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);
      if (ch2 === 58 && ch3 === 58) {
        return shiftToFirstNonWhiteSpace + 2;
      }
      if (this.input.slice(shiftToFirstNonWhiteSpace + pos, shiftToFirstNonWhiteSpace + pos + 12) === "flow-include") {
        return shiftToFirstNonWhiteSpace + 12;
      }
      if (ch2 === 58 && ch3 !== 58) {
        return shiftToFirstNonWhiteSpace;
      }
      return false;
    }
    hasFlowCommentCompletion() {
      const end = this.input.indexOf("*/", this.state.pos);
      if (end === -1) {
        throw this.raise(Errors.UnterminatedComment, this.state.curPosition());
      }
    }
    flowEnumErrorBooleanMemberNotInitialized(loc, {
      enumName,
      memberName
    }) {
      this.raise(FlowErrors.EnumBooleanMemberNotInitialized, loc, {
        memberName,
        enumName
      });
    }
    flowEnumErrorInvalidMemberInitializer(loc, enumContext) {
      return this.raise(!enumContext.explicitType ? FlowErrors.EnumInvalidMemberInitializerUnknownType : enumContext.explicitType === "symbol" ? FlowErrors.EnumInvalidMemberInitializerSymbolType : FlowErrors.EnumInvalidMemberInitializerPrimaryType, loc, enumContext);
    }
    flowEnumErrorNumberMemberNotInitialized(loc, details) {
      this.raise(FlowErrors.EnumNumberMemberNotInitialized, loc, details);
    }
    flowEnumErrorStringMemberInconsistentlyInitialized(node, details) {
      this.raise(FlowErrors.EnumStringMemberInconsistentlyInitialized, node, details);
    }
    flowEnumMemberInit() {
      const startLoc = this.state.startLoc;
      const endOfInit = () => this.match(12) || this.match(8);
      switch (this.state.type) {
        case 134:
          {
            const literal = this.parseNumericLiteral(this.state.value);
            if (endOfInit()) {
              return {
                type: "number",
                loc: literal.loc.start,
                value: literal
              };
            }
            return {
              type: "invalid",
              loc: startLoc
            };
          }
        case 133:
          {
            const literal = this.parseStringLiteral(this.state.value);
            if (endOfInit()) {
              return {
                type: "string",
                loc: literal.loc.start,
                value: literal
              };
            }
            return {
              type: "invalid",
              loc: startLoc
            };
          }
        case 85:
        case 86:
          {
            const literal = this.parseBooleanLiteral(this.match(85));
            if (endOfInit()) {
              return {
                type: "boolean",
                loc: literal.loc.start,
                value: literal
              };
            }
            return {
              type: "invalid",
              loc: startLoc
            };
          }
        default:
          return {
            type: "invalid",
            loc: startLoc
          };
      }
    }
    flowEnumMemberRaw() {
      const loc = this.state.startLoc;
      const id = this.parseIdentifier(true);
      const init = this.eat(29) ? this.flowEnumMemberInit() : {
        type: "none",
        loc
      };
      return {
        id,
        init
      };
    }
    flowEnumCheckExplicitTypeMismatch(loc, context, expectedType) {
      const {
        explicitType
      } = context;
      if (explicitType === null) {
        return;
      }
      if (explicitType !== expectedType) {
        this.flowEnumErrorInvalidMemberInitializer(loc, context);
      }
    }
    flowEnumMembers({
      enumName,
      explicitType
    }) {
      const seenNames = new Set();
      const members = {
        booleanMembers: [],
        numberMembers: [],
        stringMembers: [],
        defaultedMembers: []
      };
      let hasUnknownMembers = false;
      while (!this.match(8)) {
        if (this.eat(21)) {
          hasUnknownMembers = true;
          break;
        }
        const memberNode = this.startNode();
        const {
          id,
          init
        } = this.flowEnumMemberRaw();
        const memberName = id.name;
        if (memberName === "") {
          continue;
        }
        if (/^[a-z]/.test(memberName)) {
          this.raise(FlowErrors.EnumInvalidMemberName, id, {
            memberName,
            suggestion: memberName[0].toUpperCase() + memberName.slice(1),
            enumName
          });
        }
        if (seenNames.has(memberName)) {
          this.raise(FlowErrors.EnumDuplicateMemberName, id, {
            memberName,
            enumName
          });
        }
        seenNames.add(memberName);
        const context = {
          enumName,
          explicitType,
          memberName
        };
        memberNode.id = id;
        switch (init.type) {
          case "boolean":
            {
              this.flowEnumCheckExplicitTypeMismatch(init.loc, context, "boolean");
              memberNode.init = init.value;
              members.booleanMembers.push(this.finishNode(memberNode, "EnumBooleanMember"));
              break;
            }
          case "number":
            {
              this.flowEnumCheckExplicitTypeMismatch(init.loc, context, "number");
              memberNode.init = init.value;
              members.numberMembers.push(this.finishNode(memberNode, "EnumNumberMember"));
              break;
            }
          case "string":
            {
              this.flowEnumCheckExplicitTypeMismatch(init.loc, context, "string");
              memberNode.init = init.value;
              members.stringMembers.push(this.finishNode(memberNode, "EnumStringMember"));
              break;
            }
          case "invalid":
            {
              throw this.flowEnumErrorInvalidMemberInitializer(init.loc, context);
            }
          case "none":
            {
              switch (explicitType) {
                case "boolean":
                  this.flowEnumErrorBooleanMemberNotInitialized(init.loc, context);
                  break;
                case "number":
                  this.flowEnumErrorNumberMemberNotInitialized(init.loc, context);
                  break;
                default:
                  members.defaultedMembers.push(this.finishNode(memberNode, "EnumDefaultedMember"));
              }
            }
        }
        if (!this.match(8)) {
          this.expect(12);
        }
      }
      return {
        members,
        hasUnknownMembers
      };
    }
    flowEnumStringMembers(initializedMembers, defaultedMembers, {
      enumName
    }) {
      if (initializedMembers.length === 0) {
        return defaultedMembers;
      } else if (defaultedMembers.length === 0) {
        return initializedMembers;
      } else if (defaultedMembers.length > initializedMembers.length) {
        for (const member of initializedMembers) {
          this.flowEnumErrorStringMemberInconsistentlyInitialized(member, {
            enumName
          });
        }
        return defaultedMembers;
      } else {
        for (const member of defaultedMembers) {
          this.flowEnumErrorStringMemberInconsistentlyInitialized(member, {
            enumName
          });
        }
        return initializedMembers;
      }
    }
    flowEnumParseExplicitType({
      enumName
    }) {
      if (!this.eatContextual(102)) return null;
      if (!tokenIsIdentifier(this.state.type)) {
        throw this.raise(FlowErrors.EnumInvalidExplicitTypeUnknownSupplied, this.state.startLoc, {
          enumName
        });
      }
      const {
        value
      } = this.state;
      this.next();
      if (value !== "boolean" && value !== "number" && value !== "string" && value !== "symbol") {
        this.raise(FlowErrors.EnumInvalidExplicitType, this.state.startLoc, {
          enumName,
          invalidEnumType: value
        });
      }
      return value;
    }
    flowEnumBody(node, id) {
      const enumName = id.name;
      const nameLoc = id.loc.start;
      const explicitType = this.flowEnumParseExplicitType({
        enumName
      });
      this.expect(5);
      const {
        members,
        hasUnknownMembers
      } = this.flowEnumMembers({
        enumName,
        explicitType
      });
      node.hasUnknownMembers = hasUnknownMembers;
      switch (explicitType) {
        case "boolean":
          node.explicitType = true;
          node.members = members.booleanMembers;
          this.expect(8);
          return this.finishNode(node, "EnumBooleanBody");
        case "number":
          node.explicitType = true;
          node.members = members.numberMembers;
          this.expect(8);
          return this.finishNode(node, "EnumNumberBody");
        case "string":
          node.explicitType = true;
          node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {
            enumName
          });
          this.expect(8);
          return this.finishNode(node, "EnumStringBody");
        case "symbol":
          node.members = members.defaultedMembers;
          this.expect(8);
          return this.finishNode(node, "EnumSymbolBody");
        default:
          {
            const empty = () => {
              node.members = [];
              this.expect(8);
              return this.finishNode(node, "EnumStringBody");
            };
            node.explicitType = false;
            const boolsLen = members.booleanMembers.length;
            const numsLen = members.numberMembers.length;
            const strsLen = members.stringMembers.length;
            const defaultedLen = members.defaultedMembers.length;
            if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {
              return empty();
            } else if (!boolsLen && !numsLen) {
              node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {
                enumName
              });
              this.expect(8);
              return this.finishNode(node, "EnumStringBody");
            } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {
              for (const member of members.defaultedMembers) {
                this.flowEnumErrorBooleanMemberNotInitialized(member.loc.start, {
                  enumName,
                  memberName: member.id.name
                });
              }
              node.members = members.booleanMembers;
              this.expect(8);
              return this.finishNode(node, "EnumBooleanBody");
            } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {
              for (const member of members.defaultedMembers) {
                this.flowEnumErrorNumberMemberNotInitialized(member.loc.start, {
                  enumName,
                  memberName: member.id.name
                });
              }
              node.members = members.numberMembers;
              this.expect(8);
              return this.finishNode(node, "EnumNumberBody");
            } else {
              this.raise(FlowErrors.EnumInconsistentMemberValues, nameLoc, {
                enumName
              });
              return empty();
            }
          }
      }
    }
    flowParseEnumDeclaration(node) {
      const id = this.parseIdentifier();
      node.id = id;
      node.body = this.flowEnumBody(this.startNode(), id);
      return this.finishNode(node, "EnumDeclaration");
    }
    isLookaheadToken_lt() {
      const next = this.nextTokenStart();
      if (this.input.charCodeAt(next) === 60) {
        const afterNext = this.input.charCodeAt(next + 1);
        return afterNext !== 60 && afterNext !== 61;
      }
      return false;
    }
    maybeUnwrapTypeCastExpression(node) {
      return node.type === "TypeCastExpression" ? node.expression : node;
    }
  };
  const entities = {
    __proto__: null,
    quot: "\"",
    amp: "&",
    apos: "'",
    lt: "<",
    gt: ">",
    nbsp: "\xA0",
    iexcl: "\xA1",
    cent: "\xA2",
    pound: "\xA3",
    curren: "\xA4",
    yen: "\xA5",
    brvbar: "\xA6",
    sect: "\xA7",
    uml: "\xA8",
    copy: "\xA9",
    ordf: "\xAA",
    laquo: "\xAB",
    not: "\xAC",
    shy: "\xAD",
    reg: "\xAE",
    macr: "\xAF",
    deg: "\xB0",
    plusmn: "\xB1",
    sup2: "\xB2",
    sup3: "\xB3",
    acute: "\xB4",
    micro: "\xB5",
    para: "\xB6",
    middot: "\xB7",
    cedil: "\xB8",
    sup1: "\xB9",
    ordm: "\xBA",
    raquo: "\xBB",
    frac14: "\xBC",
    frac12: "\xBD",
    frac34: "\xBE",
    iquest: "\xBF",
    Agrave: "\xC0",
    Aacute: "\xC1",
    Acirc: "\xC2",
    Atilde: "\xC3",
    Auml: "\xC4",
    Aring: "\xC5",
    AElig: "\xC6",
    Ccedil: "\xC7",
    Egrave: "\xC8",
    Eacute: "\xC9",
    Ecirc: "\xCA",
    Euml: "\xCB",
    Igrave: "\xCC",
    Iacute: "\xCD",
    Icirc: "\xCE",
    Iuml: "\xCF",
    ETH: "\xD0",
    Ntilde: "\xD1",
    Ograve: "\xD2",
    Oacute: "\xD3",
    Ocirc: "\xD4",
    Otilde: "\xD5",
    Ouml: "\xD6",
    times: "\xD7",
    Oslash: "\xD8",
    Ugrave: "\xD9",
    Uacute: "\xDA",
    Ucirc: "\xDB",
    Uuml: "\xDC",
    Yacute: "\xDD",
    THORN: "\xDE",
    szlig: "\xDF",
    agrave: "\xE0",
    aacute: "\xE1",
    acirc: "\xE2",
    atilde: "\xE3",
    auml: "\xE4",
    aring: "\xE5",
    aelig: "\xE6",
    ccedil: "\xE7",
    egrave: "\xE8",
    eacute: "\xE9",
    ecirc: "\xEA",
    euml: "\xEB",
    igrave: "\xEC",
    iacute: "\xED",
    icirc: "\xEE",
    iuml: "\xEF",
    eth: "\xF0",
    ntilde: "\xF1",
    ograve: "\xF2",
    oacute: "\xF3",
    ocirc: "\xF4",
    otilde: "\xF5",
    ouml: "\xF6",
    divide: "\xF7",
    oslash: "\xF8",
    ugrave: "\xF9",
    uacute: "\xFA",
    ucirc: "\xFB",
    uuml: "\xFC",
    yacute: "\xFD",
    thorn: "\xFE",
    yuml: "\xFF",
    OElig: "\u0152",
    oelig: "\u0153",
    Scaron: "\u0160",
    scaron: "\u0161",
    Yuml: "\u0178",
    fnof: "\u0192",
    circ: "\u02C6",
    tilde: "\u02DC",
    Alpha: "\u0391",
    Beta: "\u0392",
    Gamma: "\u0393",
    Delta: "\u0394",
    Epsilon: "\u0395",
    Zeta: "\u0396",
    Eta: "\u0397",
    Theta: "\u0398",
    Iota: "\u0399",
    Kappa: "\u039A",
    Lambda: "\u039B",
    Mu: "\u039C",
    Nu: "\u039D",
    Xi: "\u039E",
    Omicron: "\u039F",
    Pi: "\u03A0",
    Rho: "\u03A1",
    Sigma: "\u03A3",
    Tau: "\u03A4",
    Upsilon: "\u03A5",
    Phi: "\u03A6",
    Chi: "\u03A7",
    Psi: "\u03A8",
    Omega: "\u03A9",
    alpha: "\u03B1",
    beta: "\u03B2",
    gamma: "\u03B3",
    delta: "\u03B4",
    epsilon: "\u03B5",
    zeta: "\u03B6",
    eta: "\u03B7",
    theta: "\u03B8",
    iota: "\u03B9",
    kappa: "\u03BA",
    lambda: "\u03BB",
    mu: "\u03BC",
    nu: "\u03BD",
    xi: "\u03BE",
    omicron: "\u03BF",
    pi: "\u03C0",
    rho: "\u03C1",
    sigmaf: "\u03C2",
    sigma: "\u03C3",
    tau: "\u03C4",
    upsilon: "\u03C5",
    phi: "\u03C6",
    chi: "\u03C7",
    psi: "\u03C8",
    omega: "\u03C9",
    thetasym: "\u03D1",
    upsih: "\u03D2",
    piv: "\u03D6",
    ensp: "\u2002",
    emsp: "\u2003",
    thinsp: "\u2009",
    zwnj: "\u200C",
    zwj: "\u200D",
    lrm: "\u200E",
    rlm: "\u200F",
    ndash: "\u2013",
    mdash: "\u2014",
    lsquo: "\u2018",
    rsquo: "\u2019",
    sbquo: "\u201A",
    ldquo: "\u201C",
    rdquo: "\u201D",
    bdquo: "\u201E",
    dagger: "\u2020",
    Dagger: "\u2021",
    bull: "\u2022",
    hellip: "\u2026",
    permil: "\u2030",
    prime: "\u2032",
    Prime: "\u2033",
    lsaquo: "\u2039",
    rsaquo: "\u203A",
    oline: "\u203E",
    frasl: "\u2044",
    euro: "\u20AC",
    image: "\u2111",
    weierp: "\u2118",
    real: "\u211C",
    trade: "\u2122",
    alefsym: "\u2135",
    larr: "\u2190",
    uarr: "\u2191",
    rarr: "\u2192",
    darr: "\u2193",
    harr: "\u2194",
    crarr: "\u21B5",
    lArr: "\u21D0",
    uArr: "\u21D1",
    rArr: "\u21D2",
    dArr: "\u21D3",
    hArr: "\u21D4",
    forall: "\u2200",
    part: "\u2202",
    exist: "\u2203",
    empty: "\u2205",
    nabla: "\u2207",
    isin: "\u2208",
    notin: "\u2209",
    ni: "\u220B",
    prod: "\u220F",
    sum: "\u2211",
    minus: "\u2212",
    lowast: "\u2217",
    radic: "\u221A",
    prop: "\u221D",
    infin: "\u221E",
    ang: "\u2220",
    and: "\u2227",
    or: "\u2228",
    cap: "\u2229",
    cup: "\u222A",
    int: "\u222B",
    there4: "\u2234",
    sim: "\u223C",
    cong: "\u2245",
    asymp: "\u2248",
    ne: "\u2260",
    equiv: "\u2261",
    le: "\u2264",
    ge: "\u2265",
    sub: "\u2282",
    sup: "\u2283",
    nsub: "\u2284",
    sube: "\u2286",
    supe: "\u2287",
    oplus: "\u2295",
    otimes: "\u2297",
    perp: "\u22A5",
    sdot: "\u22C5",
    lceil: "\u2308",
    rceil: "\u2309",
    lfloor: "\u230A",
    rfloor: "\u230B",
    lang: "\u2329",
    rang: "\u232A",
    loz: "\u25CA",
    spades: "\u2660",
    clubs: "\u2663",
    hearts: "\u2665",
    diams: "\u2666"
  };
  const JsxErrors = ParseErrorEnum`jsx`({
    AttributeIsEmpty: "JSX attributes must only be assigned a non-empty expression.",
    MissingClosingTagElement: ({
      openingTagName
    }) => `Expected corresponding JSX closing tag for <${openingTagName}>.`,
    MissingClosingTagFragment: "Expected corresponding JSX closing tag for <>.",
    UnexpectedSequenceExpression: "Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?",
    UnexpectedToken: ({
      unexpected,
      HTMLEntity
    }) => `Unexpected token \`${unexpected}\`. Did you mean \`${HTMLEntity}\` or \`{'${unexpected}'}\`?`,
    UnsupportedJsxValue: "JSX value should be either an expression or a quoted JSX text.",
    UnterminatedJsxContent: "Unterminated JSX contents.",
    UnwrappedAdjacentJSXElements: "Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?"
  });
  function isFragment(object) {
    return object ? object.type === "JSXOpeningFragment" || object.type === "JSXClosingFragment" : false;
  }
  function getQualifiedJSXName(object) {
    if (object.type === "JSXIdentifier") {
      return object.name;
    }
    if (object.type === "JSXNamespacedName") {
      return object.namespace.name + ":" + object.name.name;
    }
    if (object.type === "JSXMemberExpression") {
      return getQualifiedJSXName(object.object) + "." + getQualifiedJSXName(object.property);
    }
    throw new Error("Node had unexpected type: " + object.type);
  }
  var jsx = superClass => class JSXParserMixin extends superClass {
    jsxReadToken() {
      let out = "";
      let chunkStart = this.state.pos;
      for (;;) {
        if (this.state.pos >= this.length) {
          throw this.raise(JsxErrors.UnterminatedJsxContent, this.state.startLoc);
        }
        const ch = this.input.charCodeAt(this.state.pos);
        switch (ch) {
          case 60:
          case 123:
            if (this.state.pos === this.state.start) {
              if (ch === 60 && this.state.canStartJSXElement) {
                ++this.state.pos;
                this.finishToken(142);
              } else {
                super.getTokenFromCode(ch);
              }
              return;
            }
            out += this.input.slice(chunkStart, this.state.pos);
            this.finishToken(141, out);
            return;
          case 38:
            out += this.input.slice(chunkStart, this.state.pos);
            out += this.jsxReadEntity();
            chunkStart = this.state.pos;
            break;
          case 62:
          case 125:
          default:
            if (isNewLine(ch)) {
              out += this.input.slice(chunkStart, this.state.pos);
              out += this.jsxReadNewLine(true);
              chunkStart = this.state.pos;
            } else {
              ++this.state.pos;
            }
        }
      }
    }
    jsxReadNewLine(normalizeCRLF) {
      const ch = this.input.charCodeAt(this.state.pos);
      let out;
      ++this.state.pos;
      if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {
        ++this.state.pos;
        out = normalizeCRLF ? "\n" : "\r\n";
      } else {
        out = String.fromCharCode(ch);
      }
      ++this.state.curLine;
      this.state.lineStart = this.state.pos;
      return out;
    }
    jsxReadString(quote) {
      let out = "";
      let chunkStart = ++this.state.pos;
      for (;;) {
        if (this.state.pos >= this.length) {
          throw this.raise(Errors.UnterminatedString, this.state.startLoc);
        }
        const ch = this.input.charCodeAt(this.state.pos);
        if (ch === quote) break;
        if (ch === 38) {
          out += this.input.slice(chunkStart, this.state.pos);
          out += this.jsxReadEntity();
          chunkStart = this.state.pos;
        } else if (isNewLine(ch)) {
          out += this.input.slice(chunkStart, this.state.pos);
          out += this.jsxReadNewLine(false);
          chunkStart = this.state.pos;
        } else {
          ++this.state.pos;
        }
      }
      out += this.input.slice(chunkStart, this.state.pos++);
      this.finishToken(133, out);
    }
    jsxReadEntity() {
      const startPos = ++this.state.pos;
      if (this.codePointAtPos(this.state.pos) === 35) {
        ++this.state.pos;
        let radix = 10;
        if (this.codePointAtPos(this.state.pos) === 120) {
          radix = 16;
          ++this.state.pos;
        }
        const codePoint = this.readInt(radix, undefined, false, "bail");
        if (codePoint !== null && this.codePointAtPos(this.state.pos) === 59) {
          ++this.state.pos;
          return String.fromCodePoint(codePoint);
        }
      } else {
        let count = 0;
        let semi = false;
        while (count++ < 10 && this.state.pos < this.length && !(semi = this.codePointAtPos(this.state.pos) === 59)) {
          ++this.state.pos;
        }
        if (semi) {
          const desc = this.input.slice(startPos, this.state.pos);
          const entity = entities[desc];
          ++this.state.pos;
          if (entity) {
            return entity;
          }
        }
      }
      this.state.pos = startPos;
      return "&";
    }
    jsxReadWord() {
      let ch;
      const start = this.state.pos;
      do {
        ch = this.input.charCodeAt(++this.state.pos);
      } while (isIdentifierChar(ch) || ch === 45);
      this.finishToken(140, this.input.slice(start, this.state.pos));
    }
    jsxParseIdentifier() {
      const node = this.startNode();
      if (this.match(140)) {
        node.name = this.state.value;
      } else if (tokenIsKeyword(this.state.type)) {
        node.name = tokenLabelName(this.state.type);
      } else {
        this.unexpected();
      }
      this.next();
      return this.finishNode(node, "JSXIdentifier");
    }
    jsxParseNamespacedName() {
      const startLoc = this.state.startLoc;
      const name = this.jsxParseIdentifier();
      if (!this.eat(14)) return name;
      const node = this.startNodeAt(startLoc);
      node.namespace = name;
      node.name = this.jsxParseIdentifier();
      return this.finishNode(node, "JSXNamespacedName");
    }
    jsxParseElementName() {
      const startLoc = this.state.startLoc;
      let node = this.jsxParseNamespacedName();
      if (node.type === "JSXNamespacedName") {
        return node;
      }
      while (this.eat(16)) {
        const newNode = this.startNodeAt(startLoc);
        newNode.object = node;
        newNode.property = this.jsxParseIdentifier();
        node = this.finishNode(newNode, "JSXMemberExpression");
      }
      return node;
    }
    jsxParseAttributeValue() {
      let node;
      switch (this.state.type) {
        case 5:
          node = this.startNode();
          this.setContext(types.brace);
          this.next();
          node = this.jsxParseExpressionContainer(node, types.j_oTag);
          if (node.expression.type === "JSXEmptyExpression") {
            this.raise(JsxErrors.AttributeIsEmpty, node);
          }
          return node;
        case 142:
        case 133:
          return this.parseExprAtom();
        default:
          throw this.raise(JsxErrors.UnsupportedJsxValue, this.state.startLoc);
      }
    }
    jsxParseEmptyExpression() {
      const node = this.startNodeAt(this.state.lastTokEndLoc);
      return this.finishNodeAt(node, "JSXEmptyExpression", this.state.startLoc);
    }
    jsxParseSpreadChild(node) {
      this.next();
      node.expression = this.parseExpression();
      this.setContext(types.j_expr);
      this.state.canStartJSXElement = true;
      this.expect(8);
      return this.finishNode(node, "JSXSpreadChild");
    }
    jsxParseExpressionContainer(node, previousContext) {
      if (this.match(8)) {
        node.expression = this.jsxParseEmptyExpression();
      } else {
        const expression = this.parseExpression();
        node.expression = expression;
      }
      this.setContext(previousContext);
      this.state.canStartJSXElement = true;
      this.expect(8);
      return this.finishNode(node, "JSXExpressionContainer");
    }
    jsxParseAttribute() {
      const node = this.startNode();
      if (this.match(5)) {
        this.setContext(types.brace);
        this.next();
        this.expect(21);
        node.argument = this.parseMaybeAssignAllowIn();
        this.setContext(types.j_oTag);
        this.state.canStartJSXElement = true;
        this.expect(8);
        return this.finishNode(node, "JSXSpreadAttribute");
      }
      node.name = this.jsxParseNamespacedName();
      node.value = this.eat(29) ? this.jsxParseAttributeValue() : null;
      return this.finishNode(node, "JSXAttribute");
    }
    jsxParseOpeningElementAt(startLoc) {
      const node = this.startNodeAt(startLoc);
      if (this.eat(143)) {
        return this.finishNode(node, "JSXOpeningFragment");
      }
      node.name = this.jsxParseElementName();
      return this.jsxParseOpeningElementAfterName(node);
    }
    jsxParseOpeningElementAfterName(node) {
      const attributes = [];
      while (!this.match(56) && !this.match(143)) {
        attributes.push(this.jsxParseAttribute());
      }
      node.attributes = attributes;
      node.selfClosing = this.eat(56);
      this.expect(143);
      return this.finishNode(node, "JSXOpeningElement");
    }
    jsxParseClosingElementAt(startLoc) {
      const node = this.startNodeAt(startLoc);
      if (this.eat(143)) {
        return this.finishNode(node, "JSXClosingFragment");
      }
      node.name = this.jsxParseElementName();
      this.expect(143);
      return this.finishNode(node, "JSXClosingElement");
    }
    jsxParseElementAt(startLoc) {
      const node = this.startNodeAt(startLoc);
      const children = [];
      const openingElement = this.jsxParseOpeningElementAt(startLoc);
      let closingElement = null;
      if (!openingElement.selfClosing) {
        contents: for (;;) {
          switch (this.state.type) {
            case 142:
              startLoc = this.state.startLoc;
              this.next();
              if (this.eat(56)) {
                closingElement = this.jsxParseClosingElementAt(startLoc);
                break contents;
              }
              children.push(this.jsxParseElementAt(startLoc));
              break;
            case 141:
              children.push(this.parseLiteral(this.state.value, "JSXText"));
              break;
            case 5:
              {
                const node = this.startNode();
                this.setContext(types.brace);
                this.next();
                if (this.match(21)) {
                  children.push(this.jsxParseSpreadChild(node));
                } else {
                  children.push(this.jsxParseExpressionContainer(node, types.j_expr));
                }
                break;
              }
            default:
              this.unexpected();
          }
        }
        if (isFragment(openingElement) && !isFragment(closingElement) && closingElement !== null) {
          this.raise(JsxErrors.MissingClosingTagFragment, closingElement);
        } else if (!isFragment(openingElement) && isFragment(closingElement)) {
          this.raise(JsxErrors.MissingClosingTagElement, closingElement, {
            openingTagName: getQualifiedJSXName(openingElement.name)
          });
        } else if (!isFragment(openingElement) && !isFragment(closingElement)) {
          if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {
            this.raise(JsxErrors.MissingClosingTagElement, closingElement, {
              openingTagName: getQualifiedJSXName(openingElement.name)
            });
          }
        }
      }
      if (isFragment(openingElement)) {
        node.openingFragment = openingElement;
        node.closingFragment = closingElement;
      } else {
        node.openingElement = openingElement;
        node.closingElement = closingElement;
      }
      node.children = children;
      if (this.match(47)) {
        throw this.raise(JsxErrors.UnwrappedAdjacentJSXElements, this.state.startLoc);
      }
      return isFragment(openingElement) ? this.finishNode(node, "JSXFragment") : this.finishNode(node, "JSXElement");
    }
    jsxParseElement() {
      const startLoc = this.state.startLoc;
      this.next();
      return this.jsxParseElementAt(startLoc);
    }
    setContext(newContext) {
      const {
        context
      } = this.state;
      context[context.length - 1] = newContext;
    }
    parseExprAtom(refExpressionErrors) {
      if (this.match(142)) {
        return this.jsxParseElement();
      } else if (this.match(47) && this.input.charCodeAt(this.state.pos) !== 33) {
        this.replaceToken(142);
        return this.jsxParseElement();
      } else {
        return super.parseExprAtom(refExpressionErrors);
      }
    }
    skipSpace() {
      const curContext = this.curContext();
      if (!curContext.preserveSpace) super.skipSpace();
    }
    getTokenFromCode(code) {
      const context = this.curContext();
      if (context === types.j_expr) {
        this.jsxReadToken();
        return;
      }
      if (context === types.j_oTag || context === types.j_cTag) {
        if (isIdentifierStart(code)) {
          this.jsxReadWord();
          return;
        }
        if (code === 62) {
          ++this.state.pos;
          this.finishToken(143);
          return;
        }
        if ((code === 34 || code === 39) && context === types.j_oTag) {
          this.jsxReadString(code);
          return;
        }
      }
      if (code === 60 && this.state.canStartJSXElement && this.input.charCodeAt(this.state.pos + 1) !== 33) {
        ++this.state.pos;
        this.finishToken(142);
        return;
      }
      super.getTokenFromCode(code);
    }
    updateContext(prevType) {
      const {
        context,
        type
      } = this.state;
      if (type === 56 && prevType === 142) {
        context.splice(-2, 2, types.j_cTag);
        this.state.canStartJSXElement = false;
      } else if (type === 142) {
        context.push(types.j_oTag);
      } else if (type === 143) {
        const out = context[context.length - 1];
        if (out === types.j_oTag && prevType === 56 || out === types.j_cTag) {
          context.pop();
          this.state.canStartJSXElement = context[context.length - 1] === types.j_expr;
        } else {
          this.setContext(types.j_expr);
          this.state.canStartJSXElement = true;
        }
      } else {
        this.state.canStartJSXElement = tokenComesBeforeExpression(type);
      }
    }
  };
  class TypeScriptScope extends Scope {
    constructor(...args) {
      super(...args);
      this.tsNames = new Map();
    }
  }
  class TypeScriptScopeHandler extends ScopeHandler {
    constructor(...args) {
      super(...args);
      this.importsStack = [];
    }
    createScope(flags) {
      this.importsStack.push(new Set());
      return new TypeScriptScope(flags);
    }
    enter(flags) {
      if (flags === 256) {
        this.importsStack.push(new Set());
      }
      super.enter(flags);
    }
    exit() {
      const flags = super.exit();
      if (flags === 256) {
        this.importsStack.pop();
      }
      return flags;
    }
    hasImport(name, allowShadow) {
      const len = this.importsStack.length;
      if (this.importsStack[len - 1].has(name)) {
        return true;
      }
      if (!allowShadow && len > 1) {
        for (let i = 0; i < len - 1; i++) {
          if (this.importsStack[i].has(name)) return true;
        }
      }
      return false;
    }
    declareName(name, bindingType, loc) {
      if (bindingType & 4096) {
        if (this.hasImport(name, true)) {
          this.parser.raise(Errors.VarRedeclaration, loc, {
            identifierName: name
          });
        }
        this.importsStack[this.importsStack.length - 1].add(name);
        return;
      }
      const scope = this.currentScope();
      let type = scope.tsNames.get(name) || 0;
      if (bindingType & 1024) {
        this.maybeExportDefined(scope, name);
        scope.tsNames.set(name, type | 16);
        return;
      }
      super.declareName(name, bindingType, loc);
      if (bindingType & 2) {
        if (!(bindingType & 1)) {
          this.checkRedeclarationInScope(scope, name, bindingType, loc);
          this.maybeExportDefined(scope, name);
        }
        type = type | 1;
      }
      if (bindingType & 256) {
        type = type | 2;
      }
      if (bindingType & 512) {
        type = type | 4;
      }
      if (bindingType & 128) {
        type = type | 8;
      }
      if (type) scope.tsNames.set(name, type);
    }
    isRedeclaredInScope(scope, name, bindingType) {
      const type = scope.tsNames.get(name);
      if ((type & 2) > 0) {
        if (bindingType & 256) {
          const isConst = !!(bindingType & 512);
          const wasConst = (type & 4) > 0;
          return isConst !== wasConst;
        }
        return true;
      }
      if (bindingType & 128 && (type & 8) > 0) {
        if (scope.names.get(name) & 2) {
          return !!(bindingType & 1);
        } else {
          return false;
        }
      }
      if (bindingType & 2 && (type & 1) > 0) {
        return true;
      }
      return super.isRedeclaredInScope(scope, name, bindingType);
    }
    checkLocalExport(id) {
      const {
        name
      } = id;
      if (this.hasImport(name)) return;
      const len = this.scopeStack.length;
      for (let i = len - 1; i >= 0; i--) {
        const scope = this.scopeStack[i];
        const type = scope.tsNames.get(name);
        if ((type & 1) > 0 || (type & 16) > 0) {
          return;
        }
      }
      super.checkLocalExport(id);
    }
  }
  const unwrapParenthesizedExpression = node => {
    return node.type === "ParenthesizedExpression" ? unwrapParenthesizedExpression(node.expression) : node;
  };
  class LValParser extends NodeUtils {
    toAssignable(node, isLHS = false) {
      var _node$extra, _node$extra3;
      let parenthesized = undefined;
      if (node.type === "ParenthesizedExpression" || (_node$extra = node.extra) != null && _node$extra.parenthesized) {
        parenthesized = unwrapParenthesizedExpression(node);
        if (isLHS) {
          if (parenthesized.type === "Identifier") {
            this.expressionScope.recordArrowParameterBindingError(Errors.InvalidParenthesizedAssignment, node);
          } else if (parenthesized.type !== "MemberExpression" && !this.isOptionalMemberExpression(parenthesized)) {
            this.raise(Errors.InvalidParenthesizedAssignment, node);
          }
        } else {
          this.raise(Errors.InvalidParenthesizedAssignment, node);
        }
      }
      switch (node.type) {
        case "Identifier":
        case "ObjectPattern":
        case "ArrayPattern":
        case "AssignmentPattern":
        case "RestElement":
          break;
        case "ObjectExpression":
          node.type = "ObjectPattern";
          for (let i = 0, length = node.properties.length, last = length - 1; i < length; i++) {
            var _node$extra2;
            const prop = node.properties[i];
            const isLast = i === last;
            this.toAssignableObjectExpressionProp(prop, isLast, isLHS);
            if (isLast && prop.type === "RestElement" && (_node$extra2 = node.extra) != null && _node$extra2.trailingCommaLoc) {
              this.raise(Errors.RestTrailingComma, node.extra.trailingCommaLoc);
            }
          }
          break;
        case "ObjectProperty":
          {
            const {
              key,
              value
            } = node;
            if (this.isPrivateName(key)) {
              this.classScope.usePrivateName(this.getPrivateNameSV(key), key.loc.start);
            }
            this.toAssignable(value, isLHS);
            break;
          }
        case "SpreadElement":
          {
            throw new Error("Internal @babel/parser error (this is a bug, please report it)." + " SpreadElement should be converted by .toAssignable's caller.");
          }
        case "ArrayExpression":
          node.type = "ArrayPattern";
          this.toAssignableList(node.elements, (_node$extra3 = node.extra) == null ? void 0 : _node$extra3.trailingCommaLoc, isLHS);
          break;
        case "AssignmentExpression":
          if (node.operator !== "=") {
            this.raise(Errors.MissingEqInAssignment, node.left.loc.end);
          }
          node.type = "AssignmentPattern";
          delete node.operator;
          this.toAssignable(node.left, isLHS);
          break;
        case "ParenthesizedExpression":
          this.toAssignable(parenthesized, isLHS);
          break;
      }
    }
    toAssignableObjectExpressionProp(prop, isLast, isLHS) {
      if (prop.type === "ObjectMethod") {
        this.raise(prop.kind === "get" || prop.kind === "set" ? Errors.PatternHasAccessor : Errors.PatternHasMethod, prop.key);
      } else if (prop.type === "SpreadElement") {
        prop.type = "RestElement";
        const arg = prop.argument;
        this.checkToRestConversion(arg, false);
        this.toAssignable(arg, isLHS);
        if (!isLast) {
          this.raise(Errors.RestTrailingComma, prop);
        }
      } else {
        this.toAssignable(prop, isLHS);
      }
    }
    toAssignableList(exprList, trailingCommaLoc, isLHS) {
      const end = exprList.length - 1;
      for (let i = 0; i <= end; i++) {
        const elt = exprList[i];
        if (!elt) continue;
        if (elt.type === "SpreadElement") {
          elt.type = "RestElement";
          const arg = elt.argument;
          this.checkToRestConversion(arg, true);
          this.toAssignable(arg, isLHS);
        } else {
          this.toAssignable(elt, isLHS);
        }
        if (elt.type === "RestElement") {
          if (i < end) {
            this.raise(Errors.RestTrailingComma, elt);
          } else if (trailingCommaLoc) {
            this.raise(Errors.RestTrailingComma, trailingCommaLoc);
          }
        }
      }
    }
    isAssignable(node, isBinding) {
      switch (node.type) {
        case "Identifier":
        case "ObjectPattern":
        case "ArrayPattern":
        case "AssignmentPattern":
        case "RestElement":
          return true;
        case "ObjectExpression":
          {
            const last = node.properties.length - 1;
            return node.properties.every((prop, i) => {
              return prop.type !== "ObjectMethod" && (i === last || prop.type !== "SpreadElement") && this.isAssignable(prop);
            });
          }
        case "ObjectProperty":
          return this.isAssignable(node.value);
        case "SpreadElement":
          return this.isAssignable(node.argument);
        case "ArrayExpression":
          return node.elements.every(element => element === null || this.isAssignable(element));
        case "AssignmentExpression":
          return node.operator === "=";
        case "ParenthesizedExpression":
          return this.isAssignable(node.expression);
        case "MemberExpression":
        case "OptionalMemberExpression":
          return !isBinding;
        default:
          return false;
      }
    }
    toReferencedList(exprList, isParenthesizedExpr) {
      return exprList;
    }
    toReferencedListDeep(exprList, isParenthesizedExpr) {
      this.toReferencedList(exprList, isParenthesizedExpr);
      for (const expr of exprList) {
        if ((expr == null ? void 0 : expr.type) === "ArrayExpression") {
          this.toReferencedListDeep(expr.elements);
        }
      }
    }
    parseSpread(refExpressionErrors) {
      const node = this.startNode();
      this.next();
      node.argument = this.parseMaybeAssignAllowIn(refExpressionErrors, undefined);
      return this.finishNode(node, "SpreadElement");
    }
    parseRestBinding() {
      const node = this.startNode();
      this.next();
      node.argument = this.parseBindingAtom();
      return this.finishNode(node, "RestElement");
    }
    parseBindingAtom() {
      switch (this.state.type) {
        case 0:
          {
            const node = this.startNode();
            this.next();
            node.elements = this.parseBindingList(3, 93, 1);
            return this.finishNode(node, "ArrayPattern");
          }
        case 5:
          return this.parseObjectLike(8, true);
      }
      return this.parseIdentifier();
    }
    parseBindingList(close, closeCharCode, flags) {
      const allowEmpty = flags & 1;
      const elts = [];
      let first = true;
      while (!this.eat(close)) {
        if (first) {
          first = false;
        } else {
          this.expect(12);
        }
        if (allowEmpty && this.match(12)) {
          elts.push(null);
        } else if (this.eat(close)) {
          break;
        } else if (this.match(21)) {
          elts.push(this.parseAssignableListItemTypes(this.parseRestBinding(), flags));
          if (!this.checkCommaAfterRest(closeCharCode)) {
            this.expect(close);
            break;
          }
        } else {
          const decorators = [];
          if (this.match(26) && this.hasPlugin("decorators")) {
            this.raise(Errors.UnsupportedParameterDecorator, this.state.startLoc);
          }
          while (this.match(26)) {
            decorators.push(this.parseDecorator());
          }
          elts.push(this.parseAssignableListItem(flags, decorators));
        }
      }
      return elts;
    }
    parseBindingRestProperty(prop) {
      this.next();
      prop.argument = this.parseIdentifier();
      this.checkCommaAfterRest(125);
      return this.finishNode(prop, "RestElement");
    }
    parseBindingProperty() {
      const {
        type,
        startLoc
      } = this.state;
      if (type === 21) {
        return this.parseBindingRestProperty(this.startNode());
      }
      const prop = this.startNode();
      if (type === 138) {
        this.expectPlugin("destructuringPrivate", startLoc);
        this.classScope.usePrivateName(this.state.value, startLoc);
        prop.key = this.parsePrivateName();
      } else {
        this.parsePropertyName(prop);
      }
      prop.method = false;
      return this.parseObjPropValue(prop, startLoc, false, false, true, false);
    }
    parseAssignableListItem(flags, decorators) {
      const left = this.parseMaybeDefault();
      this.parseAssignableListItemTypes(left, flags);
      const elt = this.parseMaybeDefault(left.loc.start, left);
      if (decorators.length) {
        left.decorators = decorators;
      }
      return elt;
    }
    parseAssignableListItemTypes(param, flags) {
      return param;
    }
    parseMaybeDefault(startLoc, left) {
      var _startLoc, _left;
      (_startLoc = startLoc) != null ? _startLoc : startLoc = this.state.startLoc;
      left = (_left = left) != null ? _left : this.parseBindingAtom();
      if (!this.eat(29)) return left;
      const node = this.startNodeAt(startLoc);
      node.left = left;
      node.right = this.parseMaybeAssignAllowIn();
      return this.finishNode(node, "AssignmentPattern");
    }
    isValidLVal(type, isUnparenthesizedInAssign, binding) {
      switch (type) {
        case "AssignmentPattern":
          return "left";
        case "RestElement":
          return "argument";
        case "ObjectProperty":
          return "value";
        case "ParenthesizedExpression":
          return "expression";
        case "ArrayPattern":
          return "elements";
        case "ObjectPattern":
          return "properties";
      }
      return false;
    }
    isOptionalMemberExpression(expression) {
      return expression.type === "OptionalMemberExpression";
    }
    checkLVal(expression, ancestor, binding = 64, checkClashes = false, strictModeChanged = false, hasParenthesizedAncestor = false) {
      var _expression$extra;
      const type = expression.type;
      if (this.isObjectMethod(expression)) return;
      const isOptionalMemberExpression = this.isOptionalMemberExpression(expression);
      if (isOptionalMemberExpression || type === "MemberExpression") {
        if (isOptionalMemberExpression) {
          this.expectPlugin("optionalChainingAssign", expression.loc.start);
          if (ancestor.type !== "AssignmentExpression") {
            this.raise(Errors.InvalidLhsOptionalChaining, expression, {
              ancestor
            });
          }
        }
        if (binding !== 64) {
          this.raise(Errors.InvalidPropertyBindingPattern, expression);
        }
        return;
      }
      if (type === "Identifier") {
        this.checkIdentifier(expression, binding, strictModeChanged);
        const {
          name
        } = expression;
        if (checkClashes) {
          if (checkClashes.has(name)) {
            this.raise(Errors.ParamDupe, expression);
          } else {
            checkClashes.add(name);
          }
        }
        return;
      }
      const validity = this.isValidLVal(type, !(hasParenthesizedAncestor || (_expression$extra = expression.extra) != null && _expression$extra.parenthesized) && ancestor.type === "AssignmentExpression", binding);
      if (validity === true) return;
      if (validity === false) {
        const ParseErrorClass = binding === 64 ? Errors.InvalidLhs : Errors.InvalidLhsBinding;
        this.raise(ParseErrorClass, expression, {
          ancestor
        });
        return;
      }
      let key, isParenthesizedExpression;
      if (typeof validity === "string") {
        key = validity;
        isParenthesizedExpression = type === "ParenthesizedExpression";
      } else {
        [key, isParenthesizedExpression] = validity;
      }
      const nextAncestor = type === "ArrayPattern" || type === "ObjectPattern" ? {
        type
      } : ancestor;
      const val = expression[key];
      if (Array.isArray(val)) {
        for (const child of val) {
          if (child) {
            this.checkLVal(child, nextAncestor, binding, checkClashes, strictModeChanged, isParenthesizedExpression);
          }
        }
      } else if (val) {
        this.checkLVal(val, nextAncestor, binding, checkClashes, strictModeChanged, isParenthesizedExpression);
      }
    }
    checkIdentifier(at, bindingType, strictModeChanged = false) {
      if (this.state.strict && (strictModeChanged ? isStrictBindReservedWord(at.name, this.inModule) : isStrictBindOnlyReservedWord(at.name))) {
        if (bindingType === 64) {
          this.raise(Errors.StrictEvalArguments, at, {
            referenceName: at.name
          });
        } else {
          this.raise(Errors.StrictEvalArgumentsBinding, at, {
            bindingName: at.name
          });
        }
      }
      if (bindingType & 8192 && at.name === "let") {
        this.raise(Errors.LetInLexicalBinding, at);
      }
      if (!(bindingType & 64)) {
        this.declareNameFromIdentifier(at, bindingType);
      }
    }
    declareNameFromIdentifier(identifier, binding) {
      this.scope.declareName(identifier.name, binding, identifier.loc.start);
    }
    checkToRestConversion(node, allowPattern) {
      switch (node.type) {
        case "ParenthesizedExpression":
          this.checkToRestConversion(node.expression, allowPattern);
          break;
        case "Identifier":
        case "MemberExpression":
          break;
        case "ArrayExpression":
        case "ObjectExpression":
          if (allowPattern) break;
        default:
          this.raise(Errors.InvalidRestAssignmentPattern, node);
      }
    }
    checkCommaAfterRest(close) {
      if (!this.match(12)) {
        return false;
      }
      this.raise(this.lookaheadCharCode() === close ? Errors.RestTrailingComma : Errors.ElementAfterRest, this.state.startLoc);
      return true;
    }
  }
  function nonNull(x) {
    if (x == null) {
      throw new Error(`Unexpected ${x} value.`);
    }
    return x;
  }
  function assert(x) {
    if (!x) {
      throw new Error("Assert fail");
    }
  }
  const TSErrors = ParseErrorEnum`typescript`({
    AbstractMethodHasImplementation: ({
      methodName
    }) => `Method '${methodName}' cannot have an implementation because it is marked abstract.`,
    AbstractPropertyHasInitializer: ({
      propertyName
    }) => `Property '${propertyName}' cannot have an initializer because it is marked abstract.`,
    AccesorCannotDeclareThisParameter: "'get' and 'set' accessors cannot declare 'this' parameters.",
    AccesorCannotHaveTypeParameters: "An accessor cannot have type parameters.",
    AccessorCannotBeOptional: "An 'accessor' property cannot be declared optional.",
    ClassMethodHasDeclare: "Class methods cannot have the 'declare' modifier.",
    ClassMethodHasReadonly: "Class methods cannot have the 'readonly' modifier.",
    ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference: "A 'const' initializer in an ambient context must be a string or numeric literal or literal enum reference.",
    ConstructorHasTypeParameters: "Type parameters cannot appear on a constructor declaration.",
    DeclareAccessor: ({
      kind
    }) => `'declare' is not allowed in ${kind}ters.`,
    DeclareClassFieldHasInitializer: "Initializers are not allowed in ambient contexts.",
    DeclareFunctionHasImplementation: "An implementation cannot be declared in ambient contexts.",
    DuplicateAccessibilityModifier: ({
      modifier
    }) => `Accessibility modifier already seen.`,
    DuplicateModifier: ({
      modifier
    }) => `Duplicate modifier: '${modifier}'.`,
    EmptyHeritageClauseType: ({
      token
    }) => `'${token}' list cannot be empty.`,
    EmptyTypeArguments: "Type argument list cannot be empty.",
    EmptyTypeParameters: "Type parameter list cannot be empty.",
    ExpectedAmbientAfterExportDeclare: "'export declare' must be followed by an ambient declaration.",
    ImportAliasHasImportType: "An import alias can not use 'import type'.",
    ImportReflectionHasImportType: "An `import module` declaration can not use `type` modifier",
    IncompatibleModifiers: ({
      modifiers
    }) => `'${modifiers[0]}' modifier cannot be used with '${modifiers[1]}' modifier.`,
    IndexSignatureHasAbstract: "Index signatures cannot have the 'abstract' modifier.",
    IndexSignatureHasAccessibility: ({
      modifier
    }) => `Index signatures cannot have an accessibility modifier ('${modifier}').`,
    IndexSignatureHasDeclare: "Index signatures cannot have the 'declare' modifier.",
    IndexSignatureHasOverride: "'override' modifier cannot appear on an index signature.",
    IndexSignatureHasStatic: "Index signatures cannot have the 'static' modifier.",
    InitializerNotAllowedInAmbientContext: "Initializers are not allowed in ambient contexts.",
    InvalidModifierOnTypeMember: ({
      modifier
    }) => `'${modifier}' modifier cannot appear on a type member.`,
    InvalidModifierOnTypeParameter: ({
      modifier
    }) => `'${modifier}' modifier cannot appear on a type parameter.`,
    InvalidModifierOnTypeParameterPositions: ({
      modifier
    }) => `'${modifier}' modifier can only appear on a type parameter of a class, interface or type alias.`,
    InvalidModifiersOrder: ({
      orderedModifiers
    }) => `'${orderedModifiers[0]}' modifier must precede '${orderedModifiers[1]}' modifier.`,
    InvalidPropertyAccessAfterInstantiationExpression: "Invalid property access after an instantiation expression. " + "You can either wrap the instantiation expression in parentheses, or delete the type arguments.",
    InvalidTupleMemberLabel: "Tuple members must be labeled with a simple identifier.",
    MissingInterfaceName: "'interface' declarations must be followed by an identifier.",
    NonAbstractClassHasAbstractMethod: "Abstract methods can only appear within an abstract class.",
    NonClassMethodPropertyHasAbstractModifer: "'abstract' modifier can only appear on a class, method, or property declaration.",
    OptionalTypeBeforeRequired: "A required element cannot follow an optional element.",
    OverrideNotInSubClass: "This member cannot have an 'override' modifier because its containing class does not extend another class.",
    PatternIsOptional: "A binding pattern parameter cannot be optional in an implementation signature.",
    PrivateElementHasAbstract: "Private elements cannot have the 'abstract' modifier.",
    PrivateElementHasAccessibility: ({
      modifier
    }) => `Private elements cannot have an accessibility modifier ('${modifier}').`,
    ReadonlyForMethodSignature: "'readonly' modifier can only appear on a property declaration or index signature.",
    ReservedArrowTypeParam: "This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.",
    ReservedTypeAssertion: "This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.",
    SetAccesorCannotHaveOptionalParameter: "A 'set' accessor cannot have an optional parameter.",
    SetAccesorCannotHaveRestParameter: "A 'set' accessor cannot have rest parameter.",
    SetAccesorCannotHaveReturnType: "A 'set' accessor cannot have a return type annotation.",
    SingleTypeParameterWithoutTrailingComma: ({
      typeParameterName
    }) => `Single type parameter ${typeParameterName} should have a trailing comma. Example usage: <${typeParameterName},>.`,
    StaticBlockCannotHaveModifier: "Static class blocks cannot have any modifier.",
    TupleOptionalAfterType: "A labeled tuple optional element must be declared using a question mark after the name and before the colon (`name?: type`), rather than after the type (`name: type?`).",
    TypeAnnotationAfterAssign: "Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.",
    TypeImportCannotSpecifyDefaultAndNamed: "A type-only import can specify a default import or named bindings, but not both.",
    TypeModifierIsUsedInTypeExports: "The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.",
    TypeModifierIsUsedInTypeImports: "The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.",
    UnexpectedParameterModifier: "A parameter property is only allowed in a constructor implementation.",
    UnexpectedReadonly: "'readonly' type modifier is only permitted on array and tuple literal types.",
    UnexpectedTypeAnnotation: "Did not expect a type annotation here.",
    UnexpectedTypeCastInParameter: "Unexpected type cast in parameter position.",
    UnsupportedImportTypeArgument: "Argument in a type import must be a string literal.",
    UnsupportedParameterPropertyKind: "A parameter property may not be declared using a binding pattern.",
    UnsupportedSignatureParameterKind: ({
      type
    }) => `Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got ${type}.`
  });
  function keywordTypeFromName(value) {
    switch (value) {
      case "any":
        return "TSAnyKeyword";
      case "boolean":
        return "TSBooleanKeyword";
      case "bigint":
        return "TSBigIntKeyword";
      case "never":
        return "TSNeverKeyword";
      case "number":
        return "TSNumberKeyword";
      case "object":
        return "TSObjectKeyword";
      case "string":
        return "TSStringKeyword";
      case "symbol":
        return "TSSymbolKeyword";
      case "undefined":
        return "TSUndefinedKeyword";
      case "unknown":
        return "TSUnknownKeyword";
      default:
        return undefined;
    }
  }
  function tsIsAccessModifier(modifier) {
    return modifier === "private" || modifier === "public" || modifier === "protected";
  }
  function tsIsVarianceAnnotations(modifier) {
    return modifier === "in" || modifier === "out";
  }
  var typescript = superClass => class TypeScriptParserMixin extends superClass {
    constructor(...args) {
      super(...args);
      this.tsParseInOutModifiers = this.tsParseModifiers.bind(this, {
        allowedModifiers: ["in", "out"],
        disallowedModifiers: ["const", "public", "private", "protected", "readonly", "declare", "abstract", "override"],
        errorTemplate: TSErrors.InvalidModifierOnTypeParameter
      });
      this.tsParseConstModifier = this.tsParseModifiers.bind(this, {
        allowedModifiers: ["const"],
        disallowedModifiers: ["in", "out"],
        errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions
      });
      this.tsParseInOutConstModifiers = this.tsParseModifiers.bind(this, {
        allowedModifiers: ["in", "out", "const"],
        disallowedModifiers: ["public", "private", "protected", "readonly", "declare", "abstract", "override"],
        errorTemplate: TSErrors.InvalidModifierOnTypeParameter
      });
    }
    getScopeHandler() {
      return TypeScriptScopeHandler;
    }
    tsIsIdentifier() {
      return tokenIsIdentifier(this.state.type);
    }
    tsTokenCanFollowModifier() {
      return (this.match(0) || this.match(5) || this.match(55) || this.match(21) || this.match(138) || this.isLiteralPropertyName()) && !this.hasPrecedingLineBreak();
    }
    tsNextTokenCanFollowModifier() {
      this.next();
      return this.tsTokenCanFollowModifier();
    }
    tsParseModifier(allowedModifiers, stopOnStartOfClassStaticBlock) {
      if (!tokenIsIdentifier(this.state.type) && this.state.type !== 58 && this.state.type !== 75) {
        return undefined;
      }
      const modifier = this.state.value;
      if (allowedModifiers.includes(modifier)) {
        if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks()) {
          return undefined;
        }
        if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {
          return modifier;
        }
      }
      return undefined;
    }
    tsParseModifiers({
      allowedModifiers,
      disallowedModifiers,
      stopOnStartOfClassStaticBlock,
      errorTemplate = TSErrors.InvalidModifierOnTypeMember
    }, modified) {
      const enforceOrder = (loc, modifier, before, after) => {
        if (modifier === before && modified[after]) {
          this.raise(TSErrors.InvalidModifiersOrder, loc, {
            orderedModifiers: [before, after]
          });
        }
      };
      const incompatible = (loc, modifier, mod1, mod2) => {
        if (modified[mod1] && modifier === mod2 || modified[mod2] && modifier === mod1) {
          this.raise(TSErrors.IncompatibleModifiers, loc, {
            modifiers: [mod1, mod2]
          });
        }
      };
      for (;;) {
        const {
          startLoc
        } = this.state;
        const modifier = this.tsParseModifier(allowedModifiers.concat(disallowedModifiers != null ? disallowedModifiers : []), stopOnStartOfClassStaticBlock);
        if (!modifier) break;
        if (tsIsAccessModifier(modifier)) {
          if (modified.accessibility) {
            this.raise(TSErrors.DuplicateAccessibilityModifier, startLoc, {
              modifier
            });
          } else {
            enforceOrder(startLoc, modifier, modifier, "override");
            enforceOrder(startLoc, modifier, modifier, "static");
            enforceOrder(startLoc, modifier, modifier, "readonly");
            modified.accessibility = modifier;
          }
        } else if (tsIsVarianceAnnotations(modifier)) {
          if (modified[modifier]) {
            this.raise(TSErrors.DuplicateModifier, startLoc, {
              modifier
            });
          }
          modified[modifier] = true;
          enforceOrder(startLoc, modifier, "in", "out");
        } else {
          if (hasOwnProperty.call(modified, modifier)) {
            this.raise(TSErrors.DuplicateModifier, startLoc, {
              modifier
            });
          } else {
            enforceOrder(startLoc, modifier, "static", "readonly");
            enforceOrder(startLoc, modifier, "static", "override");
            enforceOrder(startLoc, modifier, "override", "readonly");
            enforceOrder(startLoc, modifier, "abstract", "override");
            incompatible(startLoc, modifier, "declare", "override");
            incompatible(startLoc, modifier, "static", "abstract");
          }
          modified[modifier] = true;
        }
        if (disallowedModifiers != null && disallowedModifiers.includes(modifier)) {
          this.raise(errorTemplate, startLoc, {
            modifier
          });
        }
      }
    }
    tsIsListTerminator(kind) {
      switch (kind) {
        case "EnumMembers":
        case "TypeMembers":
          return this.match(8);
        case "HeritageClauseElement":
          return this.match(5);
        case "TupleElementTypes":
          return this.match(3);
        case "TypeParametersOrArguments":
          return this.match(48);
      }
    }
    tsParseList(kind, parseElement) {
      const result = [];
      while (!this.tsIsListTerminator(kind)) {
        result.push(parseElement());
      }
      return result;
    }
    tsParseDelimitedList(kind, parseElement, refTrailingCommaPos) {
      return nonNull(this.tsParseDelimitedListWorker(kind, parseElement, true, refTrailingCommaPos));
    }
    tsParseDelimitedListWorker(kind, parseElement, expectSuccess, refTrailingCommaPos) {
      const result = [];
      let trailingCommaPos = -1;
      for (;;) {
        if (this.tsIsListTerminator(kind)) {
          break;
        }
        trailingCommaPos = -1;
        const element = parseElement();
        if (element == null) {
          return undefined;
        }
        result.push(element);
        if (this.eat(12)) {
          trailingCommaPos = this.state.lastTokStartLoc.index;
          continue;
        }
        if (this.tsIsListTerminator(kind)) {
          break;
        }
        if (expectSuccess) {
          this.expect(12);
        }
        return undefined;
      }
      if (refTrailingCommaPos) {
        refTrailingCommaPos.value = trailingCommaPos;
      }
      return result;
    }
    tsParseBracketedList(kind, parseElement, bracket, skipFirstToken, refTrailingCommaPos) {
      if (!skipFirstToken) {
        if (bracket) {
          this.expect(0);
        } else {
          this.expect(47);
        }
      }
      const result = this.tsParseDelimitedList(kind, parseElement, refTrailingCommaPos);
      if (bracket) {
        this.expect(3);
      } else {
        this.expect(48);
      }
      return result;
    }
    tsParseImportType() {
      const node = this.startNode();
      this.expect(83);
      this.expect(10);
      if (!this.match(133)) {
        this.raise(TSErrors.UnsupportedImportTypeArgument, this.state.startLoc);
      }
      node.argument = super.parseExprAtom();
      if (this.hasPlugin("importAttributes") || this.hasPlugin("importAssertions")) {
        node.options = null;
      }
      if (this.eat(12)) {
        this.expectImportAttributesPlugin();
        if (!this.match(11)) {
          node.options = super.parseMaybeAssignAllowIn();
          this.eat(12);
        }
      }
      this.expect(11);
      if (this.eat(16)) {
        node.qualifier = this.tsParseEntityName();
      }
      if (this.match(47)) {
        node.typeParameters = this.tsParseTypeArguments();
      }
      return this.finishNode(node, "TSImportType");
    }
    tsParseEntityName(allowReservedWords = true) {
      let entity = this.parseIdentifier(allowReservedWords);
      while (this.eat(16)) {
        const node = this.startNodeAtNode(entity);
        node.left = entity;
        node.right = this.parseIdentifier(allowReservedWords);
        entity = this.finishNode(node, "TSQualifiedName");
      }
      return entity;
    }
    tsParseTypeReference() {
      const node = this.startNode();
      node.typeName = this.tsParseEntityName();
      if (!this.hasPrecedingLineBreak() && this.match(47)) {
        node.typeParameters = this.tsParseTypeArguments();
      }
      return this.finishNode(node, "TSTypeReference");
    }
    tsParseThisTypePredicate(lhs) {
      this.next();
      const node = this.startNodeAtNode(lhs);
      node.parameterName = lhs;
      node.typeAnnotation = this.tsParseTypeAnnotation(false);
      node.asserts = false;
      return this.finishNode(node, "TSTypePredicate");
    }
    tsParseThisTypeNode() {
      const node = this.startNode();
      this.next();
      return this.finishNode(node, "TSThisType");
    }
    tsParseTypeQuery() {
      const node = this.startNode();
      this.expect(87);
      if (this.match(83)) {
        node.exprName = this.tsParseImportType();
      } else {
        node.exprName = this.tsParseEntityName();
      }
      if (!this.hasPrecedingLineBreak() && this.match(47)) {
        node.typeParameters = this.tsParseTypeArguments();
      }
      return this.finishNode(node, "TSTypeQuery");
    }
    tsParseTypeParameter(parseModifiers) {
      const node = this.startNode();
      parseModifiers(node);
      node.name = this.tsParseTypeParameterName();
      node.constraint = this.tsEatThenParseType(81);
      node.default = this.tsEatThenParseType(29);
      return this.finishNode(node, "TSTypeParameter");
    }
    tsTryParseTypeParameters(parseModifiers) {
      if (this.match(47)) {
        return this.tsParseTypeParameters(parseModifiers);
      }
    }
    tsParseTypeParameters(parseModifiers) {
      const node = this.startNode();
      if (this.match(47) || this.match(142)) {
        this.next();
      } else {
        this.unexpected();
      }
      const refTrailingCommaPos = {
        value: -1
      };
      node.params = this.tsParseBracketedList("TypeParametersOrArguments", this.tsParseTypeParameter.bind(this, parseModifiers), false, true, refTrailingCommaPos);
      if (node.params.length === 0) {
        this.raise(TSErrors.EmptyTypeParameters, node);
      }
      if (refTrailingCommaPos.value !== -1) {
        this.addExtra(node, "trailingComma", refTrailingCommaPos.value);
      }
      return this.finishNode(node, "TSTypeParameterDeclaration");
    }
    tsFillSignature(returnToken, signature) {
      const returnTokenRequired = returnToken === 19;
      const paramsKey = "parameters";
      const returnTypeKey = "typeAnnotation";
      signature.typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);
      this.expect(10);
      signature[paramsKey] = this.tsParseBindingListForSignature();
      if (returnTokenRequired) {
        signature[returnTypeKey] = this.tsParseTypeOrTypePredicateAnnotation(returnToken);
      } else if (this.match(returnToken)) {
        signature[returnTypeKey] = this.tsParseTypeOrTypePredicateAnnotation(returnToken);
      }
    }
    tsParseBindingListForSignature() {
      const list = super.parseBindingList(11, 41, 2);
      for (const pattern of list) {
        const {
          type
        } = pattern;
        if (type === "AssignmentPattern" || type === "TSParameterProperty") {
          this.raise(TSErrors.UnsupportedSignatureParameterKind, pattern, {
            type
          });
        }
      }
      return list;
    }
    tsParseTypeMemberSemicolon() {
      if (!this.eat(12) && !this.isLineTerminator()) {
        this.expect(13);
      }
    }
    tsParseSignatureMember(kind, node) {
      this.tsFillSignature(14, node);
      this.tsParseTypeMemberSemicolon();
      return this.finishNode(node, kind);
    }
    tsIsUnambiguouslyIndexSignature() {
      this.next();
      if (tokenIsIdentifier(this.state.type)) {
        this.next();
        return this.match(14);
      }
      return false;
    }
    tsTryParseIndexSignature(node) {
      if (!(this.match(0) && this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this)))) {
        return;
      }
      this.expect(0);
      const id = this.parseIdentifier();
      id.typeAnnotation = this.tsParseTypeAnnotation();
      this.resetEndLocation(id);
      this.expect(3);
      node.parameters = [id];
      const type = this.tsTryParseTypeAnnotation();
      if (type) node.typeAnnotation = type;
      this.tsParseTypeMemberSemicolon();
      return this.finishNode(node, "TSIndexSignature");
    }
    tsParsePropertyOrMethodSignature(node, readonly) {
      if (this.eat(17)) node.optional = true;
      const nodeAny = node;
      if (this.match(10) || this.match(47)) {
        if (readonly) {
          this.raise(TSErrors.ReadonlyForMethodSignature, node);
        }
        const method = nodeAny;
        if (method.kind && this.match(47)) {
          this.raise(TSErrors.AccesorCannotHaveTypeParameters, this.state.curPosition());
        }
        this.tsFillSignature(14, method);
        this.tsParseTypeMemberSemicolon();
        const paramsKey = "parameters";
        const returnTypeKey = "typeAnnotation";
        if (method.kind === "get") {
          if (method[paramsKey].length > 0) {
            this.raise(Errors.BadGetterArity, this.state.curPosition());
            if (this.isThisParam(method[paramsKey][0])) {
              this.raise(TSErrors.AccesorCannotDeclareThisParameter, this.state.curPosition());
            }
          }
        } else if (method.kind === "set") {
          if (method[paramsKey].length !== 1) {
            this.raise(Errors.BadSetterArity, this.state.curPosition());
          } else {
            const firstParameter = method[paramsKey][0];
            if (this.isThisParam(firstParameter)) {
              this.raise(TSErrors.AccesorCannotDeclareThisParameter, this.state.curPosition());
            }
            if (firstParameter.type === "Identifier" && firstParameter.optional) {
              this.raise(TSErrors.SetAccesorCannotHaveOptionalParameter, this.state.curPosition());
            }
            if (firstParameter.type === "RestElement") {
              this.raise(TSErrors.SetAccesorCannotHaveRestParameter, this.state.curPosition());
            }
          }
          if (method[returnTypeKey]) {
            this.raise(TSErrors.SetAccesorCannotHaveReturnType, method[returnTypeKey]);
          }
        } else {
          method.kind = "method";
        }
        return this.finishNode(method, "TSMethodSignature");
      } else {
        const property = nodeAny;
        if (readonly) property.readonly = true;
        const type = this.tsTryParseTypeAnnotation();
        if (type) property.typeAnnotation = type;
        this.tsParseTypeMemberSemicolon();
        return this.finishNode(property, "TSPropertySignature");
      }
    }
    tsParseTypeMember() {
      const node = this.startNode();
      if (this.match(10) || this.match(47)) {
        return this.tsParseSignatureMember("TSCallSignatureDeclaration", node);
      }
      if (this.match(77)) {
        const id = this.startNode();
        this.next();
        if (this.match(10) || this.match(47)) {
          return this.tsParseSignatureMember("TSConstructSignatureDeclaration", node);
        } else {
          node.key = this.createIdentifier(id, "new");
          return this.tsParsePropertyOrMethodSignature(node, false);
        }
      }
      this.tsParseModifiers({
        allowedModifiers: ["readonly"],
        disallowedModifiers: ["declare", "abstract", "private", "protected", "public", "static", "override"]
      }, node);
      const idx = this.tsTryParseIndexSignature(node);
      if (idx) {
        return idx;
      }
      super.parsePropertyName(node);
      if (!node.computed && node.key.type === "Identifier" && (node.key.name === "get" || node.key.name === "set") && this.tsTokenCanFollowModifier()) {
        node.kind = node.key.name;
        super.parsePropertyName(node);
      }
      return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);
    }
    tsParseTypeLiteral() {
      const node = this.startNode();
      node.members = this.tsParseObjectTypeMembers();
      return this.finishNode(node, "TSTypeLiteral");
    }
    tsParseObjectTypeMembers() {
      this.expect(5);
      const members = this.tsParseList("TypeMembers", this.tsParseTypeMember.bind(this));
      this.expect(8);
      return members;
    }
    tsIsStartOfMappedType() {
      this.next();
      if (this.eat(53)) {
        return this.isContextual(122);
      }
      if (this.isContextual(122)) {
        this.next();
      }
      if (!this.match(0)) {
        return false;
      }
      this.next();
      if (!this.tsIsIdentifier()) {
        return false;
      }
      this.next();
      return this.match(58);
    }
    tsParseMappedTypeParameter() {
      const node = this.startNode();
      node.name = this.tsParseTypeParameterName();
      node.constraint = this.tsExpectThenParseType(58);
      return this.finishNode(node, "TSTypeParameter");
    }
    tsParseMappedType() {
      const node = this.startNode();
      this.expect(5);
      if (this.match(53)) {
        node.readonly = this.state.value;
        this.next();
        this.expectContextual(122);
      } else if (this.eatContextual(122)) {
        node.readonly = true;
      }
      this.expect(0);
      node.typeParameter = this.tsParseMappedTypeParameter();
      node.nameType = this.eatContextual(93) ? this.tsParseType() : null;
      this.expect(3);
      if (this.match(53)) {
        node.optional = this.state.value;
        this.next();
        this.expect(17);
      } else if (this.eat(17)) {
        node.optional = true;
      }
      node.typeAnnotation = this.tsTryParseType();
      this.semicolon();
      this.expect(8);
      return this.finishNode(node, "TSMappedType");
    }
    tsParseTupleType() {
      const node = this.startNode();
      node.elementTypes = this.tsParseBracketedList("TupleElementTypes", this.tsParseTupleElementType.bind(this), true, false);
      let seenOptionalElement = false;
      node.elementTypes.forEach(elementNode => {
        const {
          type
        } = elementNode;
        if (seenOptionalElement && type !== "TSRestType" && type !== "TSOptionalType" && !(type === "TSNamedTupleMember" && elementNode.optional)) {
          this.raise(TSErrors.OptionalTypeBeforeRequired, elementNode);
        }
        seenOptionalElement || (seenOptionalElement = type === "TSNamedTupleMember" && elementNode.optional || type === "TSOptionalType");
      });
      return this.finishNode(node, "TSTupleType");
    }
    tsParseTupleElementType() {
      const {
        startLoc
      } = this.state;
      const rest = this.eat(21);
      let labeled;
      let label;
      let optional;
      let type;
      const isWord = tokenIsKeywordOrIdentifier(this.state.type);
      const chAfterWord = isWord ? this.lookaheadCharCode() : null;
      if (chAfterWord === 58) {
        labeled = true;
        optional = false;
        label = this.parseIdentifier(true);
        this.expect(14);
        type = this.tsParseType();
      } else if (chAfterWord === 63) {
        optional = true;
        const startLoc = this.state.startLoc;
        const wordName = this.state.value;
        const typeOrLabel = this.tsParseNonArrayType();
        if (this.lookaheadCharCode() === 58) {
          labeled = true;
          label = this.createIdentifier(this.startNodeAt(startLoc), wordName);
          this.expect(17);
          this.expect(14);
          type = this.tsParseType();
        } else {
          labeled = false;
          type = typeOrLabel;
          this.expect(17);
        }
      } else {
        type = this.tsParseType();
        optional = this.eat(17);
        labeled = this.eat(14);
      }
      if (labeled) {
        let labeledNode;
        if (label) {
          labeledNode = this.startNodeAtNode(label);
          labeledNode.optional = optional;
          labeledNode.label = label;
          labeledNode.elementType = type;
          if (this.eat(17)) {
            labeledNode.optional = true;
            this.raise(TSErrors.TupleOptionalAfterType, this.state.lastTokStartLoc);
          }
        } else {
          labeledNode = this.startNodeAtNode(type);
          labeledNode.optional = optional;
          this.raise(TSErrors.InvalidTupleMemberLabel, type);
          labeledNode.label = type;
          labeledNode.elementType = this.tsParseType();
        }
        type = this.finishNode(labeledNode, "TSNamedTupleMember");
      } else if (optional) {
        const optionalTypeNode = this.startNodeAtNode(type);
        optionalTypeNode.typeAnnotation = type;
        type = this.finishNode(optionalTypeNode, "TSOptionalType");
      }
      if (rest) {
        const restNode = this.startNodeAt(startLoc);
        restNode.typeAnnotation = type;
        type = this.finishNode(restNode, "TSRestType");
      }
      return type;
    }
    tsParseParenthesizedType() {
      const node = this.startNode();
      this.expect(10);
      node.typeAnnotation = this.tsParseType();
      this.expect(11);
      return this.finishNode(node, "TSParenthesizedType");
    }
    tsParseFunctionOrConstructorType(type, abstract) {
      const node = this.startNode();
      if (type === "TSConstructorType") {
        node.abstract = !!abstract;
        if (abstract) this.next();
        this.next();
      }
      this.tsInAllowConditionalTypesContext(() => this.tsFillSignature(19, node));
      return this.finishNode(node, type);
    }
    tsParseLiteralTypeNode() {
      const node = this.startNode();
      switch (this.state.type) {
        case 134:
        case 135:
        case 133:
        case 85:
        case 86:
          node.literal = super.parseExprAtom();
          break;
        default:
          this.unexpected();
      }
      return this.finishNode(node, "TSLiteralType");
    }
    tsParseTemplateLiteralType() {
      const node = this.startNode();
      node.literal = super.parseTemplate(false);
      return this.finishNode(node, "TSLiteralType");
    }
    parseTemplateSubstitution() {
      if (this.state.inType) return this.tsParseType();
      return super.parseTemplateSubstitution();
    }
    tsParseThisTypeOrThisTypePredicate() {
      const thisKeyword = this.tsParseThisTypeNode();
      if (this.isContextual(116) && !this.hasPrecedingLineBreak()) {
        return this.tsParseThisTypePredicate(thisKeyword);
      } else {
        return thisKeyword;
      }
    }
    tsParseNonArrayType() {
      switch (this.state.type) {
        case 133:
        case 134:
        case 135:
        case 85:
        case 86:
          return this.tsParseLiteralTypeNode();
        case 53:
          if (this.state.value === "-") {
            const node = this.startNode();
            const nextToken = this.lookahead();
            if (nextToken.type !== 134 && nextToken.type !== 135) {
              this.unexpected();
            }
            node.literal = this.parseMaybeUnary();
            return this.finishNode(node, "TSLiteralType");
          }
          break;
        case 78:
          return this.tsParseThisTypeOrThisTypePredicate();
        case 87:
          return this.tsParseTypeQuery();
        case 83:
          return this.tsParseImportType();
        case 5:
          return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this)) ? this.tsParseMappedType() : this.tsParseTypeLiteral();
        case 0:
          return this.tsParseTupleType();
        case 10:
          return this.tsParseParenthesizedType();
        case 25:
        case 24:
          return this.tsParseTemplateLiteralType();
        default:
          {
            const {
              type
            } = this.state;
            if (tokenIsIdentifier(type) || type === 88 || type === 84) {
              const nodeType = type === 88 ? "TSVoidKeyword" : type === 84 ? "TSNullKeyword" : keywordTypeFromName(this.state.value);
              if (nodeType !== undefined && this.lookaheadCharCode() !== 46) {
                const node = this.startNode();
                this.next();
                return this.finishNode(node, nodeType);
              }
              return this.tsParseTypeReference();
            }
          }
      }
      this.unexpected();
    }
    tsParseArrayTypeOrHigher() {
      let type = this.tsParseNonArrayType();
      while (!this.hasPrecedingLineBreak() && this.eat(0)) {
        if (this.match(3)) {
          const node = this.startNodeAtNode(type);
          node.elementType = type;
          this.expect(3);
          type = this.finishNode(node, "TSArrayType");
        } else {
          const node = this.startNodeAtNode(type);
          node.objectType = type;
          node.indexType = this.tsParseType();
          this.expect(3);
          type = this.finishNode(node, "TSIndexedAccessType");
        }
      }
      return type;
    }
    tsParseTypeOperator() {
      const node = this.startNode();
      const operator = this.state.value;
      this.next();
      node.operator = operator;
      node.typeAnnotation = this.tsParseTypeOperatorOrHigher();
      if (operator === "readonly") {
        this.tsCheckTypeAnnotationForReadOnly(node);
      }
      return this.finishNode(node, "TSTypeOperator");
    }
    tsCheckTypeAnnotationForReadOnly(node) {
      switch (node.typeAnnotation.type) {
        case "TSTupleType":
        case "TSArrayType":
          return;
        default:
          this.raise(TSErrors.UnexpectedReadonly, node);
      }
    }
    tsParseInferType() {
      const node = this.startNode();
      this.expectContextual(115);
      const typeParameter = this.startNode();
      typeParameter.name = this.tsParseTypeParameterName();
      typeParameter.constraint = this.tsTryParse(() => this.tsParseConstraintForInferType());
      node.typeParameter = this.finishNode(typeParameter, "TSTypeParameter");
      return this.finishNode(node, "TSInferType");
    }
    tsParseConstraintForInferType() {
      if (this.eat(81)) {
        const constraint = this.tsInDisallowConditionalTypesContext(() => this.tsParseType());
        if (this.state.inDisallowConditionalTypesContext || !this.match(17)) {
          return constraint;
        }
      }
    }
    tsParseTypeOperatorOrHigher() {
      const isTypeOperator = tokenIsTSTypeOperator(this.state.type) && !this.state.containsEsc;
      return isTypeOperator ? this.tsParseTypeOperator() : this.isContextual(115) ? this.tsParseInferType() : this.tsInAllowConditionalTypesContext(() => this.tsParseArrayTypeOrHigher());
    }
    tsParseUnionOrIntersectionType(kind, parseConstituentType, operator) {
      const node = this.startNode();
      const hasLeadingOperator = this.eat(operator);
      const types = [];
      do {
        types.push(parseConstituentType());
      } while (this.eat(operator));
      if (types.length === 1 && !hasLeadingOperator) {
        return types[0];
      }
      node.types = types;
      return this.finishNode(node, kind);
    }
    tsParseIntersectionTypeOrHigher() {
      return this.tsParseUnionOrIntersectionType("TSIntersectionType", this.tsParseTypeOperatorOrHigher.bind(this), 45);
    }
    tsParseUnionTypeOrHigher() {
      return this.tsParseUnionOrIntersectionType("TSUnionType", this.tsParseIntersectionTypeOrHigher.bind(this), 43);
    }
    tsIsStartOfFunctionType() {
      if (this.match(47)) {
        return true;
      }
      return this.match(10) && this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));
    }
    tsSkipParameterStart() {
      if (tokenIsIdentifier(this.state.type) || this.match(78)) {
        this.next();
        return true;
      }
      if (this.match(5)) {
        const {
          errors
        } = this.state;
        const previousErrorCount = errors.length;
        try {
          this.parseObjectLike(8, true);
          return errors.length === previousErrorCount;
        } catch (_unused) {
          return false;
        }
      }
      if (this.match(0)) {
        this.next();
        const {
          errors
        } = this.state;
        const previousErrorCount = errors.length;
        try {
          super.parseBindingList(3, 93, 1);
          return errors.length === previousErrorCount;
        } catch (_unused2) {
          return false;
        }
      }
      return false;
    }
    tsIsUnambiguouslyStartOfFunctionType() {
      this.next();
      if (this.match(11) || this.match(21)) {
        return true;
      }
      if (this.tsSkipParameterStart()) {
        if (this.match(14) || this.match(12) || this.match(17) || this.match(29)) {
          return true;
        }
        if (this.match(11)) {
          this.next();
          if (this.match(19)) {
            return true;
          }
        }
      }
      return false;
    }
    tsParseTypeOrTypePredicateAnnotation(returnToken) {
      return this.tsInType(() => {
        const t = this.startNode();
        this.expect(returnToken);
        const node = this.startNode();
        const asserts = !!this.tsTryParse(this.tsParseTypePredicateAsserts.bind(this));
        if (asserts && this.match(78)) {
          let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();
          if (thisTypePredicate.type === "TSThisType") {
            node.parameterName = thisTypePredicate;
            node.asserts = true;
            node.typeAnnotation = null;
            thisTypePredicate = this.finishNode(node, "TSTypePredicate");
          } else {
            this.resetStartLocationFromNode(thisTypePredicate, node);
            thisTypePredicate.asserts = true;
          }
          t.typeAnnotation = thisTypePredicate;
          return this.finishNode(t, "TSTypeAnnotation");
        }
        const typePredicateVariable = this.tsIsIdentifier() && this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));
        if (!typePredicateVariable) {
          if (!asserts) {
            return this.tsParseTypeAnnotation(false, t);
          }
          node.parameterName = this.parseIdentifier();
          node.asserts = asserts;
          node.typeAnnotation = null;
          t.typeAnnotation = this.finishNode(node, "TSTypePredicate");
          return this.finishNode(t, "TSTypeAnnotation");
        }
        const type = this.tsParseTypeAnnotation(false);
        node.parameterName = typePredicateVariable;
        node.typeAnnotation = type;
        node.asserts = asserts;
        t.typeAnnotation = this.finishNode(node, "TSTypePredicate");
        return this.finishNode(t, "TSTypeAnnotation");
      });
    }
    tsTryParseTypeOrTypePredicateAnnotation() {
      if (this.match(14)) {
        return this.tsParseTypeOrTypePredicateAnnotation(14);
      }
    }
    tsTryParseTypeAnnotation() {
      if (this.match(14)) {
        return this.tsParseTypeAnnotation();
      }
    }
    tsTryParseType() {
      return this.tsEatThenParseType(14);
    }
    tsParseTypePredicatePrefix() {
      const id = this.parseIdentifier();
      if (this.isContextual(116) && !this.hasPrecedingLineBreak()) {
        this.next();
        return id;
      }
    }
    tsParseTypePredicateAsserts() {
      if (this.state.type !== 109) {
        return false;
      }
      const containsEsc = this.state.containsEsc;
      this.next();
      if (!tokenIsIdentifier(this.state.type) && !this.match(78)) {
        return false;
      }
      if (containsEsc) {
        this.raise(Errors.InvalidEscapedReservedWord, this.state.lastTokStartLoc, {
          reservedWord: "asserts"
        });
      }
      return true;
    }
    tsParseTypeAnnotation(eatColon = true, t = this.startNode()) {
      this.tsInType(() => {
        if (eatColon) this.expect(14);
        t.typeAnnotation = this.tsParseType();
      });
      return this.finishNode(t, "TSTypeAnnotation");
    }
    tsParseType() {
      assert(this.state.inType);
      const type = this.tsParseNonConditionalType();
      if (this.state.inDisallowConditionalTypesContext || this.hasPrecedingLineBreak() || !this.eat(81)) {
        return type;
      }
      const node = this.startNodeAtNode(type);
      node.checkType = type;
      node.extendsType = this.tsInDisallowConditionalTypesContext(() => this.tsParseNonConditionalType());
      this.expect(17);
      node.trueType = this.tsInAllowConditionalTypesContext(() => this.tsParseType());
      this.expect(14);
      node.falseType = this.tsInAllowConditionalTypesContext(() => this.tsParseType());
      return this.finishNode(node, "TSConditionalType");
    }
    isAbstractConstructorSignature() {
      return this.isContextual(124) && this.lookahead().type === 77;
    }
    tsParseNonConditionalType() {
      if (this.tsIsStartOfFunctionType()) {
        return this.tsParseFunctionOrConstructorType("TSFunctionType");
      }
      if (this.match(77)) {
        return this.tsParseFunctionOrConstructorType("TSConstructorType");
      } else if (this.isAbstractConstructorSignature()) {
        return this.tsParseFunctionOrConstructorType("TSConstructorType", true);
      }
      return this.tsParseUnionTypeOrHigher();
    }
    tsParseTypeAssertion() {
      if (this.getPluginOption("typescript", "disallowAmbiguousJSXLike")) {
        this.raise(TSErrors.ReservedTypeAssertion, this.state.startLoc);
      }
      const node = this.startNode();
      node.typeAnnotation = this.tsInType(() => {
        this.next();
        return this.match(75) ? this.tsParseTypeReference() : this.tsParseType();
      });
      this.expect(48);
      node.expression = this.parseMaybeUnary();
      return this.finishNode(node, "TSTypeAssertion");
    }
    tsParseHeritageClause(token) {
      const originalStartLoc = this.state.startLoc;
      const delimitedList = this.tsParseDelimitedList("HeritageClauseElement", () => {
        const node = this.startNode();
        node.expression = this.tsParseEntityName();
        if (this.match(47)) {
          node.typeParameters = this.tsParseTypeArguments();
        }
        return this.finishNode(node, "TSExpressionWithTypeArguments");
      });
      if (!delimitedList.length) {
        this.raise(TSErrors.EmptyHeritageClauseType, originalStartLoc, {
          token
        });
      }
      return delimitedList;
    }
    tsParseInterfaceDeclaration(node, properties = {}) {
      if (this.hasFollowingLineBreak()) return null;
      this.expectContextual(129);
      if (properties.declare) node.declare = true;
      if (tokenIsIdentifier(this.state.type)) {
        node.id = this.parseIdentifier();
        this.checkIdentifier(node.id, 130);
      } else {
        node.id = null;
        this.raise(TSErrors.MissingInterfaceName, this.state.startLoc);
      }
      node.typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutConstModifiers);
      if (this.eat(81)) {
        node.extends = this.tsParseHeritageClause("extends");
      }
      const body = this.startNode();
      body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));
      node.body = this.finishNode(body, "TSInterfaceBody");
      return this.finishNode(node, "TSInterfaceDeclaration");
    }
    tsParseTypeAliasDeclaration(node) {
      node.id = this.parseIdentifier();
      this.checkIdentifier(node.id, 2);
      node.typeAnnotation = this.tsInType(() => {
        node.typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutModifiers);
        this.expect(29);
        if (this.isContextual(114) && this.lookahead().type !== 16) {
          const node = this.startNode();
          this.next();
          return this.finishNode(node, "TSIntrinsicKeyword");
        }
        return this.tsParseType();
      });
      this.semicolon();
      return this.finishNode(node, "TSTypeAliasDeclaration");
    }
    tsInNoContext(cb) {
      const oldContext = this.state.context;
      this.state.context = [oldContext[0]];
      try {
        return cb();
      } finally {
        this.state.context = oldContext;
      }
    }
    tsInType(cb) {
      const oldInType = this.state.inType;
      this.state.inType = true;
      try {
        return cb();
      } finally {
        this.state.inType = oldInType;
      }
    }
    tsInDisallowConditionalTypesContext(cb) {
      const oldInDisallowConditionalTypesContext = this.state.inDisallowConditionalTypesContext;
      this.state.inDisallowConditionalTypesContext = true;
      try {
        return cb();
      } finally {
        this.state.inDisallowConditionalTypesContext = oldInDisallowConditionalTypesContext;
      }
    }
    tsInAllowConditionalTypesContext(cb) {
      const oldInDisallowConditionalTypesContext = this.state.inDisallowConditionalTypesContext;
      this.state.inDisallowConditionalTypesContext = false;
      try {
        return cb();
      } finally {
        this.state.inDisallowConditionalTypesContext = oldInDisallowConditionalTypesContext;
      }
    }
    tsEatThenParseType(token) {
      if (this.match(token)) {
        return this.tsNextThenParseType();
      }
    }
    tsExpectThenParseType(token) {
      return this.tsInType(() => {
        this.expect(token);
        return this.tsParseType();
      });
    }
    tsNextThenParseType() {
      return this.tsInType(() => {
        this.next();
        return this.tsParseType();
      });
    }
    tsParseEnumMember() {
      const node = this.startNode();
      node.id = this.match(133) ? super.parseStringLiteral(this.state.value) : this.parseIdentifier(true);
      if (this.eat(29)) {
        node.initializer = super.parseMaybeAssignAllowIn();
      }
      return this.finishNode(node, "TSEnumMember");
    }
    tsParseEnumDeclaration(node, properties = {}) {
      if (properties.const) node.const = true;
      if (properties.declare) node.declare = true;
      this.expectContextual(126);
      node.id = this.parseIdentifier();
      this.checkIdentifier(node.id, node.const ? 8971 : 8459);
      this.expect(5);
      node.members = this.tsParseDelimitedList("EnumMembers", this.tsParseEnumMember.bind(this));
      this.expect(8);
      return this.finishNode(node, "TSEnumDeclaration");
    }
    tsParseModuleBlock() {
      const node = this.startNode();
      this.scope.enter(0);
      this.expect(5);
      super.parseBlockOrModuleBlockBody(node.body = [], undefined, true, 8);
      this.scope.exit();
      return this.finishNode(node, "TSModuleBlock");
    }
    tsParseModuleOrNamespaceDeclaration(node, nested = false) {
      node.id = this.parseIdentifier();
      if (!nested) {
        this.checkIdentifier(node.id, 1024);
      }
      if (this.eat(16)) {
        const inner = this.startNode();
        this.tsParseModuleOrNamespaceDeclaration(inner, true);
        node.body = inner;
      } else {
        this.scope.enter(256);
        this.prodParam.enter(0);
        node.body = this.tsParseModuleBlock();
        this.prodParam.exit();
        this.scope.exit();
      }
      return this.finishNode(node, "TSModuleDeclaration");
    }
    tsParseAmbientExternalModuleDeclaration(node) {
      if (this.isContextual(112)) {
        node.global = true;
        node.id = this.parseIdentifier();
      } else if (this.match(133)) {
        node.id = super.parseStringLiteral(this.state.value);
      } else {
        this.unexpected();
      }
      if (this.match(5)) {
        this.scope.enter(256);
        this.prodParam.enter(0);
        node.body = this.tsParseModuleBlock();
        this.prodParam.exit();
        this.scope.exit();
      } else {
        this.semicolon();
      }
      return this.finishNode(node, "TSModuleDeclaration");
    }
    tsParseImportEqualsDeclaration(node, maybeDefaultIdentifier, isExport) {
      node.isExport = isExport || false;
      node.id = maybeDefaultIdentifier || this.parseIdentifier();
      this.checkIdentifier(node.id, 4096);
      this.expect(29);
      const moduleReference = this.tsParseModuleReference();
      if (node.importKind === "type" && moduleReference.type !== "TSExternalModuleReference") {
        this.raise(TSErrors.ImportAliasHasImportType, moduleReference);
      }
      node.moduleReference = moduleReference;
      this.semicolon();
      return this.finishNode(node, "TSImportEqualsDeclaration");
    }
    tsIsExternalModuleReference() {
      return this.isContextual(119) && this.lookaheadCharCode() === 40;
    }
    tsParseModuleReference() {
      return this.tsIsExternalModuleReference() ? this.tsParseExternalModuleReference() : this.tsParseEntityName(false);
    }
    tsParseExternalModuleReference() {
      const node = this.startNode();
      this.expectContextual(119);
      this.expect(10);
      if (!this.match(133)) {
        this.unexpected();
      }
      node.expression = super.parseExprAtom();
      this.expect(11);
      this.sawUnambiguousESM = true;
      return this.finishNode(node, "TSExternalModuleReference");
    }
    tsLookAhead(f) {
      const state = this.state.clone();
      const res = f();
      this.state = state;
      return res;
    }
    tsTryParseAndCatch(f) {
      const result = this.tryParse(abort => f() || abort());
      if (result.aborted || !result.node) return;
      if (result.error) this.state = result.failState;
      return result.node;
    }
    tsTryParse(f) {
      const state = this.state.clone();
      const result = f();
      if (result !== undefined && result !== false) {
        return result;
      }
      this.state = state;
    }
    tsTryParseDeclare(nany) {
      if (this.isLineTerminator()) {
        return;
      }
      let startType = this.state.type;
      let kind;
      if (this.isContextual(100)) {
        startType = 74;
        kind = "let";
      }
      return this.tsInAmbientContext(() => {
        switch (startType) {
          case 68:
            nany.declare = true;
            return super.parseFunctionStatement(nany, false, false);
          case 80:
            nany.declare = true;
            return this.parseClass(nany, true, false);
          case 126:
            return this.tsParseEnumDeclaration(nany, {
              declare: true
            });
          case 112:
            return this.tsParseAmbientExternalModuleDeclaration(nany);
          case 75:
          case 74:
            if (!this.match(75) || !this.isLookaheadContextual("enum")) {
              nany.declare = true;
              return this.parseVarStatement(nany, kind || this.state.value, true);
            }
            this.expect(75);
            return this.tsParseEnumDeclaration(nany, {
              const: true,
              declare: true
            });
          case 129:
            {
              const result = this.tsParseInterfaceDeclaration(nany, {
                declare: true
              });
              if (result) return result;
            }
          default:
            if (tokenIsIdentifier(startType)) {
              return this.tsParseDeclaration(nany, this.state.value, true, null);
            }
        }
      });
    }
    tsTryParseExportDeclaration() {
      return this.tsParseDeclaration(this.startNode(), this.state.value, true, null);
    }
    tsParseExpressionStatement(node, expr, decorators) {
      switch (expr.name) {
        case "declare":
          {
            const declaration = this.tsTryParseDeclare(node);
            if (declaration) {
              declaration.declare = true;
            }
            return declaration;
          }
        case "global":
          if (this.match(5)) {
            this.scope.enter(256);
            this.prodParam.enter(0);
            const mod = node;
            mod.global = true;
            mod.id = expr;
            mod.body = this.tsParseModuleBlock();
            this.scope.exit();
            this.prodParam.exit();
            return this.finishNode(mod, "TSModuleDeclaration");
          }
          break;
        default:
          return this.tsParseDeclaration(node, expr.name, false, decorators);
      }
    }
    tsParseDeclaration(node, value, next, decorators) {
      switch (value) {
        case "abstract":
          if (this.tsCheckLineTerminator(next) && (this.match(80) || tokenIsIdentifier(this.state.type))) {
            return this.tsParseAbstractDeclaration(node, decorators);
          }
          break;
        case "module":
          if (this.tsCheckLineTerminator(next)) {
            if (this.match(133)) {
              return this.tsParseAmbientExternalModuleDeclaration(node);
            } else if (tokenIsIdentifier(this.state.type)) {
              return this.tsParseModuleOrNamespaceDeclaration(node);
            }
          }
          break;
        case "namespace":
          if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type)) {
            return this.tsParseModuleOrNamespaceDeclaration(node);
          }
          break;
        case "type":
          if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type)) {
            return this.tsParseTypeAliasDeclaration(node);
          }
          break;
      }
    }
    tsCheckLineTerminator(next) {
      if (next) {
        if (this.hasFollowingLineBreak()) return false;
        this.next();
        return true;
      }
      return !this.isLineTerminator();
    }
    tsTryParseGenericAsyncArrowFunction(startLoc) {
      if (!this.match(47)) return;
      const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
      this.state.maybeInArrowParameters = true;
      const res = this.tsTryParseAndCatch(() => {
        const node = this.startNodeAt(startLoc);
        node.typeParameters = this.tsParseTypeParameters(this.tsParseConstModifier);
        super.parseFunctionParams(node);
        node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();
        this.expect(19);
        return node;
      });
      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
      if (!res) return;
      return super.parseArrowExpression(res, null, true);
    }
    tsParseTypeArgumentsInExpression() {
      if (this.reScan_lt() !== 47) return;
      return this.tsParseTypeArguments();
    }
    tsParseTypeArguments() {
      const node = this.startNode();
      node.params = this.tsInType(() => this.tsInNoContext(() => {
        this.expect(47);
        return this.tsParseDelimitedList("TypeParametersOrArguments", this.tsParseType.bind(this));
      }));
      if (node.params.length === 0) {
        this.raise(TSErrors.EmptyTypeArguments, node);
      } else if (!this.state.inType && this.curContext() === types.brace) {
        this.reScan_lt_gt();
      }
      this.expect(48);
      return this.finishNode(node, "TSTypeParameterInstantiation");
    }
    tsIsDeclarationStart() {
      return tokenIsTSDeclarationStart(this.state.type);
    }
    isExportDefaultSpecifier() {
      if (this.tsIsDeclarationStart()) return false;
      return super.isExportDefaultSpecifier();
    }
    parseAssignableListItem(flags, decorators) {
      const startLoc = this.state.startLoc;
      const modified = {};
      this.tsParseModifiers({
        allowedModifiers: ["public", "private", "protected", "override", "readonly"]
      }, modified);
      const accessibility = modified.accessibility;
      const override = modified.override;
      const readonly = modified.readonly;
      if (!(flags & 4) && (accessibility || readonly || override)) {
        this.raise(TSErrors.UnexpectedParameterModifier, startLoc);
      }
      const left = this.parseMaybeDefault();
      this.parseAssignableListItemTypes(left, flags);
      const elt = this.parseMaybeDefault(left.loc.start, left);
      if (accessibility || readonly || override) {
        const pp = this.startNodeAt(startLoc);
        if (decorators.length) {
          pp.decorators = decorators;
        }
        if (accessibility) pp.accessibility = accessibility;
        if (readonly) pp.readonly = readonly;
        if (override) pp.override = override;
        if (elt.type !== "Identifier" && elt.type !== "AssignmentPattern") {
          this.raise(TSErrors.UnsupportedParameterPropertyKind, pp);
        }
        pp.parameter = elt;
        return this.finishNode(pp, "TSParameterProperty");
      }
      if (decorators.length) {
        left.decorators = decorators;
      }
      return elt;
    }
    isSimpleParameter(node) {
      return node.type === "TSParameterProperty" && super.isSimpleParameter(node.parameter) || super.isSimpleParameter(node);
    }
    tsDisallowOptionalPattern(node) {
      for (const param of node.params) {
        if (param.type !== "Identifier" && param.optional && !this.state.isAmbientContext) {
          this.raise(TSErrors.PatternIsOptional, param);
        }
      }
    }
    setArrowFunctionParameters(node, params, trailingCommaLoc) {
      super.setArrowFunctionParameters(node, params, trailingCommaLoc);
      this.tsDisallowOptionalPattern(node);
    }
    parseFunctionBodyAndFinish(node, type, isMethod = false) {
      if (this.match(14)) {
        node.returnType = this.tsParseTypeOrTypePredicateAnnotation(14);
      }
      const bodilessType = type === "FunctionDeclaration" ? "TSDeclareFunction" : type === "ClassMethod" || type === "ClassPrivateMethod" ? "TSDeclareMethod" : undefined;
      if (bodilessType && !this.match(5) && this.isLineTerminator()) {
        return this.finishNode(node, bodilessType);
      }
      if (bodilessType === "TSDeclareFunction" && this.state.isAmbientContext) {
        this.raise(TSErrors.DeclareFunctionHasImplementation, node);
        if (node.declare) {
          return super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);
        }
      }
      this.tsDisallowOptionalPattern(node);
      return super.parseFunctionBodyAndFinish(node, type, isMethod);
    }
    registerFunctionStatementId(node) {
      if (!node.body && node.id) {
        this.checkIdentifier(node.id, 1024);
      } else {
        super.registerFunctionStatementId(node);
      }
    }
    tsCheckForInvalidTypeCasts(items) {
      items.forEach(node => {
        if ((node == null ? void 0 : node.type) === "TSTypeCastExpression") {
          this.raise(TSErrors.UnexpectedTypeAnnotation, node.typeAnnotation);
        }
      });
    }
    toReferencedList(exprList, isInParens) {
      this.tsCheckForInvalidTypeCasts(exprList);
      return exprList;
    }
    parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {
      const node = super.parseArrayLike(close, canBePattern, isTuple, refExpressionErrors);
      if (node.type === "ArrayExpression") {
        this.tsCheckForInvalidTypeCasts(node.elements);
      }
      return node;
    }
    parseSubscript(base, startLoc, noCalls, state) {
      if (!this.hasPrecedingLineBreak() && this.match(35)) {
        this.state.canStartJSXElement = false;
        this.next();
        const nonNullExpression = this.startNodeAt(startLoc);
        nonNullExpression.expression = base;
        return this.finishNode(nonNullExpression, "TSNonNullExpression");
      }
      let isOptionalCall = false;
      if (this.match(18) && this.lookaheadCharCode() === 60) {
        if (noCalls) {
          state.stop = true;
          return base;
        }
        state.optionalChainMember = isOptionalCall = true;
        this.next();
      }
      if (this.match(47) || this.match(51)) {
        let missingParenErrorLoc;
        const result = this.tsTryParseAndCatch(() => {
          if (!noCalls && this.atPossibleAsyncArrow(base)) {
            const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(startLoc);
            if (asyncArrowFn) {
              return asyncArrowFn;
            }
          }
          const typeArguments = this.tsParseTypeArgumentsInExpression();
          if (!typeArguments) return;
          if (isOptionalCall && !this.match(10)) {
            missingParenErrorLoc = this.state.curPosition();
            return;
          }
          if (tokenIsTemplate(this.state.type)) {
            const result = super.parseTaggedTemplateExpression(base, startLoc, state);
            result.typeParameters = typeArguments;
            return result;
          }
          if (!noCalls && this.eat(10)) {
            const node = this.startNodeAt(startLoc);
            node.callee = base;
            node.arguments = this.parseCallExpressionArguments(11, false);
            this.tsCheckForInvalidTypeCasts(node.arguments);
            node.typeParameters = typeArguments;
            if (state.optionalChainMember) {
              node.optional = isOptionalCall;
            }
            return this.finishCallExpression(node, state.optionalChainMember);
          }
          const tokenType = this.state.type;
          if (tokenType === 48 || tokenType === 52 || tokenType !== 10 && tokenCanStartExpression(tokenType) && !this.hasPrecedingLineBreak()) {
            return;
          }
          const node = this.startNodeAt(startLoc);
          node.expression = base;
          node.typeParameters = typeArguments;
          return this.finishNode(node, "TSInstantiationExpression");
        });
        if (missingParenErrorLoc) {
          this.unexpected(missingParenErrorLoc, 10);
        }
        if (result) {
          if (result.type === "TSInstantiationExpression" && (this.match(16) || this.match(18) && this.lookaheadCharCode() !== 40)) {
            this.raise(TSErrors.InvalidPropertyAccessAfterInstantiationExpression, this.state.startLoc);
          }
          return result;
        }
      }
      return super.parseSubscript(base, startLoc, noCalls, state);
    }
    parseNewCallee(node) {
      var _callee$extra;
      super.parseNewCallee(node);
      const {
        callee
      } = node;
      if (callee.type === "TSInstantiationExpression" && !((_callee$extra = callee.extra) != null && _callee$extra.parenthesized)) {
        node.typeParameters = callee.typeParameters;
        node.callee = callee.expression;
      }
    }
    parseExprOp(left, leftStartLoc, minPrec) {
      let isSatisfies;
      if (tokenOperatorPrecedence(58) > minPrec && !this.hasPrecedingLineBreak() && (this.isContextual(93) || (isSatisfies = this.isContextual(120)))) {
        const node = this.startNodeAt(leftStartLoc);
        node.expression = left;
        node.typeAnnotation = this.tsInType(() => {
          this.next();
          if (this.match(75)) {
            if (isSatisfies) {
              this.raise(Errors.UnexpectedKeyword, this.state.startLoc, {
                keyword: "const"
              });
            }
            return this.tsParseTypeReference();
          }
          return this.tsParseType();
        });
        this.finishNode(node, isSatisfies ? "TSSatisfiesExpression" : "TSAsExpression");
        this.reScan_lt_gt();
        return this.parseExprOp(node, leftStartLoc, minPrec);
      }
      return super.parseExprOp(left, leftStartLoc, minPrec);
    }
    checkReservedWord(word, startLoc, checkKeywords, isBinding) {
      if (!this.state.isAmbientContext) {
        super.checkReservedWord(word, startLoc, checkKeywords, isBinding);
      }
    }
    checkImportReflection(node) {
      super.checkImportReflection(node);
      if (node.module && node.importKind !== "value") {
        this.raise(TSErrors.ImportReflectionHasImportType, node.specifiers[0].loc.start);
      }
    }
    checkDuplicateExports() {}
    isPotentialImportPhase(isExport) {
      if (super.isPotentialImportPhase(isExport)) return true;
      if (this.isContextual(130)) {
        const ch = this.lookaheadCharCode();
        return isExport ? ch === 123 || ch === 42 : ch !== 61;
      }
      return !isExport && this.isContextual(87);
    }
    applyImportPhase(node, isExport, phase, loc) {
      super.applyImportPhase(node, isExport, phase, loc);
      if (isExport) {
        node.exportKind = phase === "type" ? "type" : "value";
      } else {
        node.importKind = phase === "type" || phase === "typeof" ? phase : "value";
      }
    }
    parseImport(node) {
      if (this.match(133)) {
        node.importKind = "value";
        return super.parseImport(node);
      }
      let importNode;
      if (tokenIsIdentifier(this.state.type) && this.lookaheadCharCode() === 61) {
        node.importKind = "value";
        return this.tsParseImportEqualsDeclaration(node);
      } else if (this.isContextual(130)) {
        const maybeDefaultIdentifier = this.parseMaybeImportPhase(node, false);
        if (this.lookaheadCharCode() === 61) {
          return this.tsParseImportEqualsDeclaration(node, maybeDefaultIdentifier);
        } else {
          importNode = super.parseImportSpecifiersAndAfter(node, maybeDefaultIdentifier);
        }
      } else {
        importNode = super.parseImport(node);
      }
      if (importNode.importKind === "type" && importNode.specifiers.length > 1 && importNode.specifiers[0].type === "ImportDefaultSpecifier") {
        this.raise(TSErrors.TypeImportCannotSpecifyDefaultAndNamed, importNode);
      }
      return importNode;
    }
    parseExport(node, decorators) {
      if (this.match(83)) {
        this.next();
        const nodeImportEquals = node;
        let maybeDefaultIdentifier = null;
        if (this.isContextual(130) && this.isPotentialImportPhase(false)) {
          maybeDefaultIdentifier = this.parseMaybeImportPhase(nodeImportEquals, false);
        } else {
          nodeImportEquals.importKind = "value";
        }
        return this.tsParseImportEqualsDeclaration(nodeImportEquals, maybeDefaultIdentifier, true);
      } else if (this.eat(29)) {
        const assign = node;
        assign.expression = super.parseExpression();
        this.semicolon();
        this.sawUnambiguousESM = true;
        return this.finishNode(assign, "TSExportAssignment");
      } else if (this.eatContextual(93)) {
        const decl = node;
        this.expectContextual(128);
        decl.id = this.parseIdentifier();
        this.semicolon();
        return this.finishNode(decl, "TSNamespaceExportDeclaration");
      } else {
        return super.parseExport(node, decorators);
      }
    }
    isAbstractClass() {
      return this.isContextual(124) && this.lookahead().type === 80;
    }
    parseExportDefaultExpression() {
      if (this.isAbstractClass()) {
        const cls = this.startNode();
        this.next();
        cls.abstract = true;
        return this.parseClass(cls, true, true);
      }
      if (this.match(129)) {
        const result = this.tsParseInterfaceDeclaration(this.startNode());
        if (result) return result;
      }
      return super.parseExportDefaultExpression();
    }
    parseVarStatement(node, kind, allowMissingInitializer = false) {
      const {
        isAmbientContext
      } = this.state;
      const declaration = super.parseVarStatement(node, kind, allowMissingInitializer || isAmbientContext);
      if (!isAmbientContext) return declaration;
      for (const {
        id,
        init
      } of declaration.declarations) {
        if (!init) continue;
        if (kind !== "const" || !!id.typeAnnotation) {
          this.raise(TSErrors.InitializerNotAllowedInAmbientContext, init);
        } else if (!isValidAmbientConstInitializer(init, this.hasPlugin("estree"))) {
          this.raise(TSErrors.ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference, init);
        }
      }
      return declaration;
    }
    parseStatementContent(flags, decorators) {
      if (this.match(75) && this.isLookaheadContextual("enum")) {
        const node = this.startNode();
        this.expect(75);
        return this.tsParseEnumDeclaration(node, {
          const: true
        });
      }
      if (this.isContextual(126)) {
        return this.tsParseEnumDeclaration(this.startNode());
      }
      if (this.isContextual(129)) {
        const result = this.tsParseInterfaceDeclaration(this.startNode());
        if (result) return result;
      }
      return super.parseStatementContent(flags, decorators);
    }
    parseAccessModifier() {
      return this.tsParseModifier(["public", "protected", "private"]);
    }
    tsHasSomeModifiers(member, modifiers) {
      return modifiers.some(modifier => {
        if (tsIsAccessModifier(modifier)) {
          return member.accessibility === modifier;
        }
        return !!member[modifier];
      });
    }
    tsIsStartOfStaticBlocks() {
      return this.isContextual(106) && this.lookaheadCharCode() === 123;
    }
    parseClassMember(classBody, member, state) {
      const modifiers = ["declare", "private", "public", "protected", "override", "abstract", "readonly", "static"];
      this.tsParseModifiers({
        allowedModifiers: modifiers,
        disallowedModifiers: ["in", "out"],
        stopOnStartOfClassStaticBlock: true,
        errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions
      }, member);
      const callParseClassMemberWithIsStatic = () => {
        if (this.tsIsStartOfStaticBlocks()) {
          this.next();
          this.next();
          if (this.tsHasSomeModifiers(member, modifiers)) {
            this.raise(TSErrors.StaticBlockCannotHaveModifier, this.state.curPosition());
          }
          super.parseClassStaticBlock(classBody, member);
        } else {
          this.parseClassMemberWithIsStatic(classBody, member, state, !!member.static);
        }
      };
      if (member.declare) {
        this.tsInAmbientContext(callParseClassMemberWithIsStatic);
      } else {
        callParseClassMemberWithIsStatic();
      }
    }
    parseClassMemberWithIsStatic(classBody, member, state, isStatic) {
      const idx = this.tsTryParseIndexSignature(member);
      if (idx) {
        classBody.body.push(idx);
        if (member.abstract) {
          this.raise(TSErrors.IndexSignatureHasAbstract, member);
        }
        if (member.accessibility) {
          this.raise(TSErrors.IndexSignatureHasAccessibility, member, {
            modifier: member.accessibility
          });
        }
        if (member.declare) {
          this.raise(TSErrors.IndexSignatureHasDeclare, member);
        }
        if (member.override) {
          this.raise(TSErrors.IndexSignatureHasOverride, member);
        }
        return;
      }
      if (!this.state.inAbstractClass && member.abstract) {
        this.raise(TSErrors.NonAbstractClassHasAbstractMethod, member);
      }
      if (member.override) {
        if (!state.hadSuperClass) {
          this.raise(TSErrors.OverrideNotInSubClass, member);
        }
      }
      super.parseClassMemberWithIsStatic(classBody, member, state, isStatic);
    }
    parsePostMemberNameModifiers(methodOrProp) {
      const optional = this.eat(17);
      if (optional) methodOrProp.optional = true;
      if (methodOrProp.readonly && this.match(10)) {
        this.raise(TSErrors.ClassMethodHasReadonly, methodOrProp);
      }
      if (methodOrProp.declare && this.match(10)) {
        this.raise(TSErrors.ClassMethodHasDeclare, methodOrProp);
      }
    }
    parseExpressionStatement(node, expr, decorators) {
      const decl = expr.type === "Identifier" ? this.tsParseExpressionStatement(node, expr, decorators) : undefined;
      return decl || super.parseExpressionStatement(node, expr, decorators);
    }
    shouldParseExportDeclaration() {
      if (this.tsIsDeclarationStart()) return true;
      return super.shouldParseExportDeclaration();
    }
    parseConditional(expr, startLoc, refExpressionErrors) {
      if (!this.state.maybeInArrowParameters || !this.match(17)) {
        return super.parseConditional(expr, startLoc, refExpressionErrors);
      }
      const result = this.tryParse(() => super.parseConditional(expr, startLoc));
      if (!result.node) {
        if (result.error) {
          super.setOptionalParametersError(refExpressionErrors, result.error);
        }
        return expr;
      }
      if (result.error) this.state = result.failState;
      return result.node;
    }
    parseParenItem(node, startLoc) {
      const newNode = super.parseParenItem(node, startLoc);
      if (this.eat(17)) {
        newNode.optional = true;
        this.resetEndLocation(node);
      }
      if (this.match(14)) {
        const typeCastNode = this.startNodeAt(startLoc);
        typeCastNode.expression = node;
        typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();
        return this.finishNode(typeCastNode, "TSTypeCastExpression");
      }
      return node;
    }
    parseExportDeclaration(node) {
      if (!this.state.isAmbientContext && this.isContextual(125)) {
        return this.tsInAmbientContext(() => this.parseExportDeclaration(node));
      }
      const startLoc = this.state.startLoc;
      const isDeclare = this.eatContextual(125);
      if (isDeclare && (this.isContextual(125) || !this.shouldParseExportDeclaration())) {
        throw this.raise(TSErrors.ExpectedAmbientAfterExportDeclare, this.state.startLoc);
      }
      const isIdentifier = tokenIsIdentifier(this.state.type);
      const declaration = isIdentifier && this.tsTryParseExportDeclaration() || super.parseExportDeclaration(node);
      if (!declaration) return null;
      if (declaration.type === "TSInterfaceDeclaration" || declaration.type === "TSTypeAliasDeclaration" || isDeclare) {
        node.exportKind = "type";
      }
      if (isDeclare) {
        this.resetStartLocation(declaration, startLoc);
        declaration.declare = true;
      }
      return declaration;
    }
    parseClassId(node, isStatement, optionalId, bindingType) {
      if ((!isStatement || optionalId) && this.isContextual(113)) {
        return;
      }
      super.parseClassId(node, isStatement, optionalId, node.declare ? 1024 : 8331);
      const typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutConstModifiers);
      if (typeParameters) node.typeParameters = typeParameters;
    }
    parseClassPropertyAnnotation(node) {
      if (!node.optional) {
        if (this.eat(35)) {
          node.definite = true;
        } else if (this.eat(17)) {
          node.optional = true;
        }
      }
      const type = this.tsTryParseTypeAnnotation();
      if (type) node.typeAnnotation = type;
    }
    parseClassProperty(node) {
      this.parseClassPropertyAnnotation(node);
      if (this.state.isAmbientContext && !(node.readonly && !node.typeAnnotation) && this.match(29)) {
        this.raise(TSErrors.DeclareClassFieldHasInitializer, this.state.startLoc);
      }
      if (node.abstract && this.match(29)) {
        const {
          key
        } = node;
        this.raise(TSErrors.AbstractPropertyHasInitializer, this.state.startLoc, {
          propertyName: key.type === "Identifier" && !node.computed ? key.name : `[${this.input.slice(key.start, key.end)}]`
        });
      }
      return super.parseClassProperty(node);
    }
    parseClassPrivateProperty(node) {
      if (node.abstract) {
        this.raise(TSErrors.PrivateElementHasAbstract, node);
      }
      if (node.accessibility) {
        this.raise(TSErrors.PrivateElementHasAccessibility, node, {
          modifier: node.accessibility
        });
      }
      this.parseClassPropertyAnnotation(node);
      return super.parseClassPrivateProperty(node);
    }
    parseClassAccessorProperty(node) {
      this.parseClassPropertyAnnotation(node);
      if (node.optional) {
        this.raise(TSErrors.AccessorCannotBeOptional, node);
      }
      return super.parseClassAccessorProperty(node);
    }
    pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
      const typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);
      if (typeParameters && isConstructor) {
        this.raise(TSErrors.ConstructorHasTypeParameters, typeParameters);
      }
      const {
        declare = false,
        kind
      } = method;
      if (declare && (kind === "get" || kind === "set")) {
        this.raise(TSErrors.DeclareAccessor, method, {
          kind
        });
      }
      if (typeParameters) method.typeParameters = typeParameters;
      super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);
    }
    pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {
      const typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);
      if (typeParameters) method.typeParameters = typeParameters;
      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);
    }
    declareClassPrivateMethodInScope(node, kind) {
      if (node.type === "TSDeclareMethod") return;
      if (node.type === "MethodDefinition" && !hasOwnProperty.call(node.value, "body")) {
        return;
      }
      super.declareClassPrivateMethodInScope(node, kind);
    }
    parseClassSuper(node) {
      super.parseClassSuper(node);
      if (node.superClass && (this.match(47) || this.match(51))) {
        node.superTypeParameters = this.tsParseTypeArgumentsInExpression();
      }
      if (this.eatContextual(113)) {
        node.implements = this.tsParseHeritageClause("implements");
      }
    }
    parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {
      const typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);
      if (typeParameters) prop.typeParameters = typeParameters;
      return super.parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);
    }
    parseFunctionParams(node, isConstructor) {
      const typeParameters = this.tsTryParseTypeParameters(this.tsParseConstModifier);
      if (typeParameters) node.typeParameters = typeParameters;
      super.parseFunctionParams(node, isConstructor);
    }
    parseVarId(decl, kind) {
      super.parseVarId(decl, kind);
      if (decl.id.type === "Identifier" && !this.hasPrecedingLineBreak() && this.eat(35)) {
        decl.definite = true;
      }
      const type = this.tsTryParseTypeAnnotation();
      if (type) {
        decl.id.typeAnnotation = type;
        this.resetEndLocation(decl.id);
      }
    }
    parseAsyncArrowFromCallExpression(node, call) {
      if (this.match(14)) {
        node.returnType = this.tsParseTypeAnnotation();
      }
      return super.parseAsyncArrowFromCallExpression(node, call);
    }
    parseMaybeAssign(refExpressionErrors, afterLeftParse) {
      var _jsx, _jsx2, _typeCast, _jsx3, _typeCast2;
      let state;
      let jsx;
      let typeCast;
      if (this.hasPlugin("jsx") && (this.match(142) || this.match(47))) {
        state = this.state.clone();
        jsx = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state);
        if (!jsx.error) return jsx.node;
        const {
          context
        } = this.state;
        const currentContext = context[context.length - 1];
        if (currentContext === types.j_oTag || currentContext === types.j_expr) {
          context.pop();
        }
      }
      if (!((_jsx = jsx) != null && _jsx.error) && !this.match(47)) {
        return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);
      }
      if (!state || state === this.state) state = this.state.clone();
      let typeParameters;
      const arrow = this.tryParse(abort => {
        var _expr$extra, _typeParameters;
        typeParameters = this.tsParseTypeParameters(this.tsParseConstModifier);
        const expr = super.parseMaybeAssign(refExpressionErrors, afterLeftParse);
        if (expr.type !== "ArrowFunctionExpression" || (_expr$extra = expr.extra) != null && _expr$extra.parenthesized) {
          abort();
        }
        if (((_typeParameters = typeParameters) == null ? void 0 : _typeParameters.params.length) !== 0) {
          this.resetStartLocationFromNode(expr, typeParameters);
        }
        expr.typeParameters = typeParameters;
        return expr;
      }, state);
      if (!arrow.error && !arrow.aborted) {
        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);
        return arrow.node;
      }
      if (!jsx) {
        assert(!this.hasPlugin("jsx"));
        typeCast = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state);
        if (!typeCast.error) return typeCast.node;
      }
      if ((_jsx2 = jsx) != null && _jsx2.node) {
        this.state = jsx.failState;
        return jsx.node;
      }
      if (arrow.node) {
        this.state = arrow.failState;
        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);
        return arrow.node;
      }
      if ((_typeCast = typeCast) != null && _typeCast.node) {
        this.state = typeCast.failState;
        return typeCast.node;
      }
      throw ((_jsx3 = jsx) == null ? void 0 : _jsx3.error) || arrow.error || ((_typeCast2 = typeCast) == null ? void 0 : _typeCast2.error);
    }
    reportReservedArrowTypeParam(node) {
      var _node$extra;
      if (node.params.length === 1 && !node.params[0].constraint && !((_node$extra = node.extra) != null && _node$extra.trailingComma) && this.getPluginOption("typescript", "disallowAmbiguousJSXLike")) {
        this.raise(TSErrors.ReservedArrowTypeParam, node);
      }
    }
    parseMaybeUnary(refExpressionErrors, sawUnary) {
      if (!this.hasPlugin("jsx") && this.match(47)) {
        return this.tsParseTypeAssertion();
      }
      return super.parseMaybeUnary(refExpressionErrors, sawUnary);
    }
    parseArrow(node) {
      if (this.match(14)) {
        const result = this.tryParse(abort => {
          const returnType = this.tsParseTypeOrTypePredicateAnnotation(14);
          if (this.canInsertSemicolon() || !this.match(19)) abort();
          return returnType;
        });
        if (result.aborted) return;
        if (!result.thrown) {
          if (result.error) this.state = result.failState;
          node.returnType = result.node;
        }
      }
      return super.parseArrow(node);
    }
    parseAssignableListItemTypes(param, flags) {
      if (!(flags & 2)) return param;
      if (this.eat(17)) {
        param.optional = true;
      }
      const type = this.tsTryParseTypeAnnotation();
      if (type) param.typeAnnotation = type;
      this.resetEndLocation(param);
      return param;
    }
    isAssignable(node, isBinding) {
      switch (node.type) {
        case "TSTypeCastExpression":
          return this.isAssignable(node.expression, isBinding);
        case "TSParameterProperty":
          return true;
        default:
          return super.isAssignable(node, isBinding);
      }
    }
    toAssignable(node, isLHS = false) {
      switch (node.type) {
        case "ParenthesizedExpression":
          this.toAssignableParenthesizedExpression(node, isLHS);
          break;
        case "TSAsExpression":
        case "TSSatisfiesExpression":
        case "TSNonNullExpression":
        case "TSTypeAssertion":
          if (isLHS) {
            this.expressionScope.recordArrowParameterBindingError(TSErrors.UnexpectedTypeCastInParameter, node);
          } else {
            this.raise(TSErrors.UnexpectedTypeCastInParameter, node);
          }
          this.toAssignable(node.expression, isLHS);
          break;
        case "AssignmentExpression":
          if (!isLHS && node.left.type === "TSTypeCastExpression") {
            node.left = this.typeCastToParameter(node.left);
          }
        default:
          super.toAssignable(node, isLHS);
      }
    }
    toAssignableParenthesizedExpression(node, isLHS) {
      switch (node.expression.type) {
        case "TSAsExpression":
        case "TSSatisfiesExpression":
        case "TSNonNullExpression":
        case "TSTypeAssertion":
        case "ParenthesizedExpression":
          this.toAssignable(node.expression, isLHS);
          break;
        default:
          super.toAssignable(node, isLHS);
      }
    }
    checkToRestConversion(node, allowPattern) {
      switch (node.type) {
        case "TSAsExpression":
        case "TSSatisfiesExpression":
        case "TSTypeAssertion":
        case "TSNonNullExpression":
          this.checkToRestConversion(node.expression, false);
          break;
        default:
          super.checkToRestConversion(node, allowPattern);
      }
    }
    isValidLVal(type, isUnparenthesizedInAssign, binding) {
      switch (type) {
        case "TSTypeCastExpression":
          return true;
        case "TSParameterProperty":
          return "parameter";
        case "TSNonNullExpression":
        case "TSInstantiationExpression":
          return "expression";
        case "TSAsExpression":
        case "TSSatisfiesExpression":
        case "TSTypeAssertion":
          return (binding !== 64 || !isUnparenthesizedInAssign) && ["expression", true];
        default:
          return super.isValidLVal(type, isUnparenthesizedInAssign, binding);
      }
    }
    parseBindingAtom() {
      if (this.state.type === 78) {
        return this.parseIdentifier(true);
      }
      return super.parseBindingAtom();
    }
    parseMaybeDecoratorArguments(expr) {
      if (this.match(47) || this.match(51)) {
        const typeArguments = this.tsParseTypeArgumentsInExpression();
        if (this.match(10)) {
          const call = super.parseMaybeDecoratorArguments(expr);
          call.typeParameters = typeArguments;
          return call;
        }
        this.unexpected(null, 10);
      }
      return super.parseMaybeDecoratorArguments(expr);
    }
    checkCommaAfterRest(close) {
      if (this.state.isAmbientContext && this.match(12) && this.lookaheadCharCode() === close) {
        this.next();
        return false;
      }
      return super.checkCommaAfterRest(close);
    }
    isClassMethod() {
      return this.match(47) || super.isClassMethod();
    }
    isClassProperty() {
      return this.match(35) || this.match(14) || super.isClassProperty();
    }
    parseMaybeDefault(startLoc, left) {
      const node = super.parseMaybeDefault(startLoc, left);
      if (node.type === "AssignmentPattern" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {
        this.raise(TSErrors.TypeAnnotationAfterAssign, node.typeAnnotation);
      }
      return node;
    }
    getTokenFromCode(code) {
      if (this.state.inType) {
        if (code === 62) {
          this.finishOp(48, 1);
          return;
        }
        if (code === 60) {
          this.finishOp(47, 1);
          return;
        }
      }
      super.getTokenFromCode(code);
    }
    reScan_lt_gt() {
      const {
        type
      } = this.state;
      if (type === 47) {
        this.state.pos -= 1;
        this.readToken_lt();
      } else if (type === 48) {
        this.state.pos -= 1;
        this.readToken_gt();
      }
    }
    reScan_lt() {
      const {
        type
      } = this.state;
      if (type === 51) {
        this.state.pos -= 2;
        this.finishOp(47, 1);
        return 47;
      }
      return type;
    }
    toAssignableList(exprList, trailingCommaLoc, isLHS) {
      for (let i = 0; i < exprList.length; i++) {
        const expr = exprList[i];
        if ((expr == null ? void 0 : expr.type) === "TSTypeCastExpression") {
          exprList[i] = this.typeCastToParameter(expr);
        }
      }
      super.toAssignableList(exprList, trailingCommaLoc, isLHS);
    }
    typeCastToParameter(node) {
      node.expression.typeAnnotation = node.typeAnnotation;
      this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);
      return node.expression;
    }
    shouldParseArrow(params) {
      if (this.match(14)) {
        return params.every(expr => this.isAssignable(expr, true));
      }
      return super.shouldParseArrow(params);
    }
    shouldParseAsyncArrow() {
      return this.match(14) || super.shouldParseAsyncArrow();
    }
    canHaveLeadingDecorator() {
      return super.canHaveLeadingDecorator() || this.isAbstractClass();
    }
    jsxParseOpeningElementAfterName(node) {
      if (this.match(47) || this.match(51)) {
        const typeArguments = this.tsTryParseAndCatch(() => this.tsParseTypeArgumentsInExpression());
        if (typeArguments) node.typeParameters = typeArguments;
      }
      return super.jsxParseOpeningElementAfterName(node);
    }
    getGetterSetterExpectedParamCount(method) {
      const baseCount = super.getGetterSetterExpectedParamCount(method);
      const params = this.getObjectOrClassMethodParams(method);
      const firstParam = params[0];
      const hasContextParam = firstParam && this.isThisParam(firstParam);
      return hasContextParam ? baseCount + 1 : baseCount;
    }
    parseCatchClauseParam() {
      const param = super.parseCatchClauseParam();
      const type = this.tsTryParseTypeAnnotation();
      if (type) {
        param.typeAnnotation = type;
        this.resetEndLocation(param);
      }
      return param;
    }
    tsInAmbientContext(cb) {
      const {
        isAmbientContext: oldIsAmbientContext,
        strict: oldStrict
      } = this.state;
      this.state.isAmbientContext = true;
      this.state.strict = false;
      try {
        return cb();
      } finally {
        this.state.isAmbientContext = oldIsAmbientContext;
        this.state.strict = oldStrict;
      }
    }
    parseClass(node, isStatement, optionalId) {
      const oldInAbstractClass = this.state.inAbstractClass;
      this.state.inAbstractClass = !!node.abstract;
      try {
        return super.parseClass(node, isStatement, optionalId);
      } finally {
        this.state.inAbstractClass = oldInAbstractClass;
      }
    }
    tsParseAbstractDeclaration(node, decorators) {
      if (this.match(80)) {
        node.abstract = true;
        return this.maybeTakeDecorators(decorators, this.parseClass(node, true, false));
      } else if (this.isContextual(129)) {
        if (!this.hasFollowingLineBreak()) {
          node.abstract = true;
          this.raise(TSErrors.NonClassMethodPropertyHasAbstractModifer, node);
          return this.tsParseInterfaceDeclaration(node);
        }
      } else {
        this.unexpected(null, 80);
      }
    }
    parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope) {
      const method = super.parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);
      if (method.abstract) {
        const hasBody = this.hasPlugin("estree") ? !!method.value.body : !!method.body;
        if (hasBody) {
          const {
            key
          } = method;
          this.raise(TSErrors.AbstractMethodHasImplementation, method, {
            methodName: key.type === "Identifier" && !method.computed ? key.name : `[${this.input.slice(key.start, key.end)}]`
          });
        }
      }
      return method;
    }
    tsParseTypeParameterName() {
      const typeName = this.parseIdentifier();
      return typeName.name;
    }
    shouldParseAsAmbientContext() {
      return !!this.getPluginOption("typescript", "dts");
    }
    parse() {
      if (this.shouldParseAsAmbientContext()) {
        this.state.isAmbientContext = true;
      }
      return super.parse();
    }
    getExpression() {
      if (this.shouldParseAsAmbientContext()) {
        this.state.isAmbientContext = true;
      }
      return super.getExpression();
    }
    parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly) {
      if (!isString && isMaybeTypeOnly) {
        this.parseTypeOnlyImportExportSpecifier(node, false, isInTypeExport);
        return this.finishNode(node, "ExportSpecifier");
      }
      node.exportKind = "value";
      return super.parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly);
    }
    parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, bindingType) {
      if (!importedIsString && isMaybeTypeOnly) {
        this.parseTypeOnlyImportExportSpecifier(specifier, true, isInTypeOnlyImport);
        return this.finishNode(specifier, "ImportSpecifier");
      }
      specifier.importKind = "value";
      return super.parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, isInTypeOnlyImport ? 4098 : 4096);
    }
    parseTypeOnlyImportExportSpecifier(node, isImport, isInTypeOnlyImportExport) {
      const leftOfAsKey = isImport ? "imported" : "local";
      const rightOfAsKey = isImport ? "local" : "exported";
      let leftOfAs = node[leftOfAsKey];
      let rightOfAs;
      let hasTypeSpecifier = false;
      let canParseAsKeyword = true;
      const loc = leftOfAs.loc.start;
      if (this.isContextual(93)) {
        const firstAs = this.parseIdentifier();
        if (this.isContextual(93)) {
          const secondAs = this.parseIdentifier();
          if (tokenIsKeywordOrIdentifier(this.state.type)) {
            hasTypeSpecifier = true;
            leftOfAs = firstAs;
            rightOfAs = isImport ? this.parseIdentifier() : this.parseModuleExportName();
            canParseAsKeyword = false;
          } else {
            rightOfAs = secondAs;
            canParseAsKeyword = false;
          }
        } else if (tokenIsKeywordOrIdentifier(this.state.type)) {
          canParseAsKeyword = false;
          rightOfAs = isImport ? this.parseIdentifier() : this.parseModuleExportName();
        } else {
          hasTypeSpecifier = true;
          leftOfAs = firstAs;
        }
      } else if (tokenIsKeywordOrIdentifier(this.state.type)) {
        hasTypeSpecifier = true;
        if (isImport) {
          leftOfAs = this.parseIdentifier(true);
          if (!this.isContextual(93)) {
            this.checkReservedWord(leftOfAs.name, leftOfAs.loc.start, true, true);
          }
        } else {
          leftOfAs = this.parseModuleExportName();
        }
      }
      if (hasTypeSpecifier && isInTypeOnlyImportExport) {
        this.raise(isImport ? TSErrors.TypeModifierIsUsedInTypeImports : TSErrors.TypeModifierIsUsedInTypeExports, loc);
      }
      node[leftOfAsKey] = leftOfAs;
      node[rightOfAsKey] = rightOfAs;
      const kindKey = isImport ? "importKind" : "exportKind";
      node[kindKey] = hasTypeSpecifier ? "type" : "value";
      if (canParseAsKeyword && this.eatContextual(93)) {
        node[rightOfAsKey] = isImport ? this.parseIdentifier() : this.parseModuleExportName();
      }
      if (!node[rightOfAsKey]) {
        node[rightOfAsKey] = cloneIdentifier(node[leftOfAsKey]);
      }
      if (isImport) {
        this.checkIdentifier(node[rightOfAsKey], hasTypeSpecifier ? 4098 : 4096);
      }
    }
  };
  function isPossiblyLiteralEnum(expression) {
    if (expression.type !== "MemberExpression") return false;
    const {
      computed,
      property
    } = expression;
    if (computed && property.type !== "StringLiteral" && (property.type !== "TemplateLiteral" || property.expressions.length > 0)) {
      return false;
    }
    return isUncomputedMemberExpressionChain(expression.object);
  }
  function isValidAmbientConstInitializer(expression, estree) {
    var _expression$extra;
    const {
      type
    } = expression;
    if ((_expression$extra = expression.extra) != null && _expression$extra.parenthesized) {
      return false;
    }
    if (estree) {
      if (type === "Literal") {
        const {
          value
        } = expression;
        if (typeof value === "string" || typeof value === "boolean") {
          return true;
        }
      }
    } else {
      if (type === "StringLiteral" || type === "BooleanLiteral") {
        return true;
      }
    }
    if (isNumber(expression, estree) || isNegativeNumber(expression, estree)) {
      return true;
    }
    if (type === "TemplateLiteral" && expression.expressions.length === 0) {
      return true;
    }
    if (isPossiblyLiteralEnum(expression)) {
      return true;
    }
    return false;
  }
  function isNumber(expression, estree) {
    if (estree) {
      return expression.type === "Literal" && (typeof expression.value === "number" || "bigint" in expression);
    }
    return expression.type === "NumericLiteral" || expression.type === "BigIntLiteral";
  }
  function isNegativeNumber(expression, estree) {
    if (expression.type === "UnaryExpression") {
      const {
        operator,
        argument
      } = expression;
      if (operator === "-" && isNumber(argument, estree)) {
        return true;
      }
    }
    return false;
  }
  function isUncomputedMemberExpressionChain(expression) {
    if (expression.type === "Identifier") return true;
    if (expression.type !== "MemberExpression" || expression.computed) {
      return false;
    }
    return isUncomputedMemberExpressionChain(expression.object);
  }
  const PlaceholderErrors = ParseErrorEnum`placeholders`({
    ClassNameIsRequired: "A class name is required.",
    UnexpectedSpace: "Unexpected space in placeholder."
  });
  var placeholders = superClass => class PlaceholdersParserMixin extends superClass {
    parsePlaceholder(expectedNode) {
      if (this.match(144)) {
        const node = this.startNode();
        this.next();
        this.assertNoSpace();
        node.name = super.parseIdentifier(true);
        this.assertNoSpace();
        this.expect(144);
        return this.finishPlaceholder(node, expectedNode);
      }
    }
    finishPlaceholder(node, expectedNode) {
      let placeholder = node;
      if (!placeholder.expectedNode || !placeholder.type) {
        placeholder = this.finishNode(placeholder, "Placeholder");
      }
      placeholder.expectedNode = expectedNode;
      return placeholder;
    }
    getTokenFromCode(code) {
      if (code === 37 && this.input.charCodeAt(this.state.pos + 1) === 37) {
        this.finishOp(144, 2);
      } else {
        super.getTokenFromCode(code);
      }
    }
    parseExprAtom(refExpressionErrors) {
      return this.parsePlaceholder("Expression") || super.parseExprAtom(refExpressionErrors);
    }
    parseIdentifier(liberal) {
      return this.parsePlaceholder("Identifier") || super.parseIdentifier(liberal);
    }
    checkReservedWord(word, startLoc, checkKeywords, isBinding) {
      if (word !== undefined) {
        super.checkReservedWord(word, startLoc, checkKeywords, isBinding);
      }
    }
    parseBindingAtom() {
      return this.parsePlaceholder("Pattern") || super.parseBindingAtom();
    }
    isValidLVal(type, isParenthesized, binding) {
      return type === "Placeholder" || super.isValidLVal(type, isParenthesized, binding);
    }
    toAssignable(node, isLHS) {
      if (node && node.type === "Placeholder" && node.expectedNode === "Expression") {
        node.expectedNode = "Pattern";
      } else {
        super.toAssignable(node, isLHS);
      }
    }
    chStartsBindingIdentifier(ch, pos) {
      if (super.chStartsBindingIdentifier(ch, pos)) {
        return true;
      }
      const nextToken = this.lookahead();
      if (nextToken.type === 144) {
        return true;
      }
      return false;
    }
    verifyBreakContinue(node, isBreak) {
      if (node.label && node.label.type === "Placeholder") return;
      super.verifyBreakContinue(node, isBreak);
    }
    parseExpressionStatement(node, expr) {
      var _expr$extra;
      if (expr.type !== "Placeholder" || (_expr$extra = expr.extra) != null && _expr$extra.parenthesized) {
        return super.parseExpressionStatement(node, expr);
      }
      if (this.match(14)) {
        const stmt = node;
        stmt.label = this.finishPlaceholder(expr, "Identifier");
        this.next();
        stmt.body = super.parseStatementOrSloppyAnnexBFunctionDeclaration();
        return this.finishNode(stmt, "LabeledStatement");
      }
      this.semicolon();
      const stmtPlaceholder = node;
      stmtPlaceholder.name = expr.name;
      return this.finishPlaceholder(stmtPlaceholder, "Statement");
    }
    parseBlock(allowDirectives, createNewLexicalScope, afterBlockParse) {
      return this.parsePlaceholder("BlockStatement") || super.parseBlock(allowDirectives, createNewLexicalScope, afterBlockParse);
    }
    parseFunctionId(requireId) {
      return this.parsePlaceholder("Identifier") || super.parseFunctionId(requireId);
    }
    parseClass(node, isStatement, optionalId) {
      const type = isStatement ? "ClassDeclaration" : "ClassExpression";
      this.next();
      const oldStrict = this.state.strict;
      const placeholder = this.parsePlaceholder("Identifier");
      if (placeholder) {
        if (this.match(81) || this.match(144) || this.match(5)) {
          node.id = placeholder;
        } else if (optionalId || !isStatement) {
          node.id = null;
          node.body = this.finishPlaceholder(placeholder, "ClassBody");
          return this.finishNode(node, type);
        } else {
          throw this.raise(PlaceholderErrors.ClassNameIsRequired, this.state.startLoc);
        }
      } else {
        this.parseClassId(node, isStatement, optionalId);
      }
      super.parseClassSuper(node);
      node.body = this.parsePlaceholder("ClassBody") || super.parseClassBody(!!node.superClass, oldStrict);
      return this.finishNode(node, type);
    }
    parseExport(node, decorators) {
      const placeholder = this.parsePlaceholder("Identifier");
      if (!placeholder) return super.parseExport(node, decorators);
      const node2 = node;
      if (!this.isContextual(98) && !this.match(12)) {
        node2.specifiers = [];
        node2.source = null;
        node2.declaration = this.finishPlaceholder(placeholder, "Declaration");
        return this.finishNode(node2, "ExportNamedDeclaration");
      }
      this.expectPlugin("exportDefaultFrom");
      const specifier = this.startNode();
      specifier.exported = placeholder;
      node2.specifiers = [this.finishNode(specifier, "ExportDefaultSpecifier")];
      return super.parseExport(node2, decorators);
    }
    isExportDefaultSpecifier() {
      if (this.match(65)) {
        const next = this.nextTokenStart();
        if (this.isUnparsedContextual(next, "from")) {
          if (this.input.startsWith(tokenLabelName(144), this.nextTokenStartSince(next + 4))) {
            return true;
          }
        }
      }
      return super.isExportDefaultSpecifier();
    }
    maybeParseExportDefaultSpecifier(node, maybeDefaultIdentifier) {
      var _specifiers;
      if ((_specifiers = node.specifiers) != null && _specifiers.length) {
        return true;
      }
      return super.maybeParseExportDefaultSpecifier(node, maybeDefaultIdentifier);
    }
    checkExport(node) {
      const {
        specifiers
      } = node;
      if (specifiers != null && specifiers.length) {
        node.specifiers = specifiers.filter(node => node.exported.type === "Placeholder");
      }
      super.checkExport(node);
      node.specifiers = specifiers;
    }
    parseImport(node) {
      const placeholder = this.parsePlaceholder("Identifier");
      if (!placeholder) return super.parseImport(node);
      node.specifiers = [];
      if (!this.isContextual(98) && !this.match(12)) {
        node.source = this.finishPlaceholder(placeholder, "StringLiteral");
        this.semicolon();
        return this.finishNode(node, "ImportDeclaration");
      }
      const specifier = this.startNodeAtNode(placeholder);
      specifier.local = placeholder;
      node.specifiers.push(this.finishNode(specifier, "ImportDefaultSpecifier"));
      if (this.eat(12)) {
        const hasStarImport = this.maybeParseStarImportSpecifier(node);
        if (!hasStarImport) this.parseNamedImportSpecifiers(node);
      }
      this.expectContextual(98);
      node.source = this.parseImportSource();
      this.semicolon();
      return this.finishNode(node, "ImportDeclaration");
    }
    parseImportSource() {
      return this.parsePlaceholder("StringLiteral") || super.parseImportSource();
    }
    assertNoSpace() {
      if (this.state.start > this.state.lastTokEndLoc.index) {
        this.raise(PlaceholderErrors.UnexpectedSpace, this.state.lastTokEndLoc);
      }
    }
  };
  var v8intrinsic = superClass => class V8IntrinsicMixin extends superClass {
    parseV8Intrinsic() {
      if (this.match(54)) {
        const v8IntrinsicStartLoc = this.state.startLoc;
        const node = this.startNode();
        this.next();
        if (tokenIsIdentifier(this.state.type)) {
          const name = this.parseIdentifierName();
          const identifier = this.createIdentifier(node, name);
          identifier.type = "V8IntrinsicIdentifier";
          if (this.match(10)) {
            return identifier;
          }
        }
        this.unexpected(v8IntrinsicStartLoc);
      }
    }
    parseExprAtom(refExpressionErrors) {
      return this.parseV8Intrinsic() || super.parseExprAtom(refExpressionErrors);
    }
  };
  const PIPELINE_PROPOSALS = ["minimal", "fsharp", "hack", "smart"];
  const TOPIC_TOKENS = ["^^", "@@", "^", "%", "#"];
  function validatePlugins(pluginsMap) {
    if (pluginsMap.has("decorators")) {
      if (pluginsMap.has("decorators-legacy")) {
        throw new Error("Cannot use the decorators and decorators-legacy plugin together");
      }
      const decoratorsBeforeExport = pluginsMap.get("decorators").decoratorsBeforeExport;
      if (decoratorsBeforeExport != null && typeof decoratorsBeforeExport !== "boolean") {
        throw new Error("'decoratorsBeforeExport' must be a boolean, if specified.");
      }
      const allowCallParenthesized = pluginsMap.get("decorators").allowCallParenthesized;
      if (allowCallParenthesized != null && typeof allowCallParenthesized !== "boolean") {
        throw new Error("'allowCallParenthesized' must be a boolean.");
      }
    }
    if (pluginsMap.has("flow") && pluginsMap.has("typescript")) {
      throw new Error("Cannot combine flow and typescript plugins.");
    }
    if (pluginsMap.has("placeholders") && pluginsMap.has("v8intrinsic")) {
      throw new Error("Cannot combine placeholders and v8intrinsic plugins.");
    }
    if (pluginsMap.has("pipelineOperator")) {
      var _pluginsMap$get;
      const proposal = pluginsMap.get("pipelineOperator").proposal;
      if (!PIPELINE_PROPOSALS.includes(proposal)) {
        const proposalList = PIPELINE_PROPOSALS.map(p => `"${p}"`).join(", ");
        throw new Error(`"pipelineOperator" requires "proposal" option whose value must be one of: ${proposalList}.`);
      }
      const tupleSyntaxIsHash = ((_pluginsMap$get = pluginsMap.get("recordAndTuple")) == null ? void 0 : _pluginsMap$get.syntaxType) === "hash";
      if (proposal === "hack") {
        if (pluginsMap.has("placeholders")) {
          throw new Error("Cannot combine placeholders plugin and Hack-style pipes.");
        }
        if (pluginsMap.has("v8intrinsic")) {
          throw new Error("Cannot combine v8intrinsic plugin and Hack-style pipes.");
        }
        const topicToken = pluginsMap.get("pipelineOperator").topicToken;
        if (!TOPIC_TOKENS.includes(topicToken)) {
          const tokenList = TOPIC_TOKENS.map(t => `"${t}"`).join(", ");
          throw new Error(`"pipelineOperator" in "proposal": "hack" mode also requires a "topicToken" option whose value must be one of: ${tokenList}.`);
        }
        if (topicToken === "#" && tupleSyntaxIsHash) {
          throw new Error(`Plugin conflict between \`["pipelineOperator", { proposal: "hack", topicToken: "#" }]\` and \`${JSON.stringify(["recordAndTuple", pluginsMap.get("recordAndTuple")])}\`.`);
        }
      } else if (proposal === "smart" && tupleSyntaxIsHash) {
        throw new Error(`Plugin conflict between \`["pipelineOperator", { proposal: "smart" }]\` and \`${JSON.stringify(["recordAndTuple", pluginsMap.get("recordAndTuple")])}\`.`);
      }
    }
    if (pluginsMap.has("moduleAttributes")) {
      {
        if (pluginsMap.has("importAttributes") || pluginsMap.has("importAssertions")) {
          throw new Error("Cannot combine importAssertions, importAttributes and moduleAttributes plugins.");
        }
        const moduleAttributesVersionPluginOption = pluginsMap.get("moduleAttributes").version;
        if (moduleAttributesVersionPluginOption !== "may-2020") {
          throw new Error("The 'moduleAttributes' plugin requires a 'version' option," + " representing the last proposal update. Currently, the" + " only supported value is 'may-2020'.");
        }
      }
    }
    if (pluginsMap.has("importAttributes") && pluginsMap.has("importAssertions")) {
      throw new Error("Cannot combine importAssertions and importAttributes plugins.");
    }
    if (pluginsMap.has("recordAndTuple")) {
      const syntaxType = pluginsMap.get("recordAndTuple").syntaxType;
      if (syntaxType != null) {
        {
          const RECORD_AND_TUPLE_SYNTAX_TYPES = ["hash", "bar"];
          if (!RECORD_AND_TUPLE_SYNTAX_TYPES.includes(syntaxType)) {
            throw new Error("The 'syntaxType' option of the 'recordAndTuple' plugin must be one of: " + RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(", "));
          }
        }
      }
    }
    if (pluginsMap.has("asyncDoExpressions") && !pluginsMap.has("doExpressions")) {
      const error = new Error("'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.");
      error.missingPlugins = "doExpressions";
      throw error;
    }
    if (pluginsMap.has("optionalChainingAssign") && pluginsMap.get("optionalChainingAssign").version !== "2023-07") {
      throw new Error("The 'optionalChainingAssign' plugin requires a 'version' option," + " representing the last proposal update. Currently, the" + " only supported value is '2023-07'.");
    }
  }
  const mixinPlugins = {
    estree,
    jsx,
    flow,
    typescript,
    v8intrinsic,
    placeholders
  };
  const mixinPluginNames = Object.keys(mixinPlugins);
  const defaultOptions = {
    sourceType: "script",
    sourceFilename: undefined,
    startColumn: 0,
    startLine: 1,
    allowAwaitOutsideFunction: false,
    allowReturnOutsideFunction: false,
    allowNewTargetOutsideFunction: false,
    allowImportExportEverywhere: false,
    allowSuperOutsideMethod: false,
    allowUndeclaredExports: false,
    plugins: [],
    strictMode: null,
    ranges: false,
    tokens: false,
    createImportExpressions: false,
    createParenthesizedExpressions: false,
    errorRecovery: false,
    attachComment: true,
    annexB: true
  };
  function getOptions(opts) {
    if (opts == null) {
      return Object.assign({}, defaultOptions);
    }
    if (opts.annexB != null && opts.annexB !== false) {
      throw new Error("The `annexB` option can only be set to `false`.");
    }
    const options = {};
    for (const key of Object.keys(defaultOptions)) {
      var _opts$key;
      options[key] = (_opts$key = opts[key]) != null ? _opts$key : defaultOptions[key];
    }
    return options;
  }
  class ExpressionParser extends LValParser {
    checkProto(prop, isRecord, protoRef, refExpressionErrors) {
      if (prop.type === "SpreadElement" || this.isObjectMethod(prop) || prop.computed || prop.shorthand) {
        return;
      }
      const key = prop.key;
      const name = key.type === "Identifier" ? key.name : key.value;
      if (name === "__proto__") {
        if (isRecord) {
          this.raise(Errors.RecordNoProto, key);
          return;
        }
        if (protoRef.used) {
          if (refExpressionErrors) {
            if (refExpressionErrors.doubleProtoLoc === null) {
              refExpressionErrors.doubleProtoLoc = key.loc.start;
            }
          } else {
            this.raise(Errors.DuplicateProto, key);
          }
        }
        protoRef.used = true;
      }
    }
    shouldExitDescending(expr, potentialArrowAt) {
      return expr.type === "ArrowFunctionExpression" && expr.start === potentialArrowAt;
    }
    getExpression() {
      this.enterInitialScopes();
      this.nextToken();
      const expr = this.parseExpression();
      if (!this.match(139)) {
        this.unexpected();
      }
      this.finalizeRemainingComments();
      expr.comments = this.comments;
      expr.errors = this.state.errors;
      if (this.options.tokens) {
        expr.tokens = this.tokens;
      }
      return expr;
    }
    parseExpression(disallowIn, refExpressionErrors) {
      if (disallowIn) {
        return this.disallowInAnd(() => this.parseExpressionBase(refExpressionErrors));
      }
      return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));
    }
    parseExpressionBase(refExpressionErrors) {
      const startLoc = this.state.startLoc;
      const expr = this.parseMaybeAssign(refExpressionErrors);
      if (this.match(12)) {
        const node = this.startNodeAt(startLoc);
        node.expressions = [expr];
        while (this.eat(12)) {
          node.expressions.push(this.parseMaybeAssign(refExpressionErrors));
        }
        this.toReferencedList(node.expressions);
        return this.finishNode(node, "SequenceExpression");
      }
      return expr;
    }
    parseMaybeAssignDisallowIn(refExpressionErrors, afterLeftParse) {
      return this.disallowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));
    }
    parseMaybeAssignAllowIn(refExpressionErrors, afterLeftParse) {
      return this.allowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));
    }
    setOptionalParametersError(refExpressionErrors, resultError) {
      var _resultError$loc;
      refExpressionErrors.optionalParametersLoc = (_resultError$loc = resultError == null ? void 0 : resultError.loc) != null ? _resultError$loc : this.state.startLoc;
    }
    parseMaybeAssign(refExpressionErrors, afterLeftParse) {
      const startLoc = this.state.startLoc;
      if (this.isContextual(108)) {
        if (this.prodParam.hasYield) {
          let left = this.parseYield();
          if (afterLeftParse) {
            left = afterLeftParse.call(this, left, startLoc);
          }
          return left;
        }
      }
      let ownExpressionErrors;
      if (refExpressionErrors) {
        ownExpressionErrors = false;
      } else {
        refExpressionErrors = new ExpressionErrors();
        ownExpressionErrors = true;
      }
      const {
        type
      } = this.state;
      if (type === 10 || tokenIsIdentifier(type)) {
        this.state.potentialArrowAt = this.state.start;
      }
      let left = this.parseMaybeConditional(refExpressionErrors);
      if (afterLeftParse) {
        left = afterLeftParse.call(this, left, startLoc);
      }
      if (tokenIsAssignment(this.state.type)) {
        const node = this.startNodeAt(startLoc);
        const operator = this.state.value;
        node.operator = operator;
        if (this.match(29)) {
          this.toAssignable(left, true);
          node.left = left;
          const startIndex = startLoc.index;
          if (refExpressionErrors.doubleProtoLoc != null && refExpressionErrors.doubleProtoLoc.index >= startIndex) {
            refExpressionErrors.doubleProtoLoc = null;
          }
          if (refExpressionErrors.shorthandAssignLoc != null && refExpressionErrors.shorthandAssignLoc.index >= startIndex) {
            refExpressionErrors.shorthandAssignLoc = null;
          }
          if (refExpressionErrors.privateKeyLoc != null && refExpressionErrors.privateKeyLoc.index >= startIndex) {
            this.checkDestructuringPrivate(refExpressionErrors);
            refExpressionErrors.privateKeyLoc = null;
          }
        } else {
          node.left = left;
        }
        this.next();
        node.right = this.parseMaybeAssign();
        this.checkLVal(left, this.finishNode(node, "AssignmentExpression"));
        return node;
      } else if (ownExpressionErrors) {
        this.checkExpressionErrors(refExpressionErrors, true);
      }
      return left;
    }
    parseMaybeConditional(refExpressionErrors) {
      const startLoc = this.state.startLoc;
      const potentialArrowAt = this.state.potentialArrowAt;
      const expr = this.parseExprOps(refExpressionErrors);
      if (this.shouldExitDescending(expr, potentialArrowAt)) {
        return expr;
      }
      return this.parseConditional(expr, startLoc, refExpressionErrors);
    }
    parseConditional(expr, startLoc, refExpressionErrors) {
      if (this.eat(17)) {
        const node = this.startNodeAt(startLoc);
        node.test = expr;
        node.consequent = this.parseMaybeAssignAllowIn();
        this.expect(14);
        node.alternate = this.parseMaybeAssign();
        return this.finishNode(node, "ConditionalExpression");
      }
      return expr;
    }
    parseMaybeUnaryOrPrivate(refExpressionErrors) {
      return this.match(138) ? this.parsePrivateName() : this.parseMaybeUnary(refExpressionErrors);
    }
    parseExprOps(refExpressionErrors) {
      const startLoc = this.state.startLoc;
      const potentialArrowAt = this.state.potentialArrowAt;
      const expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);
      if (this.shouldExitDescending(expr, potentialArrowAt)) {
        return expr;
      }
      return this.parseExprOp(expr, startLoc, -1);
    }
    parseExprOp(left, leftStartLoc, minPrec) {
      if (this.isPrivateName(left)) {
        const value = this.getPrivateNameSV(left);
        if (minPrec >= tokenOperatorPrecedence(58) || !this.prodParam.hasIn || !this.match(58)) {
          this.raise(Errors.PrivateInExpectedIn, left, {
            identifierName: value
          });
        }
        this.classScope.usePrivateName(value, left.loc.start);
      }
      const op = this.state.type;
      if (tokenIsOperator(op) && (this.prodParam.hasIn || !this.match(58))) {
        let prec = tokenOperatorPrecedence(op);
        if (prec > minPrec) {
          if (op === 39) {
            this.expectPlugin("pipelineOperator");
            if (this.state.inFSharpPipelineDirectBody) {
              return left;
            }
            this.checkPipelineAtInfixOperator(left, leftStartLoc);
          }
          const node = this.startNodeAt(leftStartLoc);
          node.left = left;
          node.operator = this.state.value;
          const logical = op === 41 || op === 42;
          const coalesce = op === 40;
          if (coalesce) {
            prec = tokenOperatorPrecedence(42);
          }
          this.next();
          if (op === 39 && this.hasPlugin(["pipelineOperator", {
            proposal: "minimal"
          }])) {
            if (this.state.type === 96 && this.prodParam.hasAwait) {
              throw this.raise(Errors.UnexpectedAwaitAfterPipelineBody, this.state.startLoc);
            }
          }
          node.right = this.parseExprOpRightExpr(op, prec);
          const finishedNode = this.finishNode(node, logical || coalesce ? "LogicalExpression" : "BinaryExpression");
          const nextOp = this.state.type;
          if (coalesce && (nextOp === 41 || nextOp === 42) || logical && nextOp === 40) {
            throw this.raise(Errors.MixingCoalesceWithLogical, this.state.startLoc);
          }
          return this.parseExprOp(finishedNode, leftStartLoc, minPrec);
        }
      }
      return left;
    }
    parseExprOpRightExpr(op, prec) {
      const startLoc = this.state.startLoc;
      switch (op) {
        case 39:
          switch (this.getPluginOption("pipelineOperator", "proposal")) {
            case "hack":
              return this.withTopicBindingContext(() => {
                return this.parseHackPipeBody();
              });
            case "smart":
              return this.withTopicBindingContext(() => {
                if (this.prodParam.hasYield && this.isContextual(108)) {
                  throw this.raise(Errors.PipeBodyIsTighter, this.state.startLoc);
                }
                return this.parseSmartPipelineBodyInStyle(this.parseExprOpBaseRightExpr(op, prec), startLoc);
              });
            case "fsharp":
              return this.withSoloAwaitPermittingContext(() => {
                return this.parseFSharpPipelineBody(prec);
              });
          }
        default:
          return this.parseExprOpBaseRightExpr(op, prec);
      }
    }
    parseExprOpBaseRightExpr(op, prec) {
      const startLoc = this.state.startLoc;
      return this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startLoc, tokenIsRightAssociative(op) ? prec - 1 : prec);
    }
    parseHackPipeBody() {
      var _body$extra;
      const {
        startLoc
      } = this.state;
      const body = this.parseMaybeAssign();
      const requiredParentheses = UnparenthesizedPipeBodyDescriptions.has(body.type);
      if (requiredParentheses && !((_body$extra = body.extra) != null && _body$extra.parenthesized)) {
        this.raise(Errors.PipeUnparenthesizedBody, startLoc, {
          type: body.type
        });
      }
      if (!this.topicReferenceWasUsedInCurrentContext()) {
        this.raise(Errors.PipeTopicUnused, startLoc);
      }
      return body;
    }
    checkExponentialAfterUnary(node) {
      if (this.match(57)) {
        this.raise(Errors.UnexpectedTokenUnaryExponentiation, node.argument);
      }
    }
    parseMaybeUnary(refExpressionErrors, sawUnary) {
      const startLoc = this.state.startLoc;
      const isAwait = this.isContextual(96);
      if (isAwait && this.recordAwaitIfAllowed()) {
        this.next();
        const expr = this.parseAwait(startLoc);
        if (!sawUnary) this.checkExponentialAfterUnary(expr);
        return expr;
      }
      const update = this.match(34);
      const node = this.startNode();
      if (tokenIsPrefix(this.state.type)) {
        node.operator = this.state.value;
        node.prefix = true;
        if (this.match(72)) {
          this.expectPlugin("throwExpressions");
        }
        const isDelete = this.match(89);
        this.next();
        node.argument = this.parseMaybeUnary(null, true);
        this.checkExpressionErrors(refExpressionErrors, true);
        if (this.state.strict && isDelete) {
          const arg = node.argument;
          if (arg.type === "Identifier") {
            this.raise(Errors.StrictDelete, node);
          } else if (this.hasPropertyAsPrivateName(arg)) {
            this.raise(Errors.DeletePrivateField, node);
          }
        }
        if (!update) {
          if (!sawUnary) {
            this.checkExponentialAfterUnary(node);
          }
          return this.finishNode(node, "UnaryExpression");
        }
      }
      const expr = this.parseUpdate(node, update, refExpressionErrors);
      if (isAwait) {
        const {
          type
        } = this.state;
        const startsExpr = this.hasPlugin("v8intrinsic") ? tokenCanStartExpression(type) : tokenCanStartExpression(type) && !this.match(54);
        if (startsExpr && !this.isAmbiguousAwait()) {
          this.raiseOverwrite(Errors.AwaitNotInAsyncContext, startLoc);
          return this.parseAwait(startLoc);
        }
      }
      return expr;
    }
    parseUpdate(node, update, refExpressionErrors) {
      if (update) {
        const updateExpressionNode = node;
        this.checkLVal(updateExpressionNode.argument, this.finishNode(updateExpressionNode, "UpdateExpression"));
        return node;
      }
      const startLoc = this.state.startLoc;
      let expr = this.parseExprSubscripts(refExpressionErrors);
      if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;
      while (tokenIsPostfix(this.state.type) && !this.canInsertSemicolon()) {
        const node = this.startNodeAt(startLoc);
        node.operator = this.state.value;
        node.prefix = false;
        node.argument = expr;
        this.next();
        this.checkLVal(expr, expr = this.finishNode(node, "UpdateExpression"));
      }
      return expr;
    }
    parseExprSubscripts(refExpressionErrors) {
      const startLoc = this.state.startLoc;
      const potentialArrowAt = this.state.potentialArrowAt;
      const expr = this.parseExprAtom(refExpressionErrors);
      if (this.shouldExitDescending(expr, potentialArrowAt)) {
        return expr;
      }
      return this.parseSubscripts(expr, startLoc);
    }
    parseSubscripts(base, startLoc, noCalls) {
      const state = {
        optionalChainMember: false,
        maybeAsyncArrow: this.atPossibleAsyncArrow(base),
        stop: false
      };
      do {
        base = this.parseSubscript(base, startLoc, noCalls, state);
        state.maybeAsyncArrow = false;
      } while (!state.stop);
      return base;
    }
    parseSubscript(base, startLoc, noCalls, state) {
      const {
        type
      } = this.state;
      if (!noCalls && type === 15) {
        return this.parseBind(base, startLoc, noCalls, state);
      } else if (tokenIsTemplate(type)) {
        return this.parseTaggedTemplateExpression(base, startLoc, state);
      }
      let optional = false;
      if (type === 18) {
        if (noCalls) {
          this.raise(Errors.OptionalChainingNoNew, this.state.startLoc);
          if (this.lookaheadCharCode() === 40) {
            state.stop = true;
            return base;
          }
        }
        state.optionalChainMember = optional = true;
        this.next();
      }
      if (!noCalls && this.match(10)) {
        return this.parseCoverCallAndAsyncArrowHead(base, startLoc, state, optional);
      } else {
        const computed = this.eat(0);
        if (computed || optional || this.eat(16)) {
          return this.parseMember(base, startLoc, state, computed, optional);
        } else {
          state.stop = true;
          return base;
        }
      }
    }
    parseMember(base, startLoc, state, computed, optional) {
      const node = this.startNodeAt(startLoc);
      node.object = base;
      node.computed = computed;
      if (computed) {
        node.property = this.parseExpression();
        this.expect(3);
      } else if (this.match(138)) {
        if (base.type === "Super") {
          this.raise(Errors.SuperPrivateField, startLoc);
        }
        this.classScope.usePrivateName(this.state.value, this.state.startLoc);
        node.property = this.parsePrivateName();
      } else {
        node.property = this.parseIdentifier(true);
      }
      if (state.optionalChainMember) {
        node.optional = optional;
        return this.finishNode(node, "OptionalMemberExpression");
      } else {
        return this.finishNode(node, "MemberExpression");
      }
    }
    parseBind(base, startLoc, noCalls, state) {
      const node = this.startNodeAt(startLoc);
      node.object = base;
      this.next();
      node.callee = this.parseNoCallExpr();
      state.stop = true;
      return this.parseSubscripts(this.finishNode(node, "BindExpression"), startLoc, noCalls);
    }
    parseCoverCallAndAsyncArrowHead(base, startLoc, state, optional) {
      const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
      let refExpressionErrors = null;
      this.state.maybeInArrowParameters = true;
      this.next();
      const node = this.startNodeAt(startLoc);
      node.callee = base;
      const {
        maybeAsyncArrow,
        optionalChainMember
      } = state;
      if (maybeAsyncArrow) {
        this.expressionScope.enter(newAsyncArrowScope());
        refExpressionErrors = new ExpressionErrors();
      }
      if (optionalChainMember) {
        node.optional = optional;
      }
      if (optional) {
        node.arguments = this.parseCallExpressionArguments(11);
      } else {
        node.arguments = this.parseCallExpressionArguments(11, base.type === "Import", base.type !== "Super", node, refExpressionErrors);
      }
      let finishedNode = this.finishCallExpression(node, optionalChainMember);
      if (maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {
        state.stop = true;
        this.checkDestructuringPrivate(refExpressionErrors);
        this.expressionScope.validateAsPattern();
        this.expressionScope.exit();
        finishedNode = this.parseAsyncArrowFromCallExpression(this.startNodeAt(startLoc), finishedNode);
      } else {
        if (maybeAsyncArrow) {
          this.checkExpressionErrors(refExpressionErrors, true);
          this.expressionScope.exit();
        }
        this.toReferencedArguments(finishedNode);
      }
      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
      return finishedNode;
    }
    toReferencedArguments(node, isParenthesizedExpr) {
      this.toReferencedListDeep(node.arguments, isParenthesizedExpr);
    }
    parseTaggedTemplateExpression(base, startLoc, state) {
      const node = this.startNodeAt(startLoc);
      node.tag = base;
      node.quasi = this.parseTemplate(true);
      if (state.optionalChainMember) {
        this.raise(Errors.OptionalChainingNoTemplate, startLoc);
      }
      return this.finishNode(node, "TaggedTemplateExpression");
    }
    atPossibleAsyncArrow(base) {
      return base.type === "Identifier" && base.name === "async" && this.state.lastTokEndLoc.index === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 && base.start === this.state.potentialArrowAt;
    }
    expectImportAttributesPlugin() {
      if (!this.hasPlugin("importAssertions")) {
        this.expectPlugin("importAttributes");
      }
    }
    finishCallExpression(node, optional) {
      if (node.callee.type === "Import") {
        if (node.arguments.length === 2) {
          {
            if (!this.hasPlugin("moduleAttributes")) {
              this.expectImportAttributesPlugin();
            }
          }
        }
        if (node.arguments.length === 0 || node.arguments.length > 2) {
          this.raise(Errors.ImportCallArity, node, {
            maxArgumentCount: this.hasPlugin("importAttributes") || this.hasPlugin("importAssertions") || this.hasPlugin("moduleAttributes") ? 2 : 1
          });
        } else {
          for (const arg of node.arguments) {
            if (arg.type === "SpreadElement") {
              this.raise(Errors.ImportCallSpreadArgument, arg);
            }
          }
        }
      }
      return this.finishNode(node, optional ? "OptionalCallExpression" : "CallExpression");
    }
    parseCallExpressionArguments(close, dynamicImport, allowPlaceholder, nodeForExtra, refExpressionErrors) {
      const elts = [];
      let first = true;
      const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
      this.state.inFSharpPipelineDirectBody = false;
      while (!this.eat(close)) {
        if (first) {
          first = false;
        } else {
          this.expect(12);
          if (this.match(close)) {
            if (dynamicImport && !this.hasPlugin("importAttributes") && !this.hasPlugin("importAssertions") && !this.hasPlugin("moduleAttributes")) {
              this.raise(Errors.ImportCallArgumentTrailingComma, this.state.lastTokStartLoc);
            }
            if (nodeForExtra) {
              this.addTrailingCommaExtraToNode(nodeForExtra);
            }
            this.next();
            break;
          }
        }
        elts.push(this.parseExprListItem(false, refExpressionErrors, allowPlaceholder));
      }
      this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
      return elts;
    }
    shouldParseAsyncArrow() {
      return this.match(19) && !this.canInsertSemicolon();
    }
    parseAsyncArrowFromCallExpression(node, call) {
      var _call$extra;
      this.resetPreviousNodeTrailingComments(call);
      this.expect(19);
      this.parseArrowExpression(node, call.arguments, true, (_call$extra = call.extra) == null ? void 0 : _call$extra.trailingCommaLoc);
      if (call.innerComments) {
        setInnerComments(node, call.innerComments);
      }
      if (call.callee.trailingComments) {
        setInnerComments(node, call.callee.trailingComments);
      }
      return node;
    }
    parseNoCallExpr() {
      const startLoc = this.state.startLoc;
      return this.parseSubscripts(this.parseExprAtom(), startLoc, true);
    }
    parseExprAtom(refExpressionErrors) {
      let node;
      let decorators = null;
      const {
        type
      } = this.state;
      switch (type) {
        case 79:
          return this.parseSuper();
        case 83:
          node = this.startNode();
          this.next();
          if (this.match(16)) {
            return this.parseImportMetaProperty(node);
          }
          if (this.match(10)) {
            if (this.options.createImportExpressions) {
              return this.parseImportCall(node);
            } else {
              return this.finishNode(node, "Import");
            }
          } else {
            this.raise(Errors.UnsupportedImport, this.state.lastTokStartLoc);
            return this.finishNode(node, "Import");
          }
        case 78:
          node = this.startNode();
          this.next();
          return this.finishNode(node, "ThisExpression");
        case 90:
          {
            return this.parseDo(this.startNode(), false);
          }
        case 56:
        case 31:
          {
            this.readRegexp();
            return this.parseRegExpLiteral(this.state.value);
          }
        case 134:
          return this.parseNumericLiteral(this.state.value);
        case 135:
          return this.parseBigIntLiteral(this.state.value);
        case 136:
          return this.parseDecimalLiteral(this.state.value);
        case 133:
          return this.parseStringLiteral(this.state.value);
        case 84:
          return this.parseNullLiteral();
        case 85:
          return this.parseBooleanLiteral(true);
        case 86:
          return this.parseBooleanLiteral(false);
        case 10:
          {
            const canBeArrow = this.state.potentialArrowAt === this.state.start;
            return this.parseParenAndDistinguishExpression(canBeArrow);
          }
        case 2:
        case 1:
          {
            return this.parseArrayLike(this.state.type === 2 ? 4 : 3, false, true);
          }
        case 0:
          {
            return this.parseArrayLike(3, true, false, refExpressionErrors);
          }
        case 6:
        case 7:
          {
            return this.parseObjectLike(this.state.type === 6 ? 9 : 8, false, true);
          }
        case 5:
          {
            return this.parseObjectLike(8, false, false, refExpressionErrors);
          }
        case 68:
          return this.parseFunctionOrFunctionSent();
        case 26:
          decorators = this.parseDecorators();
        case 80:
          return this.parseClass(this.maybeTakeDecorators(decorators, this.startNode()), false);
        case 77:
          return this.parseNewOrNewTarget();
        case 25:
        case 24:
          return this.parseTemplate(false);
        case 15:
          {
            node = this.startNode();
            this.next();
            node.object = null;
            const callee = node.callee = this.parseNoCallExpr();
            if (callee.type === "MemberExpression") {
              return this.finishNode(node, "BindExpression");
            } else {
              throw this.raise(Errors.UnsupportedBind, callee);
            }
          }
        case 138:
          {
            this.raise(Errors.PrivateInExpectedIn, this.state.startLoc, {
              identifierName: this.state.value
            });
            return this.parsePrivateName();
          }
        case 33:
          {
            return this.parseTopicReferenceThenEqualsSign(54, "%");
          }
        case 32:
          {
            return this.parseTopicReferenceThenEqualsSign(44, "^");
          }
        case 37:
        case 38:
          {
            return this.parseTopicReference("hack");
          }
        case 44:
        case 54:
        case 27:
          {
            const pipeProposal = this.getPluginOption("pipelineOperator", "proposal");
            if (pipeProposal) {
              return this.parseTopicReference(pipeProposal);
            }
            this.unexpected();
            break;
          }
        case 47:
          {
            const lookaheadCh = this.input.codePointAt(this.nextTokenStart());
            if (isIdentifierStart(lookaheadCh) || lookaheadCh === 62) {
              this.expectOnePlugin(["jsx", "flow", "typescript"]);
            } else {
              this.unexpected();
            }
            break;
          }
        default:
          if (tokenIsIdentifier(type)) {
            if (this.isContextual(127) && this.lookaheadInLineCharCode() === 123) {
              return this.parseModuleExpression();
            }
            const canBeArrow = this.state.potentialArrowAt === this.state.start;
            const containsEsc = this.state.containsEsc;
            const id = this.parseIdentifier();
            if (!containsEsc && id.name === "async" && !this.canInsertSemicolon()) {
              const {
                type
              } = this.state;
              if (type === 68) {
                this.resetPreviousNodeTrailingComments(id);
                this.next();
                return this.parseAsyncFunctionExpression(this.startNodeAtNode(id));
              } else if (tokenIsIdentifier(type)) {
                if (this.lookaheadCharCode() === 61) {
                  return this.parseAsyncArrowUnaryFunction(this.startNodeAtNode(id));
                } else {
                  return id;
                }
              } else if (type === 90) {
                this.resetPreviousNodeTrailingComments(id);
                return this.parseDo(this.startNodeAtNode(id), true);
              }
            }
            if (canBeArrow && this.match(19) && !this.canInsertSemicolon()) {
              this.next();
              return this.parseArrowExpression(this.startNodeAtNode(id), [id], false);
            }
            return id;
          } else {
            this.unexpected();
          }
      }
    }
    parseTopicReferenceThenEqualsSign(topicTokenType, topicTokenValue) {
      const pipeProposal = this.getPluginOption("pipelineOperator", "proposal");
      if (pipeProposal) {
        this.state.type = topicTokenType;
        this.state.value = topicTokenValue;
        this.state.pos--;
        this.state.end--;
        this.state.endLoc = createPositionWithColumnOffset(this.state.endLoc, -1);
        return this.parseTopicReference(pipeProposal);
      } else {
        this.unexpected();
      }
    }
    parseTopicReference(pipeProposal) {
      const node = this.startNode();
      const startLoc = this.state.startLoc;
      const tokenType = this.state.type;
      this.next();
      return this.finishTopicReference(node, startLoc, pipeProposal, tokenType);
    }
    finishTopicReference(node, startLoc, pipeProposal, tokenType) {
      if (this.testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType)) {
        const nodeType = pipeProposal === "smart" ? "PipelinePrimaryTopicReference" : "TopicReference";
        if (!this.topicReferenceIsAllowedInCurrentContext()) {
          this.raise(pipeProposal === "smart" ? Errors.PrimaryTopicNotAllowed : Errors.PipeTopicUnbound, startLoc);
        }
        this.registerTopicReference();
        return this.finishNode(node, nodeType);
      } else {
        throw this.raise(Errors.PipeTopicUnconfiguredToken, startLoc, {
          token: tokenLabelName(tokenType)
        });
      }
    }
    testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType) {
      switch (pipeProposal) {
        case "hack":
          {
            return this.hasPlugin(["pipelineOperator", {
              topicToken: tokenLabelName(tokenType)
            }]);
          }
        case "smart":
          return tokenType === 27;
        default:
          throw this.raise(Errors.PipeTopicRequiresHackPipes, startLoc);
      }
    }
    parseAsyncArrowUnaryFunction(node) {
      this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));
      const params = [this.parseIdentifier()];
      this.prodParam.exit();
      if (this.hasPrecedingLineBreak()) {
        this.raise(Errors.LineTerminatorBeforeArrow, this.state.curPosition());
      }
      this.expect(19);
      return this.parseArrowExpression(node, params, true);
    }
    parseDo(node, isAsync) {
      this.expectPlugin("doExpressions");
      if (isAsync) {
        this.expectPlugin("asyncDoExpressions");
      }
      node.async = isAsync;
      this.next();
      const oldLabels = this.state.labels;
      this.state.labels = [];
      if (isAsync) {
        this.prodParam.enter(2);
        node.body = this.parseBlock();
        this.prodParam.exit();
      } else {
        node.body = this.parseBlock();
      }
      this.state.labels = oldLabels;
      return this.finishNode(node, "DoExpression");
    }
    parseSuper() {
      const node = this.startNode();
      this.next();
      if (this.match(10) && !this.scope.allowDirectSuper && !this.options.allowSuperOutsideMethod) {
        this.raise(Errors.SuperNotAllowed, node);
      } else if (!this.scope.allowSuper && !this.options.allowSuperOutsideMethod) {
        this.raise(Errors.UnexpectedSuper, node);
      }
      if (!this.match(10) && !this.match(0) && !this.match(16)) {
        this.raise(Errors.UnsupportedSuper, node);
      }
      return this.finishNode(node, "Super");
    }
    parsePrivateName() {
      const node = this.startNode();
      const id = this.startNodeAt(createPositionWithColumnOffset(this.state.startLoc, 1));
      const name = this.state.value;
      this.next();
      node.id = this.createIdentifier(id, name);
      return this.finishNode(node, "PrivateName");
    }
    parseFunctionOrFunctionSent() {
      const node = this.startNode();
      this.next();
      if (this.prodParam.hasYield && this.match(16)) {
        const meta = this.createIdentifier(this.startNodeAtNode(node), "function");
        this.next();
        if (this.match(103)) {
          this.expectPlugin("functionSent");
        } else if (!this.hasPlugin("functionSent")) {
          this.unexpected();
        }
        return this.parseMetaProperty(node, meta, "sent");
      }
      return this.parseFunction(node);
    }
    parseMetaProperty(node, meta, propertyName) {
      node.meta = meta;
      const containsEsc = this.state.containsEsc;
      node.property = this.parseIdentifier(true);
      if (node.property.name !== propertyName || containsEsc) {
        this.raise(Errors.UnsupportedMetaProperty, node.property, {
          target: meta.name,
          onlyValidPropertyName: propertyName
        });
      }
      return this.finishNode(node, "MetaProperty");
    }
    parseImportMetaProperty(node) {
      const id = this.createIdentifier(this.startNodeAtNode(node), "import");
      this.next();
      if (this.isContextual(101)) {
        if (!this.inModule) {
          this.raise(Errors.ImportMetaOutsideModule, id);
        }
        this.sawUnambiguousESM = true;
      } else if (this.isContextual(105) || this.isContextual(97)) {
        const isSource = this.isContextual(105);
        if (!isSource) this.unexpected();
        this.expectPlugin(isSource ? "sourcePhaseImports" : "deferredImportEvaluation");
        if (!this.options.createImportExpressions) {
          throw this.raise(Errors.DynamicImportPhaseRequiresImportExpressions, this.state.startLoc, {
            phase: this.state.value
          });
        }
        this.next();
        node.phase = isSource ? "source" : "defer";
        return this.parseImportCall(node);
      }
      return this.parseMetaProperty(node, id, "meta");
    }
    parseLiteralAtNode(value, type, node) {
      this.addExtra(node, "rawValue", value);
      this.addExtra(node, "raw", this.input.slice(node.start, this.state.end));
      node.value = value;
      this.next();
      return this.finishNode(node, type);
    }
    parseLiteral(value, type) {
      const node = this.startNode();
      return this.parseLiteralAtNode(value, type, node);
    }
    parseStringLiteral(value) {
      return this.parseLiteral(value, "StringLiteral");
    }
    parseNumericLiteral(value) {
      return this.parseLiteral(value, "NumericLiteral");
    }
    parseBigIntLiteral(value) {
      return this.parseLiteral(value, "BigIntLiteral");
    }
    parseDecimalLiteral(value) {
      return this.parseLiteral(value, "DecimalLiteral");
    }
    parseRegExpLiteral(value) {
      const node = this.startNode();
      this.addExtra(node, "raw", this.input.slice(node.start, this.state.end));
      node.pattern = value.pattern;
      node.flags = value.flags;
      this.next();
      return this.finishNode(node, "RegExpLiteral");
    }
    parseBooleanLiteral(value) {
      const node = this.startNode();
      node.value = value;
      this.next();
      return this.finishNode(node, "BooleanLiteral");
    }
    parseNullLiteral() {
      const node = this.startNode();
      this.next();
      return this.finishNode(node, "NullLiteral");
    }
    parseParenAndDistinguishExpression(canBeArrow) {
      const startLoc = this.state.startLoc;
      let val;
      this.next();
      this.expressionScope.enter(newArrowHeadScope());
      const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
      const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
      this.state.maybeInArrowParameters = true;
      this.state.inFSharpPipelineDirectBody = false;
      const innerStartLoc = this.state.startLoc;
      const exprList = [];
      const refExpressionErrors = new ExpressionErrors();
      let first = true;
      let spreadStartLoc;
      let optionalCommaStartLoc;
      while (!this.match(11)) {
        if (first) {
          first = false;
        } else {
          this.expect(12, refExpressionErrors.optionalParametersLoc === null ? null : refExpressionErrors.optionalParametersLoc);
          if (this.match(11)) {
            optionalCommaStartLoc = this.state.startLoc;
            break;
          }
        }
        if (this.match(21)) {
          const spreadNodeStartLoc = this.state.startLoc;
          spreadStartLoc = this.state.startLoc;
          exprList.push(this.parseParenItem(this.parseRestBinding(), spreadNodeStartLoc));
          if (!this.checkCommaAfterRest(41)) {
            break;
          }
        } else {
          exprList.push(this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem));
        }
      }
      const innerEndLoc = this.state.lastTokEndLoc;
      this.expect(11);
      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
      this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
      let arrowNode = this.startNodeAt(startLoc);
      if (canBeArrow && this.shouldParseArrow(exprList) && (arrowNode = this.parseArrow(arrowNode))) {
        this.checkDestructuringPrivate(refExpressionErrors);
        this.expressionScope.validateAsPattern();
        this.expressionScope.exit();
        this.parseArrowExpression(arrowNode, exprList, false);
        return arrowNode;
      }
      this.expressionScope.exit();
      if (!exprList.length) {
        this.unexpected(this.state.lastTokStartLoc);
      }
      if (optionalCommaStartLoc) this.unexpected(optionalCommaStartLoc);
      if (spreadStartLoc) this.unexpected(spreadStartLoc);
      this.checkExpressionErrors(refExpressionErrors, true);
      this.toReferencedListDeep(exprList, true);
      if (exprList.length > 1) {
        val = this.startNodeAt(innerStartLoc);
        val.expressions = exprList;
        this.finishNode(val, "SequenceExpression");
        this.resetEndLocation(val, innerEndLoc);
      } else {
        val = exprList[0];
      }
      return this.wrapParenthesis(startLoc, val);
    }
    wrapParenthesis(startLoc, expression) {
      if (!this.options.createParenthesizedExpressions) {
        this.addExtra(expression, "parenthesized", true);
        this.addExtra(expression, "parenStart", startLoc.index);
        this.takeSurroundingComments(expression, startLoc.index, this.state.lastTokEndLoc.index);
        return expression;
      }
      const parenExpression = this.startNodeAt(startLoc);
      parenExpression.expression = expression;
      return this.finishNode(parenExpression, "ParenthesizedExpression");
    }
    shouldParseArrow(params) {
      return !this.canInsertSemicolon();
    }
    parseArrow(node) {
      if (this.eat(19)) {
        return node;
      }
    }
    parseParenItem(node, startLoc) {
      return node;
    }
    parseNewOrNewTarget() {
      const node = this.startNode();
      this.next();
      if (this.match(16)) {
        const meta = this.createIdentifier(this.startNodeAtNode(node), "new");
        this.next();
        const metaProp = this.parseMetaProperty(node, meta, "target");
        if (!this.scope.inNonArrowFunction && !this.scope.inClass && !this.options.allowNewTargetOutsideFunction) {
          this.raise(Errors.UnexpectedNewTarget, metaProp);
        }
        return metaProp;
      }
      return this.parseNew(node);
    }
    parseNew(node) {
      this.parseNewCallee(node);
      if (this.eat(10)) {
        const args = this.parseExprList(11);
        this.toReferencedList(args);
        node.arguments = args;
      } else {
        node.arguments = [];
      }
      return this.finishNode(node, "NewExpression");
    }
    parseNewCallee(node) {
      const isImport = this.match(83);
      const callee = this.parseNoCallExpr();
      node.callee = callee;
      if (isImport && (callee.type === "Import" || callee.type === "ImportExpression")) {
        this.raise(Errors.ImportCallNotNewExpression, callee);
      }
    }
    parseTemplateElement(isTagged) {
      const {
        start,
        startLoc,
        end,
        value
      } = this.state;
      const elemStart = start + 1;
      const elem = this.startNodeAt(createPositionWithColumnOffset(startLoc, 1));
      if (value === null) {
        if (!isTagged) {
          this.raise(Errors.InvalidEscapeSequenceTemplate, createPositionWithColumnOffset(this.state.firstInvalidTemplateEscapePos, 1));
        }
      }
      const isTail = this.match(24);
      const endOffset = isTail ? -1 : -2;
      const elemEnd = end + endOffset;
      elem.value = {
        raw: this.input.slice(elemStart, elemEnd).replace(/\r\n?/g, "\n"),
        cooked: value === null ? null : value.slice(1, endOffset)
      };
      elem.tail = isTail;
      this.next();
      const finishedNode = this.finishNode(elem, "TemplateElement");
      this.resetEndLocation(finishedNode, createPositionWithColumnOffset(this.state.lastTokEndLoc, endOffset));
      return finishedNode;
    }
    parseTemplate(isTagged) {
      const node = this.startNode();
      let curElt = this.parseTemplateElement(isTagged);
      const quasis = [curElt];
      const substitutions = [];
      while (!curElt.tail) {
        substitutions.push(this.parseTemplateSubstitution());
        this.readTemplateContinuation();
        quasis.push(curElt = this.parseTemplateElement(isTagged));
      }
      node.expressions = substitutions;
      node.quasis = quasis;
      return this.finishNode(node, "TemplateLiteral");
    }
    parseTemplateSubstitution() {
      return this.parseExpression();
    }
    parseObjectLike(close, isPattern, isRecord, refExpressionErrors) {
      if (isRecord) {
        this.expectPlugin("recordAndTuple");
      }
      const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
      this.state.inFSharpPipelineDirectBody = false;
      const propHash = Object.create(null);
      let first = true;
      const node = this.startNode();
      node.properties = [];
      this.next();
      while (!this.match(close)) {
        if (first) {
          first = false;
        } else {
          this.expect(12);
          if (this.match(close)) {
            this.addTrailingCommaExtraToNode(node);
            break;
          }
        }
        let prop;
        if (isPattern) {
          prop = this.parseBindingProperty();
        } else {
          prop = this.parsePropertyDefinition(refExpressionErrors);
          this.checkProto(prop, isRecord, propHash, refExpressionErrors);
        }
        if (isRecord && !this.isObjectProperty(prop) && prop.type !== "SpreadElement") {
          this.raise(Errors.InvalidRecordProperty, prop);
        }
        {
          if (prop.shorthand) {
            this.addExtra(prop, "shorthand", true);
          }
        }
        node.properties.push(prop);
      }
      this.next();
      this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
      let type = "ObjectExpression";
      if (isPattern) {
        type = "ObjectPattern";
      } else if (isRecord) {
        type = "RecordExpression";
      }
      return this.finishNode(node, type);
    }
    addTrailingCommaExtraToNode(node) {
      this.addExtra(node, "trailingComma", this.state.lastTokStartLoc.index);
      this.addExtra(node, "trailingCommaLoc", this.state.lastTokStartLoc, false);
    }
    maybeAsyncOrAccessorProp(prop) {
      return !prop.computed && prop.key.type === "Identifier" && (this.isLiteralPropertyName() || this.match(0) || this.match(55));
    }
    parsePropertyDefinition(refExpressionErrors) {
      let decorators = [];
      if (this.match(26)) {
        if (this.hasPlugin("decorators")) {
          this.raise(Errors.UnsupportedPropertyDecorator, this.state.startLoc);
        }
        while (this.match(26)) {
          decorators.push(this.parseDecorator());
        }
      }
      const prop = this.startNode();
      let isAsync = false;
      let isAccessor = false;
      let startLoc;
      if (this.match(21)) {
        if (decorators.length) this.unexpected();
        return this.parseSpread();
      }
      if (decorators.length) {
        prop.decorators = decorators;
        decorators = [];
      }
      prop.method = false;
      if (refExpressionErrors) {
        startLoc = this.state.startLoc;
      }
      let isGenerator = this.eat(55);
      this.parsePropertyNamePrefixOperator(prop);
      const containsEsc = this.state.containsEsc;
      this.parsePropertyName(prop, refExpressionErrors);
      if (!isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {
        const {
          key
        } = prop;
        const keyName = key.name;
        if (keyName === "async" && !this.hasPrecedingLineBreak()) {
          isAsync = true;
          this.resetPreviousNodeTrailingComments(key);
          isGenerator = this.eat(55);
          this.parsePropertyName(prop);
        }
        if (keyName === "get" || keyName === "set") {
          isAccessor = true;
          this.resetPreviousNodeTrailingComments(key);
          prop.kind = keyName;
          if (this.match(55)) {
            isGenerator = true;
            this.raise(Errors.AccessorIsGenerator, this.state.curPosition(), {
              kind: keyName
            });
            this.next();
          }
          this.parsePropertyName(prop);
        }
      }
      return this.parseObjPropValue(prop, startLoc, isGenerator, isAsync, false, isAccessor, refExpressionErrors);
    }
    getGetterSetterExpectedParamCount(method) {
      return method.kind === "get" ? 0 : 1;
    }
    getObjectOrClassMethodParams(method) {
      return method.params;
    }
    checkGetterSetterParams(method) {
      var _params;
      const paramCount = this.getGetterSetterExpectedParamCount(method);
      const params = this.getObjectOrClassMethodParams(method);
      if (params.length !== paramCount) {
        this.raise(method.kind === "get" ? Errors.BadGetterArity : Errors.BadSetterArity, method);
      }
      if (method.kind === "set" && ((_params = params[params.length - 1]) == null ? void 0 : _params.type) === "RestElement") {
        this.raise(Errors.BadSetterRestParameter, method);
      }
    }
    parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {
      if (isAccessor) {
        const finishedProp = this.parseMethod(prop, isGenerator, false, false, false, "ObjectMethod");
        this.checkGetterSetterParams(finishedProp);
        return finishedProp;
      }
      if (isAsync || isGenerator || this.match(10)) {
        if (isPattern) this.unexpected();
        prop.kind = "method";
        prop.method = true;
        return this.parseMethod(prop, isGenerator, isAsync, false, false, "ObjectMethod");
      }
    }
    parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors) {
      prop.shorthand = false;
      if (this.eat(14)) {
        prop.value = isPattern ? this.parseMaybeDefault(this.state.startLoc) : this.parseMaybeAssignAllowIn(refExpressionErrors);
        return this.finishNode(prop, "ObjectProperty");
      }
      if (!prop.computed && prop.key.type === "Identifier") {
        this.checkReservedWord(prop.key.name, prop.key.loc.start, true, false);
        if (isPattern) {
          prop.value = this.parseMaybeDefault(startLoc, cloneIdentifier(prop.key));
        } else if (this.match(29)) {
          const shorthandAssignLoc = this.state.startLoc;
          if (refExpressionErrors != null) {
            if (refExpressionErrors.shorthandAssignLoc === null) {
              refExpressionErrors.shorthandAssignLoc = shorthandAssignLoc;
            }
          } else {
            this.raise(Errors.InvalidCoverInitializedName, shorthandAssignLoc);
          }
          prop.value = this.parseMaybeDefault(startLoc, cloneIdentifier(prop.key));
        } else {
          prop.value = cloneIdentifier(prop.key);
        }
        prop.shorthand = true;
        return this.finishNode(prop, "ObjectProperty");
      }
    }
    parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {
      const node = this.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) || this.parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors);
      if (!node) this.unexpected();
      return node;
    }
    parsePropertyName(prop, refExpressionErrors) {
      if (this.eat(0)) {
        prop.computed = true;
        prop.key = this.parseMaybeAssignAllowIn();
        this.expect(3);
      } else {
        const {
          type,
          value
        } = this.state;
        let key;
        if (tokenIsKeywordOrIdentifier(type)) {
          key = this.parseIdentifier(true);
        } else {
          switch (type) {
            case 134:
              key = this.parseNumericLiteral(value);
              break;
            case 133:
              key = this.parseStringLiteral(value);
              break;
            case 135:
              key = this.parseBigIntLiteral(value);
              break;
            case 136:
              key = this.parseDecimalLiteral(value);
              break;
            case 138:
              {
                const privateKeyLoc = this.state.startLoc;
                if (refExpressionErrors != null) {
                  if (refExpressionErrors.privateKeyLoc === null) {
                    refExpressionErrors.privateKeyLoc = privateKeyLoc;
                  }
                } else {
                  this.raise(Errors.UnexpectedPrivateField, privateKeyLoc);
                }
                key = this.parsePrivateName();
                break;
              }
            default:
              this.unexpected();
          }
        }
        prop.key = key;
        if (type !== 138) {
          prop.computed = false;
        }
      }
    }
    initFunction(node, isAsync) {
      node.id = null;
      node.generator = false;
      node.async = isAsync;
    }
    parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {
      this.initFunction(node, isAsync);
      node.generator = isGenerator;
      this.scope.enter(2 | 16 | (inClassScope ? 64 : 0) | (allowDirectSuper ? 32 : 0));
      this.prodParam.enter(functionFlags(isAsync, node.generator));
      this.parseFunctionParams(node, isConstructor);
      const finishedNode = this.parseFunctionBodyAndFinish(node, type, true);
      this.prodParam.exit();
      this.scope.exit();
      return finishedNode;
    }
    parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {
      if (isTuple) {
        this.expectPlugin("recordAndTuple");
      }
      const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
      this.state.inFSharpPipelineDirectBody = false;
      const node = this.startNode();
      this.next();
      node.elements = this.parseExprList(close, !isTuple, refExpressionErrors, node);
      this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
      return this.finishNode(node, isTuple ? "TupleExpression" : "ArrayExpression");
    }
    parseArrowExpression(node, params, isAsync, trailingCommaLoc) {
      this.scope.enter(2 | 4);
      let flags = functionFlags(isAsync, false);
      if (!this.match(5) && this.prodParam.hasIn) {
        flags |= 8;
      }
      this.prodParam.enter(flags);
      this.initFunction(node, isAsync);
      const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
      if (params) {
        this.state.maybeInArrowParameters = true;
        this.setArrowFunctionParameters(node, params, trailingCommaLoc);
      }
      this.state.maybeInArrowParameters = false;
      this.parseFunctionBody(node, true);
      this.prodParam.exit();
      this.scope.exit();
      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
      return this.finishNode(node, "ArrowFunctionExpression");
    }
    setArrowFunctionParameters(node, params, trailingCommaLoc) {
      this.toAssignableList(params, trailingCommaLoc, false);
      node.params = params;
    }
    parseFunctionBodyAndFinish(node, type, isMethod = false) {
      this.parseFunctionBody(node, false, isMethod);
      return this.finishNode(node, type);
    }
    parseFunctionBody(node, allowExpression, isMethod = false) {
      const isExpression = allowExpression && !this.match(5);
      this.expressionScope.enter(newExpressionScope());
      if (isExpression) {
        node.body = this.parseMaybeAssign();
        this.checkParams(node, false, allowExpression, false);
      } else {
        const oldStrict = this.state.strict;
        const oldLabels = this.state.labels;
        this.state.labels = [];
        this.prodParam.enter(this.prodParam.currentFlags() | 4);
        node.body = this.parseBlock(true, false, hasStrictModeDirective => {
          const nonSimple = !this.isSimpleParamList(node.params);
          if (hasStrictModeDirective && nonSimple) {
            this.raise(Errors.IllegalLanguageModeDirective, (node.kind === "method" || node.kind === "constructor") && !!node.key ? node.key.loc.end : node);
          }
          const strictModeChanged = !oldStrict && this.state.strict;
          this.checkParams(node, !this.state.strict && !allowExpression && !isMethod && !nonSimple, allowExpression, strictModeChanged);
          if (this.state.strict && node.id) {
            this.checkIdentifier(node.id, 65, strictModeChanged);
          }
        });
        this.prodParam.exit();
        this.state.labels = oldLabels;
      }
      this.expressionScope.exit();
    }
    isSimpleParameter(node) {
      return node.type === "Identifier";
    }
    isSimpleParamList(params) {
      for (let i = 0, len = params.length; i < len; i++) {
        if (!this.isSimpleParameter(params[i])) return false;
      }
      return true;
    }
    checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged = true) {
      const checkClashes = !allowDuplicates && new Set();
      const formalParameters = {
        type: "FormalParameters"
      };
      for (const param of node.params) {
        this.checkLVal(param, formalParameters, 5, checkClashes, strictModeChanged);
      }
    }
    parseExprList(close, allowEmpty, refExpressionErrors, nodeForExtra) {
      const elts = [];
      let first = true;
      while (!this.eat(close)) {
        if (first) {
          first = false;
        } else {
          this.expect(12);
          if (this.match(close)) {
            if (nodeForExtra) {
              this.addTrailingCommaExtraToNode(nodeForExtra);
            }
            this.next();
            break;
          }
        }
        elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));
      }
      return elts;
    }
    parseExprListItem(allowEmpty, refExpressionErrors, allowPlaceholder) {
      let elt;
      if (this.match(12)) {
        if (!allowEmpty) {
          this.raise(Errors.UnexpectedToken, this.state.curPosition(), {
            unexpected: ","
          });
        }
        elt = null;
      } else if (this.match(21)) {
        const spreadNodeStartLoc = this.state.startLoc;
        elt = this.parseParenItem(this.parseSpread(refExpressionErrors), spreadNodeStartLoc);
      } else if (this.match(17)) {
        this.expectPlugin("partialApplication");
        if (!allowPlaceholder) {
          this.raise(Errors.UnexpectedArgumentPlaceholder, this.state.startLoc);
        }
        const node = this.startNode();
        this.next();
        elt = this.finishNode(node, "ArgumentPlaceholder");
      } else {
        elt = this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem);
      }
      return elt;
    }
    parseIdentifier(liberal) {
      const node = this.startNode();
      const name = this.parseIdentifierName(liberal);
      return this.createIdentifier(node, name);
    }
    createIdentifier(node, name) {
      node.name = name;
      node.loc.identifierName = name;
      return this.finishNode(node, "Identifier");
    }
    parseIdentifierName(liberal) {
      let name;
      const {
        startLoc,
        type
      } = this.state;
      if (tokenIsKeywordOrIdentifier(type)) {
        name = this.state.value;
      } else {
        this.unexpected();
      }
      const tokenIsKeyword = tokenKeywordOrIdentifierIsKeyword(type);
      if (liberal) {
        if (tokenIsKeyword) {
          this.replaceToken(132);
        }
      } else {
        this.checkReservedWord(name, startLoc, tokenIsKeyword, false);
      }
      this.next();
      return name;
    }
    checkReservedWord(word, startLoc, checkKeywords, isBinding) {
      if (word.length > 10) {
        return;
      }
      if (!canBeReservedWord(word)) {
        return;
      }
      if (checkKeywords && isKeyword(word)) {
        this.raise(Errors.UnexpectedKeyword, startLoc, {
          keyword: word
        });
        return;
      }
      const reservedTest = !this.state.strict ? isReservedWord : isBinding ? isStrictBindReservedWord : isStrictReservedWord;
      if (reservedTest(word, this.inModule)) {
        this.raise(Errors.UnexpectedReservedWord, startLoc, {
          reservedWord: word
        });
        return;
      } else if (word === "yield") {
        if (this.prodParam.hasYield) {
          this.raise(Errors.YieldBindingIdentifier, startLoc);
          return;
        }
      } else if (word === "await") {
        if (this.prodParam.hasAwait) {
          this.raise(Errors.AwaitBindingIdentifier, startLoc);
          return;
        }
        if (this.scope.inStaticBlock) {
          this.raise(Errors.AwaitBindingIdentifierInStaticBlock, startLoc);
          return;
        }
        this.expressionScope.recordAsyncArrowParametersError(startLoc);
      } else if (word === "arguments") {
        if (this.scope.inClassAndNotInNonArrowFunction) {
          this.raise(Errors.ArgumentsInClass, startLoc);
          return;
        }
      }
    }
    recordAwaitIfAllowed() {
      const isAwaitAllowed = this.prodParam.hasAwait || this.options.allowAwaitOutsideFunction && !this.scope.inFunction;
      if (isAwaitAllowed && !this.scope.inFunction) {
        this.state.hasTopLevelAwait = true;
      }
      return isAwaitAllowed;
    }
    parseAwait(startLoc) {
      const node = this.startNodeAt(startLoc);
      this.expressionScope.recordParameterInitializerError(Errors.AwaitExpressionFormalParameter, node);
      if (this.eat(55)) {
        this.raise(Errors.ObsoleteAwaitStar, node);
      }
      if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {
        if (this.isAmbiguousAwait()) {
          this.ambiguousScriptDifferentAst = true;
        } else {
          this.sawUnambiguousESM = true;
        }
      }
      if (!this.state.soloAwait) {
        node.argument = this.parseMaybeUnary(null, true);
      }
      return this.finishNode(node, "AwaitExpression");
    }
    isAmbiguousAwait() {
      if (this.hasPrecedingLineBreak()) return true;
      const {
        type
      } = this.state;
      return type === 53 || type === 10 || type === 0 || tokenIsTemplate(type) || type === 102 && !this.state.containsEsc || type === 137 || type === 56 || this.hasPlugin("v8intrinsic") && type === 54;
    }
    parseYield() {
      const node = this.startNode();
      this.expressionScope.recordParameterInitializerError(Errors.YieldInParameter, node);
      this.next();
      let delegating = false;
      let argument = null;
      if (!this.hasPrecedingLineBreak()) {
        delegating = this.eat(55);
        switch (this.state.type) {
          case 13:
          case 139:
          case 8:
          case 11:
          case 3:
          case 9:
          case 14:
          case 12:
            if (!delegating) break;
          default:
            argument = this.parseMaybeAssign();
        }
      }
      node.delegate = delegating;
      node.argument = argument;
      return this.finishNode(node, "YieldExpression");
    }
    parseImportCall(node) {
      this.next();
      node.source = this.parseMaybeAssignAllowIn();
      if (this.hasPlugin("importAttributes") || this.hasPlugin("importAssertions")) {
        node.options = null;
      }
      if (this.eat(12)) {
        this.expectImportAttributesPlugin();
        if (!this.match(11)) {
          node.options = this.parseMaybeAssignAllowIn();
          this.eat(12);
        }
      }
      this.expect(11);
      return this.finishNode(node, "ImportExpression");
    }
    checkPipelineAtInfixOperator(left, leftStartLoc) {
      if (this.hasPlugin(["pipelineOperator", {
        proposal: "smart"
      }])) {
        if (left.type === "SequenceExpression") {
          this.raise(Errors.PipelineHeadSequenceExpression, leftStartLoc);
        }
      }
    }
    parseSmartPipelineBodyInStyle(childExpr, startLoc) {
      if (this.isSimpleReference(childExpr)) {
        const bodyNode = this.startNodeAt(startLoc);
        bodyNode.callee = childExpr;
        return this.finishNode(bodyNode, "PipelineBareFunction");
      } else {
        const bodyNode = this.startNodeAt(startLoc);
        this.checkSmartPipeTopicBodyEarlyErrors(startLoc);
        bodyNode.expression = childExpr;
        return this.finishNode(bodyNode, "PipelineTopicExpression");
      }
    }
    isSimpleReference(expression) {
      switch (expression.type) {
        case "MemberExpression":
          return !expression.computed && this.isSimpleReference(expression.object);
        case "Identifier":
          return true;
        default:
          return false;
      }
    }
    checkSmartPipeTopicBodyEarlyErrors(startLoc) {
      if (this.match(19)) {
        throw this.raise(Errors.PipelineBodyNoArrow, this.state.startLoc);
      }
      if (!this.topicReferenceWasUsedInCurrentContext()) {
        this.raise(Errors.PipelineTopicUnused, startLoc);
      }
    }
    withTopicBindingContext(callback) {
      const outerContextTopicState = this.state.topicContext;
      this.state.topicContext = {
        maxNumOfResolvableTopics: 1,
        maxTopicIndex: null
      };
      try {
        return callback();
      } finally {
        this.state.topicContext = outerContextTopicState;
      }
    }
    withSmartMixTopicForbiddingContext(callback) {
      if (this.hasPlugin(["pipelineOperator", {
        proposal: "smart"
      }])) {
        const outerContextTopicState = this.state.topicContext;
        this.state.topicContext = {
          maxNumOfResolvableTopics: 0,
          maxTopicIndex: null
        };
        try {
          return callback();
        } finally {
          this.state.topicContext = outerContextTopicState;
        }
      } else {
        return callback();
      }
    }
    withSoloAwaitPermittingContext(callback) {
      const outerContextSoloAwaitState = this.state.soloAwait;
      this.state.soloAwait = true;
      try {
        return callback();
      } finally {
        this.state.soloAwait = outerContextSoloAwaitState;
      }
    }
    allowInAnd(callback) {
      const flags = this.prodParam.currentFlags();
      const prodParamToSet = 8 & ~flags;
      if (prodParamToSet) {
        this.prodParam.enter(flags | 8);
        try {
          return callback();
        } finally {
          this.prodParam.exit();
        }
      }
      return callback();
    }
    disallowInAnd(callback) {
      const flags = this.prodParam.currentFlags();
      const prodParamToClear = 8 & flags;
      if (prodParamToClear) {
        this.prodParam.enter(flags & ~8);
        try {
          return callback();
        } finally {
          this.prodParam.exit();
        }
      }
      return callback();
    }
    registerTopicReference() {
      this.state.topicContext.maxTopicIndex = 0;
    }
    topicReferenceIsAllowedInCurrentContext() {
      return this.state.topicContext.maxNumOfResolvableTopics >= 1;
    }
    topicReferenceWasUsedInCurrentContext() {
      return this.state.topicContext.maxTopicIndex != null && this.state.topicContext.maxTopicIndex >= 0;
    }
    parseFSharpPipelineBody(prec) {
      const startLoc = this.state.startLoc;
      this.state.potentialArrowAt = this.state.start;
      const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
      this.state.inFSharpPipelineDirectBody = true;
      const ret = this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startLoc, prec);
      this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
      return ret;
    }
    parseModuleExpression() {
      this.expectPlugin("moduleBlocks");
      const node = this.startNode();
      this.next();
      if (!this.match(5)) {
        this.unexpected(null, 5);
      }
      const program = this.startNodeAt(this.state.endLoc);
      this.next();
      const revertScopes = this.initializeScopes(true);
      this.enterInitialScopes();
      try {
        node.body = this.parseProgram(program, 8, "module");
      } finally {
        revertScopes();
      }
      return this.finishNode(node, "ModuleExpression");
    }
    parsePropertyNamePrefixOperator(prop) {}
  }
  const loopLabel = {
      kind: 1
    },
    switchLabel = {
      kind: 2
    };
  const loneSurrogate = /[\uD800-\uDFFF]/u;
  const keywordRelationalOperator = /in(?:stanceof)?/y;
  function babel7CompatTokens(tokens, input) {
    for (let i = 0; i < tokens.length; i++) {
      const token = tokens[i];
      const {
        type
      } = token;
      if (typeof type === "number") {
        {
          if (type === 138) {
            const {
              loc,
              start,
              value,
              end
            } = token;
            const hashEndPos = start + 1;
            const hashEndLoc = createPositionWithColumnOffset(loc.start, 1);
            tokens.splice(i, 1, new Token({
              type: getExportedToken(27),
              value: "#",
              start: start,
              end: hashEndPos,
              startLoc: loc.start,
              endLoc: hashEndLoc
            }), new Token({
              type: getExportedToken(132),
              value: value,
              start: hashEndPos,
              end: end,
              startLoc: hashEndLoc,
              endLoc: loc.end
            }));
            i++;
            continue;
          }
          if (tokenIsTemplate(type)) {
            const {
              loc,
              start,
              value,
              end
            } = token;
            const backquoteEnd = start + 1;
            const backquoteEndLoc = createPositionWithColumnOffset(loc.start, 1);
            let startToken;
            if (input.charCodeAt(start) === 96) {
              startToken = new Token({
                type: getExportedToken(22),
                value: "`",
                start: start,
                end: backquoteEnd,
                startLoc: loc.start,
                endLoc: backquoteEndLoc
              });
            } else {
              startToken = new Token({
                type: getExportedToken(8),
                value: "}",
                start: start,
                end: backquoteEnd,
                startLoc: loc.start,
                endLoc: backquoteEndLoc
              });
            }
            let templateValue, templateElementEnd, templateElementEndLoc, endToken;
            if (type === 24) {
              templateElementEnd = end - 1;
              templateElementEndLoc = createPositionWithColumnOffset(loc.end, -1);
              templateValue = value === null ? null : value.slice(1, -1);
              endToken = new Token({
                type: getExportedToken(22),
                value: "`",
                start: templateElementEnd,
                end: end,
                startLoc: templateElementEndLoc,
                endLoc: loc.end
              });
            } else {
              templateElementEnd = end - 2;
              templateElementEndLoc = createPositionWithColumnOffset(loc.end, -2);
              templateValue = value === null ? null : value.slice(1, -2);
              endToken = new Token({
                type: getExportedToken(23),
                value: "${",
                start: templateElementEnd,
                end: end,
                startLoc: templateElementEndLoc,
                endLoc: loc.end
              });
            }
            tokens.splice(i, 1, startToken, new Token({
              type: getExportedToken(20),
              value: templateValue,
              start: backquoteEnd,
              end: templateElementEnd,
              startLoc: backquoteEndLoc,
              endLoc: templateElementEndLoc
            }), endToken);
            i += 2;
            continue;
          }
        }
        token.type = getExportedToken(type);
      }
    }
    return tokens;
  }
  class StatementParser extends ExpressionParser {
    parseTopLevel(file, program) {
      file.program = this.parseProgram(program);
      file.comments = this.comments;
      if (this.options.tokens) {
        file.tokens = babel7CompatTokens(this.tokens, this.input);
      }
      return this.finishNode(file, "File");
    }
    parseProgram(program, end = 139, sourceType = this.options.sourceType) {
      program.sourceType = sourceType;
      program.interpreter = this.parseInterpreterDirective();
      this.parseBlockBody(program, true, true, end);
      if (this.inModule) {
        if (!this.options.allowUndeclaredExports && this.scope.undefinedExports.size > 0) {
          for (const [localName, at] of Array.from(this.scope.undefinedExports)) {
            this.raise(Errors.ModuleExportUndefined, at, {
              localName
            });
          }
        }
        this.addExtra(program, "topLevelAwait", this.state.hasTopLevelAwait);
      }
      let finishedProgram;
      if (end === 139) {
        finishedProgram = this.finishNode(program, "Program");
      } else {
        finishedProgram = this.finishNodeAt(program, "Program", createPositionWithColumnOffset(this.state.startLoc, -1));
      }
      return finishedProgram;
    }
    stmtToDirective(stmt) {
      const directive = stmt;
      directive.type = "Directive";
      directive.value = directive.expression;
      delete directive.expression;
      const directiveLiteral = directive.value;
      const expressionValue = directiveLiteral.value;
      const raw = this.input.slice(directiveLiteral.start, directiveLiteral.end);
      const val = directiveLiteral.value = raw.slice(1, -1);
      this.addExtra(directiveLiteral, "raw", raw);
      this.addExtra(directiveLiteral, "rawValue", val);
      this.addExtra(directiveLiteral, "expressionValue", expressionValue);
      directiveLiteral.type = "DirectiveLiteral";
      return directive;
    }
    parseInterpreterDirective() {
      if (!this.match(28)) {
        return null;
      }
      const node = this.startNode();
      node.value = this.state.value;
      this.next();
      return this.finishNode(node, "InterpreterDirective");
    }
    isLet() {
      if (!this.isContextual(100)) {
        return false;
      }
      return this.hasFollowingBindingAtom();
    }
    chStartsBindingIdentifier(ch, pos) {
      if (isIdentifierStart(ch)) {
        keywordRelationalOperator.lastIndex = pos;
        if (keywordRelationalOperator.test(this.input)) {
          const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);
          if (!isIdentifierChar(endCh) && endCh !== 92) {
            return false;
          }
        }
        return true;
      } else if (ch === 92) {
        return true;
      } else {
        return false;
      }
    }
    chStartsBindingPattern(ch) {
      return ch === 91 || ch === 123;
    }
    hasFollowingBindingAtom() {
      const next = this.nextTokenStart();
      const nextCh = this.codePointAtPos(next);
      return this.chStartsBindingPattern(nextCh) || this.chStartsBindingIdentifier(nextCh, next);
    }
    hasInLineFollowingBindingIdentifierOrBrace() {
      const next = this.nextTokenInLineStart();
      const nextCh = this.codePointAtPos(next);
      return nextCh === 123 || this.chStartsBindingIdentifier(nextCh, next);
    }
    startsUsingForOf() {
      const {
        type,
        containsEsc
      } = this.lookahead();
      if (type === 102 && !containsEsc) {
        return false;
      } else if (tokenIsIdentifier(type) && !this.hasFollowingLineBreak()) {
        this.expectPlugin("explicitResourceManagement");
        return true;
      }
    }
    startsAwaitUsing() {
      let next = this.nextTokenInLineStart();
      if (this.isUnparsedContextual(next, "using")) {
        next = this.nextTokenInLineStartSince(next + 5);
        const nextCh = this.codePointAtPos(next);
        if (this.chStartsBindingIdentifier(nextCh, next)) {
          this.expectPlugin("explicitResourceManagement");
          return true;
        }
      }
      return false;
    }
    parseModuleItem() {
      return this.parseStatementLike(1 | 2 | 4 | 8);
    }
    parseStatementListItem() {
      return this.parseStatementLike(2 | 4 | (!this.options.annexB || this.state.strict ? 0 : 8));
    }
    parseStatementOrSloppyAnnexBFunctionDeclaration(allowLabeledFunction = false) {
      let flags = 0;
      if (this.options.annexB && !this.state.strict) {
        flags |= 4;
        if (allowLabeledFunction) {
          flags |= 8;
        }
      }
      return this.parseStatementLike(flags);
    }
    parseStatement() {
      return this.parseStatementLike(0);
    }
    parseStatementLike(flags) {
      let decorators = null;
      if (this.match(26)) {
        decorators = this.parseDecorators(true);
      }
      return this.parseStatementContent(flags, decorators);
    }
    parseStatementContent(flags, decorators) {
      const startType = this.state.type;
      const node = this.startNode();
      const allowDeclaration = !!(flags & 2);
      const allowFunctionDeclaration = !!(flags & 4);
      const topLevel = flags & 1;
      switch (startType) {
        case 60:
          return this.parseBreakContinueStatement(node, true);
        case 63:
          return this.parseBreakContinueStatement(node, false);
        case 64:
          return this.parseDebuggerStatement(node);
        case 90:
          return this.parseDoWhileStatement(node);
        case 91:
          return this.parseForStatement(node);
        case 68:
          if (this.lookaheadCharCode() === 46) break;
          if (!allowFunctionDeclaration) {
            this.raise(this.state.strict ? Errors.StrictFunction : this.options.annexB ? Errors.SloppyFunctionAnnexB : Errors.SloppyFunction, this.state.startLoc);
          }
          return this.parseFunctionStatement(node, false, !allowDeclaration && allowFunctionDeclaration);
        case 80:
          if (!allowDeclaration) this.unexpected();
          return this.parseClass(this.maybeTakeDecorators(decorators, node), true);
        case 69:
          return this.parseIfStatement(node);
        case 70:
          return this.parseReturnStatement(node);
        case 71:
          return this.parseSwitchStatement(node);
        case 72:
          return this.parseThrowStatement(node);
        case 73:
          return this.parseTryStatement(node);
        case 96:
          if (!this.state.containsEsc && this.startsAwaitUsing()) {
            if (!this.recordAwaitIfAllowed()) {
              this.raise(Errors.AwaitUsingNotInAsyncContext, node);
            } else if (!allowDeclaration) {
              this.raise(Errors.UnexpectedLexicalDeclaration, node);
            }
            this.next();
            return this.parseVarStatement(node, "await using");
          }
          break;
        case 107:
          if (this.state.containsEsc || !this.hasInLineFollowingBindingIdentifierOrBrace()) {
            break;
          }
          this.expectPlugin("explicitResourceManagement");
          if (!this.scope.inModule && this.scope.inTopLevel) {
            this.raise(Errors.UnexpectedUsingDeclaration, this.state.startLoc);
          } else if (!allowDeclaration) {
            this.raise(Errors.UnexpectedLexicalDeclaration, this.state.startLoc);
          }
          return this.parseVarStatement(node, "using");
        case 100:
          {
            if (this.state.containsEsc) {
              break;
            }
            const next = this.nextTokenStart();
            const nextCh = this.codePointAtPos(next);
            if (nextCh !== 91) {
              if (!allowDeclaration && this.hasFollowingLineBreak()) break;
              if (!this.chStartsBindingIdentifier(nextCh, next) && nextCh !== 123) {
                break;
              }
            }
          }
        case 75:
          {
            if (!allowDeclaration) {
              this.raise(Errors.UnexpectedLexicalDeclaration, this.state.startLoc);
            }
          }
        case 74:
          {
            const kind = this.state.value;
            return this.parseVarStatement(node, kind);
          }
        case 92:
          return this.parseWhileStatement(node);
        case 76:
          return this.parseWithStatement(node);
        case 5:
          return this.parseBlock();
        case 13:
          return this.parseEmptyStatement(node);
        case 83:
          {
            const nextTokenCharCode = this.lookaheadCharCode();
            if (nextTokenCharCode === 40 || nextTokenCharCode === 46) {
              break;
            }
          }
        case 82:
          {
            if (!this.options.allowImportExportEverywhere && !topLevel) {
              this.raise(Errors.UnexpectedImportExport, this.state.startLoc);
            }
            this.next();
            let result;
            if (startType === 83) {
              result = this.parseImport(node);
              if (result.type === "ImportDeclaration" && (!result.importKind || result.importKind === "value")) {
                this.sawUnambiguousESM = true;
              }
            } else {
              result = this.parseExport(node, decorators);
              if (result.type === "ExportNamedDeclaration" && (!result.exportKind || result.exportKind === "value") || result.type === "ExportAllDeclaration" && (!result.exportKind || result.exportKind === "value") || result.type === "ExportDefaultDeclaration") {
                this.sawUnambiguousESM = true;
              }
            }
            this.assertModuleNodeAllowed(result);
            return result;
          }
        default:
          {
            if (this.isAsyncFunction()) {
              if (!allowDeclaration) {
                this.raise(Errors.AsyncFunctionInSingleStatementContext, this.state.startLoc);
              }
              this.next();
              return this.parseFunctionStatement(node, true, !allowDeclaration && allowFunctionDeclaration);
            }
          }
      }
      const maybeName = this.state.value;
      const expr = this.parseExpression();
      if (tokenIsIdentifier(startType) && expr.type === "Identifier" && this.eat(14)) {
        return this.parseLabeledStatement(node, maybeName, expr, flags);
      } else {
        return this.parseExpressionStatement(node, expr, decorators);
      }
    }
    assertModuleNodeAllowed(node) {
      if (!this.options.allowImportExportEverywhere && !this.inModule) {
        this.raise(Errors.ImportOutsideModule, node);
      }
    }
    decoratorsEnabledBeforeExport() {
      if (this.hasPlugin("decorators-legacy")) return true;
      return this.hasPlugin("decorators") && this.getPluginOption("decorators", "decoratorsBeforeExport") !== false;
    }
    maybeTakeDecorators(maybeDecorators, classNode, exportNode) {
      if (maybeDecorators) {
        if (classNode.decorators && classNode.decorators.length > 0) {
          if (typeof this.getPluginOption("decorators", "decoratorsBeforeExport") !== "boolean") {
            this.raise(Errors.DecoratorsBeforeAfterExport, classNode.decorators[0]);
          }
          classNode.decorators.unshift(...maybeDecorators);
        } else {
          classNode.decorators = maybeDecorators;
        }
        this.resetStartLocationFromNode(classNode, maybeDecorators[0]);
        if (exportNode) this.resetStartLocationFromNode(exportNode, classNode);
      }
      return classNode;
    }
    canHaveLeadingDecorator() {
      return this.match(80);
    }
    parseDecorators(allowExport) {
      const decorators = [];
      do {
        decorators.push(this.parseDecorator());
      } while (this.match(26));
      if (this.match(82)) {
        if (!allowExport) {
          this.unexpected();
        }
        if (!this.decoratorsEnabledBeforeExport()) {
          this.raise(Errors.DecoratorExportClass, this.state.startLoc);
        }
      } else if (!this.canHaveLeadingDecorator()) {
        throw this.raise(Errors.UnexpectedLeadingDecorator, this.state.startLoc);
      }
      return decorators;
    }
    parseDecorator() {
      this.expectOnePlugin(["decorators", "decorators-legacy"]);
      const node = this.startNode();
      this.next();
      if (this.hasPlugin("decorators")) {
        const startLoc = this.state.startLoc;
        let expr;
        if (this.match(10)) {
          const startLoc = this.state.startLoc;
          this.next();
          expr = this.parseExpression();
          this.expect(11);
          expr = this.wrapParenthesis(startLoc, expr);
          const paramsStartLoc = this.state.startLoc;
          node.expression = this.parseMaybeDecoratorArguments(expr);
          if (this.getPluginOption("decorators", "allowCallParenthesized") === false && node.expression !== expr) {
            this.raise(Errors.DecoratorArgumentsOutsideParentheses, paramsStartLoc);
          }
        } else {
          expr = this.parseIdentifier(false);
          while (this.eat(16)) {
            const node = this.startNodeAt(startLoc);
            node.object = expr;
            if (this.match(138)) {
              this.classScope.usePrivateName(this.state.value, this.state.startLoc);
              node.property = this.parsePrivateName();
            } else {
              node.property = this.parseIdentifier(true);
            }
            node.computed = false;
            expr = this.finishNode(node, "MemberExpression");
          }
          node.expression = this.parseMaybeDecoratorArguments(expr);
        }
      } else {
        node.expression = this.parseExprSubscripts();
      }
      return this.finishNode(node, "Decorator");
    }
    parseMaybeDecoratorArguments(expr) {
      if (this.eat(10)) {
        const node = this.startNodeAtNode(expr);
        node.callee = expr;
        node.arguments = this.parseCallExpressionArguments(11, false);
        this.toReferencedList(node.arguments);
        return this.finishNode(node, "CallExpression");
      }
      return expr;
    }
    parseBreakContinueStatement(node, isBreak) {
      this.next();
      if (this.isLineTerminator()) {
        node.label = null;
      } else {
        node.label = this.parseIdentifier();
        this.semicolon();
      }
      this.verifyBreakContinue(node, isBreak);
      return this.finishNode(node, isBreak ? "BreakStatement" : "ContinueStatement");
    }
    verifyBreakContinue(node, isBreak) {
      let i;
      for (i = 0; i < this.state.labels.length; ++i) {
        const lab = this.state.labels[i];
        if (node.label == null || lab.name === node.label.name) {
          if (lab.kind != null && (isBreak || lab.kind === 1)) {
            break;
          }
          if (node.label && isBreak) break;
        }
      }
      if (i === this.state.labels.length) {
        const type = isBreak ? "BreakStatement" : "ContinueStatement";
        this.raise(Errors.IllegalBreakContinue, node, {
          type
        });
      }
    }
    parseDebuggerStatement(node) {
      this.next();
      this.semicolon();
      return this.finishNode(node, "DebuggerStatement");
    }
    parseHeaderExpression() {
      this.expect(10);
      const val = this.parseExpression();
      this.expect(11);
      return val;
    }
    parseDoWhileStatement(node) {
      this.next();
      this.state.labels.push(loopLabel);
      node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement());
      this.state.labels.pop();
      this.expect(92);
      node.test = this.parseHeaderExpression();
      this.eat(13);
      return this.finishNode(node, "DoWhileStatement");
    }
    parseForStatement(node) {
      this.next();
      this.state.labels.push(loopLabel);
      let awaitAt = null;
      if (this.isContextual(96) && this.recordAwaitIfAllowed()) {
        awaitAt = this.state.startLoc;
        this.next();
      }
      this.scope.enter(0);
      this.expect(10);
      if (this.match(13)) {
        if (awaitAt !== null) {
          this.unexpected(awaitAt);
        }
        return this.parseFor(node, null);
      }
      const startsWithLet = this.isContextual(100);
      {
        const startsWithAwaitUsing = this.isContextual(96) && this.startsAwaitUsing();
        const starsWithUsingDeclaration = startsWithAwaitUsing || this.isContextual(107) && this.startsUsingForOf();
        const isLetOrUsing = startsWithLet && this.hasFollowingBindingAtom() || starsWithUsingDeclaration;
        if (this.match(74) || this.match(75) || isLetOrUsing) {
          const initNode = this.startNode();
          let kind;
          if (startsWithAwaitUsing) {
            kind = "await using";
            if (!this.recordAwaitIfAllowed()) {
              this.raise(Errors.AwaitUsingNotInAsyncContext, this.state.startLoc);
            }
            this.next();
          } else {
            kind = this.state.value;
          }
          this.next();
          this.parseVar(initNode, true, kind);
          const init = this.finishNode(initNode, "VariableDeclaration");
          const isForIn = this.match(58);
          if (isForIn && starsWithUsingDeclaration) {
            this.raise(Errors.ForInUsing, init);
          }
          if ((isForIn || this.isContextual(102)) && init.declarations.length === 1) {
            return this.parseForIn(node, init, awaitAt);
          }
          if (awaitAt !== null) {
            this.unexpected(awaitAt);
          }
          return this.parseFor(node, init);
        }
      }
      const startsWithAsync = this.isContextual(95);
      const refExpressionErrors = new ExpressionErrors();
      const init = this.parseExpression(true, refExpressionErrors);
      const isForOf = this.isContextual(102);
      if (isForOf) {
        if (startsWithLet) {
          this.raise(Errors.ForOfLet, init);
        }
        if (awaitAt === null && startsWithAsync && init.type === "Identifier") {
          this.raise(Errors.ForOfAsync, init);
        }
      }
      if (isForOf || this.match(58)) {
        this.checkDestructuringPrivate(refExpressionErrors);
        this.toAssignable(init, true);
        const type = isForOf ? "ForOfStatement" : "ForInStatement";
        this.checkLVal(init, {
          type
        });
        return this.parseForIn(node, init, awaitAt);
      } else {
        this.checkExpressionErrors(refExpressionErrors, true);
      }
      if (awaitAt !== null) {
        this.unexpected(awaitAt);
      }
      return this.parseFor(node, init);
    }
    parseFunctionStatement(node, isAsync, isHangingDeclaration) {
      this.next();
      return this.parseFunction(node, 1 | (isHangingDeclaration ? 2 : 0) | (isAsync ? 8 : 0));
    }
    parseIfStatement(node) {
      this.next();
      node.test = this.parseHeaderExpression();
      node.consequent = this.parseStatementOrSloppyAnnexBFunctionDeclaration();
      node.alternate = this.eat(66) ? this.parseStatementOrSloppyAnnexBFunctionDeclaration() : null;
      return this.finishNode(node, "IfStatement");
    }
    parseReturnStatement(node) {
      if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {
        this.raise(Errors.IllegalReturn, this.state.startLoc);
      }
      this.next();
      if (this.isLineTerminator()) {
        node.argument = null;
      } else {
        node.argument = this.parseExpression();
        this.semicolon();
      }
      return this.finishNode(node, "ReturnStatement");
    }
    parseSwitchStatement(node) {
      this.next();
      node.discriminant = this.parseHeaderExpression();
      const cases = node.cases = [];
      this.expect(5);
      this.state.labels.push(switchLabel);
      this.scope.enter(0);
      let cur;
      for (let sawDefault; !this.match(8);) {
        if (this.match(61) || this.match(65)) {
          const isCase = this.match(61);
          if (cur) this.finishNode(cur, "SwitchCase");
          cases.push(cur = this.startNode());
          cur.consequent = [];
          this.next();
          if (isCase) {
            cur.test = this.parseExpression();
          } else {
            if (sawDefault) {
              this.raise(Errors.MultipleDefaultsInSwitch, this.state.lastTokStartLoc);
            }
            sawDefault = true;
            cur.test = null;
          }
          this.expect(14);
        } else {
          if (cur) {
            cur.consequent.push(this.parseStatementListItem());
          } else {
            this.unexpected();
          }
        }
      }
      this.scope.exit();
      if (cur) this.finishNode(cur, "SwitchCase");
      this.next();
      this.state.labels.pop();
      return this.finishNode(node, "SwitchStatement");
    }
    parseThrowStatement(node) {
      this.next();
      if (this.hasPrecedingLineBreak()) {
        this.raise(Errors.NewlineAfterThrow, this.state.lastTokEndLoc);
      }
      node.argument = this.parseExpression();
      this.semicolon();
      return this.finishNode(node, "ThrowStatement");
    }
    parseCatchClauseParam() {
      const param = this.parseBindingAtom();
      this.scope.enter(this.options.annexB && param.type === "Identifier" ? 8 : 0);
      this.checkLVal(param, {
        type: "CatchClause"
      }, 9);
      return param;
    }
    parseTryStatement(node) {
      this.next();
      node.block = this.parseBlock();
      node.handler = null;
      if (this.match(62)) {
        const clause = this.startNode();
        this.next();
        if (this.match(10)) {
          this.expect(10);
          clause.param = this.parseCatchClauseParam();
          this.expect(11);
        } else {
          clause.param = null;
          this.scope.enter(0);
        }
        clause.body = this.withSmartMixTopicForbiddingContext(() => this.parseBlock(false, false));
        this.scope.exit();
        node.handler = this.finishNode(clause, "CatchClause");
      }
      node.finalizer = this.eat(67) ? this.parseBlock() : null;
      if (!node.handler && !node.finalizer) {
        this.raise(Errors.NoCatchOrFinally, node);
      }
      return this.finishNode(node, "TryStatement");
    }
    parseVarStatement(node, kind, allowMissingInitializer = false) {
      this.next();
      this.parseVar(node, false, kind, allowMissingInitializer);
      this.semicolon();
      return this.finishNode(node, "VariableDeclaration");
    }
    parseWhileStatement(node) {
      this.next();
      node.test = this.parseHeaderExpression();
      this.state.labels.push(loopLabel);
      node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement());
      this.state.labels.pop();
      return this.finishNode(node, "WhileStatement");
    }
    parseWithStatement(node) {
      if (this.state.strict) {
        this.raise(Errors.StrictWith, this.state.startLoc);
      }
      this.next();
      node.object = this.parseHeaderExpression();
      node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement());
      return this.finishNode(node, "WithStatement");
    }
    parseEmptyStatement(node) {
      this.next();
      return this.finishNode(node, "EmptyStatement");
    }
    parseLabeledStatement(node, maybeName, expr, flags) {
      for (const label of this.state.labels) {
        if (label.name === maybeName) {
          this.raise(Errors.LabelRedeclaration, expr, {
            labelName: maybeName
          });
        }
      }
      const kind = tokenIsLoop(this.state.type) ? 1 : this.match(71) ? 2 : null;
      for (let i = this.state.labels.length - 1; i >= 0; i--) {
        const label = this.state.labels[i];
        if (label.statementStart === node.start) {
          label.statementStart = this.state.start;
          label.kind = kind;
        } else {
          break;
        }
      }
      this.state.labels.push({
        name: maybeName,
        kind: kind,
        statementStart: this.state.start
      });
      node.body = flags & 8 ? this.parseStatementOrSloppyAnnexBFunctionDeclaration(true) : this.parseStatement();
      this.state.labels.pop();
      node.label = expr;
      return this.finishNode(node, "LabeledStatement");
    }
    parseExpressionStatement(node, expr, decorators) {
      node.expression = expr;
      this.semicolon();
      return this.finishNode(node, "ExpressionStatement");
    }
    parseBlock(allowDirectives = false, createNewLexicalScope = true, afterBlockParse) {
      const node = this.startNode();
      if (allowDirectives) {
        this.state.strictErrors.clear();
      }
      this.expect(5);
      if (createNewLexicalScope) {
        this.scope.enter(0);
      }
      this.parseBlockBody(node, allowDirectives, false, 8, afterBlockParse);
      if (createNewLexicalScope) {
        this.scope.exit();
      }
      return this.finishNode(node, "BlockStatement");
    }
    isValidDirective(stmt) {
      return stmt.type === "ExpressionStatement" && stmt.expression.type === "StringLiteral" && !stmt.expression.extra.parenthesized;
    }
    parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {
      const body = node.body = [];
      const directives = node.directives = [];
      this.parseBlockOrModuleBlockBody(body, allowDirectives ? directives : undefined, topLevel, end, afterBlockParse);
    }
    parseBlockOrModuleBlockBody(body, directives, topLevel, end, afterBlockParse) {
      const oldStrict = this.state.strict;
      let hasStrictModeDirective = false;
      let parsedNonDirective = false;
      while (!this.match(end)) {
        const stmt = topLevel ? this.parseModuleItem() : this.parseStatementListItem();
        if (directives && !parsedNonDirective) {
          if (this.isValidDirective(stmt)) {
            const directive = this.stmtToDirective(stmt);
            directives.push(directive);
            if (!hasStrictModeDirective && directive.value.value === "use strict") {
              hasStrictModeDirective = true;
              this.setStrict(true);
            }
            continue;
          }
          parsedNonDirective = true;
          this.state.strictErrors.clear();
        }
        body.push(stmt);
      }
      afterBlockParse == null || afterBlockParse.call(this, hasStrictModeDirective);
      if (!oldStrict) {
        this.setStrict(false);
      }
      this.next();
    }
    parseFor(node, init) {
      node.init = init;
      this.semicolon(false);
      node.test = this.match(13) ? null : this.parseExpression();
      this.semicolon(false);
      node.update = this.match(11) ? null : this.parseExpression();
      this.expect(11);
      node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement());
      this.scope.exit();
      this.state.labels.pop();
      return this.finishNode(node, "ForStatement");
    }
    parseForIn(node, init, awaitAt) {
      const isForIn = this.match(58);
      this.next();
      if (isForIn) {
        if (awaitAt !== null) this.unexpected(awaitAt);
      } else {
        node.await = awaitAt !== null;
      }
      if (init.type === "VariableDeclaration" && init.declarations[0].init != null && (!isForIn || !this.options.annexB || this.state.strict || init.kind !== "var" || init.declarations[0].id.type !== "Identifier")) {
        this.raise(Errors.ForInOfLoopInitializer, init, {
          type: isForIn ? "ForInStatement" : "ForOfStatement"
        });
      }
      if (init.type === "AssignmentPattern") {
        this.raise(Errors.InvalidLhs, init, {
          ancestor: {
            type: "ForStatement"
          }
        });
      }
      node.left = init;
      node.right = isForIn ? this.parseExpression() : this.parseMaybeAssignAllowIn();
      this.expect(11);
      node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement());
      this.scope.exit();
      this.state.labels.pop();
      return this.finishNode(node, isForIn ? "ForInStatement" : "ForOfStatement");
    }
    parseVar(node, isFor, kind, allowMissingInitializer = false) {
      const declarations = node.declarations = [];
      node.kind = kind;
      for (;;) {
        const decl = this.startNode();
        this.parseVarId(decl, kind);
        decl.init = !this.eat(29) ? null : isFor ? this.parseMaybeAssignDisallowIn() : this.parseMaybeAssignAllowIn();
        if (decl.init === null && !allowMissingInitializer) {
          if (decl.id.type !== "Identifier" && !(isFor && (this.match(58) || this.isContextual(102)))) {
            this.raise(Errors.DeclarationMissingInitializer, this.state.lastTokEndLoc, {
              kind: "destructuring"
            });
          } else if ((kind === "const" || kind === "using" || kind === "await using") && !(this.match(58) || this.isContextual(102))) {
            this.raise(Errors.DeclarationMissingInitializer, this.state.lastTokEndLoc, {
              kind
            });
          }
        }
        declarations.push(this.finishNode(decl, "VariableDeclarator"));
        if (!this.eat(12)) break;
      }
      return node;
    }
    parseVarId(decl, kind) {
      const id = this.parseBindingAtom();
      if (kind === "using" || kind === "await using") {
        if (id.type === "ArrayPattern" || id.type === "ObjectPattern") {
          this.raise(Errors.UsingDeclarationHasBindingPattern, id.loc.start);
        }
      }
      this.checkLVal(id, {
        type: "VariableDeclarator"
      }, kind === "var" ? 5 : 8201);
      decl.id = id;
    }
    parseAsyncFunctionExpression(node) {
      return this.parseFunction(node, 8);
    }
    parseFunction(node, flags = 0) {
      const hangingDeclaration = flags & 2;
      const isDeclaration = !!(flags & 1);
      const requireId = isDeclaration && !(flags & 4);
      const isAsync = !!(flags & 8);
      this.initFunction(node, isAsync);
      if (this.match(55)) {
        if (hangingDeclaration) {
          this.raise(Errors.GeneratorInSingleStatementContext, this.state.startLoc);
        }
        this.next();
        node.generator = true;
      }
      if (isDeclaration) {
        node.id = this.parseFunctionId(requireId);
      }
      const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
      this.state.maybeInArrowParameters = false;
      this.scope.enter(2);
      this.prodParam.enter(functionFlags(isAsync, node.generator));
      if (!isDeclaration) {
        node.id = this.parseFunctionId();
      }
      this.parseFunctionParams(node, false);
      this.withSmartMixTopicForbiddingContext(() => {
        this.parseFunctionBodyAndFinish(node, isDeclaration ? "FunctionDeclaration" : "FunctionExpression");
      });
      this.prodParam.exit();
      this.scope.exit();
      if (isDeclaration && !hangingDeclaration) {
        this.registerFunctionStatementId(node);
      }
      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;
      return node;
    }
    parseFunctionId(requireId) {
      return requireId || tokenIsIdentifier(this.state.type) ? this.parseIdentifier() : null;
    }
    parseFunctionParams(node, isConstructor) {
      this.expect(10);
      this.expressionScope.enter(newParameterDeclarationScope());
      node.params = this.parseBindingList(11, 41, 2 | (isConstructor ? 4 : 0));
      this.expressionScope.exit();
    }
    registerFunctionStatementId(node) {
      if (!node.id) return;
      this.scope.declareName(node.id.name, !this.options.annexB || this.state.strict || node.generator || node.async ? this.scope.treatFunctionsAsVar ? 5 : 8201 : 17, node.id.loc.start);
    }
    parseClass(node, isStatement, optionalId) {
      this.next();
      const oldStrict = this.state.strict;
      this.state.strict = true;
      this.parseClassId(node, isStatement, optionalId);
      this.parseClassSuper(node);
      node.body = this.parseClassBody(!!node.superClass, oldStrict);
      return this.finishNode(node, isStatement ? "ClassDeclaration" : "ClassExpression");
    }
    isClassProperty() {
      return this.match(29) || this.match(13) || this.match(8);
    }
    isClassMethod() {
      return this.match(10);
    }
    nameIsConstructor(key) {
      return key.type === "Identifier" && key.name === "constructor" || key.type === "StringLiteral" && key.value === "constructor";
    }
    isNonstaticConstructor(method) {
      return !method.computed && !method.static && this.nameIsConstructor(method.key);
    }
    parseClassBody(hadSuperClass, oldStrict) {
      this.classScope.enter();
      const state = {
        hadConstructor: false,
        hadSuperClass
      };
      let decorators = [];
      const classBody = this.startNode();
      classBody.body = [];
      this.expect(5);
      this.withSmartMixTopicForbiddingContext(() => {
        while (!this.match(8)) {
          if (this.eat(13)) {
            if (decorators.length > 0) {
              throw this.raise(Errors.DecoratorSemicolon, this.state.lastTokEndLoc);
            }
            continue;
          }
          if (this.match(26)) {
            decorators.push(this.parseDecorator());
            continue;
          }
          const member = this.startNode();
          if (decorators.length) {
            member.decorators = decorators;
            this.resetStartLocationFromNode(member, decorators[0]);
            decorators = [];
          }
          this.parseClassMember(classBody, member, state);
          if (member.kind === "constructor" && member.decorators && member.decorators.length > 0) {
            this.raise(Errors.DecoratorConstructor, member);
          }
        }
      });
      this.state.strict = oldStrict;
      this.next();
      if (decorators.length) {
        throw this.raise(Errors.TrailingDecorator, this.state.startLoc);
      }
      this.classScope.exit();
      return this.finishNode(classBody, "ClassBody");
    }
    parseClassMemberFromModifier(classBody, member) {
      const key = this.parseIdentifier(true);
      if (this.isClassMethod()) {
        const method = member;
        method.kind = "method";
        method.computed = false;
        method.key = key;
        method.static = false;
        this.pushClassMethod(classBody, method, false, false, false, false);
        return true;
      } else if (this.isClassProperty()) {
        const prop = member;
        prop.computed = false;
        prop.key = key;
        prop.static = false;
        classBody.body.push(this.parseClassProperty(prop));
        return true;
      }
      this.resetPreviousNodeTrailingComments(key);
      return false;
    }
    parseClassMember(classBody, member, state) {
      const isStatic = this.isContextual(106);
      if (isStatic) {
        if (this.parseClassMemberFromModifier(classBody, member)) {
          return;
        }
        if (this.eat(5)) {
          this.parseClassStaticBlock(classBody, member);
          return;
        }
      }
      this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);
    }
    parseClassMemberWithIsStatic(classBody, member, state, isStatic) {
      const publicMethod = member;
      const privateMethod = member;
      const publicProp = member;
      const privateProp = member;
      const accessorProp = member;
      const method = publicMethod;
      const publicMember = publicMethod;
      member.static = isStatic;
      this.parsePropertyNamePrefixOperator(member);
      if (this.eat(55)) {
        method.kind = "method";
        const isPrivateName = this.match(138);
        this.parseClassElementName(method);
        if (isPrivateName) {
          this.pushClassPrivateMethod(classBody, privateMethod, true, false);
          return;
        }
        if (this.isNonstaticConstructor(publicMethod)) {
          this.raise(Errors.ConstructorIsGenerator, publicMethod.key);
        }
        this.pushClassMethod(classBody, publicMethod, true, false, false, false);
        return;
      }
      const isContextual = !this.state.containsEsc && tokenIsIdentifier(this.state.type);
      const key = this.parseClassElementName(member);
      const maybeContextualKw = isContextual ? key.name : null;
      const isPrivate = this.isPrivateName(key);
      const maybeQuestionTokenStartLoc = this.state.startLoc;
      this.parsePostMemberNameModifiers(publicMember);
      if (this.isClassMethod()) {
        method.kind = "method";
        if (isPrivate) {
          this.pushClassPrivateMethod(classBody, privateMethod, false, false);
          return;
        }
        const isConstructor = this.isNonstaticConstructor(publicMethod);
        let allowsDirectSuper = false;
        if (isConstructor) {
          publicMethod.kind = "constructor";
          if (state.hadConstructor && !this.hasPlugin("typescript")) {
            this.raise(Errors.DuplicateConstructor, key);
          }
          if (isConstructor && this.hasPlugin("typescript") && member.override) {
            this.raise(Errors.OverrideOnConstructor, key);
          }
          state.hadConstructor = true;
          allowsDirectSuper = state.hadSuperClass;
        }
        this.pushClassMethod(classBody, publicMethod, false, false, isConstructor, allowsDirectSuper);
      } else if (this.isClassProperty()) {
        if (isPrivate) {
          this.pushClassPrivateProperty(classBody, privateProp);
        } else {
          this.pushClassProperty(classBody, publicProp);
        }
      } else if (maybeContextualKw === "async" && !this.isLineTerminator()) {
        this.resetPreviousNodeTrailingComments(key);
        const isGenerator = this.eat(55);
        if (publicMember.optional) {
          this.unexpected(maybeQuestionTokenStartLoc);
        }
        method.kind = "method";
        const isPrivate = this.match(138);
        this.parseClassElementName(method);
        this.parsePostMemberNameModifiers(publicMember);
        if (isPrivate) {
          this.pushClassPrivateMethod(classBody, privateMethod, isGenerator, true);
        } else {
          if (this.isNonstaticConstructor(publicMethod)) {
            this.raise(Errors.ConstructorIsAsync, publicMethod.key);
          }
          this.pushClassMethod(classBody, publicMethod, isGenerator, true, false, false);
        }
      } else if ((maybeContextualKw === "get" || maybeContextualKw === "set") && !(this.match(55) && this.isLineTerminator())) {
        this.resetPreviousNodeTrailingComments(key);
        method.kind = maybeContextualKw;
        const isPrivate = this.match(138);
        this.parseClassElementName(publicMethod);
        if (isPrivate) {
          this.pushClassPrivateMethod(classBody, privateMethod, false, false);
        } else {
          if (this.isNonstaticConstructor(publicMethod)) {
            this.raise(Errors.ConstructorIsAccessor, publicMethod.key);
          }
          this.pushClassMethod(classBody, publicMethod, false, false, false, false);
        }
        this.checkGetterSetterParams(publicMethod);
      } else if (maybeContextualKw === "accessor" && !this.isLineTerminator()) {
        this.expectPlugin("decoratorAutoAccessors");
        this.resetPreviousNodeTrailingComments(key);
        const isPrivate = this.match(138);
        this.parseClassElementName(publicProp);
        this.pushClassAccessorProperty(classBody, accessorProp, isPrivate);
      } else if (this.isLineTerminator()) {
        if (isPrivate) {
          this.pushClassPrivateProperty(classBody, privateProp);
        } else {
          this.pushClassProperty(classBody, publicProp);
        }
      } else {
        this.unexpected();
      }
    }
    parseClassElementName(member) {
      const {
        type,
        value
      } = this.state;
      if ((type === 132 || type === 133) && member.static && value === "prototype") {
        this.raise(Errors.StaticPrototype, this.state.startLoc);
      }
      if (type === 138) {
        if (value === "constructor") {
          this.raise(Errors.ConstructorClassPrivateField, this.state.startLoc);
        }
        const key = this.parsePrivateName();
        member.key = key;
        return key;
      }
      this.parsePropertyName(member);
      return member.key;
    }
    parseClassStaticBlock(classBody, member) {
      var _member$decorators;
      this.scope.enter(64 | 128 | 16);
      const oldLabels = this.state.labels;
      this.state.labels = [];
      this.prodParam.enter(0);
      const body = member.body = [];
      this.parseBlockOrModuleBlockBody(body, undefined, false, 8);
      this.prodParam.exit();
      this.scope.exit();
      this.state.labels = oldLabels;
      classBody.body.push(this.finishNode(member, "StaticBlock"));
      if ((_member$decorators = member.decorators) != null && _member$decorators.length) {
        this.raise(Errors.DecoratorStaticBlock, member);
      }
    }
    pushClassProperty(classBody, prop) {
      if (!prop.computed && this.nameIsConstructor(prop.key)) {
        this.raise(Errors.ConstructorClassField, prop.key);
      }
      classBody.body.push(this.parseClassProperty(prop));
    }
    pushClassPrivateProperty(classBody, prop) {
      const node = this.parseClassPrivateProperty(prop);
      classBody.body.push(node);
      this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), 0, node.key.loc.start);
    }
    pushClassAccessorProperty(classBody, prop, isPrivate) {
      if (!isPrivate && !prop.computed && this.nameIsConstructor(prop.key)) {
        this.raise(Errors.ConstructorClassField, prop.key);
      }
      const node = this.parseClassAccessorProperty(prop);
      classBody.body.push(node);
      if (isPrivate) {
        this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), 0, node.key.loc.start);
      }
    }
    pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
      classBody.body.push(this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, "ClassMethod", true));
    }
    pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {
      const node = this.parseMethod(method, isGenerator, isAsync, false, false, "ClassPrivateMethod", true);
      classBody.body.push(node);
      const kind = node.kind === "get" ? node.static ? 6 : 2 : node.kind === "set" ? node.static ? 5 : 1 : 0;
      this.declareClassPrivateMethodInScope(node, kind);
    }
    declareClassPrivateMethodInScope(node, kind) {
      this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), kind, node.key.loc.start);
    }
    parsePostMemberNameModifiers(methodOrProp) {}
    parseClassPrivateProperty(node) {
      this.parseInitializer(node);
      this.semicolon();
      return this.finishNode(node, "ClassPrivateProperty");
    }
    parseClassProperty(node) {
      this.parseInitializer(node);
      this.semicolon();
      return this.finishNode(node, "ClassProperty");
    }
    parseClassAccessorProperty(node) {
      this.parseInitializer(node);
      this.semicolon();
      return this.finishNode(node, "ClassAccessorProperty");
    }
    parseInitializer(node) {
      this.scope.enter(64 | 16);
      this.expressionScope.enter(newExpressionScope());
      this.prodParam.enter(0);
      node.value = this.eat(29) ? this.parseMaybeAssignAllowIn() : null;
      this.expressionScope.exit();
      this.prodParam.exit();
      this.scope.exit();
    }
    parseClassId(node, isStatement, optionalId, bindingType = 8331) {
      if (tokenIsIdentifier(this.state.type)) {
        node.id = this.parseIdentifier();
        if (isStatement) {
          this.declareNameFromIdentifier(node.id, bindingType);
        }
      } else {
        if (optionalId || !isStatement) {
          node.id = null;
        } else {
          throw this.raise(Errors.MissingClassName, this.state.startLoc);
        }
      }
    }
    parseClassSuper(node) {
      node.superClass = this.eat(81) ? this.parseExprSubscripts() : null;
    }
    parseExport(node, decorators) {
      const maybeDefaultIdentifier = this.parseMaybeImportPhase(node, true);
      const hasDefault = this.maybeParseExportDefaultSpecifier(node, maybeDefaultIdentifier);
      const parseAfterDefault = !hasDefault || this.eat(12);
      const hasStar = parseAfterDefault && this.eatExportStar(node);
      const hasNamespace = hasStar && this.maybeParseExportNamespaceSpecifier(node);
      const parseAfterNamespace = parseAfterDefault && (!hasNamespace || this.eat(12));
      const isFromRequired = hasDefault || hasStar;
      if (hasStar && !hasNamespace) {
        if (hasDefault) this.unexpected();
        if (decorators) {
          throw this.raise(Errors.UnsupportedDecoratorExport, node);
        }
        this.parseExportFrom(node, true);
        return this.finishNode(node, "ExportAllDeclaration");
      }
      const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);
      if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers) {
        this.unexpected(null, 5);
      }
      if (hasNamespace && parseAfterNamespace) {
        this.unexpected(null, 98);
      }
      let hasDeclaration;
      if (isFromRequired || hasSpecifiers) {
        hasDeclaration = false;
        if (decorators) {
          throw this.raise(Errors.UnsupportedDecoratorExport, node);
        }
        this.parseExportFrom(node, isFromRequired);
      } else {
        hasDeclaration = this.maybeParseExportDeclaration(node);
      }
      if (isFromRequired || hasSpecifiers || hasDeclaration) {
        var _node2$declaration;
        const node2 = node;
        this.checkExport(node2, true, false, !!node2.source);
        if (((_node2$declaration = node2.declaration) == null ? void 0 : _node2$declaration.type) === "ClassDeclaration") {
          this.maybeTakeDecorators(decorators, node2.declaration, node2);
        } else if (decorators) {
          throw this.raise(Errors.UnsupportedDecoratorExport, node);
        }
        return this.finishNode(node2, "ExportNamedDeclaration");
      }
      if (this.eat(65)) {
        const node2 = node;
        const decl = this.parseExportDefaultExpression();
        node2.declaration = decl;
        if (decl.type === "ClassDeclaration") {
          this.maybeTakeDecorators(decorators, decl, node2);
        } else if (decorators) {
          throw this.raise(Errors.UnsupportedDecoratorExport, node);
        }
        this.checkExport(node2, true, true);
        return this.finishNode(node2, "ExportDefaultDeclaration");
      }
      this.unexpected(null, 5);
    }
    eatExportStar(node) {
      return this.eat(55);
    }
    maybeParseExportDefaultSpecifier(node, maybeDefaultIdentifier) {
      if (maybeDefaultIdentifier || this.isExportDefaultSpecifier()) {
        this.expectPlugin("exportDefaultFrom", maybeDefaultIdentifier == null ? void 0 : maybeDefaultIdentifier.loc.start);
        const id = maybeDefaultIdentifier || this.parseIdentifier(true);
        const specifier = this.startNodeAtNode(id);
        specifier.exported = id;
        node.specifiers = [this.finishNode(specifier, "ExportDefaultSpecifier")];
        return true;
      }
      return false;
    }
    maybeParseExportNamespaceSpecifier(node) {
      if (this.isContextual(93)) {
        var _ref, _ref$specifiers;
        (_ref$specifiers = (_ref = node).specifiers) != null ? _ref$specifiers : _ref.specifiers = [];
        const specifier = this.startNodeAt(this.state.lastTokStartLoc);
        this.next();
        specifier.exported = this.parseModuleExportName();
        node.specifiers.push(this.finishNode(specifier, "ExportNamespaceSpecifier"));
        return true;
      }
      return false;
    }
    maybeParseExportNamedSpecifiers(node) {
      if (this.match(5)) {
        const node2 = node;
        if (!node2.specifiers) node2.specifiers = [];
        const isTypeExport = node2.exportKind === "type";
        node2.specifiers.push(...this.parseExportSpecifiers(isTypeExport));
        node2.source = null;
        node2.declaration = null;
        if (this.hasPlugin("importAssertions")) {
          node2.assertions = [];
        }
        return true;
      }
      return false;
    }
    maybeParseExportDeclaration(node) {
      if (this.shouldParseExportDeclaration()) {
        node.specifiers = [];
        node.source = null;
        if (this.hasPlugin("importAssertions")) {
          node.assertions = [];
        }
        node.declaration = this.parseExportDeclaration(node);
        return true;
      }
      return false;
    }
    isAsyncFunction() {
      if (!this.isContextual(95)) return false;
      const next = this.nextTokenInLineStart();
      return this.isUnparsedContextual(next, "function");
    }
    parseExportDefaultExpression() {
      const expr = this.startNode();
      if (this.match(68)) {
        this.next();
        return this.parseFunction(expr, 1 | 4);
      } else if (this.isAsyncFunction()) {
        this.next();
        this.next();
        return this.parseFunction(expr, 1 | 4 | 8);
      }
      if (this.match(80)) {
        return this.parseClass(expr, true, true);
      }
      if (this.match(26)) {
        if (this.hasPlugin("decorators") && this.getPluginOption("decorators", "decoratorsBeforeExport") === true) {
          this.raise(Errors.DecoratorBeforeExport, this.state.startLoc);
        }
        return this.parseClass(this.maybeTakeDecorators(this.parseDecorators(false), this.startNode()), true, true);
      }
      if (this.match(75) || this.match(74) || this.isLet()) {
        throw this.raise(Errors.UnsupportedDefaultExport, this.state.startLoc);
      }
      const res = this.parseMaybeAssignAllowIn();
      this.semicolon();
      return res;
    }
    parseExportDeclaration(node) {
      if (this.match(80)) {
        const node = this.parseClass(this.startNode(), true, false);
        return node;
      }
      return this.parseStatementListItem();
    }
    isExportDefaultSpecifier() {
      const {
        type
      } = this.state;
      if (tokenIsIdentifier(type)) {
        if (type === 95 && !this.state.containsEsc || type === 100) {
          return false;
        }
        if ((type === 130 || type === 129) && !this.state.containsEsc) {
          const {
            type: nextType
          } = this.lookahead();
          if (tokenIsIdentifier(nextType) && nextType !== 98 || nextType === 5) {
            this.expectOnePlugin(["flow", "typescript"]);
            return false;
          }
        }
      } else if (!this.match(65)) {
        return false;
      }
      const next = this.nextTokenStart();
      const hasFrom = this.isUnparsedContextual(next, "from");
      if (this.input.charCodeAt(next) === 44 || tokenIsIdentifier(this.state.type) && hasFrom) {
        return true;
      }
      if (this.match(65) && hasFrom) {
        const nextAfterFrom = this.input.charCodeAt(this.nextTokenStartSince(next + 4));
        return nextAfterFrom === 34 || nextAfterFrom === 39;
      }
      return false;
    }
    parseExportFrom(node, expect) {
      if (this.eatContextual(98)) {
        node.source = this.parseImportSource();
        this.checkExport(node);
        this.maybeParseImportAttributes(node);
        this.checkJSONModuleImport(node);
      } else if (expect) {
        this.unexpected();
      }
      this.semicolon();
    }
    shouldParseExportDeclaration() {
      const {
        type
      } = this.state;
      if (type === 26) {
        this.expectOnePlugin(["decorators", "decorators-legacy"]);
        if (this.hasPlugin("decorators")) {
          if (this.getPluginOption("decorators", "decoratorsBeforeExport") === true) {
            this.raise(Errors.DecoratorBeforeExport, this.state.startLoc);
          }
          return true;
        }
      }
      if (this.isContextual(107)) {
        this.raise(Errors.UsingDeclarationExport, this.state.startLoc);
        return true;
      }
      if (this.isContextual(96) && this.startsAwaitUsing()) {
        this.raise(Errors.UsingDeclarationExport, this.state.startLoc);
        return true;
      }
      return type === 74 || type === 75 || type === 68 || type === 80 || this.isLet() || this.isAsyncFunction();
    }
    checkExport(node, checkNames, isDefault, isFrom) {
      if (checkNames) {
        var _node$specifiers;
        if (isDefault) {
          this.checkDuplicateExports(node, "default");
          if (this.hasPlugin("exportDefaultFrom")) {
            var _declaration$extra;
            const declaration = node.declaration;
            if (declaration.type === "Identifier" && declaration.name === "from" && declaration.end - declaration.start === 4 && !((_declaration$extra = declaration.extra) != null && _declaration$extra.parenthesized)) {
              this.raise(Errors.ExportDefaultFromAsIdentifier, declaration);
            }
          }
        } else if ((_node$specifiers = node.specifiers) != null && _node$specifiers.length) {
          for (const specifier of node.specifiers) {
            const {
              exported
            } = specifier;
            const exportName = exported.type === "Identifier" ? exported.name : exported.value;
            this.checkDuplicateExports(specifier, exportName);
            if (!isFrom && specifier.local) {
              const {
                local
              } = specifier;
              if (local.type !== "Identifier") {
                this.raise(Errors.ExportBindingIsString, specifier, {
                  localName: local.value,
                  exportName
                });
              } else {
                this.checkReservedWord(local.name, local.loc.start, true, false);
                this.scope.checkLocalExport(local);
              }
            }
          }
        } else if (node.declaration) {
          const decl = node.declaration;
          if (decl.type === "FunctionDeclaration" || decl.type === "ClassDeclaration") {
            const {
              id
            } = decl;
            if (!id) throw new Error("Assertion failure");
            this.checkDuplicateExports(node, id.name);
          } else if (decl.type === "VariableDeclaration") {
            for (const declaration of decl.declarations) {
              this.checkDeclaration(declaration.id);
            }
          }
        }
      }
    }
    checkDeclaration(node) {
      if (node.type === "Identifier") {
        this.checkDuplicateExports(node, node.name);
      } else if (node.type === "ObjectPattern") {
        for (const prop of node.properties) {
          this.checkDeclaration(prop);
        }
      } else if (node.type === "ArrayPattern") {
        for (const elem of node.elements) {
          if (elem) {
            this.checkDeclaration(elem);
          }
        }
      } else if (node.type === "ObjectProperty") {
        this.checkDeclaration(node.value);
      } else if (node.type === "RestElement") {
        this.checkDeclaration(node.argument);
      } else if (node.type === "AssignmentPattern") {
        this.checkDeclaration(node.left);
      }
    }
    checkDuplicateExports(node, exportName) {
      if (this.exportedIdentifiers.has(exportName)) {
        if (exportName === "default") {
          this.raise(Errors.DuplicateDefaultExport, node);
        } else {
          this.raise(Errors.DuplicateExport, node, {
            exportName
          });
        }
      }
      this.exportedIdentifiers.add(exportName);
    }
    parseExportSpecifiers(isInTypeExport) {
      const nodes = [];
      let first = true;
      this.expect(5);
      while (!this.eat(8)) {
        if (first) {
          first = false;
        } else {
          this.expect(12);
          if (this.eat(8)) break;
        }
        const isMaybeTypeOnly = this.isContextual(130);
        const isString = this.match(133);
        const node = this.startNode();
        node.local = this.parseModuleExportName();
        nodes.push(this.parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly));
      }
      return nodes;
    }
    parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly) {
      if (this.eatContextual(93)) {
        node.exported = this.parseModuleExportName();
      } else if (isString) {
        node.exported = cloneStringLiteral(node.local);
      } else if (!node.exported) {
        node.exported = cloneIdentifier(node.local);
      }
      return this.finishNode(node, "ExportSpecifier");
    }
    parseModuleExportName() {
      if (this.match(133)) {
        const result = this.parseStringLiteral(this.state.value);
        const surrogate = loneSurrogate.exec(result.value);
        if (surrogate) {
          this.raise(Errors.ModuleExportNameHasLoneSurrogate, result, {
            surrogateCharCode: surrogate[0].charCodeAt(0)
          });
        }
        return result;
      }
      return this.parseIdentifier(true);
    }
    isJSONModuleImport(node) {
      if (node.assertions != null) {
        return node.assertions.some(({
          key,
          value
        }) => {
          return value.value === "json" && (key.type === "Identifier" ? key.name === "type" : key.value === "type");
        });
      }
      return false;
    }
    checkImportReflection(node) {
      const {
        specifiers
      } = node;
      const singleBindingType = specifiers.length === 1 ? specifiers[0].type : null;
      if (node.phase === "source") {
        if (singleBindingType !== "ImportDefaultSpecifier") {
          this.raise(Errors.SourcePhaseImportRequiresDefault, specifiers[0].loc.start);
        }
      } else if (node.phase === "defer") {
        if (singleBindingType !== "ImportNamespaceSpecifier") {
          this.raise(Errors.DeferImportRequiresNamespace, specifiers[0].loc.start);
        }
      } else if (node.module) {
        var _node$assertions;
        if (singleBindingType !== "ImportDefaultSpecifier") {
          this.raise(Errors.ImportReflectionNotBinding, specifiers[0].loc.start);
        }
        if (((_node$assertions = node.assertions) == null ? void 0 : _node$assertions.length) > 0) {
          this.raise(Errors.ImportReflectionHasAssertion, specifiers[0].loc.start);
        }
      }
    }
    checkJSONModuleImport(node) {
      if (this.isJSONModuleImport(node) && node.type !== "ExportAllDeclaration") {
        const {
          specifiers
        } = node;
        if (specifiers != null) {
          const nonDefaultNamedSpecifier = specifiers.find(specifier => {
            let imported;
            if (specifier.type === "ExportSpecifier") {
              imported = specifier.local;
            } else if (specifier.type === "ImportSpecifier") {
              imported = specifier.imported;
            }
            if (imported !== undefined) {
              return imported.type === "Identifier" ? imported.name !== "default" : imported.value !== "default";
            }
          });
          if (nonDefaultNamedSpecifier !== undefined) {
            this.raise(Errors.ImportJSONBindingNotDefault, nonDefaultNamedSpecifier.loc.start);
          }
        }
      }
    }
    isPotentialImportPhase(isExport) {
      if (isExport) return false;
      return this.isContextual(105) || this.isContextual(97) || this.isContextual(127);
    }
    applyImportPhase(node, isExport, phase, loc) {
      if (isExport) {
        return;
      }
      if (phase === "module") {
        this.expectPlugin("importReflection", loc);
        node.module = true;
      } else if (this.hasPlugin("importReflection")) {
        node.module = false;
      }
      if (phase === "source") {
        this.expectPlugin("sourcePhaseImports", loc);
        node.phase = "source";
      } else if (phase === "defer") {
        this.expectPlugin("deferredImportEvaluation", loc);
        node.phase = "defer";
      } else if (this.hasPlugin("sourcePhaseImports")) {
        node.phase = null;
      }
    }
    parseMaybeImportPhase(node, isExport) {
      if (!this.isPotentialImportPhase(isExport)) {
        this.applyImportPhase(node, isExport, null);
        return null;
      }
      const phaseIdentifier = this.parseIdentifier(true);
      const {
        type
      } = this.state;
      const isImportPhase = tokenIsKeywordOrIdentifier(type) ? type !== 98 || this.lookaheadCharCode() === 102 : type !== 12;
      if (isImportPhase) {
        this.resetPreviousIdentifierLeadingComments(phaseIdentifier);
        this.applyImportPhase(node, isExport, phaseIdentifier.name, phaseIdentifier.loc.start);
        return null;
      } else {
        this.applyImportPhase(node, isExport, null);
        return phaseIdentifier;
      }
    }
    isPrecedingIdImportPhase(phase) {
      const {
        type
      } = this.state;
      return tokenIsIdentifier(type) ? type !== 98 || this.lookaheadCharCode() === 102 : type !== 12;
    }
    parseImport(node) {
      if (this.match(133)) {
        return this.parseImportSourceAndAttributes(node);
      }
      return this.parseImportSpecifiersAndAfter(node, this.parseMaybeImportPhase(node, false));
    }
    parseImportSpecifiersAndAfter(node, maybeDefaultIdentifier) {
      node.specifiers = [];
      const hasDefault = this.maybeParseDefaultImportSpecifier(node, maybeDefaultIdentifier);
      const parseNext = !hasDefault || this.eat(12);
      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);
      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);
      this.expectContextual(98);
      return this.parseImportSourceAndAttributes(node);
    }
    parseImportSourceAndAttributes(node) {
      var _node$specifiers2;
      (_node$specifiers2 = node.specifiers) != null ? _node$specifiers2 : node.specifiers = [];
      node.source = this.parseImportSource();
      this.maybeParseImportAttributes(node);
      this.checkImportReflection(node);
      this.checkJSONModuleImport(node);
      this.semicolon();
      return this.finishNode(node, "ImportDeclaration");
    }
    parseImportSource() {
      if (!this.match(133)) this.unexpected();
      return this.parseExprAtom();
    }
    parseImportSpecifierLocal(node, specifier, type) {
      specifier.local = this.parseIdentifier();
      node.specifiers.push(this.finishImportSpecifier(specifier, type));
    }
    finishImportSpecifier(specifier, type, bindingType = 8201) {
      this.checkLVal(specifier.local, {
        type
      }, bindingType);
      return this.finishNode(specifier, type);
    }
    parseImportAttributes() {
      this.expect(5);
      const attrs = [];
      const attrNames = new Set();
      do {
        if (this.match(8)) {
          break;
        }
        const node = this.startNode();
        const keyName = this.state.value;
        if (attrNames.has(keyName)) {
          this.raise(Errors.ModuleAttributesWithDuplicateKeys, this.state.startLoc, {
            key: keyName
          });
        }
        attrNames.add(keyName);
        if (this.match(133)) {
          node.key = this.parseStringLiteral(keyName);
        } else {
          node.key = this.parseIdentifier(true);
        }
        this.expect(14);
        if (!this.match(133)) {
          throw this.raise(Errors.ModuleAttributeInvalidValue, this.state.startLoc);
        }
        node.value = this.parseStringLiteral(this.state.value);
        attrs.push(this.finishNode(node, "ImportAttribute"));
      } while (this.eat(12));
      this.expect(8);
      return attrs;
    }
    parseModuleAttributes() {
      const attrs = [];
      const attributes = new Set();
      do {
        const node = this.startNode();
        node.key = this.parseIdentifier(true);
        if (node.key.name !== "type") {
          this.raise(Errors.ModuleAttributeDifferentFromType, node.key);
        }
        if (attributes.has(node.key.name)) {
          this.raise(Errors.ModuleAttributesWithDuplicateKeys, node.key, {
            key: node.key.name
          });
        }
        attributes.add(node.key.name);
        this.expect(14);
        if (!this.match(133)) {
          throw this.raise(Errors.ModuleAttributeInvalidValue, this.state.startLoc);
        }
        node.value = this.parseStringLiteral(this.state.value);
        attrs.push(this.finishNode(node, "ImportAttribute"));
      } while (this.eat(12));
      return attrs;
    }
    maybeParseImportAttributes(node) {
      let attributes;
      let useWith = false;
      if (this.match(76)) {
        if (this.hasPrecedingLineBreak() && this.lookaheadCharCode() === 40) {
          return;
        }
        this.next();
        {
          if (this.hasPlugin("moduleAttributes")) {
            attributes = this.parseModuleAttributes();
          } else {
            this.expectImportAttributesPlugin();
            attributes = this.parseImportAttributes();
          }
        }
        useWith = true;
      } else if (this.isContextual(94) && !this.hasPrecedingLineBreak()) {
        if (this.hasPlugin("importAttributes")) {
          if (this.getPluginOption("importAttributes", "deprecatedAssertSyntax") !== true) {
            this.raise(Errors.ImportAttributesUseAssert, this.state.startLoc);
          }
          this.addExtra(node, "deprecatedAssertSyntax", true);
        } else {
          this.expectOnePlugin(["importAttributes", "importAssertions"]);
        }
        this.next();
        attributes = this.parseImportAttributes();
      } else if (this.hasPlugin("importAttributes") || this.hasPlugin("importAssertions")) {
        attributes = [];
      } else {
        if (this.hasPlugin("moduleAttributes")) {
          attributes = [];
        } else return;
      }
      if (!useWith && this.hasPlugin("importAssertions")) {
        node.assertions = attributes;
      } else {
        node.attributes = attributes;
      }
    }
    maybeParseDefaultImportSpecifier(node, maybeDefaultIdentifier) {
      if (maybeDefaultIdentifier) {
        const specifier = this.startNodeAtNode(maybeDefaultIdentifier);
        specifier.local = maybeDefaultIdentifier;
        node.specifiers.push(this.finishImportSpecifier(specifier, "ImportDefaultSpecifier"));
        return true;
      } else if (tokenIsKeywordOrIdentifier(this.state.type)) {
        this.parseImportSpecifierLocal(node, this.startNode(), "ImportDefaultSpecifier");
        return true;
      }
      return false;
    }
    maybeParseStarImportSpecifier(node) {
      if (this.match(55)) {
        const specifier = this.startNode();
        this.next();
        this.expectContextual(93);
        this.parseImportSpecifierLocal(node, specifier, "ImportNamespaceSpecifier");
        return true;
      }
      return false;
    }
    parseNamedImportSpecifiers(node) {
      let first = true;
      this.expect(5);
      while (!this.eat(8)) {
        if (first) {
          first = false;
        } else {
          if (this.eat(14)) {
            throw this.raise(Errors.DestructureNamedImport, this.state.startLoc);
          }
          this.expect(12);
          if (this.eat(8)) break;
        }
        const specifier = this.startNode();
        const importedIsString = this.match(133);
        const isMaybeTypeOnly = this.isContextual(130);
        specifier.imported = this.parseModuleExportName();
        const importSpecifier = this.parseImportSpecifier(specifier, importedIsString, node.importKind === "type" || node.importKind === "typeof", isMaybeTypeOnly, undefined);
        node.specifiers.push(importSpecifier);
      }
    }
    parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, bindingType) {
      if (this.eatContextual(93)) {
        specifier.local = this.parseIdentifier();
      } else {
        const {
          imported
        } = specifier;
        if (importedIsString) {
          throw this.raise(Errors.ImportBindingIsString, specifier, {
            importName: imported.value
          });
        }
        this.checkReservedWord(imported.name, specifier.loc.start, true, true);
        if (!specifier.local) {
          specifier.local = cloneIdentifier(imported);
        }
      }
      return this.finishImportSpecifier(specifier, "ImportSpecifier", bindingType);
    }
    isThisParam(param) {
      return param.type === "Identifier" && param.name === "this";
    }
  }
  class Parser extends StatementParser {
    constructor(options, input, pluginsMap) {
      options = getOptions(options);
      super(options, input);
      this.options = options;
      this.initializeScopes();
      this.plugins = pluginsMap;
      this.filename = options.sourceFilename;
    }
    getScopeHandler() {
      return ScopeHandler;
    }
    parse() {
      this.enterInitialScopes();
      const file = this.startNode();
      const program = this.startNode();
      this.nextToken();
      file.errors = null;
      this.parseTopLevel(file, program);
      file.errors = this.state.errors;
      file.comments.length = this.state.commentsLen;
      return file;
    }
  }
  function parse(input, options) {
    var _options;
    if (((_options = options) == null ? void 0 : _options.sourceType) === "unambiguous") {
      options = Object.assign({}, options);
      try {
        options.sourceType = "module";
        const parser = getParser(options, input);
        const ast = parser.parse();
        if (parser.sawUnambiguousESM) {
          return ast;
        }
        if (parser.ambiguousScriptDifferentAst) {
          try {
            options.sourceType = "script";
            return getParser(options, input).parse();
          } catch (_unused) {}
        } else {
          ast.program.sourceType = "script";
        }
        return ast;
      } catch (moduleError) {
        try {
          options.sourceType = "script";
          return getParser(options, input).parse();
        } catch (_unused2) {}
        throw moduleError;
      }
    } else {
      return getParser(options, input).parse();
    }
  }
  function parseExpression(input, options) {
    const parser = getParser(options, input);
    if (parser.options.strictMode) {
      parser.state.strict = true;
    }
    return parser.getExpression();
  }
  function generateExportedTokenTypes(internalTokenTypes) {
    const tokenTypes = {};
    for (const typeName of Object.keys(internalTokenTypes)) {
      tokenTypes[typeName] = getExportedToken(internalTokenTypes[typeName]);
    }
    return tokenTypes;
  }
  const tokTypes = generateExportedTokenTypes(tt);
  function getParser(options, input) {
    let cls = Parser;
    const pluginsMap = new Map();
    if (options != null && options.plugins) {
      for (const plugin of options.plugins) {
        let name, opts;
        if (typeof plugin === "string") {
          name = plugin;
        } else {
          [name, opts] = plugin;
        }
        if (!pluginsMap.has(name)) {
          pluginsMap.set(name, opts || {});
        }
      }
      validatePlugins(pluginsMap);
      cls = getParserClass(pluginsMap);
    }
    return new cls(options, input, pluginsMap);
  }
  const parserClassCache = new Map();
  function getParserClass(pluginsMap) {
    const pluginList = [];
    for (const name of mixinPluginNames) {
      if (pluginsMap.has(name)) {
        pluginList.push(name);
      }
    }
    const key = pluginList.join("|");
    let cls = parserClassCache.get(key);
    if (!cls) {
      cls = Parser;
      for (const plugin of pluginList) {
        cls = mixinPlugins[plugin](cls);
      }
      parserClassCache.set(key, cls);
    }
    return cls;
  }
  exports$3g.parse = parse;
  exports$3g.parseExpression = parseExpression;
  exports$3g.tokTypes = tokTypes;
  return exports$3g;
}

var exports$3f = {},
  _dewExec$3e = false;
function dew$3e() {
  if (_dewExec$3e) return exports$3f;
  _dewExec$3e = true;
  // Copyright 2014, 2015, 2016, 2017, 2018 Simon Lydell
  // License: MIT. (See LICENSE.)

  Object.defineProperty(exports$3f, "__esModule", {
    value: true
  });

  // This regex comes from regex.coffee, and is inserted here by generate-index.js
  // (run `npm run build`).
  exports$3f.default = /((['"])(?:(?!\2|\\).|\\(?:\r\n|[\s\S]))*(\2)?|`(?:[^`\\$]|\\[\s\S]|\$(?!\{)|\$\{(?:[^{}]|\{[^}]*\}?)*\}?)*(`)?)|(\/\/.*)|(\/\*(?:[^*]|\*(?!\/))*(\*\/)?)|(\/(?!\*)(?:\[(?:(?![\]\\]).|\\.)*\]|(?![\/\]\\]).|\\.)+\/(?:(?!\s*(?:\b|[\u0080-\uFFFF$\\'"~({]|[+\-!](?!=)|\.?\d))|[gmiyus]{1,6}\b(?![\u0080-\uFFFF$\\]|\s*(?:[+\-*%&|^<>!=?({]|\/(?![\/*])))))|(0[xX][\da-fA-F]+|0[oO][0-7]+|0[bB][01]+|(?:\d*\.\d+|\d+\.?)(?:[eE][+-]?\d+)?)|((?!\d)(?:(?!\s)[$\w\u0080-\uFFFF]|\\u[\da-fA-F]{4}|\\u\{[\da-fA-F]+\})+)|(--|\+\+|&&|\|\||=>|\.{3}|(?:[+\-\/%&|^]|\*{1,2}|<{1,2}|>{1,3}|!=?|={1,2})=?|[?~.,:;[\](){}])|(\s+)|(^$|[\s\S])/g;
  exports$3f.matchToToken = function (match) {
    var token = {
      type: "invalid",
      value: match[0],
      closed: undefined
    };
    if (match[1]) token.type = "string", token.closed = !!(match[3] || match[4]);else if (match[5]) token.type = "comment";else if (match[6]) token.type = "comment", token.closed = !!match[7];else if (match[8]) token.type = "regex";else if (match[9]) token.type = "number";else if (match[10]) token.type = "name";else if (match[11]) token.type = "punctuator";else if (match[12]) token.type = "whitespace";
    return token;
  };
  return exports$3f;
}

var exports$3e = {},
  _dewExec$3d = false;
function dew$3d() {
  if (_dewExec$3d) return exports$3e;
  _dewExec$3d = true;
  var _nodeRequire = function () {
    var Module = _nodeModule.Module;
    if (Module) {
      var m = new Module("");
      m.filename = import.meta.url.substr(7 + (Module._nodeModulePaths("/")[0].length > 13));
      m.paths = Module._nodeModulePaths(m.filename.substr(0, m.filename.lastIndexOf("/")));
      return Object.assign(m.require.bind(m), {
        resolve: function (id) {
          return Module._resolveFilename(id, m);
        }
      });
    } else {
      return function _nodeRequire(id) {
        var e = new Error("Cannot find module '" + id + "'");
        e.code = "MODULE_NOT_FOUND";
        throw e;
      };
    }
  }();
  var process = _nodeProcess;
  let argv = process.argv || [],
    env = process.env;
  let isColorSupported = !("NO_COLOR" in env || argv.includes("--no-color")) && ("FORCE_COLOR" in env || argv.includes("--color") || process.platform === "win32" || _nodeRequire != null && _tty.isatty(1) && env.TERM !== "dumb" || "CI" in env);
  let formatter = (open, close, replace = open) => input => {
    let string = "" + input;
    let index = string.indexOf(close, open.length);
    return ~index ? open + replaceClose(string, close, replace, index) + close : open + string + close;
  };
  let replaceClose = (string, close, replace, index) => {
    let result = "";
    let cursor = 0;
    do {
      result += string.substring(cursor, index) + replace;
      cursor = index + close.length;
      index = string.indexOf(close, cursor);
    } while (~index);
    return result + string.substring(cursor);
  };
  let createColors = (enabled = isColorSupported) => {
    let init = enabled ? formatter : () => String;
    return {
      isColorSupported: enabled,
      reset: init("\x1B[0m", "\x1B[0m"),
      bold: init("\x1B[1m", "\x1B[22m", "\x1B[22m\x1B[1m"),
      dim: init("\x1B[2m", "\x1B[22m", "\x1B[22m\x1B[2m"),
      italic: init("\x1B[3m", "\x1B[23m"),
      underline: init("\x1B[4m", "\x1B[24m"),
      inverse: init("\x1B[7m", "\x1B[27m"),
      hidden: init("\x1B[8m", "\x1B[28m"),
      strikethrough: init("\x1B[9m", "\x1B[29m"),
      black: init("\x1B[30m", "\x1B[39m"),
      red: init("\x1B[31m", "\x1B[39m"),
      green: init("\x1B[32m", "\x1B[39m"),
      yellow: init("\x1B[33m", "\x1B[39m"),
      blue: init("\x1B[34m", "\x1B[39m"),
      magenta: init("\x1B[35m", "\x1B[39m"),
      cyan: init("\x1B[36m", "\x1B[39m"),
      white: init("\x1B[37m", "\x1B[39m"),
      gray: init("\x1B[90m", "\x1B[39m"),
      bgBlack: init("\x1B[40m", "\x1B[49m"),
      bgRed: init("\x1B[41m", "\x1B[49m"),
      bgGreen: init("\x1B[42m", "\x1B[49m"),
      bgYellow: init("\x1B[43m", "\x1B[49m"),
      bgBlue: init("\x1B[44m", "\x1B[49m"),
      bgMagenta: init("\x1B[45m", "\x1B[49m"),
      bgCyan: init("\x1B[46m", "\x1B[49m"),
      bgWhite: init("\x1B[47m", "\x1B[49m")
    };
  };
  exports$3e = createColors();
  exports$3e.createColors = createColors;
  return exports$3e;
}

var exports$3d = {},
  _dewExec$3c = false;
function dew$3c() {
  if (_dewExec$3c) return exports$3d;
  _dewExec$3c = true;
  var matchOperatorsRe = /[|\\{}()[\]^$+*?.]/g;
  exports$3d = function (str) {
    if (typeof str !== "string") {
      throw new TypeError("Expected a string");
    }
    return str.replace(matchOperatorsRe, "\\$&");
  };
  return exports$3d;
}

var exports$3c = {},
  _dewExec$3b = false;
function dew$3b() {
  if (_dewExec$3b) return exports$3c;
  _dewExec$3b = true;
  exports$3c = {
    "aliceblue": [240, 248, 255],
    "antiquewhite": [250, 235, 215],
    "aqua": [0, 255, 255],
    "aquamarine": [127, 255, 212],
    "azure": [240, 255, 255],
    "beige": [245, 245, 220],
    "bisque": [255, 228, 196],
    "black": [0, 0, 0],
    "blanchedalmond": [255, 235, 205],
    "blue": [0, 0, 255],
    "blueviolet": [138, 43, 226],
    "brown": [165, 42, 42],
    "burlywood": [222, 184, 135],
    "cadetblue": [95, 158, 160],
    "chartreuse": [127, 255, 0],
    "chocolate": [210, 105, 30],
    "coral": [255, 127, 80],
    "cornflowerblue": [100, 149, 237],
    "cornsilk": [255, 248, 220],
    "crimson": [220, 20, 60],
    "cyan": [0, 255, 255],
    "darkblue": [0, 0, 139],
    "darkcyan": [0, 139, 139],
    "darkgoldenrod": [184, 134, 11],
    "darkgray": [169, 169, 169],
    "darkgreen": [0, 100, 0],
    "darkgrey": [169, 169, 169],
    "darkkhaki": [189, 183, 107],
    "darkmagenta": [139, 0, 139],
    "darkolivegreen": [85, 107, 47],
    "darkorange": [255, 140, 0],
    "darkorchid": [153, 50, 204],
    "darkred": [139, 0, 0],
    "darksalmon": [233, 150, 122],
    "darkseagreen": [143, 188, 143],
    "darkslateblue": [72, 61, 139],
    "darkslategray": [47, 79, 79],
    "darkslategrey": [47, 79, 79],
    "darkturquoise": [0, 206, 209],
    "darkviolet": [148, 0, 211],
    "deeppink": [255, 20, 147],
    "deepskyblue": [0, 191, 255],
    "dimgray": [105, 105, 105],
    "dimgrey": [105, 105, 105],
    "dodgerblue": [30, 144, 255],
    "firebrick": [178, 34, 34],
    "floralwhite": [255, 250, 240],
    "forestgreen": [34, 139, 34],
    "fuchsia": [255, 0, 255],
    "gainsboro": [220, 220, 220],
    "ghostwhite": [248, 248, 255],
    "gold": [255, 215, 0],
    "goldenrod": [218, 165, 32],
    "gray": [128, 128, 128],
    "green": [0, 128, 0],
    "greenyellow": [173, 255, 47],
    "grey": [128, 128, 128],
    "honeydew": [240, 255, 240],
    "hotpink": [255, 105, 180],
    "indianred": [205, 92, 92],
    "indigo": [75, 0, 130],
    "ivory": [255, 255, 240],
    "khaki": [240, 230, 140],
    "lavender": [230, 230, 250],
    "lavenderblush": [255, 240, 245],
    "lawngreen": [124, 252, 0],
    "lemonchiffon": [255, 250, 205],
    "lightblue": [173, 216, 230],
    "lightcoral": [240, 128, 128],
    "lightcyan": [224, 255, 255],
    "lightgoldenrodyellow": [250, 250, 210],
    "lightgray": [211, 211, 211],
    "lightgreen": [144, 238, 144],
    "lightgrey": [211, 211, 211],
    "lightpink": [255, 182, 193],
    "lightsalmon": [255, 160, 122],
    "lightseagreen": [32, 178, 170],
    "lightskyblue": [135, 206, 250],
    "lightslategray": [119, 136, 153],
    "lightslategrey": [119, 136, 153],
    "lightsteelblue": [176, 196, 222],
    "lightyellow": [255, 255, 224],
    "lime": [0, 255, 0],
    "limegreen": [50, 205, 50],
    "linen": [250, 240, 230],
    "magenta": [255, 0, 255],
    "maroon": [128, 0, 0],
    "mediumaquamarine": [102, 205, 170],
    "mediumblue": [0, 0, 205],
    "mediumorchid": [186, 85, 211],
    "mediumpurple": [147, 112, 219],
    "mediumseagreen": [60, 179, 113],
    "mediumslateblue": [123, 104, 238],
    "mediumspringgreen": [0, 250, 154],
    "mediumturquoise": [72, 209, 204],
    "mediumvioletred": [199, 21, 133],
    "midnightblue": [25, 25, 112],
    "mintcream": [245, 255, 250],
    "mistyrose": [255, 228, 225],
    "moccasin": [255, 228, 181],
    "navajowhite": [255, 222, 173],
    "navy": [0, 0, 128],
    "oldlace": [253, 245, 230],
    "olive": [128, 128, 0],
    "olivedrab": [107, 142, 35],
    "orange": [255, 165, 0],
    "orangered": [255, 69, 0],
    "orchid": [218, 112, 214],
    "palegoldenrod": [238, 232, 170],
    "palegreen": [152, 251, 152],
    "paleturquoise": [175, 238, 238],
    "palevioletred": [219, 112, 147],
    "papayawhip": [255, 239, 213],
    "peachpuff": [255, 218, 185],
    "peru": [205, 133, 63],
    "pink": [255, 192, 203],
    "plum": [221, 160, 221],
    "powderblue": [176, 224, 230],
    "purple": [128, 0, 128],
    "rebeccapurple": [102, 51, 153],
    "red": [255, 0, 0],
    "rosybrown": [188, 143, 143],
    "royalblue": [65, 105, 225],
    "saddlebrown": [139, 69, 19],
    "salmon": [250, 128, 114],
    "sandybrown": [244, 164, 96],
    "seagreen": [46, 139, 87],
    "seashell": [255, 245, 238],
    "sienna": [160, 82, 45],
    "silver": [192, 192, 192],
    "skyblue": [135, 206, 235],
    "slateblue": [106, 90, 205],
    "slategray": [112, 128, 144],
    "slategrey": [112, 128, 144],
    "snow": [255, 250, 250],
    "springgreen": [0, 255, 127],
    "steelblue": [70, 130, 180],
    "tan": [210, 180, 140],
    "teal": [0, 128, 128],
    "thistle": [216, 191, 216],
    "tomato": [255, 99, 71],
    "turquoise": [64, 224, 208],
    "violet": [238, 130, 238],
    "wheat": [245, 222, 179],
    "white": [255, 255, 255],
    "whitesmoke": [245, 245, 245],
    "yellow": [255, 255, 0],
    "yellowgreen": [154, 205, 50]
  };
  return exports$3c;
}

var exports$3b = {},
  _dewExec$3a = false;
function dew$3a() {
  if (_dewExec$3a) return exports$3b;
  _dewExec$3a = true;
  /* MIT license */
  var cssKeywords = dew$3b();

  // NOTE: conversions should only return primitive values (i.e. arrays, or
  //       values that give correct `typeof` results).
  //       do not use box values types (i.e. Number(), String(), etc.)

  var reverseKeywords = {};
  for (var key in cssKeywords) {
    if (cssKeywords.hasOwnProperty(key)) {
      reverseKeywords[cssKeywords[key]] = key;
    }
  }
  var convert = exports$3b = {
    rgb: {
      channels: 3,
      labels: "rgb"
    },
    hsl: {
      channels: 3,
      labels: "hsl"
    },
    hsv: {
      channels: 3,
      labels: "hsv"
    },
    hwb: {
      channels: 3,
      labels: "hwb"
    },
    cmyk: {
      channels: 4,
      labels: "cmyk"
    },
    xyz: {
      channels: 3,
      labels: "xyz"
    },
    lab: {
      channels: 3,
      labels: "lab"
    },
    lch: {
      channels: 3,
      labels: "lch"
    },
    hex: {
      channels: 1,
      labels: ["hex"]
    },
    keyword: {
      channels: 1,
      labels: ["keyword"]
    },
    ansi16: {
      channels: 1,
      labels: ["ansi16"]
    },
    ansi256: {
      channels: 1,
      labels: ["ansi256"]
    },
    hcg: {
      channels: 3,
      labels: ["h", "c", "g"]
    },
    apple: {
      channels: 3,
      labels: ["r16", "g16", "b16"]
    },
    gray: {
      channels: 1,
      labels: ["gray"]
    }
  };

  // hide .channels and .labels properties
  for (var model in convert) {
    if (convert.hasOwnProperty(model)) {
      if (!("channels" in convert[model])) {
        throw new Error("missing channels property: " + model);
      }
      if (!("labels" in convert[model])) {
        throw new Error("missing channel labels property: " + model);
      }
      if (convert[model].labels.length !== convert[model].channels) {
        throw new Error("channel and label counts mismatch: " + model);
      }
      var channels = convert[model].channels;
      var labels = convert[model].labels;
      delete convert[model].channels;
      delete convert[model].labels;
      Object.defineProperty(convert[model], "channels", {
        value: channels
      });
      Object.defineProperty(convert[model], "labels", {
        value: labels
      });
    }
  }
  convert.rgb.hsl = function (rgb) {
    var r = rgb[0] / 255;
    var g = rgb[1] / 255;
    var b = rgb[2] / 255;
    var min = Math.min(r, g, b);
    var max = Math.max(r, g, b);
    var delta = max - min;
    var h;
    var s;
    var l;
    if (max === min) {
      h = 0;
    } else if (r === max) {
      h = (g - b) / delta;
    } else if (g === max) {
      h = 2 + (b - r) / delta;
    } else if (b === max) {
      h = 4 + (r - g) / delta;
    }
    h = Math.min(h * 60, 360);
    if (h < 0) {
      h += 360;
    }
    l = (min + max) / 2;
    if (max === min) {
      s = 0;
    } else if (l <= 0.5) {
      s = delta / (max + min);
    } else {
      s = delta / (2 - max - min);
    }
    return [h, s * 100, l * 100];
  };
  convert.rgb.hsv = function (rgb) {
    var rdif;
    var gdif;
    var bdif;
    var h;
    var s;
    var r = rgb[0] / 255;
    var g = rgb[1] / 255;
    var b = rgb[2] / 255;
    var v = Math.max(r, g, b);
    var diff = v - Math.min(r, g, b);
    var diffc = function (c) {
      return (v - c) / 6 / diff + 1 / 2;
    };
    if (diff === 0) {
      h = s = 0;
    } else {
      s = diff / v;
      rdif = diffc(r);
      gdif = diffc(g);
      bdif = diffc(b);
      if (r === v) {
        h = bdif - gdif;
      } else if (g === v) {
        h = 1 / 3 + rdif - bdif;
      } else if (b === v) {
        h = 2 / 3 + gdif - rdif;
      }
      if (h < 0) {
        h += 1;
      } else if (h > 1) {
        h -= 1;
      }
    }
    return [h * 360, s * 100, v * 100];
  };
  convert.rgb.hwb = function (rgb) {
    var r = rgb[0];
    var g = rgb[1];
    var b = rgb[2];
    var h = convert.rgb.hsl(rgb)[0];
    var w = 1 / 255 * Math.min(r, Math.min(g, b));
    b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));
    return [h, w * 100, b * 100];
  };
  convert.rgb.cmyk = function (rgb) {
    var r = rgb[0] / 255;
    var g = rgb[1] / 255;
    var b = rgb[2] / 255;
    var c;
    var m;
    var y;
    var k;
    k = Math.min(1 - r, 1 - g, 1 - b);
    c = (1 - r - k) / (1 - k) || 0;
    m = (1 - g - k) / (1 - k) || 0;
    y = (1 - b - k) / (1 - k) || 0;
    return [c * 100, m * 100, y * 100, k * 100];
  };

  /**
   * See https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance
   * */
  function comparativeDistance(x, y) {
    return Math.pow(x[0] - y[0], 2) + Math.pow(x[1] - y[1], 2) + Math.pow(x[2] - y[2], 2);
  }
  convert.rgb.keyword = function (rgb) {
    var reversed = reverseKeywords[rgb];
    if (reversed) {
      return reversed;
    }
    var currentClosestDistance = Infinity;
    var currentClosestKeyword;
    for (var keyword in cssKeywords) {
      if (cssKeywords.hasOwnProperty(keyword)) {
        var value = cssKeywords[keyword];

        // Compute comparative distance
        var distance = comparativeDistance(rgb, value);

        // Check if its less, if so set as closest
        if (distance < currentClosestDistance) {
          currentClosestDistance = distance;
          currentClosestKeyword = keyword;
        }
      }
    }
    return currentClosestKeyword;
  };
  convert.keyword.rgb = function (keyword) {
    return cssKeywords[keyword];
  };
  convert.rgb.xyz = function (rgb) {
    var r = rgb[0] / 255;
    var g = rgb[1] / 255;
    var b = rgb[2] / 255;

    // assume sRGB
    r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;
    g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;
    b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;
    var x = r * 0.4124 + g * 0.3576 + b * 0.1805;
    var y = r * 0.2126 + g * 0.7152 + b * 0.0722;
    var z = r * 0.0193 + g * 0.1192 + b * 0.9505;
    return [x * 100, y * 100, z * 100];
  };
  convert.rgb.lab = function (rgb) {
    var xyz = convert.rgb.xyz(rgb);
    var x = xyz[0];
    var y = xyz[1];
    var z = xyz[2];
    var l;
    var a;
    var b;
    x /= 95.047;
    y /= 100;
    z /= 108.883;
    x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
    y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
    z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
    l = 116 * y - 16;
    a = 500 * (x - y);
    b = 200 * (y - z);
    return [l, a, b];
  };
  convert.hsl.rgb = function (hsl) {
    var h = hsl[0] / 360;
    var s = hsl[1] / 100;
    var l = hsl[2] / 100;
    var t1;
    var t2;
    var t3;
    var rgb;
    var val;
    if (s === 0) {
      val = l * 255;
      return [val, val, val];
    }
    if (l < 0.5) {
      t2 = l * (1 + s);
    } else {
      t2 = l + s - l * s;
    }
    t1 = 2 * l - t2;
    rgb = [0, 0, 0];
    for (var i = 0; i < 3; i++) {
      t3 = h + 1 / 3 * -(i - 1);
      if (t3 < 0) {
        t3++;
      }
      if (t3 > 1) {
        t3--;
      }
      if (6 * t3 < 1) {
        val = t1 + (t2 - t1) * 6 * t3;
      } else if (2 * t3 < 1) {
        val = t2;
      } else if (3 * t3 < 2) {
        val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
      } else {
        val = t1;
      }
      rgb[i] = val * 255;
    }
    return rgb;
  };
  convert.hsl.hsv = function (hsl) {
    var h = hsl[0];
    var s = hsl[1] / 100;
    var l = hsl[2] / 100;
    var smin = s;
    var lmin = Math.max(l, 0.01);
    var sv;
    var v;
    l *= 2;
    s *= l <= 1 ? l : 2 - l;
    smin *= lmin <= 1 ? lmin : 2 - lmin;
    v = (l + s) / 2;
    sv = l === 0 ? 2 * smin / (lmin + smin) : 2 * s / (l + s);
    return [h, sv * 100, v * 100];
  };
  convert.hsv.rgb = function (hsv) {
    var h = hsv[0] / 60;
    var s = hsv[1] / 100;
    var v = hsv[2] / 100;
    var hi = Math.floor(h) % 6;
    var f = h - Math.floor(h);
    var p = 255 * v * (1 - s);
    var q = 255 * v * (1 - s * f);
    var t = 255 * v * (1 - s * (1 - f));
    v *= 255;
    switch (hi) {
      case 0:
        return [v, t, p];
      case 1:
        return [q, v, p];
      case 2:
        return [p, v, t];
      case 3:
        return [p, q, v];
      case 4:
        return [t, p, v];
      case 5:
        return [v, p, q];
    }
  };
  convert.hsv.hsl = function (hsv) {
    var h = hsv[0];
    var s = hsv[1] / 100;
    var v = hsv[2] / 100;
    var vmin = Math.max(v, 0.01);
    var lmin;
    var sl;
    var l;
    l = (2 - s) * v;
    lmin = (2 - s) * vmin;
    sl = s * vmin;
    sl /= lmin <= 1 ? lmin : 2 - lmin;
    sl = sl || 0;
    l /= 2;
    return [h, sl * 100, l * 100];
  };

  // http://dev.w3.org/csswg/css-color/#hwb-to-rgb
  convert.hwb.rgb = function (hwb) {
    var h = hwb[0] / 360;
    var wh = hwb[1] / 100;
    var bl = hwb[2] / 100;
    var ratio = wh + bl;
    var i;
    var v;
    var f;
    var n;

    // wh + bl cant be > 1
    if (ratio > 1) {
      wh /= ratio;
      bl /= ratio;
    }
    i = Math.floor(6 * h);
    v = 1 - bl;
    f = 6 * h - i;
    if ((i & 1) !== 0) {
      f = 1 - f;
    }
    n = wh + f * (v - wh); // linear interpolation

    var r;
    var g;
    var b;
    switch (i) {
      default:
      case 6:
      case 0:
        r = v;
        g = n;
        b = wh;
        break;
      case 1:
        r = n;
        g = v;
        b = wh;
        break;
      case 2:
        r = wh;
        g = v;
        b = n;
        break;
      case 3:
        r = wh;
        g = n;
        b = v;
        break;
      case 4:
        r = n;
        g = wh;
        b = v;
        break;
      case 5:
        r = v;
        g = wh;
        b = n;
        break;
    }
    return [r * 255, g * 255, b * 255];
  };
  convert.cmyk.rgb = function (cmyk) {
    var c = cmyk[0] / 100;
    var m = cmyk[1] / 100;
    var y = cmyk[2] / 100;
    var k = cmyk[3] / 100;
    var r;
    var g;
    var b;
    r = 1 - Math.min(1, c * (1 - k) + k);
    g = 1 - Math.min(1, m * (1 - k) + k);
    b = 1 - Math.min(1, y * (1 - k) + k);
    return [r * 255, g * 255, b * 255];
  };
  convert.xyz.rgb = function (xyz) {
    var x = xyz[0] / 100;
    var y = xyz[1] / 100;
    var z = xyz[2] / 100;
    var r;
    var g;
    var b;
    r = x * 3.2406 + y * -1.5372 + z * -0.4986;
    g = x * -0.9689 + y * 1.8758 + z * 0.0415;
    b = x * 0.0557 + y * -0.204 + z * 1.057;

    // assume sRGB
    r = r > 0.0031308 ? 1.055 * Math.pow(r, 1 / 2.4) - 0.055 : r * 12.92;
    g = g > 0.0031308 ? 1.055 * Math.pow(g, 1 / 2.4) - 0.055 : g * 12.92;
    b = b > 0.0031308 ? 1.055 * Math.pow(b, 1 / 2.4) - 0.055 : b * 12.92;
    r = Math.min(Math.max(0, r), 1);
    g = Math.min(Math.max(0, g), 1);
    b = Math.min(Math.max(0, b), 1);
    return [r * 255, g * 255, b * 255];
  };
  convert.xyz.lab = function (xyz) {
    var x = xyz[0];
    var y = xyz[1];
    var z = xyz[2];
    var l;
    var a;
    var b;
    x /= 95.047;
    y /= 100;
    z /= 108.883;
    x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
    y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
    z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
    l = 116 * y - 16;
    a = 500 * (x - y);
    b = 200 * (y - z);
    return [l, a, b];
  };
  convert.lab.xyz = function (lab) {
    var l = lab[0];
    var a = lab[1];
    var b = lab[2];
    var x;
    var y;
    var z;
    y = (l + 16) / 116;
    x = a / 500 + y;
    z = y - b / 200;
    var y2 = Math.pow(y, 3);
    var x2 = Math.pow(x, 3);
    var z2 = Math.pow(z, 3);
    y = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;
    x = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;
    z = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;
    x *= 95.047;
    y *= 100;
    z *= 108.883;
    return [x, y, z];
  };
  convert.lab.lch = function (lab) {
    var l = lab[0];
    var a = lab[1];
    var b = lab[2];
    var hr;
    var h;
    var c;
    hr = Math.atan2(b, a);
    h = hr * 360 / 2 / Math.PI;
    if (h < 0) {
      h += 360;
    }
    c = Math.sqrt(a * a + b * b);
    return [l, c, h];
  };
  convert.lch.lab = function (lch) {
    var l = lch[0];
    var c = lch[1];
    var h = lch[2];
    var a;
    var b;
    var hr;
    hr = h / 360 * 2 * Math.PI;
    a = c * Math.cos(hr);
    b = c * Math.sin(hr);
    return [l, a, b];
  };
  convert.rgb.ansi16 = function (args) {
    var r = args[0];
    var g = args[1];
    var b = args[2];
    var value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2]; // hsv -> ansi16 optimization

    value = Math.round(value / 50);
    if (value === 0) {
      return 30;
    }
    var ansi = 30 + (Math.round(b / 255) << 2 | Math.round(g / 255) << 1 | Math.round(r / 255));
    if (value === 2) {
      ansi += 60;
    }
    return ansi;
  };
  convert.hsv.ansi16 = function (args) {
    // optimization here; we already know the value and don't need to get
    // it converted for us.
    return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
  };
  convert.rgb.ansi256 = function (args) {
    var r = args[0];
    var g = args[1];
    var b = args[2];

    // we use the extended greyscale palette here, with the exception of
    // black and white. normal palette only has 4 greyscale shades.
    if (r === g && g === b) {
      if (r < 8) {
        return 16;
      }
      if (r > 248) {
        return 231;
      }
      return Math.round((r - 8) / 247 * 24) + 232;
    }
    var ansi = 16 + 36 * Math.round(r / 255 * 5) + 6 * Math.round(g / 255 * 5) + Math.round(b / 255 * 5);
    return ansi;
  };
  convert.ansi16.rgb = function (args) {
    var color = args % 10;

    // handle greyscale
    if (color === 0 || color === 7) {
      if (args > 50) {
        color += 3.5;
      }
      color = color / 10.5 * 255;
      return [color, color, color];
    }
    var mult = (~~(args > 50) + 1) * 0.5;
    var r = (color & 1) * mult * 255;
    var g = (color >> 1 & 1) * mult * 255;
    var b = (color >> 2 & 1) * mult * 255;
    return [r, g, b];
  };
  convert.ansi256.rgb = function (args) {
    // handle greyscale
    if (args >= 232) {
      var c = (args - 232) * 10 + 8;
      return [c, c, c];
    }
    args -= 16;
    var rem;
    var r = Math.floor(args / 36) / 5 * 255;
    var g = Math.floor((rem = args % 36) / 6) / 5 * 255;
    var b = rem % 6 / 5 * 255;
    return [r, g, b];
  };
  convert.rgb.hex = function (args) {
    var integer = ((Math.round(args[0]) & 255) << 16) + ((Math.round(args[1]) & 255) << 8) + (Math.round(args[2]) & 255);
    var string = integer.toString(16).toUpperCase();
    return "000000".substring(string.length) + string;
  };
  convert.hex.rgb = function (args) {
    var match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
    if (!match) {
      return [0, 0, 0];
    }
    var colorString = match[0];
    if (match[0].length === 3) {
      colorString = colorString.split("").map(function (char) {
        return char + char;
      }).join("");
    }
    var integer = parseInt(colorString, 16);
    var r = integer >> 16 & 255;
    var g = integer >> 8 & 255;
    var b = integer & 255;
    return [r, g, b];
  };
  convert.rgb.hcg = function (rgb) {
    var r = rgb[0] / 255;
    var g = rgb[1] / 255;
    var b = rgb[2] / 255;
    var max = Math.max(Math.max(r, g), b);
    var min = Math.min(Math.min(r, g), b);
    var chroma = max - min;
    var grayscale;
    var hue;
    if (chroma < 1) {
      grayscale = min / (1 - chroma);
    } else {
      grayscale = 0;
    }
    if (chroma <= 0) {
      hue = 0;
    } else if (max === r) {
      hue = (g - b) / chroma % 6;
    } else if (max === g) {
      hue = 2 + (b - r) / chroma;
    } else {
      hue = 4 + (r - g) / chroma + 4;
    }
    hue /= 6;
    hue %= 1;
    return [hue * 360, chroma * 100, grayscale * 100];
  };
  convert.hsl.hcg = function (hsl) {
    var s = hsl[1] / 100;
    var l = hsl[2] / 100;
    var c = 1;
    var f = 0;
    if (l < 0.5) {
      c = 2 * s * l;
    } else {
      c = 2 * s * (1 - l);
    }
    if (c < 1) {
      f = (l - 0.5 * c) / (1 - c);
    }
    return [hsl[0], c * 100, f * 100];
  };
  convert.hsv.hcg = function (hsv) {
    var s = hsv[1] / 100;
    var v = hsv[2] / 100;
    var c = s * v;
    var f = 0;
    if (c < 1) {
      f = (v - c) / (1 - c);
    }
    return [hsv[0], c * 100, f * 100];
  };
  convert.hcg.rgb = function (hcg) {
    var h = hcg[0] / 360;
    var c = hcg[1] / 100;
    var g = hcg[2] / 100;
    if (c === 0) {
      return [g * 255, g * 255, g * 255];
    }
    var pure = [0, 0, 0];
    var hi = h % 1 * 6;
    var v = hi % 1;
    var w = 1 - v;
    var mg = 0;
    switch (Math.floor(hi)) {
      case 0:
        pure[0] = 1;
        pure[1] = v;
        pure[2] = 0;
        break;
      case 1:
        pure[0] = w;
        pure[1] = 1;
        pure[2] = 0;
        break;
      case 2:
        pure[0] = 0;
        pure[1] = 1;
        pure[2] = v;
        break;
      case 3:
        pure[0] = 0;
        pure[1] = w;
        pure[2] = 1;
        break;
      case 4:
        pure[0] = v;
        pure[1] = 0;
        pure[2] = 1;
        break;
      default:
        pure[0] = 1;
        pure[1] = 0;
        pure[2] = w;
    }
    mg = (1 - c) * g;
    return [(c * pure[0] + mg) * 255, (c * pure[1] + mg) * 255, (c * pure[2] + mg) * 255];
  };
  convert.hcg.hsv = function (hcg) {
    var c = hcg[1] / 100;
    var g = hcg[2] / 100;
    var v = c + g * (1 - c);
    var f = 0;
    if (v > 0) {
      f = c / v;
    }
    return [hcg[0], f * 100, v * 100];
  };
  convert.hcg.hsl = function (hcg) {
    var c = hcg[1] / 100;
    var g = hcg[2] / 100;
    var l = g * (1 - c) + 0.5 * c;
    var s = 0;
    if (l > 0 && l < 0.5) {
      s = c / (2 * l);
    } else if (l >= 0.5 && l < 1) {
      s = c / (2 * (1 - l));
    }
    return [hcg[0], s * 100, l * 100];
  };
  convert.hcg.hwb = function (hcg) {
    var c = hcg[1] / 100;
    var g = hcg[2] / 100;
    var v = c + g * (1 - c);
    return [hcg[0], (v - c) * 100, (1 - v) * 100];
  };
  convert.hwb.hcg = function (hwb) {
    var w = hwb[1] / 100;
    var b = hwb[2] / 100;
    var v = 1 - b;
    var c = v - w;
    var g = 0;
    if (c < 1) {
      g = (v - c) / (1 - c);
    }
    return [hwb[0], c * 100, g * 100];
  };
  convert.apple.rgb = function (apple) {
    return [apple[0] / 65535 * 255, apple[1] / 65535 * 255, apple[2] / 65535 * 255];
  };
  convert.rgb.apple = function (rgb) {
    return [rgb[0] / 255 * 65535, rgb[1] / 255 * 65535, rgb[2] / 255 * 65535];
  };
  convert.gray.rgb = function (args) {
    return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
  };
  convert.gray.hsl = convert.gray.hsv = function (args) {
    return [0, 0, args[0]];
  };
  convert.gray.hwb = function (gray) {
    return [0, 100, gray[0]];
  };
  convert.gray.cmyk = function (gray) {
    return [0, 0, 0, gray[0]];
  };
  convert.gray.lab = function (gray) {
    return [gray[0], 0, 0];
  };
  convert.gray.hex = function (gray) {
    var val = Math.round(gray[0] / 100 * 255) & 255;
    var integer = (val << 16) + (val << 8) + val;
    var string = integer.toString(16).toUpperCase();
    return "000000".substring(string.length) + string;
  };
  convert.rgb.gray = function (rgb) {
    var val = (rgb[0] + rgb[1] + rgb[2]) / 3;
    return [val / 255 * 100];
  };
  return exports$3b;
}

var exports$3a = {},
  _dewExec$39 = false;
function dew$39() {
  if (_dewExec$39) return exports$3a;
  _dewExec$39 = true;
  var conversions = dew$3a();

  /*
  	this function routes a model to all other models.
  
  	all functions that are routed have a property `.conversion` attached
  	to the returned synthetic function. This property is an array
  	of strings, each with the steps in between the 'from' and 'to'
  	color models (inclusive).
  
  	conversions that are not possible simply are not included.
  */

  function buildGraph() {
    var graph = {};
    // https://jsperf.com/object-keys-vs-for-in-with-closure/3
    var models = Object.keys(conversions);
    for (var len = models.length, i = 0; i < len; i++) {
      graph[models[i]] = {
        // http://jsperf.com/1-vs-infinity
        // micro-opt, but this is simple.
        distance: -1,
        parent: null
      };
    }
    return graph;
  }

  // https://en.wikipedia.org/wiki/Breadth-first_search
  function deriveBFS(fromModel) {
    var graph = buildGraph();
    var queue = [fromModel]; // unshift -> queue -> pop

    graph[fromModel].distance = 0;
    while (queue.length) {
      var current = queue.pop();
      var adjacents = Object.keys(conversions[current]);
      for (var len = adjacents.length, i = 0; i < len; i++) {
        var adjacent = adjacents[i];
        var node = graph[adjacent];
        if (node.distance === -1) {
          node.distance = graph[current].distance + 1;
          node.parent = current;
          queue.unshift(adjacent);
        }
      }
    }
    return graph;
  }
  function link(from, to) {
    return function (args) {
      return to(from(args));
    };
  }
  function wrapConversion(toModel, graph) {
    var path = [graph[toModel].parent, toModel];
    var fn = conversions[graph[toModel].parent][toModel];
    var cur = graph[toModel].parent;
    while (graph[cur].parent) {
      path.unshift(graph[cur].parent);
      fn = link(conversions[graph[cur].parent][cur], fn);
      cur = graph[cur].parent;
    }
    fn.conversion = path;
    return fn;
  }
  exports$3a = function (fromModel) {
    var graph = deriveBFS(fromModel);
    var conversion = {};
    var models = Object.keys(graph);
    for (var len = models.length, i = 0; i < len; i++) {
      var toModel = models[i];
      var node = graph[toModel];
      if (node.parent === null) {
        // no possible conversion, or this node is the source model.
        continue;
      }
      conversion[toModel] = wrapConversion(toModel, graph);
    }
    return conversion;
  };
  return exports$3a;
}

var exports$39 = {},
  _dewExec$38 = false;
function dew$38() {
  if (_dewExec$38) return exports$39;
  _dewExec$38 = true;
  var conversions = dew$3a();
  var route = dew$39();
  var convert = {};
  var models = Object.keys(conversions);
  function wrapRaw(fn) {
    var wrappedFn = function (args) {
      if (args === undefined || args === null) {
        return args;
      }
      if (arguments.length > 1) {
        args = Array.prototype.slice.call(arguments);
      }
      return fn(args);
    };

    // preserve .conversion property if there is one
    if ("conversion" in fn) {
      wrappedFn.conversion = fn.conversion;
    }
    return wrappedFn;
  }
  function wrapRounded(fn) {
    var wrappedFn = function (args) {
      if (args === undefined || args === null) {
        return args;
      }
      if (arguments.length > 1) {
        args = Array.prototype.slice.call(arguments);
      }
      var result = fn(args);

      // we're assuming the result is an array here.
      // see notice in conversions.js; don't use box types
      // in conversion functions.
      if (typeof result === "object") {
        for (var len = result.length, i = 0; i < len; i++) {
          result[i] = Math.round(result[i]);
        }
      }
      return result;
    };

    // preserve .conversion property if there is one
    if ("conversion" in fn) {
      wrappedFn.conversion = fn.conversion;
    }
    return wrappedFn;
  }
  models.forEach(function (fromModel) {
    convert[fromModel] = {};
    Object.defineProperty(convert[fromModel], "channels", {
      value: conversions[fromModel].channels
    });
    Object.defineProperty(convert[fromModel], "labels", {
      value: conversions[fromModel].labels
    });
    var routes = route(fromModel);
    var routeModels = Object.keys(routes);
    routeModels.forEach(function (toModel) {
      var fn = routes[toModel];
      convert[fromModel][toModel] = wrapRounded(fn);
      convert[fromModel][toModel].raw = wrapRaw(fn);
    });
  });
  exports$39 = convert;
  return exports$39;
}

var exports$38 = {},
  _dewExec$37 = false;
var module = {
  exports: exports$38
};
function dew$37() {
  if (_dewExec$37) return module.exports;
  _dewExec$37 = true;
  const colorConvert = dew$38();
  const wrapAnsi16 = (fn, offset) => function () {
    const code = fn.apply(colorConvert, arguments);
    return `\u001B[${code + offset}m`;
  };
  const wrapAnsi256 = (fn, offset) => function () {
    const code = fn.apply(colorConvert, arguments);
    return `\u001B[${38 + offset};5;${code}m`;
  };
  const wrapAnsi16m = (fn, offset) => function () {
    const rgb = fn.apply(colorConvert, arguments);
    return `\u001B[${38 + offset};2;${rgb[0]};${rgb[1]};${rgb[2]}m`;
  };
  function assembleStyles() {
    const codes = new Map();
    const styles = {
      modifier: {
        reset: [0, 0],
        // 21 isn't widely supported and 22 does the same thing
        bold: [1, 22],
        dim: [2, 22],
        italic: [3, 23],
        underline: [4, 24],
        inverse: [7, 27],
        hidden: [8, 28],
        strikethrough: [9, 29]
      },
      color: {
        black: [30, 39],
        red: [31, 39],
        green: [32, 39],
        yellow: [33, 39],
        blue: [34, 39],
        magenta: [35, 39],
        cyan: [36, 39],
        white: [37, 39],
        gray: [90, 39],
        // Bright color
        redBright: [91, 39],
        greenBright: [92, 39],
        yellowBright: [93, 39],
        blueBright: [94, 39],
        magentaBright: [95, 39],
        cyanBright: [96, 39],
        whiteBright: [97, 39]
      },
      bgColor: {
        bgBlack: [40, 49],
        bgRed: [41, 49],
        bgGreen: [42, 49],
        bgYellow: [43, 49],
        bgBlue: [44, 49],
        bgMagenta: [45, 49],
        bgCyan: [46, 49],
        bgWhite: [47, 49],
        // Bright color
        bgBlackBright: [100, 49],
        bgRedBright: [101, 49],
        bgGreenBright: [102, 49],
        bgYellowBright: [103, 49],
        bgBlueBright: [104, 49],
        bgMagentaBright: [105, 49],
        bgCyanBright: [106, 49],
        bgWhiteBright: [107, 49]
      }
    };

    // Fix humans
    styles.color.grey = styles.color.gray;
    for (const groupName of Object.keys(styles)) {
      const group = styles[groupName];
      for (const styleName of Object.keys(group)) {
        const style = group[styleName];
        styles[styleName] = {
          open: `\u001B[${style[0]}m`,
          close: `\u001B[${style[1]}m`
        };
        group[styleName] = styles[styleName];
        codes.set(style[0], style[1]);
      }
      Object.defineProperty(styles, groupName, {
        value: group,
        enumerable: false
      });
      Object.defineProperty(styles, "codes", {
        value: codes,
        enumerable: false
      });
    }
    const ansi2ansi = n => n;
    const rgb2rgb = (r, g, b) => [r, g, b];
    styles.color.close = "\x1B[39m";
    styles.bgColor.close = "\x1B[49m";
    styles.color.ansi = {
      ansi: wrapAnsi16(ansi2ansi, 0)
    };
    styles.color.ansi256 = {
      ansi256: wrapAnsi256(ansi2ansi, 0)
    };
    styles.color.ansi16m = {
      rgb: wrapAnsi16m(rgb2rgb, 0)
    };
    styles.bgColor.ansi = {
      ansi: wrapAnsi16(ansi2ansi, 10)
    };
    styles.bgColor.ansi256 = {
      ansi256: wrapAnsi256(ansi2ansi, 10)
    };
    styles.bgColor.ansi16m = {
      rgb: wrapAnsi16m(rgb2rgb, 10)
    };
    for (let key of Object.keys(colorConvert)) {
      if (typeof colorConvert[key] !== "object") {
        continue;
      }
      const suite = colorConvert[key];
      if (key === "ansi16") {
        key = "ansi";
      }
      if ("ansi16" in suite) {
        styles.color.ansi[key] = wrapAnsi16(suite.ansi16, 0);
        styles.bgColor.ansi[key] = wrapAnsi16(suite.ansi16, 10);
      }
      if ("ansi256" in suite) {
        styles.color.ansi256[key] = wrapAnsi256(suite.ansi256, 0);
        styles.bgColor.ansi256[key] = wrapAnsi256(suite.ansi256, 10);
      }
      if ("rgb" in suite) {
        styles.color.ansi16m[key] = wrapAnsi16m(suite.rgb, 0);
        styles.bgColor.ansi16m[key] = wrapAnsi16m(suite.rgb, 10);
      }
    }
    return styles;
  }

  // Make the export immutable
  Object.defineProperty(module, "exports", {
    enumerable: true,
    get: assembleStyles
  });
  return module.exports;
}

var exports$37 = {},
  _dewExec$36 = false;
function dew$36() {
  if (_dewExec$36) return exports$37;
  _dewExec$36 = true;
  var process = _nodeProcess;
  exports$37 = (flag, argv) => {
    argv = argv || process.argv;
    const prefix = flag.startsWith("-") ? "" : flag.length === 1 ? "-" : "--";
    const pos = argv.indexOf(prefix + flag);
    const terminatorPos = argv.indexOf("--");
    return pos !== -1 && (terminatorPos === -1 ? true : pos < terminatorPos);
  };
  return exports$37;
}

var exports$36 = {},
  _dewExec$35 = false;
function dew$35() {
  if (_dewExec$35) return exports$36;
  _dewExec$35 = true;
  var process = _nodeProcess;
  const os = _os;
  const hasFlag = dew$36();
  const env = process.env;
  let forceColor;
  if (hasFlag("no-color") || hasFlag("no-colors") || hasFlag("color=false")) {
    forceColor = false;
  } else if (hasFlag("color") || hasFlag("colors") || hasFlag("color=true") || hasFlag("color=always")) {
    forceColor = true;
  }
  if ("FORCE_COLOR" in env) {
    forceColor = env.FORCE_COLOR.length === 0 || parseInt(env.FORCE_COLOR, 10) !== 0;
  }
  function translateLevel(level) {
    if (level === 0) {
      return false;
    }
    return {
      level,
      hasBasic: true,
      has256: level >= 2,
      has16m: level >= 3
    };
  }
  function supportsColor(stream) {
    if (forceColor === false) {
      return 0;
    }
    if (hasFlag("color=16m") || hasFlag("color=full") || hasFlag("color=truecolor")) {
      return 3;
    }
    if (hasFlag("color=256")) {
      return 2;
    }
    if (stream && !stream.isTTY && forceColor !== true) {
      return 0;
    }
    const min = forceColor ? 1 : 0;
    if (process.platform === "win32") {
      // Node.js 7.5.0 is the first version of Node.js to include a patch to
      // libuv that enables 256 color output on Windows. Anything earlier and it
      // won't work. However, here we target Node.js 8 at minimum as it is an LTS
      // release, and Node.js 7 is not. Windows 10 build 10586 is the first Windows
      // release that supports 256 colors. Windows 10 build 14931 is the first release
      // that supports 16m/TrueColor.
      const osRelease = os.release().split(".");
      if (Number(process.versions.node.split(".")[0]) >= 8 && Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586) {
        return Number(osRelease[2]) >= 14931 ? 3 : 2;
      }
      return 1;
    }
    if ("CI" in env) {
      if (["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI"].some(sign => sign in env) || env.CI_NAME === "codeship") {
        return 1;
      }
      return min;
    }
    if ("TEAMCITY_VERSION" in env) {
      return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
    }
    if (env.COLORTERM === "truecolor") {
      return 3;
    }
    if ("TERM_PROGRAM" in env) {
      const version = parseInt((env.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
      switch (env.TERM_PROGRAM) {
        case "iTerm.app":
          return version >= 3 ? 3 : 2;
        case "Apple_Terminal":
          return 2;
        // No default
      }
    }
    if (/-256(color)?$/i.test(env.TERM)) {
      return 2;
    }
    if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {
      return 1;
    }
    if ("COLORTERM" in env) {
      return 1;
    }
    if (env.TERM === "dumb") {
      return min;
    }
    return min;
  }
  function getSupportLevel(stream) {
    const level = supportsColor(stream);
    return translateLevel(level);
  }
  exports$36 = {
    supportsColor: getSupportLevel,
    stdout: getSupportLevel(process.stdout),
    stderr: getSupportLevel(process.stderr)
  };
  return exports$36;
}

var exports$35 = {},
  _dewExec$34 = false;
function dew$34() {
  if (_dewExec$34) return exports$35;
  _dewExec$34 = true;
  const TEMPLATE_REGEX = /(?:\\(u[a-f\d]{4}|x[a-f\d]{2}|.))|(?:\{(~)?(\w+(?:\([^)]*\))?(?:\.\w+(?:\([^)]*\))?)*)(?:[ \t]|(?=\r?\n)))|(\})|((?:.|[\r\n\f])+?)/gi;
  const STYLE_REGEX = /(?:^|\.)(\w+)(?:\(([^)]*)\))?/g;
  const STRING_REGEX = /^(['"])((?:\\.|(?!\1)[^\\])*)\1$/;
  const ESCAPE_REGEX = /\\(u[a-f\d]{4}|x[a-f\d]{2}|.)|([^\\])/gi;
  const ESCAPES = new Map([["n", "\n"], ["r", "\r"], ["t", "\t"], ["b", "\b"], ["f", "\f"], ["v", "\x0B"], ["0", "\0"], ["\\", "\\"], ["e", "\x1B"], ["a", "\x07"]]);
  function unescape(c) {
    if (c[0] === "u" && c.length === 5 || c[0] === "x" && c.length === 3) {
      return String.fromCharCode(parseInt(c.slice(1), 16));
    }
    return ESCAPES.get(c) || c;
  }
  function parseArguments(name, args) {
    const results = [];
    const chunks = args.trim().split(/\s*,\s*/g);
    let matches;
    for (const chunk of chunks) {
      if (!isNaN(chunk)) {
        results.push(Number(chunk));
      } else if (matches = chunk.match(STRING_REGEX)) {
        results.push(matches[2].replace(ESCAPE_REGEX, (m, escape, chr) => escape ? unescape(escape) : chr));
      } else {
        throw new Error(`Invalid Chalk template style argument: ${chunk} (in style '${name}')`);
      }
    }
    return results;
  }
  function parseStyle(style) {
    STYLE_REGEX.lastIndex = 0;
    const results = [];
    let matches;
    while ((matches = STYLE_REGEX.exec(style)) !== null) {
      const name = matches[1];
      if (matches[2]) {
        const args = parseArguments(name, matches[2]);
        results.push([name].concat(args));
      } else {
        results.push([name]);
      }
    }
    return results;
  }
  function buildStyle(chalk, styles) {
    const enabled = {};
    for (const layer of styles) {
      for (const style of layer.styles) {
        enabled[style[0]] = layer.inverse ? null : style.slice(1);
      }
    }
    let current = chalk;
    for (const styleName of Object.keys(enabled)) {
      if (Array.isArray(enabled[styleName])) {
        if (!(styleName in current)) {
          throw new Error(`Unknown Chalk style: ${styleName}`);
        }
        if (enabled[styleName].length > 0) {
          current = current[styleName].apply(current, enabled[styleName]);
        } else {
          current = current[styleName];
        }
      }
    }
    return current;
  }
  exports$35 = (chalk, tmp) => {
    const styles = [];
    const chunks = [];
    let chunk = [];

    // eslint-disable-next-line max-params
    tmp.replace(TEMPLATE_REGEX, (m, escapeChar, inverse, style, close, chr) => {
      if (escapeChar) {
        chunk.push(unescape(escapeChar));
      } else if (style) {
        const str = chunk.join("");
        chunk = [];
        chunks.push(styles.length === 0 ? str : buildStyle(chalk, styles)(str));
        styles.push({
          inverse,
          styles: parseStyle(style)
        });
      } else if (close) {
        if (styles.length === 0) {
          throw new Error("Found extraneous } in Chalk template literal");
        }
        chunks.push(buildStyle(chalk, styles)(chunk.join("")));
        chunk = [];
        styles.pop();
      } else {
        chunk.push(chr);
      }
    });
    chunks.push(chunk.join(""));
    if (styles.length > 0) {
      const errMsg = `Chalk template literal is missing ${styles.length} closing bracket${styles.length === 1 ? "" : "s"} (\`}\`)`;
      throw new Error(errMsg);
    }
    return chunks.join("");
  };
  return exports$35;
}

var exports$34 = {},
  _dewExec$33 = false;
function dew$33() {
  if (_dewExec$33) return exports$34;
  _dewExec$33 = true;
  var process = _nodeProcess;
  const escapeStringRegexp = dew$3c();
  const ansiStyles = dew$37();
  const stdoutColor = dew$35().stdout;
  const template = dew$34();
  const isSimpleWindowsTerm = process.platform === "win32" && !(process.env.TERM || "").toLowerCase().startsWith("xterm");

  // `supportsColor.level` → `ansiStyles.color[name]` mapping
  const levelMapping = ["ansi", "ansi", "ansi256", "ansi16m"];

  // `color-convert` models to exclude from the Chalk API due to conflicts and such
  const skipModels = new Set(["gray"]);
  const styles = Object.create(null);
  function applyOptions(obj, options) {
    options = options || {};

    // Detect level if not set manually
    const scLevel = stdoutColor ? stdoutColor.level : 0;
    obj.level = options.level === undefined ? scLevel : options.level;
    obj.enabled = "enabled" in options ? options.enabled : obj.level > 0;
  }
  function Chalk(options) {
    // We check for this.template here since calling `chalk.constructor()`
    // by itself will have a `this` of a previously constructed chalk object
    if (!this || !(this instanceof Chalk) || this.template) {
      const chalk = {};
      applyOptions(chalk, options);
      chalk.template = function () {
        const args = [].slice.call(arguments);
        return chalkTag.apply(null, [chalk.template].concat(args));
      };
      Object.setPrototypeOf(chalk, Chalk.prototype);
      Object.setPrototypeOf(chalk.template, chalk);
      chalk.template.constructor = Chalk;
      return chalk.template;
    }
    applyOptions(this, options);
  }

  // Use bright blue on Windows as the normal blue color is illegible
  if (isSimpleWindowsTerm) {
    ansiStyles.blue.open = "\x1B[94m";
  }
  for (const key of Object.keys(ansiStyles)) {
    ansiStyles[key].closeRe = new RegExp(escapeStringRegexp(ansiStyles[key].close), "g");
    styles[key] = {
      get() {
        const codes = ansiStyles[key];
        return build.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, key);
      }
    };
  }
  styles.visible = {
    get() {
      return build.call(this, this._styles || [], true, "visible");
    }
  };
  ansiStyles.color.closeRe = new RegExp(escapeStringRegexp(ansiStyles.color.close), "g");
  for (const model of Object.keys(ansiStyles.color.ansi)) {
    if (skipModels.has(model)) {
      continue;
    }
    styles[model] = {
      get() {
        const level = this.level;
        return function () {
          const open = ansiStyles.color[levelMapping[level]][model].apply(null, arguments);
          const codes = {
            open,
            close: ansiStyles.color.close,
            closeRe: ansiStyles.color.closeRe
          };
          return build.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, model);
        };
      }
    };
  }
  ansiStyles.bgColor.closeRe = new RegExp(escapeStringRegexp(ansiStyles.bgColor.close), "g");
  for (const model of Object.keys(ansiStyles.bgColor.ansi)) {
    if (skipModels.has(model)) {
      continue;
    }
    const bgModel = "bg" + model[0].toUpperCase() + model.slice(1);
    styles[bgModel] = {
      get() {
        const level = this.level;
        return function () {
          const open = ansiStyles.bgColor[levelMapping[level]][model].apply(null, arguments);
          const codes = {
            open,
            close: ansiStyles.bgColor.close,
            closeRe: ansiStyles.bgColor.closeRe
          };
          return build.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, model);
        };
      }
    };
  }
  const proto = Object.defineProperties(() => {}, styles);
  function build(_styles, _empty, key) {
    const builder = function () {
      return applyStyle.apply(builder, arguments);
    };
    builder._styles = _styles;
    builder._empty = _empty;
    const self = this;
    Object.defineProperty(builder, "level", {
      enumerable: true,
      get() {
        return self.level;
      },
      set(level) {
        self.level = level;
      }
    });
    Object.defineProperty(builder, "enabled", {
      enumerable: true,
      get() {
        return self.enabled;
      },
      set(enabled) {
        self.enabled = enabled;
      }
    });

    // See below for fix regarding invisible grey/dim combination on Windows
    builder.hasGrey = this.hasGrey || key === "gray" || key === "grey";

    // `__proto__` is used because we must return a function, but there is
    // no way to create a function with a different prototype
    builder.__proto__ = proto; // eslint-disable-line no-proto

    return builder;
  }
  function applyStyle() {
    // Support varags, but simply cast to string in case there's only one arg
    const args = arguments;
    const argsLen = args.length;
    let str = String(arguments[0]);
    if (argsLen === 0) {
      return "";
    }
    if (argsLen > 1) {
      // Don't slice `arguments`, it prevents V8 optimizations
      for (let a = 1; a < argsLen; a++) {
        str += " " + args[a];
      }
    }
    if (!this.enabled || this.level <= 0 || !str) {
      return this._empty ? "" : str;
    }

    // Turns out that on Windows dimmed gray text becomes invisible in cmd.exe,
    // see https://github.com/chalk/chalk/issues/58
    // If we're on Windows and we're dealing with a gray color, temporarily make 'dim' a noop.
    const originalDim = ansiStyles.dim.open;
    if (isSimpleWindowsTerm && this.hasGrey) {
      ansiStyles.dim.open = "";
    }
    for (const code of this._styles.slice().reverse()) {
      // Replace any instances already present with a re-opening code
      // otherwise only the part of the string until said closing code
      // will be colored, and the rest will simply be 'plain'.
      str = code.open + str.replace(code.closeRe, code.open) + code.close;

      // Close the styling before a linebreak and reopen
      // after next line to fix a bleed issue on macOS
      // https://github.com/chalk/chalk/pull/92
      str = str.replace(/\r?\n/g, `${code.close}$&${code.open}`);
    }

    // Reset the original `dim` if we changed it to work around the Windows dimmed gray issue
    ansiStyles.dim.open = originalDim;
    return str;
  }
  function chalkTag(chalk, strings) {
    if (!Array.isArray(strings)) {
      // If chalk() was called by itself or with a string,
      // return the string itself as a string.
      return [].slice.call(arguments, 1).join(" ");
    }
    const args = [].slice.call(arguments, 2);
    const parts = [strings.raw[0]];
    for (let i = 1; i < strings.length; i++) {
      parts.push(String(args[i - 1]).replace(/[{}\\]/g, "\\$&"));
      parts.push(String(strings.raw[i]));
    }
    return template(chalk, parts.join(""));
  }
  Object.defineProperties(Chalk.prototype, styles);
  exports$34 = Chalk(); // eslint-disable-line new-cap
  exports$34.supportsColor = stdoutColor;
  exports$34.default = exports$34; // For TypeScript
  return exports$34;
}

var exports$33 = {},
  _dewExec$32 = false;
function dew$32() {
  if (_dewExec$32) return exports$33;
  _dewExec$32 = true;
  Object.defineProperty(exports$33, "__esModule", {
    value: true
  });
  exports$33.default = highlight;
  exports$33.shouldHighlight = shouldHighlight;
  var _jsTokens = dew$3e();
  var _helperValidatorIdentifier = dew$4t();
  var _picocolors = _interopRequireWildcard(dew$3d(), true);
  function _getRequireWildcardCache(e) {
    if ("function" != typeof WeakMap) return null;
    var r = new WeakMap(),
      t = new WeakMap();
    return (_getRequireWildcardCache = function (e) {
      return e ? t : r;
    })(e);
  }
  function _interopRequireWildcard(e, r) {
    if (null === e || "object" != typeof e && "function" != typeof e) return {
      default: e
    };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e)) return t.get(e);
    var n = {
        __proto__: null
      },
      a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) {
      var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
      i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
    }
    return n.default = e, t && t.set(e, n), n;
  }
  const colors = typeof process === "object" && (process.env.FORCE_COLOR === "0" || process.env.FORCE_COLOR === "false") ? (0, _picocolors.createColors)(false) : _picocolors.default;
  const compose = (f, g) => v => f(g(v));
  const sometimesKeywords = new Set(["as", "async", "from", "get", "of", "set"]);
  function getDefs(colors) {
    return {
      keyword: colors.cyan,
      capitalized: colors.yellow,
      jsxIdentifier: colors.yellow,
      punctuator: colors.yellow,
      number: colors.magenta,
      string: colors.green,
      regex: colors.magenta,
      comment: colors.gray,
      invalid: compose(compose(colors.white, colors.bgRed), colors.bold)
    };
  }
  const NEWLINE = /\r\n|[\n\r\u2028\u2029]/;
  const BRACKET = /^[()[\]{}]$/;
  let tokenize;
  {
    const JSX_TAG = /^[a-z][\w-]*$/i;
    const getTokenType = function (token, offset, text) {
      if (token.type === "name") {
        if ((0, _helperValidatorIdentifier.isKeyword)(token.value) || (0, _helperValidatorIdentifier.isStrictReservedWord)(token.value, true) || sometimesKeywords.has(token.value)) {
          return "keyword";
        }
        if (JSX_TAG.test(token.value) && (text[offset - 1] === "<" || text.slice(offset - 2, offset) === "</")) {
          return "jsxIdentifier";
        }
        if (token.value[0] !== token.value[0].toLowerCase()) {
          return "capitalized";
        }
      }
      if (token.type === "punctuator" && BRACKET.test(token.value)) {
        return "bracket";
      }
      if (token.type === "invalid" && (token.value === "@" || token.value === "#")) {
        return "punctuator";
      }
      return token.type;
    };
    tokenize = function* (text) {
      let match;
      while (match = _jsTokens.default.exec(text)) {
        const token = _jsTokens.matchToToken(match);
        yield {
          type: getTokenType(token, match.index, text),
          value: token.value
        };
      }
    };
  }
  function highlightTokens(defs, text) {
    let highlighted = "";
    for (const {
      type,
      value
    } of tokenize(text)) {
      const colorize = defs[type];
      if (colorize) {
        highlighted += value.split(NEWLINE).map(str => colorize(str)).join("\n");
      } else {
        highlighted += value;
      }
    }
    return highlighted;
  }
  function shouldHighlight(options) {
    return colors.isColorSupported || options.forceColor;
  }
  let pcWithForcedColor = undefined;
  function getColors(forceColor) {
    if (forceColor) {
      var _pcWithForcedColor;
      (_pcWithForcedColor = pcWithForcedColor) != null ? _pcWithForcedColor : pcWithForcedColor = (0, _picocolors.createColors)(true);
      return pcWithForcedColor;
    }
    return colors;
  }
  function highlight(code, options = {}) {
    if (code !== "" && shouldHighlight(options)) {
      const defs = getDefs(getColors(options.forceColor));
      return highlightTokens(defs, code);
    } else {
      return code;
    }
  }
  {
    let chalk, chalkWithForcedColor;
    exports$33.getChalk = ({
      forceColor
    }) => {
      var _chalk;
      (_chalk = chalk) != null ? _chalk : chalk = dew$33();
      if (forceColor) {
        var _chalkWithForcedColor;
        (_chalkWithForcedColor = chalkWithForcedColor) != null ? _chalkWithForcedColor : chalkWithForcedColor = new chalk.constructor({
          enabled: true,
          level: 1
        });
        return chalkWithForcedColor;
      }
      return chalk;
    };
  }
  return exports$33;
}

var exports$32 = {},
  _dewExec$31 = false;
function dew$31() {
  if (_dewExec$31) return exports$32;
  _dewExec$31 = true;
  var process = _nodeProcess;
  Object.defineProperty(exports$32, "__esModule", {
    value: true
  });
  exports$32.codeFrameColumns = codeFrameColumns;
  exports$32.default = _default;
  var _highlight = dew$32();
  var _picocolors = _interopRequireWildcard(dew$3d(), true);
  function _getRequireWildcardCache(e) {
    if ("function" != typeof WeakMap) return null;
    var r = new WeakMap(),
      t = new WeakMap();
    return (_getRequireWildcardCache = function (e) {
      return e ? t : r;
    })(e);
  }
  function _interopRequireWildcard(e, r) {
    if (null === e || "object" != typeof e && "function" != typeof e) return {
      default: e
    };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e)) return t.get(e);
    var n = {
        __proto__: null
      },
      a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) {
      var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
      i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
    }
    return n.default = e, t && t.set(e, n), n;
  }
  const colors = typeof process === "object" && (process.env.FORCE_COLOR === "0" || process.env.FORCE_COLOR === "false") ? (0, _picocolors.createColors)(false) : _picocolors.default;
  const compose = (f, g) => v => f(g(v));
  let pcWithForcedColor = undefined;
  function getColors(forceColor) {
    if (forceColor) {
      var _pcWithForcedColor;
      (_pcWithForcedColor = pcWithForcedColor) != null ? _pcWithForcedColor : pcWithForcedColor = (0, _picocolors.createColors)(true);
      return pcWithForcedColor;
    }
    return colors;
  }
  let deprecationWarningShown = false;
  function getDefs(colors) {
    return {
      gutter: colors.gray,
      marker: compose(colors.red, colors.bold),
      message: compose(colors.red, colors.bold)
    };
  }
  const NEWLINE = /\r\n|[\n\r\u2028\u2029]/;
  function getMarkerLines(loc, source, opts) {
    const startLoc = Object.assign({
      column: 0,
      line: -1
    }, loc.start);
    const endLoc = Object.assign({}, startLoc, loc.end);
    const {
      linesAbove = 2,
      linesBelow = 3
    } = opts || {};
    const startLine = startLoc.line;
    const startColumn = startLoc.column;
    const endLine = endLoc.line;
    const endColumn = endLoc.column;
    let start = Math.max(startLine - (linesAbove + 1), 0);
    let end = Math.min(source.length, endLine + linesBelow);
    if (startLine === -1) {
      start = 0;
    }
    if (endLine === -1) {
      end = source.length;
    }
    const lineDiff = endLine - startLine;
    const markerLines = {};
    if (lineDiff) {
      for (let i = 0; i <= lineDiff; i++) {
        const lineNumber = i + startLine;
        if (!startColumn) {
          markerLines[lineNumber] = true;
        } else if (i === 0) {
          const sourceLength = source[lineNumber - 1].length;
          markerLines[lineNumber] = [startColumn, sourceLength - startColumn + 1];
        } else if (i === lineDiff) {
          markerLines[lineNumber] = [0, endColumn];
        } else {
          const sourceLength = source[lineNumber - i].length;
          markerLines[lineNumber] = [0, sourceLength];
        }
      }
    } else {
      if (startColumn === endColumn) {
        if (startColumn) {
          markerLines[startLine] = [startColumn, 0];
        } else {
          markerLines[startLine] = true;
        }
      } else {
        markerLines[startLine] = [startColumn, endColumn - startColumn];
      }
    }
    return {
      start,
      end,
      markerLines
    };
  }
  function codeFrameColumns(rawLines, loc, opts = {}) {
    const highlighted = (opts.highlightCode || opts.forceColor) && (0, _highlight.shouldHighlight)(opts);
    const colors = getColors(opts.forceColor);
    const defs = getDefs(colors);
    const maybeHighlight = (fmt, string) => {
      return highlighted ? fmt(string) : string;
    };
    const lines = rawLines.split(NEWLINE);
    const {
      start,
      end,
      markerLines
    } = getMarkerLines(loc, lines, opts);
    const hasColumns = loc.start && typeof loc.start.column === "number";
    const numberMaxWidth = String(end).length;
    const highlightedLines = highlighted ? (0, _highlight.default)(rawLines, opts) : rawLines;
    let frame = highlightedLines.split(NEWLINE, end).slice(start, end).map((line, index) => {
      const number = start + 1 + index;
      const paddedNumber = ` ${number}`.slice(-numberMaxWidth);
      const gutter = ` ${paddedNumber} |`;
      const hasMarker = markerLines[number];
      const lastMarkerLine = !markerLines[number + 1];
      if (hasMarker) {
        let markerLine = "";
        if (Array.isArray(hasMarker)) {
          const markerSpacing = line.slice(0, Math.max(hasMarker[0] - 1, 0)).replace(/[^\t]/g, " ");
          const numberOfMarkers = hasMarker[1] || 1;
          markerLine = ["\n ", maybeHighlight(defs.gutter, gutter.replace(/\d/g, " ")), " ", markerSpacing, maybeHighlight(defs.marker, "^").repeat(numberOfMarkers)].join("");
          if (lastMarkerLine && opts.message) {
            markerLine += " " + maybeHighlight(defs.message, opts.message);
          }
        }
        return [maybeHighlight(defs.marker, ">"), maybeHighlight(defs.gutter, gutter), line.length > 0 ? ` ${line}` : "", markerLine].join("");
      } else {
        return ` ${maybeHighlight(defs.gutter, gutter)}${line.length > 0 ? ` ${line}` : ""}`;
      }
    }).join("\n");
    if (opts.message && !hasColumns) {
      frame = `${" ".repeat(numberMaxWidth + 1)}${opts.message}\n${frame}`;
    }
    if (highlighted) {
      return colors.reset(frame);
    } else {
      return frame;
    }
  }
  function _default(rawLines, lineNumber, colNumber, opts = {}) {
    if (!deprecationWarningShown) {
      deprecationWarningShown = true;
      const message = "Passing lineNumber and colNumber is deprecated to @babel/code-frame. Please use `codeFrameColumns`.";
      if (process.emitWarning) {
        process.emitWarning(message, "DeprecationWarning");
      } else {
        const deprecationError = new Error(message);
        deprecationError.name = "DeprecationWarning";
        console.warn(new Error(message));
      }
    }
    colNumber = Math.max(colNumber, 0);
    const location = {
      start: {
        column: colNumber,
        line: lineNumber
      }
    };
    return codeFrameColumns(rawLines, location, opts);
  }
  return exports$32;
}

var exports$31 = {},
  _dewExec$30 = false;
function dew$30() {
  if (_dewExec$30) return exports$31;
  _dewExec$30 = true;
  Object.defineProperty(exports$31, "__esModule", {
    value: true
  });
  exports$31.default = parseAndBuildMetadata;
  var _t = dew$3i();
  var _parser = dew$3f();
  var _codeFrame = dew$31();
  const {
    isCallExpression,
    isExpressionStatement,
    isFunction,
    isIdentifier,
    isJSXIdentifier,
    isNewExpression,
    isPlaceholder,
    isStatement,
    isStringLiteral,
    removePropertiesDeep,
    traverse
  } = _t;
  const PATTERN = /^[_$A-Z0-9]+$/;
  function parseAndBuildMetadata(formatter, code, opts) {
    const {
      placeholderWhitelist,
      placeholderPattern,
      preserveComments,
      syntacticPlaceholders
    } = opts;
    const ast = parseWithCodeFrame(code, opts.parser, syntacticPlaceholders);
    removePropertiesDeep(ast, {
      preserveComments
    });
    formatter.validate(ast);
    const state = {
      syntactic: {
        placeholders: [],
        placeholderNames: new Set()
      },
      legacy: {
        placeholders: [],
        placeholderNames: new Set()
      },
      placeholderWhitelist,
      placeholderPattern,
      syntacticPlaceholders
    };
    traverse(ast, placeholderVisitorHandler, state);
    return Object.assign({
      ast
    }, state.syntactic.placeholders.length ? state.syntactic : state.legacy);
  }
  function placeholderVisitorHandler(node, ancestors, state) {
    var _state$placeholderWhi;
    let name;
    let hasSyntacticPlaceholders = state.syntactic.placeholders.length > 0;
    if (isPlaceholder(node)) {
      if (state.syntacticPlaceholders === false) {
        throw new Error("%%foo%%-style placeholders can't be used when " + "'.syntacticPlaceholders' is false.");
      }
      name = node.name.name;
      hasSyntacticPlaceholders = true;
    } else if (hasSyntacticPlaceholders || state.syntacticPlaceholders) {
      return;
    } else if (isIdentifier(node) || isJSXIdentifier(node)) {
      name = node.name;
    } else if (isStringLiteral(node)) {
      name = node.value;
    } else {
      return;
    }
    if (hasSyntacticPlaceholders && (state.placeholderPattern != null || state.placeholderWhitelist != null)) {
      throw new Error("'.placeholderWhitelist' and '.placeholderPattern' aren't compatible" + " with '.syntacticPlaceholders: true'");
    }
    if (!hasSyntacticPlaceholders && (state.placeholderPattern === false || !(state.placeholderPattern || PATTERN).test(name)) && !((_state$placeholderWhi = state.placeholderWhitelist) != null && _state$placeholderWhi.has(name))) {
      return;
    }
    ancestors = ancestors.slice();
    const {
      node: parent,
      key
    } = ancestors[ancestors.length - 1];
    let type;
    if (isStringLiteral(node) || isPlaceholder(node, {
      expectedNode: "StringLiteral"
    })) {
      type = "string";
    } else if (isNewExpression(parent) && key === "arguments" || isCallExpression(parent) && key === "arguments" || isFunction(parent) && key === "params") {
      type = "param";
    } else if (isExpressionStatement(parent) && !isPlaceholder(node)) {
      type = "statement";
      ancestors = ancestors.slice(0, -1);
    } else if (isStatement(node) && isPlaceholder(node)) {
      type = "statement";
    } else {
      type = "other";
    }
    const {
      placeholders,
      placeholderNames
    } = !hasSyntacticPlaceholders ? state.legacy : state.syntactic;
    placeholders.push({
      name,
      type,
      resolve: ast => resolveAncestors(ast, ancestors),
      isDuplicate: placeholderNames.has(name)
    });
    placeholderNames.add(name);
  }
  function resolveAncestors(ast, ancestors) {
    let parent = ast;
    for (let i = 0; i < ancestors.length - 1; i++) {
      const {
        key,
        index
      } = ancestors[i];
      if (index === undefined) {
        parent = parent[key];
      } else {
        parent = parent[key][index];
      }
    }
    const {
      key,
      index
    } = ancestors[ancestors.length - 1];
    return {
      parent,
      key,
      index
    };
  }
  function parseWithCodeFrame(code, parserOpts, syntacticPlaceholders) {
    const plugins = (parserOpts.plugins || []).slice();
    if (syntacticPlaceholders !== false) {
      plugins.push("placeholders");
    }
    parserOpts = Object.assign({
      allowReturnOutsideFunction: true,
      allowSuperOutsideMethod: true,
      sourceType: "module"
    }, parserOpts, {
      plugins
    });
    try {
      return (0, _parser.parse)(code, parserOpts);
    } catch (err) {
      const loc = err.loc;
      if (loc) {
        err.message += "\n" + (0, _codeFrame.codeFrameColumns)(code, {
          start: loc
        });
        err.code = "BABEL_TEMPLATE_PARSE_ERROR";
      }
      throw err;
    }
  }
  return exports$31;
}

var exports$30 = {},
  _dewExec$2$ = false;
function dew$2$() {
  if (_dewExec$2$) return exports$30;
  _dewExec$2$ = true;
  Object.defineProperty(exports$30, "__esModule", {
    value: true
  });
  exports$30.default = populatePlaceholders;
  var _t = dew$3i();
  const {
    blockStatement,
    cloneNode,
    emptyStatement,
    expressionStatement,
    identifier,
    isStatement,
    isStringLiteral,
    stringLiteral,
    validate
  } = _t;
  function populatePlaceholders(metadata, replacements) {
    const ast = cloneNode(metadata.ast);
    if (replacements) {
      metadata.placeholders.forEach(placeholder => {
        if (!hasOwnProperty.call(replacements, placeholder.name)) {
          const placeholderName = placeholder.name;
          throw new Error(`Error: No substitution given for "${placeholderName}". If this is not meant to be a
            placeholder you may want to consider passing one of the following options to @babel/template:
            - { placeholderPattern: false, placeholderWhitelist: new Set(['${placeholderName}'])}
            - { placeholderPattern: /^${placeholderName}$/ }`);
        }
      });
      Object.keys(replacements).forEach(key => {
        if (!metadata.placeholderNames.has(key)) {
          throw new Error(`Unknown substitution "${key}" given`);
        }
      });
    }
    metadata.placeholders.slice().reverse().forEach(placeholder => {
      try {
        applyReplacement(placeholder, ast, replacements && replacements[placeholder.name] || null);
      } catch (e) {
        e.message = `@babel/template placeholder "${placeholder.name}": ${e.message}`;
        throw e;
      }
    });
    return ast;
  }
  function applyReplacement(placeholder, ast, replacement) {
    if (placeholder.isDuplicate) {
      if (Array.isArray(replacement)) {
        replacement = replacement.map(node => cloneNode(node));
      } else if (typeof replacement === "object") {
        replacement = cloneNode(replacement);
      }
    }
    const {
      parent,
      key,
      index
    } = placeholder.resolve(ast);
    if (placeholder.type === "string") {
      if (typeof replacement === "string") {
        replacement = stringLiteral(replacement);
      }
      if (!replacement || !isStringLiteral(replacement)) {
        throw new Error("Expected string substitution");
      }
    } else if (placeholder.type === "statement") {
      if (index === undefined) {
        if (!replacement) {
          replacement = emptyStatement();
        } else if (Array.isArray(replacement)) {
          replacement = blockStatement(replacement);
        } else if (typeof replacement === "string") {
          replacement = expressionStatement(identifier(replacement));
        } else if (!isStatement(replacement)) {
          replacement = expressionStatement(replacement);
        }
      } else {
        if (replacement && !Array.isArray(replacement)) {
          if (typeof replacement === "string") {
            replacement = identifier(replacement);
          }
          if (!isStatement(replacement)) {
            replacement = expressionStatement(replacement);
          }
        }
      }
    } else if (placeholder.type === "param") {
      if (typeof replacement === "string") {
        replacement = identifier(replacement);
      }
      if (index === undefined) throw new Error("Assertion failure.");
    } else {
      if (typeof replacement === "string") {
        replacement = identifier(replacement);
      }
      if (Array.isArray(replacement)) {
        throw new Error("Cannot replace single expression with an array.");
      }
    }
    function set(parent, key, value) {
      const node = parent[key];
      parent[key] = value;
      if (node.type === "Identifier") {
        if (node.typeAnnotation) {
          value.typeAnnotation = node.typeAnnotation;
        }
        if (node.optional) {
          value.optional = node.optional;
        }
        if (node.decorators) {
          value.decorators = node.decorators;
        }
      }
    }
    if (index === undefined) {
      validate(parent, key, replacement);
      set(parent, key, replacement);
    } else {
      const items = parent[key].slice();
      if (placeholder.type === "statement" || placeholder.type === "param") {
        if (replacement == null) {
          items.splice(index, 1);
        } else if (Array.isArray(replacement)) {
          items.splice(index, 1, ...replacement);
        } else {
          set(items, index, replacement);
        }
      } else {
        set(items, index, replacement);
      }
      validate(parent, key, items);
      parent[key] = items;
    }
  }
  return exports$30;
}

var exports$2$ = {},
  _dewExec$2_ = false;
function dew$2_() {
  if (_dewExec$2_) return exports$2$;
  _dewExec$2_ = true;
  Object.defineProperty(exports$2$, "__esModule", {
    value: true
  });
  exports$2$.default = stringTemplate;
  var _options = dew$3g();
  var _parse = dew$30();
  var _populate = dew$2$();
  function stringTemplate(formatter, code, opts) {
    code = formatter.code(code);
    let metadata;
    return arg => {
      const replacements = (0, _options.normalizeReplacements)(arg);
      if (!metadata) metadata = (0, _parse.default)(formatter, code, opts);
      return formatter.unwrap((0, _populate.default)(metadata, replacements));
    };
  }
  return exports$2$;
}

var exports$2_ = {},
  _dewExec$2Z = false;
function dew$2Z() {
  if (_dewExec$2Z) return exports$2_;
  _dewExec$2Z = true;
  Object.defineProperty(exports$2_, "__esModule", {
    value: true
  });
  exports$2_.default = literalTemplate;
  var _options = dew$3g();
  var _parse = dew$30();
  var _populate = dew$2$();
  function literalTemplate(formatter, tpl, opts) {
    const {
      metadata,
      names
    } = buildLiteralData(formatter, tpl, opts);
    return arg => {
      const defaultReplacements = {};
      arg.forEach((replacement, i) => {
        defaultReplacements[names[i]] = replacement;
      });
      return arg => {
        const replacements = (0, _options.normalizeReplacements)(arg);
        if (replacements) {
          Object.keys(replacements).forEach(key => {
            if (hasOwnProperty.call(defaultReplacements, key)) {
              throw new Error("Unexpected replacement overlap.");
            }
          });
        }
        return formatter.unwrap((0, _populate.default)(metadata, replacements ? Object.assign(replacements, defaultReplacements) : defaultReplacements));
      };
    };
  }
  function buildLiteralData(formatter, tpl, opts) {
    let prefix = "BABEL_TPL$";
    const raw = tpl.join("");
    do {
      prefix = "$$" + prefix;
    } while (raw.includes(prefix));
    const {
      names,
      code
    } = buildTemplateCode(tpl, prefix);
    const metadata = (0, _parse.default)(formatter, formatter.code(code), {
      parser: opts.parser,
      placeholderWhitelist: new Set(names.concat(opts.placeholderWhitelist ? Array.from(opts.placeholderWhitelist) : [])),
      placeholderPattern: opts.placeholderPattern,
      preserveComments: opts.preserveComments,
      syntacticPlaceholders: opts.syntacticPlaceholders
    });
    return {
      metadata,
      names
    };
  }
  function buildTemplateCode(tpl, prefix) {
    const names = [];
    let code = tpl[0];
    for (let i = 1; i < tpl.length; i++) {
      const value = `${prefix}${i - 1}`;
      names.push(value);
      code += value + tpl[i];
    }
    return {
      names,
      code
    };
  }
  return exports$2_;
}

var exports$2Z = {},
  _dewExec$2Y = false;
function dew$2Y() {
  if (_dewExec$2Y) return exports$2Z;
  _dewExec$2Y = true;
  Object.defineProperty(exports$2Z, "__esModule", {
    value: true
  });
  exports$2Z.default = createTemplateBuilder;
  var _options = dew$3g();
  var _string = dew$2_();
  var _literal = dew$2Z();
  const NO_PLACEHOLDER = (0, _options.validate)({
    placeholderPattern: false
  });
  function createTemplateBuilder(formatter, defaultOpts) {
    const templateFnCache = new WeakMap();
    const templateAstCache = new WeakMap();
    const cachedOpts = defaultOpts || (0, _options.validate)(null);
    return Object.assign((tpl, ...args) => {
      if (typeof tpl === "string") {
        if (args.length > 1) throw new Error("Unexpected extra params.");
        return extendedTrace((0, _string.default)(formatter, tpl, (0, _options.merge)(cachedOpts, (0, _options.validate)(args[0]))));
      } else if (Array.isArray(tpl)) {
        let builder = templateFnCache.get(tpl);
        if (!builder) {
          builder = (0, _literal.default)(formatter, tpl, cachedOpts);
          templateFnCache.set(tpl, builder);
        }
        return extendedTrace(builder(args));
      } else if (typeof tpl === "object" && tpl) {
        if (args.length > 0) throw new Error("Unexpected extra params.");
        return createTemplateBuilder(formatter, (0, _options.merge)(cachedOpts, (0, _options.validate)(tpl)));
      }
      throw new Error(`Unexpected template param ${typeof tpl}`);
    }, {
      ast: (tpl, ...args) => {
        if (typeof tpl === "string") {
          if (args.length > 1) throw new Error("Unexpected extra params.");
          return (0, _string.default)(formatter, tpl, (0, _options.merge)((0, _options.merge)(cachedOpts, (0, _options.validate)(args[0])), NO_PLACEHOLDER))();
        } else if (Array.isArray(tpl)) {
          let builder = templateAstCache.get(tpl);
          if (!builder) {
            builder = (0, _literal.default)(formatter, tpl, (0, _options.merge)(cachedOpts, NO_PLACEHOLDER));
            templateAstCache.set(tpl, builder);
          }
          return builder(args)();
        }
        throw new Error(`Unexpected template param ${typeof tpl}`);
      }
    });
  }
  function extendedTrace(fn) {
    let rootStack = "";
    try {
      throw new Error();
    } catch (error) {
      if (error.stack) {
        rootStack = error.stack.split("\n").slice(3).join("\n");
      }
    }
    return arg => {
      try {
        return fn(arg);
      } catch (err) {
        err.stack += `\n    =============\n${rootStack}`;
        throw err;
      }
    };
  }
  return exports$2Z;
}

var exports$2Y = {},
  _dewExec$2X = false;
function dew$2X() {
  if (_dewExec$2X) return exports$2Y;
  _dewExec$2X = true;
  Object.defineProperty(exports$2Y, "__esModule", {
    value: true
  });
  exports$2Y.statements = exports$2Y.statement = exports$2Y.smart = exports$2Y.program = exports$2Y.expression = exports$2Y.default = void 0;
  var formatters = dew$3h();
  var _builder = dew$2Y();
  const smart = exports$2Y.smart = (0, _builder.default)(formatters.smart);
  const statement = exports$2Y.statement = (0, _builder.default)(formatters.statement);
  const statements = exports$2Y.statements = (0, _builder.default)(formatters.statements);
  const expression = exports$2Y.expression = (0, _builder.default)(formatters.expression);
  const program = exports$2Y.program = (0, _builder.default)(formatters.program);
  exports$2Y.default = Object.assign(smart.bind(undefined), {
    smart,
    statement,
    statements,
    expression,
    program,
    ast: smart.ast
  });
  return exports$2Y;
}

var exports$2X = {},
  _dewExec$2W = false;
function dew$2W() {
  if (_dewExec$2W) return exports$2X;
  _dewExec$2W = true;
  Object.defineProperty(exports$2X, "__esModule", {
    value: true
  });
  exports$2X.default = void 0;
  var _template = dew$2X();
  function helper(minVersion, source, metadata) {
    return Object.freeze({
      minVersion,
      ast: () => _template.default.program.ast(source, {
        preserveComments: true
      }),
      metadata
    });
  }
  const helpers = exports$2X.default = {
    __proto__: null,
    OverloadYield: helper("7.18.14", "function _OverloadYield(e,d){this.v=e,this.k=d}", {
      globals: [],
      locals: {
        _OverloadYield: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_OverloadYield",
      dependencies: {}
    }),
    applyDecoratedDescriptor: helper("7.0.0-beta.0", "function _applyDecoratedDescriptor(i,e,r,n,l){var a={};return Object.keys(n).forEach((function(i){a[i]=n[i]})),a.enumerable=!!a.enumerable,a.configurable=!!a.configurable,(\"value\"in a||a.initializer)&&(a.writable=!0),a=r.slice().reverse().reduce((function(r,n){return n(i,e,r)||r}),a),l&&void 0!==a.initializer&&(a.value=a.initializer?a.initializer.call(l):void 0,a.initializer=void 0),void 0===a.initializer?(Object.defineProperty(i,e,a),null):a}", {
      globals: ["Object"],
      locals: {
        _applyDecoratedDescriptor: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_applyDecoratedDescriptor",
      dependencies: {}
    }),
    applyDecs2311: helper("7.24.0", "function applyDecs2311(e,t,n,r,o,i){var a,c,u,s,f,l,p,d=Symbol.metadata||Symbol.for(\"Symbol.metadata\"),m=Object.defineProperty,h=Object.create,y=[h(null),h(null)],v=t.length;function g(t,n,r){return function(o,i){n&&(i=o,o=e);for(var a=0;a<t.length;a++)i=t[a].apply(o,r?[i]:[]);return r?i:o}}function b(e,t,n,r){if(\"function\"!=typeof e&&(r||void 0!==e))throw new TypeError(t+\" must \"+(n||\"be\")+\" a function\"+(r?\"\":\" or undefined\"));return e}function applyDec(e,t,n,r,o,i,u,s,f,l,p){function d(e){if(!p(e))throw new TypeError(\"Attempted to access private element on non-instance\")}var h=[].concat(t[0]),v=t[3],w=!u,D=1===o,S=3===o,j=4===o,E=2===o;function I(t,n,r){return function(o,i){return n&&(i=o,o=e),r&&r(o),P[t].call(o,i)}}if(!w){var P={},k=[],F=S?\"get\":j||D?\"set\":\"value\";if(f?(l||D?P={get:setFunctionName((function(){return v(this)}),r,\"get\"),set:function(e){t[4](this,e)}}:P[F]=v,l||setFunctionName(P[F],r,E?\"\":F)):l||(P=Object.getOwnPropertyDescriptor(e,r)),!l&&!f){if((c=y[+s][r])&&7!=(c^o))throw Error(\"Decorating two elements with the same name (\"+P[F].name+\") is not supported yet\");y[+s][r]=o<3?1:o}}for(var N=e,O=h.length-1;O>=0;O-=n?2:1){var T=b(h[O],\"A decorator\",\"be\",!0),z=n?h[O-1]:void 0,A={},H={kind:[\"field\",\"accessor\",\"method\",\"getter\",\"setter\",\"class\"][o],name:r,metadata:a,addInitializer:function(e,t){if(e.v)throw new TypeError(\"attempted to call addInitializer after decoration was finished\");b(t,\"An initializer\",\"be\",!0),i.push(t)}.bind(null,A)};if(w)c=T.call(z,N,H),A.v=1,b(c,\"class decorators\",\"return\")&&(N=c);else if(H.static=s,H.private=f,c=H.access={has:f?p.bind():function(e){return r in e}},j||(c.get=f?E?function(e){return d(e),P.value}:I(\"get\",0,d):function(e){return e[r]}),E||S||(c.set=f?I(\"set\",0,d):function(e,t){e[r]=t}),N=T.call(z,D?{get:P.get,set:P.set}:P[F],H),A.v=1,D){if(\"object\"==typeof N&&N)(c=b(N.get,\"accessor.get\"))&&(P.get=c),(c=b(N.set,\"accessor.set\"))&&(P.set=c),(c=b(N.init,\"accessor.init\"))&&k.unshift(c);else if(void 0!==N)throw new TypeError(\"accessor decorators must return an object with get, set, or init properties or undefined\")}else b(N,(l?\"field\":\"method\")+\" decorators\",\"return\")&&(l?k.unshift(N):P[F]=N)}return o<2&&u.push(g(k,s,1),g(i,s,0)),l||w||(f?D?u.splice(-1,0,I(\"get\",s),I(\"set\",s)):u.push(E?P[F]:b.call.bind(P[F])):m(e,r,P)),N}function w(e){return m(e,d,{configurable:!0,enumerable:!0,value:a})}return void 0!==i&&(a=i[d]),a=h(null==a?null:a),f=[],l=function(e){e&&f.push(g(e))},p=function(t,r){for(var i=0;i<n.length;i++){var a=n[i],c=a[1],l=7&c;if((8&c)==t&&!l==r){var p=a[2],d=!!a[3],m=16&c;applyDec(t?e:e.prototype,a,m,d?\"#\"+p:toPropertyKey(p),l,l<2?[]:t?s=s||[]:u=u||[],f,!!t,d,r,t&&d?function(t){return checkInRHS(t)===e}:o)}}},p(8,0),p(0,0),p(8,1),p(0,1),l(u),l(s),c=f,v||w(e),{e:c,get c(){var n=[];return v&&[w(e=applyDec(e,[t],r,e.name,5,n)),g(n,1)]}}}", {
      globals: ["Symbol", "Object", "TypeError", "Error"],
      locals: {
        applyDecs2311: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "applyDecs2311",
      dependencies: {
        checkInRHS: ["body.0.body.body.5.argument.expressions.4.right.body.body.0.body.body.1.consequent.body.1.expression.arguments.10.consequent.body.body.0.argument.left.callee"],
        setFunctionName: ["body.0.body.body.3.body.body.3.consequent.body.1.test.expressions.0.consequent.expressions.0.consequent.right.properties.0.value.callee", "body.0.body.body.3.body.body.3.consequent.body.1.test.expressions.0.consequent.expressions.1.right.callee"],
        toPropertyKey: ["body.0.body.body.5.argument.expressions.4.right.body.body.0.body.body.1.consequent.body.1.expression.arguments.3.alternate.callee"]
      }
    }),
    arrayLikeToArray: helper("7.9.0", "function _arrayLikeToArray(r,a){(null==a||a>r.length)&&(a=r.length);for(var e=0,n=Array(a);e<a;e++)n[e]=r[e];return n}", {
      globals: ["Array"],
      locals: {
        _arrayLikeToArray: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_arrayLikeToArray",
      dependencies: {}
    }),
    arrayWithHoles: helper("7.0.0-beta.0", "function _arrayWithHoles(r){if(Array.isArray(r))return r}", {
      globals: ["Array"],
      locals: {
        _arrayWithHoles: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_arrayWithHoles",
      dependencies: {}
    }),
    arrayWithoutHoles: helper("7.0.0-beta.0", "function _arrayWithoutHoles(r){if(Array.isArray(r))return arrayLikeToArray(r)}", {
      globals: ["Array"],
      locals: {
        _arrayWithoutHoles: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_arrayWithoutHoles",
      dependencies: {
        arrayLikeToArray: ["body.0.body.body.0.consequent.argument.callee"]
      }
    }),
    assertClassBrand: helper("7.24.0", "function _assertClassBrand(e,t,n){if(\"function\"==typeof e?e===t:e.has(t))return arguments.length<3?t:n;throw new TypeError(\"Private element is not present on this object\")}", {
      globals: ["TypeError"],
      locals: {
        _assertClassBrand: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_assertClassBrand",
      dependencies: {}
    }),
    assertThisInitialized: helper("7.0.0-beta.0", "function _assertThisInitialized(e){if(void 0===e)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");return e}", {
      globals: ["ReferenceError"],
      locals: {
        _assertThisInitialized: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_assertThisInitialized",
      dependencies: {}
    }),
    asyncGeneratorDelegate: helper("7.0.0-beta.0", "function _asyncGeneratorDelegate(t){var e={},n=!1;function pump(e,r){return n=!0,r=new Promise((function(n){n(t[e](r))})),{done:!1,value:new OverloadYield(r,1)}}return e[\"undefined\"!=typeof Symbol&&Symbol.iterator||\"@@iterator\"]=function(){return this},e.next=function(t){return n?(n=!1,t):pump(\"next\",t)},\"function\"==typeof t.throw&&(e.throw=function(t){if(n)throw n=!1,t;return pump(\"throw\",t)}),\"function\"==typeof t.return&&(e.return=function(t){return n?(n=!1,t):pump(\"return\",t)}),e}", {
      globals: ["Promise", "Symbol"],
      locals: {
        _asyncGeneratorDelegate: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_asyncGeneratorDelegate",
      dependencies: {
        OverloadYield: ["body.0.body.body.1.body.body.0.argument.expressions.2.properties.1.value.callee"]
      }
    }),
    asyncIterator: helper("7.15.9", "function _asyncIterator(r){var n,t,o,e=2;for(\"undefined\"!=typeof Symbol&&(t=Symbol.asyncIterator,o=Symbol.iterator);e--;){if(t&&null!=(n=r[t]))return n.call(r);if(o&&null!=(n=r[o]))return new AsyncFromSyncIterator(n.call(r));t=\"@@asyncIterator\",o=\"@@iterator\"}throw new TypeError(\"Object is not async iterable\")}function AsyncFromSyncIterator(r){function AsyncFromSyncIteratorContinuation(r){if(Object(r)!==r)return Promise.reject(new TypeError(r+\" is not an object.\"));var n=r.done;return Promise.resolve(r.value).then((function(r){return{value:r,done:n}}))}return AsyncFromSyncIterator=function(r){this.s=r,this.n=r.next},AsyncFromSyncIterator.prototype={s:null,n:null,next:function(){return AsyncFromSyncIteratorContinuation(this.n.apply(this.s,arguments))},return:function(r){var n=this.s.return;return void 0===n?Promise.resolve({value:r,done:!0}):AsyncFromSyncIteratorContinuation(n.apply(this.s,arguments))},throw:function(r){var n=this.s.return;return void 0===n?Promise.reject(r):AsyncFromSyncIteratorContinuation(n.apply(this.s,arguments))}},new AsyncFromSyncIterator(r)}", {
      globals: ["Symbol", "TypeError", "Object", "Promise"],
      locals: {
        _asyncIterator: ["body.0.id"],
        AsyncFromSyncIterator: ["body.1.id", "body.0.body.body.1.body.body.1.consequent.argument.callee", "body.1.body.body.1.argument.expressions.1.left.object", "body.1.body.body.1.argument.expressions.2.callee", "body.1.body.body.1.argument.expressions.0.left"]
      },
      exportBindingAssignments: [],
      exportName: "_asyncIterator",
      dependencies: {}
    }),
    asyncToGenerator: helper("7.0.0-beta.0", "function asyncGeneratorStep(n,t,e,r,o,a,c){try{var i=n[a](c),u=i.value}catch(n){return void e(n)}i.done?t(u):Promise.resolve(u).then(r,o)}function _asyncToGenerator(n){return function(){var t=this,e=arguments;return new Promise((function(r,o){var a=n.apply(t,e);function _next(n){asyncGeneratorStep(a,r,o,_next,_throw,\"next\",n)}function _throw(n){asyncGeneratorStep(a,r,o,_next,_throw,\"throw\",n)}_next(void 0)}))}}", {
      globals: ["Promise"],
      locals: {
        asyncGeneratorStep: ["body.0.id", "body.1.body.body.0.argument.body.body.1.argument.arguments.0.body.body.1.body.body.0.expression.callee", "body.1.body.body.0.argument.body.body.1.argument.arguments.0.body.body.2.body.body.0.expression.callee"],
        _asyncToGenerator: ["body.1.id"]
      },
      exportBindingAssignments: [],
      exportName: "_asyncToGenerator",
      dependencies: {}
    }),
    awaitAsyncGenerator: helper("7.0.0-beta.0", "function _awaitAsyncGenerator(e){return new OverloadYield(e,0)}", {
      globals: [],
      locals: {
        _awaitAsyncGenerator: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_awaitAsyncGenerator",
      dependencies: {
        OverloadYield: ["body.0.body.body.0.argument.callee"]
      }
    }),
    callSuper: helper("7.23.8", "function _callSuper(t,o,e){return o=getPrototypeOf(o),possibleConstructorReturn(t,isNativeReflectConstruct()?Reflect.construct(o,e||[],getPrototypeOf(t).constructor):o.apply(t,e))}", {
      globals: ["Reflect"],
      locals: {
        _callSuper: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_callSuper",
      dependencies: {
        getPrototypeOf: ["body.0.body.body.0.argument.expressions.0.right.callee", "body.0.body.body.0.argument.expressions.1.arguments.1.consequent.arguments.2.object.callee"],
        isNativeReflectConstruct: ["body.0.body.body.0.argument.expressions.1.arguments.1.test.callee"],
        possibleConstructorReturn: ["body.0.body.body.0.argument.expressions.1.callee"]
      }
    }),
    checkInRHS: helper("7.20.5", "function _checkInRHS(e){if(Object(e)!==e)throw TypeError(\"right-hand side of 'in' should be an object, got \"+(null!==e?typeof e:\"null\"));return e}", {
      globals: ["Object", "TypeError"],
      locals: {
        _checkInRHS: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_checkInRHS",
      dependencies: {}
    }),
    checkPrivateRedeclaration: helper("7.14.1", "function _checkPrivateRedeclaration(e,t){if(t.has(e))throw new TypeError(\"Cannot initialize the same private elements twice on an object\")}", {
      globals: ["TypeError"],
      locals: {
        _checkPrivateRedeclaration: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_checkPrivateRedeclaration",
      dependencies: {}
    }),
    classCallCheck: helper("7.0.0-beta.0", "function _classCallCheck(a,n){if(!(a instanceof n))throw new TypeError(\"Cannot call a class as a function\")}", {
      globals: ["TypeError"],
      locals: {
        _classCallCheck: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_classCallCheck",
      dependencies: {}
    }),
    classNameTDZError: helper("7.0.0-beta.0", "function _classNameTDZError(e){throw new ReferenceError('Class \"'+e+'\" cannot be referenced in computed property keys.')}", {
      globals: ["ReferenceError"],
      locals: {
        _classNameTDZError: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_classNameTDZError",
      dependencies: {}
    }),
    classPrivateFieldGet2: helper("7.24.0", "function _classPrivateFieldGet2(s,a){return s.get(assertClassBrand(s,a))}", {
      globals: [],
      locals: {
        _classPrivateFieldGet2: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_classPrivateFieldGet2",
      dependencies: {
        assertClassBrand: ["body.0.body.body.0.argument.arguments.0.callee"]
      }
    }),
    classPrivateFieldInitSpec: helper("7.14.1", "function _classPrivateFieldInitSpec(e,t,a){checkPrivateRedeclaration(e,t),t.set(e,a)}", {
      globals: [],
      locals: {
        _classPrivateFieldInitSpec: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_classPrivateFieldInitSpec",
      dependencies: {
        checkPrivateRedeclaration: ["body.0.body.body.0.expression.expressions.0.callee"]
      }
    }),
    classPrivateFieldLooseBase: helper("7.0.0-beta.0", "function _classPrivateFieldBase(e,t){if(!{}.hasOwnProperty.call(e,t))throw new TypeError(\"attempted to use private field on non-instance\");return e}", {
      globals: ["TypeError"],
      locals: {
        _classPrivateFieldBase: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_classPrivateFieldBase",
      dependencies: {}
    }),
    classPrivateFieldLooseKey: helper("7.0.0-beta.0", "var id=0;function _classPrivateFieldKey(e){return\"__private_\"+id+++\"_\"+e}", {
      globals: [],
      locals: {
        id: ["body.0.declarations.0.id", "body.1.body.body.0.argument.left.left.right.argument", "body.1.body.body.0.argument.left.left.right.argument"],
        _classPrivateFieldKey: ["body.1.id"]
      },
      exportBindingAssignments: [],
      exportName: "_classPrivateFieldKey",
      dependencies: {}
    }),
    classPrivateFieldSet2: helper("7.24.0", "function _classPrivateFieldSet2(s,a,r){return s.set(assertClassBrand(s,a),r),r}", {
      globals: [],
      locals: {
        _classPrivateFieldSet2: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_classPrivateFieldSet2",
      dependencies: {
        assertClassBrand: ["body.0.body.body.0.argument.expressions.0.arguments.0.callee"]
      }
    }),
    classPrivateGetter: helper("7.24.0", "function _classPrivateGetter(s,r,a){return a(assertClassBrand(s,r))}", {
      globals: [],
      locals: {
        _classPrivateGetter: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_classPrivateGetter",
      dependencies: {
        assertClassBrand: ["body.0.body.body.0.argument.arguments.0.callee"]
      }
    }),
    classPrivateMethodInitSpec: helper("7.14.1", "function _classPrivateMethodInitSpec(e,a){checkPrivateRedeclaration(e,a),a.add(e)}", {
      globals: [],
      locals: {
        _classPrivateMethodInitSpec: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_classPrivateMethodInitSpec",
      dependencies: {
        checkPrivateRedeclaration: ["body.0.body.body.0.expression.expressions.0.callee"]
      }
    }),
    classPrivateSetter: helper("7.24.0", "function _classPrivateSetter(s,r,a,t){return r(assertClassBrand(s,a),t),t}", {
      globals: [],
      locals: {
        _classPrivateSetter: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_classPrivateSetter",
      dependencies: {
        assertClassBrand: ["body.0.body.body.0.argument.expressions.0.arguments.0.callee"]
      }
    }),
    classStaticPrivateMethodGet: helper("7.3.2", "function _classStaticPrivateMethodGet(s,a,t){return assertClassBrand(a,s),t}", {
      globals: [],
      locals: {
        _classStaticPrivateMethodGet: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_classStaticPrivateMethodGet",
      dependencies: {
        assertClassBrand: ["body.0.body.body.0.argument.expressions.0.callee"]
      }
    }),
    construct: helper("7.0.0-beta.0", "function _construct(t,e,r){if(isNativeReflectConstruct())return Reflect.construct.apply(null,arguments);var o=[null];o.push.apply(o,e);var p=new(t.bind.apply(t,o));return r&&setPrototypeOf(p,r.prototype),p}", {
      globals: ["Reflect"],
      locals: {
        _construct: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_construct",
      dependencies: {
        isNativeReflectConstruct: ["body.0.body.body.0.test.callee"],
        setPrototypeOf: ["body.0.body.body.4.argument.expressions.0.right.callee"]
      }
    }),
    createClass: helper("7.0.0-beta.0", "function _defineProperties(e,r){for(var t=0;t<r.length;t++){var o=r[t];o.enumerable=o.enumerable||!1,o.configurable=!0,\"value\"in o&&(o.writable=!0),Object.defineProperty(e,toPropertyKey(o.key),o)}}function _createClass(e,r,t){return r&&_defineProperties(e.prototype,r),t&&_defineProperties(e,t),Object.defineProperty(e,\"prototype\",{writable:!1}),e}", {
      globals: ["Object"],
      locals: {
        _defineProperties: ["body.0.id", "body.1.body.body.0.argument.expressions.0.right.callee", "body.1.body.body.0.argument.expressions.1.right.callee"],
        _createClass: ["body.1.id"]
      },
      exportBindingAssignments: [],
      exportName: "_createClass",
      dependencies: {
        toPropertyKey: ["body.0.body.body.0.body.body.1.expression.expressions.3.arguments.1.callee"]
      }
    }),
    createForOfIteratorHelper: helper("7.9.0", "function _createForOfIteratorHelper(r,e){var t=\"undefined\"!=typeof Symbol&&r[Symbol.iterator]||r[\"@@iterator\"];if(!t){if(Array.isArray(r)||(t=unsupportedIterableToArray(r))||e&&r&&\"number\"==typeof r.length){t&&(r=t);var n=0,F=function(){};return{s:F,n:function(){return n>=r.length?{done:!0}:{done:!1,value:r[n++]}},e:function(r){throw r},f:F}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var o,a=!0,u=!1;return{s:function(){t=t.call(r)},n:function(){var r=t.next();return a=r.done,r},e:function(r){u=!0,o=r},f:function(){try{a||null==t.return||t.return()}finally{if(u)throw o}}}}", {
      globals: ["Symbol", "Array", "TypeError"],
      locals: {
        _createForOfIteratorHelper: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_createForOfIteratorHelper",
      dependencies: {
        unsupportedIterableToArray: ["body.0.body.body.1.consequent.body.0.test.left.right.right.callee"]
      }
    }),
    createForOfIteratorHelperLoose: helper("7.9.0", "function _createForOfIteratorHelperLoose(r,e){var t=\"undefined\"!=typeof Symbol&&r[Symbol.iterator]||r[\"@@iterator\"];if(t)return(t=t.call(r)).next.bind(t);if(Array.isArray(r)||(t=unsupportedIterableToArray(r))||e&&r&&\"number\"==typeof r.length){t&&(r=t);var o=0;return function(){return o>=r.length?{done:!0}:{done:!1,value:r[o++]}}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}", {
      globals: ["Symbol", "Array", "TypeError"],
      locals: {
        _createForOfIteratorHelperLoose: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_createForOfIteratorHelperLoose",
      dependencies: {
        unsupportedIterableToArray: ["body.0.body.body.2.test.left.right.right.callee"]
      }
    }),
    createSuper: helper("7.9.0", "function _createSuper(t){var r=isNativeReflectConstruct();return function(){var e,o=getPrototypeOf(t);if(r){var s=getPrototypeOf(this).constructor;e=Reflect.construct(o,arguments,s)}else e=o.apply(this,arguments);return possibleConstructorReturn(this,e)}}", {
      globals: ["Reflect"],
      locals: {
        _createSuper: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_createSuper",
      dependencies: {
        getPrototypeOf: ["body.0.body.body.1.argument.body.body.0.declarations.1.init.callee", "body.0.body.body.1.argument.body.body.1.consequent.body.0.declarations.0.init.object.callee"],
        isNativeReflectConstruct: ["body.0.body.body.0.declarations.0.init.callee"],
        possibleConstructorReturn: ["body.0.body.body.1.argument.body.body.2.argument.callee"]
      }
    }),
    decorate: helper("7.1.5", "function _decorate(e,r,t,i){var o=_getDecoratorsApi();if(i)for(var n=0;n<i.length;n++)o=i[n](o);var s=r((function(e){o.initializeInstanceElements(e,a.elements)}),t),a=o.decorateClass(_coalesceClassElements(s.d.map(_createElementDescriptor)),e);return o.initializeClassElements(s.F,a.elements),o.runClassFinishers(s.F,a.finishers)}function _getDecoratorsApi(){_getDecoratorsApi=function(){return e};var e={elementsDefinitionOrder:[[\"method\"],[\"field\"]],initializeInstanceElements:function(e,r){[\"method\",\"field\"].forEach((function(t){r.forEach((function(r){r.kind===t&&\"own\"===r.placement&&this.defineClassElement(e,r)}),this)}),this)},initializeClassElements:function(e,r){var t=e.prototype;[\"method\",\"field\"].forEach((function(i){r.forEach((function(r){var o=r.placement;if(r.kind===i&&(\"static\"===o||\"prototype\"===o)){var n=\"static\"===o?e:t;this.defineClassElement(n,r)}}),this)}),this)},defineClassElement:function(e,r){var t=r.descriptor;if(\"field\"===r.kind){var i=r.initializer;t={enumerable:t.enumerable,writable:t.writable,configurable:t.configurable,value:void 0===i?void 0:i.call(e)}}Object.defineProperty(e,r.key,t)},decorateClass:function(e,r){var t=[],i=[],o={static:[],prototype:[],own:[]};if(e.forEach((function(e){this.addElementPlacement(e,o)}),this),e.forEach((function(e){if(!_hasDecorators(e))return t.push(e);var r=this.decorateElement(e,o);t.push(r.element),t.push.apply(t,r.extras),i.push.apply(i,r.finishers)}),this),!r)return{elements:t,finishers:i};var n=this.decorateConstructor(t,r);return i.push.apply(i,n.finishers),n.finishers=i,n},addElementPlacement:function(e,r,t){var i=r[e.placement];if(!t&&-1!==i.indexOf(e.key))throw new TypeError(\"Duplicated element (\"+e.key+\")\");i.push(e.key)},decorateElement:function(e,r){for(var t=[],i=[],o=e.decorators,n=o.length-1;n>=0;n--){var s=r[e.placement];s.splice(s.indexOf(e.key),1);var a=this.fromElementDescriptor(e),l=this.toElementFinisherExtras((0,o[n])(a)||a);e=l.element,this.addElementPlacement(e,r),l.finisher&&i.push(l.finisher);var c=l.extras;if(c){for(var p=0;p<c.length;p++)this.addElementPlacement(c[p],r);t.push.apply(t,c)}}return{element:e,finishers:i,extras:t}},decorateConstructor:function(e,r){for(var t=[],i=r.length-1;i>=0;i--){var o=this.fromClassDescriptor(e),n=this.toClassDescriptor((0,r[i])(o)||o);if(void 0!==n.finisher&&t.push(n.finisher),void 0!==n.elements){e=n.elements;for(var s=0;s<e.length-1;s++)for(var a=s+1;a<e.length;a++)if(e[s].key===e[a].key&&e[s].placement===e[a].placement)throw new TypeError(\"Duplicated element (\"+e[s].key+\")\")}}return{elements:e,finishers:t}},fromElementDescriptor:function(e){var r={kind:e.kind,key:e.key,placement:e.placement,descriptor:e.descriptor};return Object.defineProperty(r,Symbol.toStringTag,{value:\"Descriptor\",configurable:!0}),\"field\"===e.kind&&(r.initializer=e.initializer),r},toElementDescriptors:function(e){if(void 0!==e)return toArray(e).map((function(e){var r=this.toElementDescriptor(e);return this.disallowProperty(e,\"finisher\",\"An element descriptor\"),this.disallowProperty(e,\"extras\",\"An element descriptor\"),r}),this)},toElementDescriptor:function(e){var r=e.kind+\"\";if(\"method\"!==r&&\"field\"!==r)throw new TypeError('An element descriptor\\'s .kind property must be either \"method\" or \"field\", but a decorator created an element descriptor with .kind \"'+r+'\"');var t=toPropertyKey(e.key),i=e.placement+\"\";if(\"static\"!==i&&\"prototype\"!==i&&\"own\"!==i)throw new TypeError('An element descriptor\\'s .placement property must be one of \"static\", \"prototype\" or \"own\", but a decorator created an element descriptor with .placement \"'+i+'\"');var o=e.descriptor;this.disallowProperty(e,\"elements\",\"An element descriptor\");var n={kind:r,key:t,placement:i,descriptor:Object.assign({},o)};return\"field\"!==r?this.disallowProperty(e,\"initializer\",\"A method descriptor\"):(this.disallowProperty(o,\"get\",\"The property descriptor of a field descriptor\"),this.disallowProperty(o,\"set\",\"The property descriptor of a field descriptor\"),this.disallowProperty(o,\"value\",\"The property descriptor of a field descriptor\"),n.initializer=e.initializer),n},toElementFinisherExtras:function(e){return{element:this.toElementDescriptor(e),finisher:_optionalCallableProperty(e,\"finisher\"),extras:this.toElementDescriptors(e.extras)}},fromClassDescriptor:function(e){var r={kind:\"class\",elements:e.map(this.fromElementDescriptor,this)};return Object.defineProperty(r,Symbol.toStringTag,{value:\"Descriptor\",configurable:!0}),r},toClassDescriptor:function(e){var r=e.kind+\"\";if(\"class\"!==r)throw new TypeError('A class descriptor\\'s .kind property must be \"class\", but a decorator created a class descriptor with .kind \"'+r+'\"');this.disallowProperty(e,\"key\",\"A class descriptor\"),this.disallowProperty(e,\"placement\",\"A class descriptor\"),this.disallowProperty(e,\"descriptor\",\"A class descriptor\"),this.disallowProperty(e,\"initializer\",\"A class descriptor\"),this.disallowProperty(e,\"extras\",\"A class descriptor\");var t=_optionalCallableProperty(e,\"finisher\");return{elements:this.toElementDescriptors(e.elements),finisher:t}},runClassFinishers:function(e,r){for(var t=0;t<r.length;t++){var i=(0,r[t])(e);if(void 0!==i){if(\"function\"!=typeof i)throw new TypeError(\"Finishers must return a constructor.\");e=i}}return e},disallowProperty:function(e,r,t){if(void 0!==e[r])throw new TypeError(t+\" can't have a .\"+r+\" property.\")}};return e}function _createElementDescriptor(e){var r,t=toPropertyKey(e.key);\"method\"===e.kind?r={value:e.value,writable:!0,configurable:!0,enumerable:!1}:\"get\"===e.kind?r={get:e.value,configurable:!0,enumerable:!1}:\"set\"===e.kind?r={set:e.value,configurable:!0,enumerable:!1}:\"field\"===e.kind&&(r={configurable:!0,writable:!0,enumerable:!0});var i={kind:\"field\"===e.kind?\"field\":\"method\",key:t,placement:e.static?\"static\":\"field\"===e.kind?\"own\":\"prototype\",descriptor:r};return e.decorators&&(i.decorators=e.decorators),\"field\"===e.kind&&(i.initializer=e.value),i}function _coalesceGetterSetter(e,r){void 0!==e.descriptor.get?r.descriptor.get=e.descriptor.get:r.descriptor.set=e.descriptor.set}function _coalesceClassElements(e){for(var r=[],isSameElement=function(e){return\"method\"===e.kind&&e.key===o.key&&e.placement===o.placement},t=0;t<e.length;t++){var i,o=e[t];if(\"method\"===o.kind&&(i=r.find(isSameElement)))if(_isDataDescriptor(o.descriptor)||_isDataDescriptor(i.descriptor)){if(_hasDecorators(o)||_hasDecorators(i))throw new ReferenceError(\"Duplicated methods (\"+o.key+\") can't be decorated.\");i.descriptor=o.descriptor}else{if(_hasDecorators(o)){if(_hasDecorators(i))throw new ReferenceError(\"Decorators can't be placed on different accessors with for the same property (\"+o.key+\").\");i.decorators=o.decorators}_coalesceGetterSetter(o,i)}else r.push(o)}return r}function _hasDecorators(e){return e.decorators&&e.decorators.length}function _isDataDescriptor(e){return void 0!==e&&!(void 0===e.value&&void 0===e.writable)}function _optionalCallableProperty(e,r){var t=e[r];if(void 0!==t&&\"function\"!=typeof t)throw new TypeError(\"Expected '\"+r+\"' to be a function\");return t}", {
      globals: ["Object", "TypeError", "Symbol", "ReferenceError"],
      locals: {
        _decorate: ["body.0.id"],
        _getDecoratorsApi: ["body.1.id", "body.0.body.body.0.declarations.0.init.callee", "body.1.body.body.0.expression.left"],
        _createElementDescriptor: ["body.2.id", "body.0.body.body.2.declarations.1.init.arguments.0.arguments.0.arguments.0"],
        _coalesceGetterSetter: ["body.3.id", "body.4.body.body.0.body.body.1.consequent.alternate.body.1.expression.callee"],
        _coalesceClassElements: ["body.4.id", "body.0.body.body.2.declarations.1.init.arguments.0.callee"],
        _hasDecorators: ["body.5.id", "body.1.body.body.1.declarations.0.init.properties.4.value.body.body.1.test.expressions.1.arguments.0.body.body.0.test.argument.callee", "body.4.body.body.0.body.body.1.consequent.consequent.body.0.test.left.callee", "body.4.body.body.0.body.body.1.consequent.consequent.body.0.test.right.callee", "body.4.body.body.0.body.body.1.consequent.alternate.body.0.test.callee", "body.4.body.body.0.body.body.1.consequent.alternate.body.0.consequent.body.0.test.callee"],
        _isDataDescriptor: ["body.6.id", "body.4.body.body.0.body.body.1.consequent.test.left.callee", "body.4.body.body.0.body.body.1.consequent.test.right.callee"],
        _optionalCallableProperty: ["body.7.id", "body.1.body.body.1.declarations.0.init.properties.11.value.body.body.0.argument.properties.1.value.callee", "body.1.body.body.1.declarations.0.init.properties.13.value.body.body.3.declarations.0.init.callee"]
      },
      exportBindingAssignments: [],
      exportName: "_decorate",
      dependencies: {
        toArray: ["body.1.body.body.1.declarations.0.init.properties.9.value.body.body.0.consequent.argument.callee.object.callee"],
        toPropertyKey: ["body.1.body.body.1.declarations.0.init.properties.10.value.body.body.2.declarations.0.init.callee", "body.2.body.body.0.declarations.1.init.callee"]
      }
    }),
    defaults: helper("7.0.0-beta.0", "function _defaults(e,r){for(var t=Object.getOwnPropertyNames(r),o=0;o<t.length;o++){var n=t[o],a=Object.getOwnPropertyDescriptor(r,n);a&&a.configurable&&void 0===e[n]&&Object.defineProperty(e,n,a)}return e}", {
      globals: ["Object"],
      locals: {
        _defaults: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_defaults",
      dependencies: {}
    }),
    defineAccessor: helper("7.20.7", "function _defineAccessor(e,r,n,t){var c={configurable:!0,enumerable:!0};return c[e]=t,Object.defineProperty(r,n,c)}", {
      globals: ["Object"],
      locals: {
        _defineAccessor: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_defineAccessor",
      dependencies: {}
    }),
    defineProperty: helper("7.0.0-beta.0", "function _defineProperty(e,r,t){return(r=toPropertyKey(r))in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}", {
      globals: ["Object"],
      locals: {
        _defineProperty: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_defineProperty",
      dependencies: {
        toPropertyKey: ["body.0.body.body.0.argument.expressions.0.test.left.right.callee"]
      }
    }),
    extends: helper("7.0.0-beta.0", "function _extends(){return _extends=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)({}).hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},_extends.apply(null,arguments)}", {
      globals: ["Object"],
      locals: {
        _extends: ["body.0.id", "body.0.body.body.0.argument.expressions.1.callee.object", "body.0.body.body.0.argument.expressions.0.left"]
      },
      exportBindingAssignments: ["body.0.body.body.0.argument.expressions.0"],
      exportName: "_extends",
      dependencies: {}
    }),
    get: helper("7.0.0-beta.0", "function _get(){return _get=\"undefined\"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,r){var p=superPropBase(e,t);if(p){var n=Object.getOwnPropertyDescriptor(p,t);return n.get?n.get.call(arguments.length<3?e:r):n.value}},_get.apply(null,arguments)}", {
      globals: ["Reflect", "Object"],
      locals: {
        _get: ["body.0.id", "body.0.body.body.0.argument.expressions.1.callee.object", "body.0.body.body.0.argument.expressions.0.left"]
      },
      exportBindingAssignments: ["body.0.body.body.0.argument.expressions.0"],
      exportName: "_get",
      dependencies: {
        superPropBase: ["body.0.body.body.0.argument.expressions.0.right.alternate.body.body.0.declarations.0.init.callee"]
      }
    }),
    getPrototypeOf: helper("7.0.0-beta.0", "function _getPrototypeOf(t){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},_getPrototypeOf(t)}", {
      globals: ["Object"],
      locals: {
        _getPrototypeOf: ["body.0.id", "body.0.body.body.0.argument.expressions.1.callee", "body.0.body.body.0.argument.expressions.0.left"]
      },
      exportBindingAssignments: ["body.0.body.body.0.argument.expressions.0"],
      exportName: "_getPrototypeOf",
      dependencies: {}
    }),
    identity: helper("7.17.0", "function _identity(t){return t}", {
      globals: [],
      locals: {
        _identity: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_identity",
      dependencies: {}
    }),
    importDeferProxy: helper("7.23.0", "function _importDeferProxy(e){var t=null,constValue=function(e){return function(){return e}},proxy=function(r){return function(n,o,f){return null===t&&(t=e()),r(t,o,f)}};return new Proxy({},{defineProperty:constValue(!1),deleteProperty:constValue(!1),get:proxy(Reflect.get),getOwnPropertyDescriptor:proxy(Reflect.getOwnPropertyDescriptor),getPrototypeOf:constValue(null),isExtensible:constValue(!1),has:proxy(Reflect.has),ownKeys:proxy(Reflect.ownKeys),preventExtensions:constValue(!0),set:constValue(!1),setPrototypeOf:constValue(!1)})}", {
      globals: ["Proxy", "Reflect"],
      locals: {
        _importDeferProxy: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_importDeferProxy",
      dependencies: {}
    }),
    inherits: helper("7.0.0-beta.0", "function _inherits(t,e){if(\"function\"!=typeof e&&null!==e)throw new TypeError(\"Super expression must either be null or a function\");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,\"prototype\",{writable:!1}),e&&setPrototypeOf(t,e)}", {
      globals: ["TypeError", "Object"],
      locals: {
        _inherits: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_inherits",
      dependencies: {
        setPrototypeOf: ["body.0.body.body.1.expression.expressions.2.right.callee"]
      }
    }),
    inheritsLoose: helper("7.0.0-beta.0", "function _inheritsLoose(t,o){t.prototype=Object.create(o.prototype),t.prototype.constructor=t,setPrototypeOf(t,o)}", {
      globals: ["Object"],
      locals: {
        _inheritsLoose: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_inheritsLoose",
      dependencies: {
        setPrototypeOf: ["body.0.body.body.0.expression.expressions.2.callee"]
      }
    }),
    initializerDefineProperty: helper("7.0.0-beta.0", "function _initializerDefineProperty(e,i,r,l){r&&Object.defineProperty(e,i,{enumerable:r.enumerable,configurable:r.configurable,writable:r.writable,value:r.initializer?r.initializer.call(l):void 0})}", {
      globals: ["Object"],
      locals: {
        _initializerDefineProperty: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_initializerDefineProperty",
      dependencies: {}
    }),
    initializerWarningHelper: helper("7.0.0-beta.0", "function _initializerWarningHelper(r,e){throw Error(\"Decorating class property failed. Please ensure that transform-class-properties is enabled and runs after the decorators transform.\")}", {
      globals: ["Error"],
      locals: {
        _initializerWarningHelper: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_initializerWarningHelper",
      dependencies: {}
    }),
    instanceof: helper("7.0.0-beta.0", "function _instanceof(n,e){return null!=e&&\"undefined\"!=typeof Symbol&&e[Symbol.hasInstance]?!!e[Symbol.hasInstance](n):n instanceof e}", {
      globals: ["Symbol"],
      locals: {
        _instanceof: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_instanceof",
      dependencies: {}
    }),
    interopRequireDefault: helper("7.0.0-beta.0", "function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}", {
      globals: [],
      locals: {
        _interopRequireDefault: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_interopRequireDefault",
      dependencies: {}
    }),
    interopRequireWildcard: helper("7.14.0", "function _getRequireWildcardCache(e){if(\"function\"!=typeof WeakMap)return null;var r=new WeakMap,t=new WeakMap;return(_getRequireWildcardCache=function(e){return e?t:r})(e)}function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||\"object\"!=typeof e&&\"function\"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if(\"default\"!==u&&{}.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u]}return n.default=e,t&&t.set(e,n),n}", {
      globals: ["WeakMap", "Object"],
      locals: {
        _getRequireWildcardCache: ["body.0.id", "body.1.body.body.2.declarations.0.init.callee", "body.0.body.body.2.argument.callee.left"],
        _interopRequireWildcard: ["body.1.id"]
      },
      exportBindingAssignments: [],
      exportName: "_interopRequireWildcard",
      dependencies: {}
    }),
    isNativeFunction: helper("7.0.0-beta.0", "function _isNativeFunction(t){try{return-1!==Function.toString.call(t).indexOf(\"[native code]\")}catch(n){return\"function\"==typeof t}}", {
      globals: ["Function"],
      locals: {
        _isNativeFunction: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_isNativeFunction",
      dependencies: {}
    }),
    isNativeReflectConstruct: helper("7.9.0", "function _isNativeReflectConstruct(){try{var t=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(t){}return(_isNativeReflectConstruct=function(){return!!t})()}", {
      globals: ["Boolean", "Reflect"],
      locals: {
        _isNativeReflectConstruct: ["body.0.id", "body.0.body.body.1.argument.callee.left"]
      },
      exportBindingAssignments: ["body.0.body.body.1.argument.callee"],
      exportName: "_isNativeReflectConstruct",
      dependencies: {}
    }),
    iterableToArray: helper("7.0.0-beta.0", "function _iterableToArray(r){if(\"undefined\"!=typeof Symbol&&null!=r[Symbol.iterator]||null!=r[\"@@iterator\"])return Array.from(r)}", {
      globals: ["Symbol", "Array"],
      locals: {
        _iterableToArray: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_iterableToArray",
      dependencies: {}
    }),
    iterableToArrayLimit: helper("7.0.0-beta.0", "function _iterableToArrayLimit(r,l){var t=null==r?null:\"undefined\"!=typeof Symbol&&r[Symbol.iterator]||r[\"@@iterator\"];if(null!=t){var e,n,i,u,a=[],f=!0,o=!1;try{if(i=(t=t.call(r)).next,0===l){if(Object(t)!==t)return;f=!1}else for(;!(f=(e=i.call(t)).done)&&(a.push(e.value),a.length!==l);f=!0);}catch(r){o=!0,n=r}finally{try{if(!f&&null!=t.return&&(u=t.return(),Object(u)!==u))return}finally{if(o)throw n}}return a}}", {
      globals: ["Symbol", "Object"],
      locals: {
        _iterableToArrayLimit: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_iterableToArrayLimit",
      dependencies: {}
    }),
    jsx: helper("7.0.0-beta.0", "var REACT_ELEMENT_TYPE;function _createRawReactElement(e,r,E,l){REACT_ELEMENT_TYPE||(REACT_ELEMENT_TYPE=\"function\"==typeof Symbol&&Symbol.for&&Symbol.for(\"react.element\")||60103);var o=e&&e.defaultProps,n=arguments.length-3;if(r||0===n||(r={children:void 0}),1===n)r.children=l;else if(n>1){for(var t=Array(n),f=0;f<n;f++)t[f]=arguments[f+3];r.children=t}if(r&&o)for(var i in o)void 0===r[i]&&(r[i]=o[i]);else r||(r=o||{});return{$$typeof:REACT_ELEMENT_TYPE,type:e,key:void 0===E?null:\"\"+E,ref:null,props:r,_owner:null}}", {
      globals: ["Symbol", "Array"],
      locals: {
        REACT_ELEMENT_TYPE: ["body.0.declarations.0.id", "body.1.body.body.0.expression.left", "body.1.body.body.4.argument.properties.0.value", "body.1.body.body.0.expression.right.left"],
        _createRawReactElement: ["body.1.id"]
      },
      exportBindingAssignments: [],
      exportName: "_createRawReactElement",
      dependencies: {}
    }),
    maybeArrayLike: helper("7.9.0", "function _maybeArrayLike(r,a,e){if(a&&!Array.isArray(a)&&\"number\"==typeof a.length){var y=a.length;return arrayLikeToArray(a,void 0!==e&&e<y?e:y)}return r(a,e)}", {
      globals: ["Array"],
      locals: {
        _maybeArrayLike: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_maybeArrayLike",
      dependencies: {
        arrayLikeToArray: ["body.0.body.body.0.consequent.body.1.argument.callee"]
      }
    }),
    newArrowCheck: helper("7.0.0-beta.0", "function _newArrowCheck(n,r){if(n!==r)throw new TypeError(\"Cannot instantiate an arrow function\")}", {
      globals: ["TypeError"],
      locals: {
        _newArrowCheck: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_newArrowCheck",
      dependencies: {}
    }),
    nonIterableRest: helper("7.0.0-beta.0", "function _nonIterableRest(){throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}", {
      globals: ["TypeError"],
      locals: {
        _nonIterableRest: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_nonIterableRest",
      dependencies: {}
    }),
    nonIterableSpread: helper("7.0.0-beta.0", "function _nonIterableSpread(){throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}", {
      globals: ["TypeError"],
      locals: {
        _nonIterableSpread: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_nonIterableSpread",
      dependencies: {}
    }),
    nullishReceiverError: helper("7.22.6", "function _nullishReceiverError(r){throw new TypeError(\"Cannot set property of null or undefined.\")}", {
      globals: ["TypeError"],
      locals: {
        _nullishReceiverError: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_nullishReceiverError",
      dependencies: {}
    }),
    objectDestructuringEmpty: helper("7.0.0-beta.0", "function _objectDestructuringEmpty(t){if(null==t)throw new TypeError(\"Cannot destructure \"+t)}", {
      globals: ["TypeError"],
      locals: {
        _objectDestructuringEmpty: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_objectDestructuringEmpty",
      dependencies: {}
    }),
    objectSpread2: helper("7.5.0", "function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread2(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}", {
      globals: ["Object"],
      locals: {
        ownKeys: ["body.0.id", "body.1.body.body.0.body.body.1.expression.consequent.callee.object.callee", "body.1.body.body.0.body.body.1.expression.alternate.alternate.callee.object.callee"],
        _objectSpread2: ["body.1.id"]
      },
      exportBindingAssignments: [],
      exportName: "_objectSpread2",
      dependencies: {
        defineProperty: ["body.1.body.body.0.body.body.1.expression.consequent.arguments.0.body.body.0.expression.callee"]
      }
    }),
    objectWithoutProperties: helper("7.0.0-beta.0", "function _objectWithoutProperties(e,t){if(null==e)return{};var o,r,i=objectWithoutPropertiesLoose(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)o=s[r],t.includes(o)||{}.propertyIsEnumerable.call(e,o)&&(i[o]=e[o])}return i}", {
      globals: ["Object"],
      locals: {
        _objectWithoutProperties: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_objectWithoutProperties",
      dependencies: {
        objectWithoutPropertiesLoose: ["body.0.body.body.1.declarations.2.init.callee"]
      }
    }),
    objectWithoutPropertiesLoose: helper("7.0.0-beta.0", "function _objectWithoutPropertiesLoose(r,e){if(null==r)return{};var t={};for(var n in r)if({}.hasOwnProperty.call(r,n)){if(e.includes(n))continue;t[n]=r[n]}return t}", {
      globals: [],
      locals: {
        _objectWithoutPropertiesLoose: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_objectWithoutPropertiesLoose",
      dependencies: {}
    }),
    possibleConstructorReturn: helper("7.0.0-beta.0", "function _possibleConstructorReturn(t,e){if(e&&(\"object\"==typeof e||\"function\"==typeof e))return e;if(void 0!==e)throw new TypeError(\"Derived constructors may only return object or undefined\");return assertThisInitialized(t)}", {
      globals: ["TypeError"],
      locals: {
        _possibleConstructorReturn: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_possibleConstructorReturn",
      dependencies: {
        assertThisInitialized: ["body.0.body.body.2.argument.callee"]
      }
    }),
    readOnlyError: helper("7.0.0-beta.0", "function _readOnlyError(r){throw new TypeError('\"'+r+'\" is read-only')}", {
      globals: ["TypeError"],
      locals: {
        _readOnlyError: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_readOnlyError",
      dependencies: {}
    }),
    regeneratorRuntime: helper("7.18.0", "function _regeneratorRuntime(){\"use strict\";\n/*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */_regeneratorRuntime=function(){return e};var t,e={},r=Object.prototype,n=r.hasOwnProperty,o=Object.defineProperty||function(t,e,r){t[e]=r.value},i=\"function\"==typeof Symbol?Symbol:{},a=i.iterator||\"@@iterator\",c=i.asyncIterator||\"@@asyncIterator\",u=i.toStringTag||\"@@toStringTag\";function define(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{define({},\"\")}catch(t){define=function(t,e,r){return t[e]=r}}function wrap(t,e,r,n){var i=e&&e.prototype instanceof Generator?e:Generator,a=Object.create(i.prototype),c=new Context(n||[]);return o(a,\"_invoke\",{value:makeInvokeMethod(t,r,c)}),a}function tryCatch(t,e,r){try{return{type:\"normal\",arg:t.call(e,r)}}catch(t){return{type:\"throw\",arg:t}}}e.wrap=wrap;var h=\"suspendedStart\",l=\"suspendedYield\",f=\"executing\",s=\"completed\",y={};function Generator(){}function GeneratorFunction(){}function GeneratorFunctionPrototype(){}var p={};define(p,a,(function(){return this}));var d=Object.getPrototypeOf,v=d&&d(d(values([])));v&&v!==r&&n.call(v,a)&&(p=v);var g=GeneratorFunctionPrototype.prototype=Generator.prototype=Object.create(p);function defineIteratorMethods(t){[\"next\",\"throw\",\"return\"].forEach((function(e){define(t,e,(function(t){return this._invoke(e,t)}))}))}function AsyncIterator(t,e){function invoke(r,o,i,a){var c=tryCatch(t[r],t,o);if(\"throw\"!==c.type){var u=c.arg,h=u.value;return h&&\"object\"==typeof h&&n.call(h,\"__await\")?e.resolve(h.__await).then((function(t){invoke(\"next\",t,i,a)}),(function(t){invoke(\"throw\",t,i,a)})):e.resolve(h).then((function(t){u.value=t,i(u)}),(function(t){return invoke(\"throw\",t,i,a)}))}a(c.arg)}var r;o(this,\"_invoke\",{value:function(t,n){function callInvokeWithMethodAndArg(){return new e((function(e,r){invoke(t,n,e,r)}))}return r=r?r.then(callInvokeWithMethodAndArg,callInvokeWithMethodAndArg):callInvokeWithMethodAndArg()}})}function makeInvokeMethod(e,r,n){var o=h;return function(i,a){if(o===f)throw Error(\"Generator is already running\");if(o===s){if(\"throw\"===i)throw a;return{value:t,done:!0}}for(n.method=i,n.arg=a;;){var c=n.delegate;if(c){var u=maybeInvokeDelegate(c,n);if(u){if(u===y)continue;return u}}if(\"next\"===n.method)n.sent=n._sent=n.arg;else if(\"throw\"===n.method){if(o===h)throw o=s,n.arg;n.dispatchException(n.arg)}else\"return\"===n.method&&n.abrupt(\"return\",n.arg);o=f;var p=tryCatch(e,r,n);if(\"normal\"===p.type){if(o=n.done?s:l,p.arg===y)continue;return{value:p.arg,done:n.done}}\"throw\"===p.type&&(o=s,n.method=\"throw\",n.arg=p.arg)}}}function maybeInvokeDelegate(e,r){var n=r.method,o=e.iterator[n];if(o===t)return r.delegate=null,\"throw\"===n&&e.iterator.return&&(r.method=\"return\",r.arg=t,maybeInvokeDelegate(e,r),\"throw\"===r.method)||\"return\"!==n&&(r.method=\"throw\",r.arg=new TypeError(\"The iterator does not provide a '\"+n+\"' method\")),y;var i=tryCatch(o,e.iterator,r.arg);if(\"throw\"===i.type)return r.method=\"throw\",r.arg=i.arg,r.delegate=null,y;var a=i.arg;return a?a.done?(r[e.resultName]=a.value,r.next=e.nextLoc,\"return\"!==r.method&&(r.method=\"next\",r.arg=t),r.delegate=null,y):a:(r.method=\"throw\",r.arg=new TypeError(\"iterator result is not an object\"),r.delegate=null,y)}function pushTryEntry(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function resetTryEntry(t){var e=t.completion||{};e.type=\"normal\",delete e.arg,t.completion=e}function Context(t){this.tryEntries=[{tryLoc:\"root\"}],t.forEach(pushTryEntry,this),this.reset(!0)}function values(e){if(e||\"\"===e){var r=e[a];if(r)return r.call(e);if(\"function\"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,i=function next(){for(;++o<e.length;)if(n.call(e,o))return next.value=e[o],next.done=!1,next;return next.value=t,next.done=!0,next};return i.next=i}}throw new TypeError(typeof e+\" is not iterable\")}return GeneratorFunction.prototype=GeneratorFunctionPrototype,o(g,\"constructor\",{value:GeneratorFunctionPrototype,configurable:!0}),o(GeneratorFunctionPrototype,\"constructor\",{value:GeneratorFunction,configurable:!0}),GeneratorFunction.displayName=define(GeneratorFunctionPrototype,u,\"GeneratorFunction\"),e.isGeneratorFunction=function(t){var e=\"function\"==typeof t&&t.constructor;return!!e&&(e===GeneratorFunction||\"GeneratorFunction\"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,GeneratorFunctionPrototype):(t.__proto__=GeneratorFunctionPrototype,define(t,u,\"GeneratorFunction\")),t.prototype=Object.create(g),t},e.awrap=function(t){return{__await:t}},defineIteratorMethods(AsyncIterator.prototype),define(AsyncIterator.prototype,c,(function(){return this})),e.AsyncIterator=AsyncIterator,e.async=function(t,r,n,o,i){void 0===i&&(i=Promise);var a=new AsyncIterator(wrap(t,r,n,o),i);return e.isGeneratorFunction(r)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},defineIteratorMethods(g),define(g,u,\"Generator\"),define(g,a,(function(){return this})),define(g,\"toString\",(function(){return\"[object Generator]\"})),e.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function next(){for(;r.length;){var t=r.pop();if(t in e)return next.value=t,next.done=!1,next}return next.done=!0,next}},e.values=values,Context.prototype={constructor:Context,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method=\"next\",this.arg=t,this.tryEntries.forEach(resetTryEntry),!e)for(var r in this)\"t\"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if(\"throw\"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function handle(n,o){return a.type=\"throw\",a.arg=e,r.next=n,o&&(r.method=\"next\",r.arg=t),!!o}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if(\"root\"===i.tryLoc)return handle(\"end\");if(i.tryLoc<=this.prev){var c=n.call(i,\"catchLoc\"),u=n.call(i,\"finallyLoc\");if(c&&u){if(this.prev<i.catchLoc)return handle(i.catchLoc,!0);if(this.prev<i.finallyLoc)return handle(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return handle(i.catchLoc,!0)}else{if(!u)throw Error(\"try statement without catch or finally\");if(this.prev<i.finallyLoc)return handle(i.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,\"finallyLoc\")&&this.prev<o.finallyLoc){var i=o;break}}i&&(\"break\"===t||\"continue\"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=e,i?(this.method=\"next\",this.next=i.finallyLoc,y):this.complete(a)},complete:function(t,e){if(\"throw\"===t.type)throw t.arg;return\"break\"===t.type||\"continue\"===t.type?this.next=t.arg:\"return\"===t.type?(this.rval=this.arg=t.arg,this.method=\"return\",this.next=\"end\"):\"normal\"===t.type&&e&&(this.next=e),y},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),resetTryEntry(r),y}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if(\"throw\"===n.type){var o=n.arg;resetTryEntry(r)}return o}}throw Error(\"illegal catch attempt\")},delegateYield:function(e,r,n){return this.delegate={iterator:values(e),resultName:r,nextLoc:n},\"next\"===this.method&&(this.arg=t),y}},e}", {
      globals: ["Object", "Symbol", "Error", "TypeError", "isNaN", "Promise"],
      locals: {
        _regeneratorRuntime: ["body.0.id", "body.0.body.body.0.expression.left"]
      },
      exportBindingAssignments: ["body.0.body.body.0.expression"],
      exportName: "_regeneratorRuntime",
      dependencies: {}
    }),
    set: helper("7.0.0-beta.0", "function set(e,r,t,o){return set=\"undefined\"!=typeof Reflect&&Reflect.set?Reflect.set:function(e,r,t,o){var f,i=superPropBase(e,r);if(i){if((f=Object.getOwnPropertyDescriptor(i,r)).set)return f.set.call(o,t),!0;if(!f.writable)return!1}if(f=Object.getOwnPropertyDescriptor(o,r)){if(!f.writable)return!1;f.value=t,Object.defineProperty(o,r,f)}else defineProperty(o,r,t);return!0},set(e,r,t,o)}function _set(e,r,t,o,f){if(!set(e,r,t,o||e)&&f)throw new TypeError(\"failed to set property\");return t}", {
      globals: ["Reflect", "Object", "TypeError"],
      locals: {
        set: ["body.0.id", "body.0.body.body.0.argument.expressions.1.callee", "body.1.body.body.0.test.left.argument.callee", "body.0.body.body.0.argument.expressions.0.left"],
        _set: ["body.1.id"]
      },
      exportBindingAssignments: [],
      exportName: "_set",
      dependencies: {
        superPropBase: ["body.0.body.body.0.argument.expressions.0.right.alternate.body.body.0.declarations.1.init.callee"],
        defineProperty: ["body.0.body.body.0.argument.expressions.0.right.alternate.body.body.2.alternate.expression.callee"]
      }
    }),
    setFunctionName: helper("7.23.6", "function setFunctionName(e,t,n){\"symbol\"==typeof t&&(t=(t=t.description)?\"[\"+t+\"]\":\"\");try{Object.defineProperty(e,\"name\",{configurable:!0,value:n?n+\" \"+t:t})}catch(e){}return e}", {
      globals: ["Object"],
      locals: {
        setFunctionName: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "setFunctionName",
      dependencies: {}
    }),
    setPrototypeOf: helper("7.0.0-beta.0", "function _setPrototypeOf(t,e){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},_setPrototypeOf(t,e)}", {
      globals: ["Object"],
      locals: {
        _setPrototypeOf: ["body.0.id", "body.0.body.body.0.argument.expressions.1.callee", "body.0.body.body.0.argument.expressions.0.left"]
      },
      exportBindingAssignments: ["body.0.body.body.0.argument.expressions.0"],
      exportName: "_setPrototypeOf",
      dependencies: {}
    }),
    skipFirstGeneratorNext: helper("7.0.0-beta.0", "function _skipFirstGeneratorNext(t){return function(){var r=t.apply(this,arguments);return r.next(),r}}", {
      globals: [],
      locals: {
        _skipFirstGeneratorNext: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_skipFirstGeneratorNext",
      dependencies: {}
    }),
    slicedToArray: helper("7.0.0-beta.0", "function _slicedToArray(r,e){return arrayWithHoles(r)||iterableToArrayLimit(r,e)||unsupportedIterableToArray(r,e)||nonIterableRest()}", {
      globals: [],
      locals: {
        _slicedToArray: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_slicedToArray",
      dependencies: {
        arrayWithHoles: ["body.0.body.body.0.argument.left.left.left.callee"],
        iterableToArrayLimit: ["body.0.body.body.0.argument.left.left.right.callee"],
        unsupportedIterableToArray: ["body.0.body.body.0.argument.left.right.callee"],
        nonIterableRest: ["body.0.body.body.0.argument.right.callee"]
      }
    }),
    superPropBase: helper("7.0.0-beta.0", "function _superPropBase(t,o){for(;!{}.hasOwnProperty.call(t,o)&&null!==(t=getPrototypeOf(t)););return t}", {
      globals: [],
      locals: {
        _superPropBase: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_superPropBase",
      dependencies: {
        getPrototypeOf: ["body.0.body.body.0.test.right.right.right.callee"]
      }
    }),
    superPropGet: helper("7.25.0", "function _superPropertyGet(t,e,r,o){var p=get(getPrototypeOf(1&o?t.prototype:t),e,r);return 2&o?function(t){return p.apply(r,t)}:p}", {
      globals: [],
      locals: {
        _superPropertyGet: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_superPropertyGet",
      dependencies: {
        get: ["body.0.body.body.0.declarations.0.init.callee"],
        getPrototypeOf: ["body.0.body.body.0.declarations.0.init.arguments.0.callee"]
      }
    }),
    superPropSet: helper("7.25.0", "function _superPropertySet(t,e,o,r,p,f){return set(getPrototypeOf(f?t.prototype:t),e,o,r,p)}", {
      globals: [],
      locals: {
        _superPropertySet: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_superPropertySet",
      dependencies: {
        set: ["body.0.body.body.0.argument.callee"],
        getPrototypeOf: ["body.0.body.body.0.argument.arguments.0.callee"]
      }
    }),
    taggedTemplateLiteral: helper("7.0.0-beta.0", "function _taggedTemplateLiteral(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}", {
      globals: ["Object"],
      locals: {
        _taggedTemplateLiteral: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_taggedTemplateLiteral",
      dependencies: {}
    }),
    taggedTemplateLiteralLoose: helper("7.0.0-beta.0", "function _taggedTemplateLiteralLoose(e,t){return t||(t=e.slice(0)),e.raw=t,e}", {
      globals: [],
      locals: {
        _taggedTemplateLiteralLoose: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_taggedTemplateLiteralLoose",
      dependencies: {}
    }),
    tdz: helper("7.5.5", "function _tdzError(e){throw new ReferenceError(e+\" is not defined - temporal dead zone\")}", {
      globals: ["ReferenceError"],
      locals: {
        _tdzError: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_tdzError",
      dependencies: {}
    }),
    temporalRef: helper("7.0.0-beta.0", "function _temporalRef(r,e){return r===undef?err(e):r}", {
      globals: [],
      locals: {
        _temporalRef: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_temporalRef",
      dependencies: {
        temporalUndefined: ["body.0.body.body.0.argument.test.right"],
        tdz: ["body.0.body.body.0.argument.consequent.callee"]
      }
    }),
    temporalUndefined: helper("7.0.0-beta.0", "function _temporalUndefined(){}", {
      globals: [],
      locals: {
        _temporalUndefined: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_temporalUndefined",
      dependencies: {}
    }),
    toArray: helper("7.0.0-beta.0", "function _toArray(r){return arrayWithHoles(r)||iterableToArray(r)||unsupportedIterableToArray(r)||nonIterableRest()}", {
      globals: [],
      locals: {
        _toArray: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_toArray",
      dependencies: {
        arrayWithHoles: ["body.0.body.body.0.argument.left.left.left.callee"],
        iterableToArray: ["body.0.body.body.0.argument.left.left.right.callee"],
        unsupportedIterableToArray: ["body.0.body.body.0.argument.left.right.callee"],
        nonIterableRest: ["body.0.body.body.0.argument.right.callee"]
      }
    }),
    toConsumableArray: helper("7.0.0-beta.0", "function _toConsumableArray(r){return arrayWithoutHoles(r)||iterableToArray(r)||unsupportedIterableToArray(r)||nonIterableSpread()}", {
      globals: [],
      locals: {
        _toConsumableArray: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_toConsumableArray",
      dependencies: {
        arrayWithoutHoles: ["body.0.body.body.0.argument.left.left.left.callee"],
        iterableToArray: ["body.0.body.body.0.argument.left.left.right.callee"],
        unsupportedIterableToArray: ["body.0.body.body.0.argument.left.right.callee"],
        nonIterableSpread: ["body.0.body.body.0.argument.right.callee"]
      }
    }),
    toPrimitive: helper("7.1.5", "function toPrimitive(t,r){if(\"object\"!=typeof t||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||\"default\");if(\"object\"!=typeof i)return i;throw new TypeError(\"@@toPrimitive must return a primitive value.\")}return(\"string\"===r?String:Number)(t)}", {
      globals: ["Symbol", "TypeError", "String", "Number"],
      locals: {
        toPrimitive: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "toPrimitive",
      dependencies: {}
    }),
    toPropertyKey: helper("7.1.5", "function toPropertyKey(t){var i=toPrimitive(t,\"string\");return\"symbol\"==typeof i?i:i+\"\"}", {
      globals: [],
      locals: {
        toPropertyKey: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "toPropertyKey",
      dependencies: {
        toPrimitive: ["body.0.body.body.0.declarations.0.init.callee"]
      }
    }),
    toSetter: helper("7.24.0", "function _toSetter(t,e,n){e||(e=[]);var r=e.length++;return Object.defineProperty({},\"_\",{set:function(o){e[r]=o,t.apply(n,e)}})}", {
      globals: ["Object"],
      locals: {
        _toSetter: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_toSetter",
      dependencies: {}
    }),
    typeof: helper("7.0.0-beta.0", "function _typeof(o){\"@babel/helpers - typeof\";return _typeof=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&\"function\"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?\"symbol\":typeof o},_typeof(o)}", {
      globals: ["Symbol"],
      locals: {
        _typeof: ["body.0.id", "body.0.body.body.0.argument.expressions.1.callee", "body.0.body.body.0.argument.expressions.0.left"]
      },
      exportBindingAssignments: ["body.0.body.body.0.argument.expressions.0"],
      exportName: "_typeof",
      dependencies: {}
    }),
    unsupportedIterableToArray: helper("7.9.0", "function _unsupportedIterableToArray(r,a){if(r){if(\"string\"==typeof r)return arrayLikeToArray(r,a);var t={}.toString.call(r).slice(8,-1);return\"Object\"===t&&r.constructor&&(t=r.constructor.name),\"Map\"===t||\"Set\"===t?Array.from(r):\"Arguments\"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?arrayLikeToArray(r,a):void 0}}", {
      globals: ["Array"],
      locals: {
        _unsupportedIterableToArray: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_unsupportedIterableToArray",
      dependencies: {
        arrayLikeToArray: ["body.0.body.body.0.consequent.body.0.consequent.argument.callee", "body.0.body.body.0.consequent.body.2.argument.expressions.1.alternate.consequent.callee"]
      }
    }),
    usingCtx: helper("7.23.9", "function _usingCtx(){var r=\"function\"==typeof SuppressedError?SuppressedError:function(r,e){var n=Error();return n.name=\"SuppressedError\",n.error=r,n.suppressed=e,n},e={},n=[];function using(r,e){if(null!=e){if(Object(e)!==e)throw new TypeError(\"using declarations can only be used with objects, functions, null, or undefined.\");if(r)var o=e[Symbol.asyncDispose||Symbol.for(\"Symbol.asyncDispose\")];if(void 0===o&&(o=e[Symbol.dispose||Symbol.for(\"Symbol.dispose\")],r))var t=o;if(\"function\"!=typeof o)throw new TypeError(\"Object is not disposable.\");t&&(o=function(){try{t.call(e)}catch(r){return Promise.reject(r)}}),n.push({v:e,d:o,a:r})}else r&&n.push({d:e,a:r});return e}return{e:e,u:using.bind(null,!1),a:using.bind(null,!0),d:function(){var o,t=this.e,s=0;function next(){for(;o=n.pop();)try{if(!o.a&&1===s)return s=0,n.push(o),Promise.resolve().then(next);if(o.d){var r=o.d.call(o.v);if(o.a)return s|=2,Promise.resolve(r).then(next,err)}else s|=1}catch(r){return err(r)}if(1===s)return t!==e?Promise.reject(t):Promise.resolve();if(t!==e)throw t}function err(n){return t=t!==e?new r(n,t):n,next()}return next()}}}", {
      globals: ["SuppressedError", "Error", "Object", "TypeError", "Symbol", "Promise"],
      locals: {
        _usingCtx: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_usingCtx",
      dependencies: {}
    }),
    wrapAsyncGenerator: helper("7.0.0-beta.0", "function _wrapAsyncGenerator(e){return function(){return new AsyncGenerator(e.apply(this,arguments))}}function AsyncGenerator(e){var r,t;function resume(r,t){try{var n=e[r](t),o=n.value,u=o instanceof OverloadYield;Promise.resolve(u?o.v:o).then((function(t){if(u){var i=\"return\"===r?\"return\":\"next\";if(!o.k||t.done)return resume(i,t);t=e[i](t).value}settle(n.done?\"return\":\"normal\",t)}),(function(e){resume(\"throw\",e)}))}catch(e){settle(\"throw\",e)}}function settle(e,n){switch(e){case\"return\":r.resolve({value:n,done:!0});break;case\"throw\":r.reject(n);break;default:r.resolve({value:n,done:!1})}(r=r.next)?resume(r.key,r.arg):t=null}this._invoke=function(e,n){return new Promise((function(o,u){var i={key:e,arg:n,resolve:o,reject:u,next:null};t?t=t.next=i:(r=t=i,resume(e,n))}))},\"function\"!=typeof e.return&&(this.return=void 0)}AsyncGenerator.prototype[\"function\"==typeof Symbol&&Symbol.asyncIterator||\"@@asyncIterator\"]=function(){return this},AsyncGenerator.prototype.next=function(e){return this._invoke(\"next\",e)},AsyncGenerator.prototype.throw=function(e){return this._invoke(\"throw\",e)},AsyncGenerator.prototype.return=function(e){return this._invoke(\"return\",e)};", {
      globals: ["Promise", "Symbol"],
      locals: {
        _wrapAsyncGenerator: ["body.0.id"],
        AsyncGenerator: ["body.1.id", "body.0.body.body.0.argument.body.body.0.argument.callee", "body.2.expression.expressions.0.left.object.object", "body.2.expression.expressions.1.left.object.object", "body.2.expression.expressions.2.left.object.object", "body.2.expression.expressions.3.left.object.object"]
      },
      exportBindingAssignments: [],
      exportName: "_wrapAsyncGenerator",
      dependencies: {
        OverloadYield: ["body.1.body.body.1.body.body.0.block.body.0.declarations.2.init.right"]
      }
    }),
    wrapNativeSuper: helper("7.0.0-beta.0", "function _wrapNativeSuper(t){var r=\"function\"==typeof Map?new Map:void 0;return _wrapNativeSuper=function(t){if(null===t||!isNativeFunction(t))return t;if(\"function\"!=typeof t)throw new TypeError(\"Super expression must either be null or a function\");if(void 0!==r){if(r.has(t))return r.get(t);r.set(t,Wrapper)}function Wrapper(){return construct(t,arguments,getPrototypeOf(this).constructor)}return Wrapper.prototype=Object.create(t.prototype,{constructor:{value:Wrapper,enumerable:!1,writable:!0,configurable:!0}}),setPrototypeOf(Wrapper,t)},_wrapNativeSuper(t)}", {
      globals: ["Map", "TypeError", "Object"],
      locals: {
        _wrapNativeSuper: ["body.0.id", "body.0.body.body.1.argument.expressions.1.callee", "body.0.body.body.1.argument.expressions.0.left"]
      },
      exportBindingAssignments: ["body.0.body.body.1.argument.expressions.0"],
      exportName: "_wrapNativeSuper",
      dependencies: {
        getPrototypeOf: ["body.0.body.body.1.argument.expressions.0.right.body.body.3.body.body.0.argument.arguments.2.object.callee"],
        setPrototypeOf: ["body.0.body.body.1.argument.expressions.0.right.body.body.4.argument.expressions.1.callee"],
        isNativeFunction: ["body.0.body.body.1.argument.expressions.0.right.body.body.0.test.right.argument.callee"],
        construct: ["body.0.body.body.1.argument.expressions.0.right.body.body.3.body.body.0.argument.callee"]
      }
    }),
    wrapRegExp: helper("7.19.0", "function _wrapRegExp(){_wrapRegExp=function(e,r){return new BabelRegExp(e,void 0,r)};var e=RegExp.prototype,r=new WeakMap;function BabelRegExp(e,t,p){var o=RegExp(e,t);return r.set(o,p||r.get(e)),setPrototypeOf(o,BabelRegExp.prototype)}function buildGroups(e,t){var p=r.get(t);return Object.keys(p).reduce((function(r,t){var o=p[t];if(\"number\"==typeof o)r[t]=e[o];else{for(var i=0;void 0===e[o[i]]&&i+1<o.length;)i++;r[t]=e[o[i]]}return r}),Object.create(null))}return inherits(BabelRegExp,RegExp),BabelRegExp.prototype.exec=function(r){var t=e.exec.call(this,r);if(t){t.groups=buildGroups(t,this);var p=t.indices;p&&(p.groups=buildGroups(p,this))}return t},BabelRegExp.prototype[Symbol.replace]=function(t,p){if(\"string\"==typeof p){var o=r.get(this);return e[Symbol.replace].call(this,t,p.replace(/\\$<([^>]+)>/g,(function(e,r){var t=o[r];return\"$\"+(Array.isArray(t)?t.join(\"$\"):t)})))}if(\"function\"==typeof p){var i=this;return e[Symbol.replace].call(this,t,(function(){var e=arguments;return\"object\"!=typeof e[e.length-1]&&(e=[].slice.call(e)).push(buildGroups(e,i)),p.apply(this,e)}))}return e[Symbol.replace].call(this,t,p)},_wrapRegExp.apply(this,arguments)}", {
      globals: ["RegExp", "WeakMap", "Object", "Symbol", "Array"],
      locals: {
        _wrapRegExp: ["body.0.id", "body.0.body.body.4.argument.expressions.3.callee.object", "body.0.body.body.0.expression.left"]
      },
      exportBindingAssignments: ["body.0.body.body.0.expression"],
      exportName: "_wrapRegExp",
      dependencies: {
        setPrototypeOf: ["body.0.body.body.2.body.body.1.argument.expressions.1.callee"],
        inherits: ["body.0.body.body.4.argument.expressions.0.callee"]
      }
    }),
    writeOnlyError: helper("7.12.13", "function _writeOnlyError(r){throw new TypeError('\"'+r+'\" is write-only')}", {
      globals: ["TypeError"],
      locals: {
        _writeOnlyError: ["body.0.id"]
      },
      exportBindingAssignments: [],
      exportName: "_writeOnlyError",
      dependencies: {}
    })
  };
  {
    Object.assign(helpers, {
      AwaitValue: helper("7.0.0-beta.0", "function _AwaitValue(t){this.wrapped=t}", {
        globals: [],
        locals: {
          _AwaitValue: ["body.0.id"]
        },
        exportBindingAssignments: [],
        exportName: "_AwaitValue",
        dependencies: {}
      }),
      applyDecs: helper("7.17.8", "function old_createMetadataMethodsForProperty(e,t,a,r){return{getMetadata:function(o){old_assertNotFinished(r,\"getMetadata\"),old_assertMetadataKey(o);var i=e[o];if(void 0!==i)if(1===t){var n=i.public;if(void 0!==n)return n[a]}else if(2===t){var l=i.private;if(void 0!==l)return l.get(a)}else if(Object.hasOwnProperty.call(i,\"constructor\"))return i.constructor},setMetadata:function(o,i){old_assertNotFinished(r,\"setMetadata\"),old_assertMetadataKey(o);var n=e[o];if(void 0===n&&(n=e[o]={}),1===t){var l=n.public;void 0===l&&(l=n.public={}),l[a]=i}else if(2===t){var s=n.priv;void 0===s&&(s=n.private=new Map),s.set(a,i)}else n.constructor=i}}}function old_convertMetadataMapToFinal(e,t){var a=e[Symbol.metadata||Symbol.for(\"Symbol.metadata\")],r=Object.getOwnPropertySymbols(t);if(0!==r.length){for(var o=0;o<r.length;o++){var i=r[o],n=t[i],l=a?a[i]:null,s=n.public,c=l?l.public:null;s&&c&&Object.setPrototypeOf(s,c);var d=n.private;if(d){var u=Array.from(d.values()),f=l?l.private:null;f&&(u=u.concat(f)),n.private=u}l&&Object.setPrototypeOf(n,l)}a&&Object.setPrototypeOf(t,a),e[Symbol.metadata||Symbol.for(\"Symbol.metadata\")]=t}}function old_createAddInitializerMethod(e,t){return function(a){old_assertNotFinished(t,\"addInitializer\"),old_assertCallable(a,\"An initializer\"),e.push(a)}}function old_memberDec(e,t,a,r,o,i,n,l,s){var c;switch(i){case 1:c=\"accessor\";break;case 2:c=\"method\";break;case 3:c=\"getter\";break;case 4:c=\"setter\";break;default:c=\"field\"}var d,u,f={kind:c,name:l?\"#\"+t:toPropertyKey(t),isStatic:n,isPrivate:l},p={v:!1};if(0!==i&&(f.addInitializer=old_createAddInitializerMethod(o,p)),l){d=2,u=Symbol(t);var v={};0===i?(v.get=a.get,v.set=a.set):2===i?v.get=function(){return a.value}:(1!==i&&3!==i||(v.get=function(){return a.get.call(this)}),1!==i&&4!==i||(v.set=function(e){a.set.call(this,e)})),f.access=v}else d=1,u=t;try{return e(s,Object.assign(f,old_createMetadataMethodsForProperty(r,d,u,p)))}finally{p.v=!0}}function old_assertNotFinished(e,t){if(e.v)throw Error(\"attempted to call \"+t+\" after decoration was finished\")}function old_assertMetadataKey(e){if(\"symbol\"!=typeof e)throw new TypeError(\"Metadata keys must be symbols, received: \"+e)}function old_assertCallable(e,t){if(\"function\"!=typeof e)throw new TypeError(t+\" must be a function\")}function old_assertValidReturnValue(e,t){var a=typeof t;if(1===e){if(\"object\"!==a||null===t)throw new TypeError(\"accessor decorators must return an object with get, set, or init properties or void 0\");void 0!==t.get&&old_assertCallable(t.get,\"accessor.get\"),void 0!==t.set&&old_assertCallable(t.set,\"accessor.set\"),void 0!==t.init&&old_assertCallable(t.init,\"accessor.init\"),void 0!==t.initializer&&old_assertCallable(t.initializer,\"accessor.initializer\")}else if(\"function\"!==a)throw new TypeError((0===e?\"field\":10===e?\"class\":\"method\")+\" decorators must return a function or void 0\")}function old_getInit(e){var t;return null==(t=e.init)&&(t=e.initializer)&&void 0!==console&&console.warn(\".initializer has been renamed to .init as of March 2022\"),t}function old_applyMemberDec(e,t,a,r,o,i,n,l,s){var c,d,u,f,p,v,y,h=a[0];if(n?(0===o||1===o?(c={get:a[3],set:a[4]},u=\"get\"):3===o?(c={get:a[3]},u=\"get\"):4===o?(c={set:a[3]},u=\"set\"):c={value:a[3]},0!==o&&(1===o&&setFunctionName(a[4],\"#\"+r,\"set\"),setFunctionName(a[3],\"#\"+r,u))):0!==o&&(c=Object.getOwnPropertyDescriptor(t,r)),1===o?f={get:c.get,set:c.set}:2===o?f=c.value:3===o?f=c.get:4===o&&(f=c.set),\"function\"==typeof h)void 0!==(p=old_memberDec(h,r,c,l,s,o,i,n,f))&&(old_assertValidReturnValue(o,p),0===o?d=p:1===o?(d=old_getInit(p),v=p.get||f.get,y=p.set||f.set,f={get:v,set:y}):f=p);else for(var m=h.length-1;m>=0;m--){var b;void 0!==(p=old_memberDec(h[m],r,c,l,s,o,i,n,f))&&(old_assertValidReturnValue(o,p),0===o?b=p:1===o?(b=old_getInit(p),v=p.get||f.get,y=p.set||f.set,f={get:v,set:y}):f=p,void 0!==b&&(void 0===d?d=b:\"function\"==typeof d?d=[d,b]:d.push(b)))}if(0===o||1===o){if(void 0===d)d=function(e,t){return t};else if(\"function\"!=typeof d){var g=d;d=function(e,t){for(var a=t,r=0;r<g.length;r++)a=g[r].call(e,a);return a}}else{var _=d;d=function(e,t){return _.call(e,t)}}e.push(d)}0!==o&&(1===o?(c.get=f.get,c.set=f.set):2===o?c.value=f:3===o?c.get=f:4===o&&(c.set=f),n?1===o?(e.push((function(e,t){return f.get.call(e,t)})),e.push((function(e,t){return f.set.call(e,t)}))):2===o?e.push(f):e.push((function(e,t){return f.call(e,t)})):Object.defineProperty(t,r,c))}function old_applyMemberDecs(e,t,a,r,o){for(var i,n,l=new Map,s=new Map,c=0;c<o.length;c++){var d=o[c];if(Array.isArray(d)){var u,f,p,v=d[1],y=d[2],h=d.length>3,m=v>=5;if(m?(u=t,f=r,0!=(v-=5)&&(p=n=n||[])):(u=t.prototype,f=a,0!==v&&(p=i=i||[])),0!==v&&!h){var b=m?s:l,g=b.get(y)||0;if(!0===g||3===g&&4!==v||4===g&&3!==v)throw Error(\"Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: \"+y);!g&&v>2?b.set(y,v):b.set(y,!0)}old_applyMemberDec(e,u,d,y,v,m,h,f,p)}}old_pushInitializers(e,i),old_pushInitializers(e,n)}function old_pushInitializers(e,t){t&&e.push((function(e){for(var a=0;a<t.length;a++)t[a].call(e);return e}))}function old_applyClassDecs(e,t,a,r){if(r.length>0){for(var o=[],i=t,n=t.name,l=r.length-1;l>=0;l--){var s={v:!1};try{var c=Object.assign({kind:\"class\",name:n,addInitializer:old_createAddInitializerMethod(o,s)},old_createMetadataMethodsForProperty(a,0,n,s)),d=r[l](i,c)}finally{s.v=!0}void 0!==d&&(old_assertValidReturnValue(10,d),i=d)}e.push(i,(function(){for(var e=0;e<o.length;e++)o[e].call(i)}))}}function applyDecs(e,t,a){var r=[],o={},i={};return old_applyMemberDecs(r,e,i,o,t),old_convertMetadataMapToFinal(e.prototype,i),old_applyClassDecs(r,e,o,a),old_convertMetadataMapToFinal(e,o),r}", {
        globals: ["Object", "Map", "Symbol", "Array", "Error", "TypeError", "console"],
        locals: {
          old_createMetadataMethodsForProperty: ["body.0.id", "body.3.body.body.4.block.body.0.argument.arguments.1.arguments.1.callee", "body.12.body.body.0.consequent.body.0.body.body.1.block.body.0.declarations.0.init.arguments.1.callee"],
          old_convertMetadataMapToFinal: ["body.1.id", "body.13.body.body.1.argument.expressions.1.callee", "body.13.body.body.1.argument.expressions.3.callee"],
          old_createAddInitializerMethod: ["body.2.id", "body.3.body.body.3.test.expressions.0.right.right.callee", "body.12.body.body.0.consequent.body.0.body.body.1.block.body.0.declarations.0.init.arguments.0.properties.2.value.callee"],
          old_memberDec: ["body.3.id", "body.9.body.body.1.consequent.expression.left.right.right.callee", "body.9.body.body.1.alternate.body.body.1.expression.left.right.right.callee"],
          old_assertNotFinished: ["body.4.id", "body.0.body.body.0.argument.properties.0.value.body.body.0.expression.expressions.0.callee", "body.0.body.body.0.argument.properties.1.value.body.body.0.expression.expressions.0.callee", "body.2.body.body.0.argument.body.body.0.expression.expressions.0.callee"],
          old_assertMetadataKey: ["body.5.id", "body.0.body.body.0.argument.properties.0.value.body.body.0.expression.expressions.1.callee", "body.0.body.body.0.argument.properties.1.value.body.body.0.expression.expressions.1.callee"],
          old_assertCallable: ["body.6.id", "body.2.body.body.0.argument.body.body.0.expression.expressions.1.callee", "body.7.body.body.1.consequent.body.1.expression.expressions.0.right.callee", "body.7.body.body.1.consequent.body.1.expression.expressions.1.right.callee", "body.7.body.body.1.consequent.body.1.expression.expressions.2.right.callee", "body.7.body.body.1.consequent.body.1.expression.expressions.3.right.callee"],
          old_assertValidReturnValue: ["body.7.id", "body.9.body.body.1.consequent.expression.right.expressions.0.callee", "body.9.body.body.1.alternate.body.body.1.expression.right.expressions.0.callee", "body.12.body.body.0.consequent.body.0.body.body.2.expression.right.expressions.0.callee"],
          old_getInit: ["body.8.id", "body.9.body.body.1.consequent.expression.right.expressions.1.alternate.consequent.expressions.0.right.callee", "body.9.body.body.1.alternate.body.body.1.expression.right.expressions.1.alternate.consequent.expressions.0.right.callee"],
          old_applyMemberDec: ["body.9.id", "body.10.body.body.0.body.body.1.consequent.body.2.expression.callee"],
          old_applyMemberDecs: ["body.10.id", "body.13.body.body.1.argument.expressions.0.callee"],
          old_pushInitializers: ["body.11.id", "body.10.body.body.1.expression.expressions.0.callee", "body.10.body.body.1.expression.expressions.1.callee"],
          old_applyClassDecs: ["body.12.id", "body.13.body.body.1.argument.expressions.2.callee"],
          applyDecs: ["body.13.id"]
        },
        exportBindingAssignments: [],
        exportName: "applyDecs",
        dependencies: {
          setFunctionName: ["body.9.body.body.1.test.expressions.0.consequent.expressions.1.right.expressions.0.right.callee", "body.9.body.body.1.test.expressions.0.consequent.expressions.1.right.expressions.1.callee"],
          toPropertyKey: ["body.3.body.body.2.declarations.2.init.properties.1.value.alternate.callee"]
        }
      }),
      applyDecs2203: helper("7.19.0", "function applyDecs2203Factory(){function createAddInitializerMethod(e,t){return function(r){!function(e,t){if(e.v)throw Error(\"attempted to call addInitializer after decoration was finished\")}(t),assertCallable(r,\"An initializer\"),e.push(r)}}function memberDec(e,t,r,a,n,i,s,o){var c;switch(n){case 1:c=\"accessor\";break;case 2:c=\"method\";break;case 3:c=\"getter\";break;case 4:c=\"setter\";break;default:c=\"field\"}var l,u,f={kind:c,name:s?\"#\"+t:t,static:i,private:s},p={v:!1};0!==n&&(f.addInitializer=createAddInitializerMethod(a,p)),0===n?s?(l=r.get,u=r.set):(l=function(){return this[t]},u=function(e){this[t]=e}):2===n?l=function(){return r.value}:(1!==n&&3!==n||(l=function(){return r.get.call(this)}),1!==n&&4!==n||(u=function(e){r.set.call(this,e)})),f.access=l&&u?{get:l,set:u}:l?{get:l}:{set:u};try{return e(o,f)}finally{p.v=!0}}function assertCallable(e,t){if(\"function\"!=typeof e)throw new TypeError(t+\" must be a function\")}function assertValidReturnValue(e,t){var r=typeof t;if(1===e){if(\"object\"!==r||null===t)throw new TypeError(\"accessor decorators must return an object with get, set, or init properties or void 0\");void 0!==t.get&&assertCallable(t.get,\"accessor.get\"),void 0!==t.set&&assertCallable(t.set,\"accessor.set\"),void 0!==t.init&&assertCallable(t.init,\"accessor.init\")}else if(\"function\"!==r)throw new TypeError((0===e?\"field\":10===e?\"class\":\"method\")+\" decorators must return a function or void 0\")}function applyMemberDec(e,t,r,a,n,i,s,o){var c,l,u,f,p,d,h=r[0];if(s?c=0===n||1===n?{get:r[3],set:r[4]}:3===n?{get:r[3]}:4===n?{set:r[3]}:{value:r[3]}:0!==n&&(c=Object.getOwnPropertyDescriptor(t,a)),1===n?u={get:c.get,set:c.set}:2===n?u=c.value:3===n?u=c.get:4===n&&(u=c.set),\"function\"==typeof h)void 0!==(f=memberDec(h,a,c,o,n,i,s,u))&&(assertValidReturnValue(n,f),0===n?l=f:1===n?(l=f.init,p=f.get||u.get,d=f.set||u.set,u={get:p,set:d}):u=f);else for(var v=h.length-1;v>=0;v--){var g;void 0!==(f=memberDec(h[v],a,c,o,n,i,s,u))&&(assertValidReturnValue(n,f),0===n?g=f:1===n?(g=f.init,p=f.get||u.get,d=f.set||u.set,u={get:p,set:d}):u=f,void 0!==g&&(void 0===l?l=g:\"function\"==typeof l?l=[l,g]:l.push(g)))}if(0===n||1===n){if(void 0===l)l=function(e,t){return t};else if(\"function\"!=typeof l){var y=l;l=function(e,t){for(var r=t,a=0;a<y.length;a++)r=y[a].call(e,r);return r}}else{var m=l;l=function(e,t){return m.call(e,t)}}e.push(l)}0!==n&&(1===n?(c.get=u.get,c.set=u.set):2===n?c.value=u:3===n?c.get=u:4===n&&(c.set=u),s?1===n?(e.push((function(e,t){return u.get.call(e,t)})),e.push((function(e,t){return u.set.call(e,t)}))):2===n?e.push(u):e.push((function(e,t){return u.call(e,t)})):Object.defineProperty(t,a,c))}function pushInitializers(e,t){t&&e.push((function(e){for(var r=0;r<t.length;r++)t[r].call(e);return e}))}return function(e,t,r){var a=[];return function(e,t,r){for(var a,n,i=new Map,s=new Map,o=0;o<r.length;o++){var c=r[o];if(Array.isArray(c)){var l,u,f=c[1],p=c[2],d=c.length>3,h=f>=5;if(h?(l=t,0!=(f-=5)&&(u=n=n||[])):(l=t.prototype,0!==f&&(u=a=a||[])),0!==f&&!d){var v=h?s:i,g=v.get(p)||0;if(!0===g||3===g&&4!==f||4===g&&3!==f)throw Error(\"Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: \"+p);!g&&f>2?v.set(p,f):v.set(p,!0)}applyMemberDec(e,l,c,p,f,h,d,u)}}pushInitializers(e,a),pushInitializers(e,n)}(a,e,t),function(e,t,r){if(r.length>0){for(var a=[],n=t,i=t.name,s=r.length-1;s>=0;s--){var o={v:!1};try{var c=r[s](n,{kind:\"class\",name:i,addInitializer:createAddInitializerMethod(a,o)})}finally{o.v=!0}void 0!==c&&(assertValidReturnValue(10,c),n=c)}e.push(n,(function(){for(var e=0;e<a.length;e++)a[e].call(n)}))}}(a,e,r),a}}var applyDecs2203Impl;function applyDecs2203(e,t,r){return(applyDecs2203Impl=applyDecs2203Impl||applyDecs2203Factory())(e,t,r)}", {
        globals: ["Error", "TypeError", "Object", "Map", "Array"],
        locals: {
          applyDecs2203Factory: ["body.0.id", "body.2.body.body.0.argument.callee.right.right.callee"],
          applyDecs2203Impl: ["body.1.declarations.0.id", "body.2.body.body.0.argument.callee.right.left", "body.2.body.body.0.argument.callee.left"],
          applyDecs2203: ["body.2.id"]
        },
        exportBindingAssignments: [],
        exportName: "applyDecs2203",
        dependencies: {}
      }),
      applyDecs2203R: helper("7.20.0", "function applyDecs2203RFactory(){function createAddInitializerMethod(e,t){return function(r){!function(e,t){if(e.v)throw Error(\"attempted to call addInitializer after decoration was finished\")}(t),assertCallable(r,\"An initializer\"),e.push(r)}}function memberDec(e,t,r,n,a,i,o,s){var c;switch(a){case 1:c=\"accessor\";break;case 2:c=\"method\";break;case 3:c=\"getter\";break;case 4:c=\"setter\";break;default:c=\"field\"}var l,u,f={kind:c,name:o?\"#\"+t:toPropertyKey(t),static:i,private:o},p={v:!1};0!==a&&(f.addInitializer=createAddInitializerMethod(n,p)),0===a?o?(l=r.get,u=r.set):(l=function(){return this[t]},u=function(e){this[t]=e}):2===a?l=function(){return r.value}:(1!==a&&3!==a||(l=function(){return r.get.call(this)}),1!==a&&4!==a||(u=function(e){r.set.call(this,e)})),f.access=l&&u?{get:l,set:u}:l?{get:l}:{set:u};try{return e(s,f)}finally{p.v=!0}}function assertCallable(e,t){if(\"function\"!=typeof e)throw new TypeError(t+\" must be a function\")}function assertValidReturnValue(e,t){var r=typeof t;if(1===e){if(\"object\"!==r||null===t)throw new TypeError(\"accessor decorators must return an object with get, set, or init properties or void 0\");void 0!==t.get&&assertCallable(t.get,\"accessor.get\"),void 0!==t.set&&assertCallable(t.set,\"accessor.set\"),void 0!==t.init&&assertCallable(t.init,\"accessor.init\")}else if(\"function\"!==r)throw new TypeError((0===e?\"field\":10===e?\"class\":\"method\")+\" decorators must return a function or void 0\")}function applyMemberDec(e,t,r,n,a,i,o,s){var c,l,u,f,p,d,h,v=r[0];if(o?(0===a||1===a?(c={get:r[3],set:r[4]},u=\"get\"):3===a?(c={get:r[3]},u=\"get\"):4===a?(c={set:r[3]},u=\"set\"):c={value:r[3]},0!==a&&(1===a&&setFunctionName(r[4],\"#\"+n,\"set\"),setFunctionName(r[3],\"#\"+n,u))):0!==a&&(c=Object.getOwnPropertyDescriptor(t,n)),1===a?f={get:c.get,set:c.set}:2===a?f=c.value:3===a?f=c.get:4===a&&(f=c.set),\"function\"==typeof v)void 0!==(p=memberDec(v,n,c,s,a,i,o,f))&&(assertValidReturnValue(a,p),0===a?l=p:1===a?(l=p.init,d=p.get||f.get,h=p.set||f.set,f={get:d,set:h}):f=p);else for(var g=v.length-1;g>=0;g--){var y;void 0!==(p=memberDec(v[g],n,c,s,a,i,o,f))&&(assertValidReturnValue(a,p),0===a?y=p:1===a?(y=p.init,d=p.get||f.get,h=p.set||f.set,f={get:d,set:h}):f=p,void 0!==y&&(void 0===l?l=y:\"function\"==typeof l?l=[l,y]:l.push(y)))}if(0===a||1===a){if(void 0===l)l=function(e,t){return t};else if(\"function\"!=typeof l){var m=l;l=function(e,t){for(var r=t,n=0;n<m.length;n++)r=m[n].call(e,r);return r}}else{var b=l;l=function(e,t){return b.call(e,t)}}e.push(l)}0!==a&&(1===a?(c.get=f.get,c.set=f.set):2===a?c.value=f:3===a?c.get=f:4===a&&(c.set=f),o?1===a?(e.push((function(e,t){return f.get.call(e,t)})),e.push((function(e,t){return f.set.call(e,t)}))):2===a?e.push(f):e.push((function(e,t){return f.call(e,t)})):Object.defineProperty(t,n,c))}function applyMemberDecs(e,t){for(var r,n,a=[],i=new Map,o=new Map,s=0;s<t.length;s++){var c=t[s];if(Array.isArray(c)){var l,u,f=c[1],p=c[2],d=c.length>3,h=f>=5;if(h?(l=e,0!=(f-=5)&&(u=n=n||[])):(l=e.prototype,0!==f&&(u=r=r||[])),0!==f&&!d){var v=h?o:i,g=v.get(p)||0;if(!0===g||3===g&&4!==f||4===g&&3!==f)throw Error(\"Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: \"+p);!g&&f>2?v.set(p,f):v.set(p,!0)}applyMemberDec(a,l,c,p,f,h,d,u)}}return pushInitializers(a,r),pushInitializers(a,n),a}function pushInitializers(e,t){t&&e.push((function(e){for(var r=0;r<t.length;r++)t[r].call(e);return e}))}return function(e,t,r){return{e:applyMemberDecs(e,t),get c(){return function(e,t){if(t.length>0){for(var r=[],n=e,a=e.name,i=t.length-1;i>=0;i--){var o={v:!1};try{var s=t[i](n,{kind:\"class\",name:a,addInitializer:createAddInitializerMethod(r,o)})}finally{o.v=!0}void 0!==s&&(assertValidReturnValue(10,s),n=s)}return[n,function(){for(var e=0;e<r.length;e++)r[e].call(n)}]}}(e,r)}}}}function applyDecs2203R(e,t,r){return(applyDecs2203R=applyDecs2203RFactory())(e,t,r)}", {
        globals: ["Error", "TypeError", "Object", "Map", "Array"],
        locals: {
          applyDecs2203RFactory: ["body.0.id", "body.1.body.body.0.argument.callee.right.callee"],
          applyDecs2203R: ["body.1.id", "body.1.body.body.0.argument.callee.left"]
        },
        exportBindingAssignments: ["body.1.body.body.0.argument.callee"],
        exportName: "applyDecs2203R",
        dependencies: {
          setFunctionName: ["body.0.body.body.4.body.body.1.test.expressions.0.consequent.expressions.1.right.expressions.0.right.callee", "body.0.body.body.4.body.body.1.test.expressions.0.consequent.expressions.1.right.expressions.1.callee"],
          toPropertyKey: ["body.0.body.body.1.body.body.2.declarations.2.init.properties.1.value.alternate.callee"]
        }
      }),
      applyDecs2301: helper("7.21.0", "function applyDecs2301Factory(){function createAddInitializerMethod(e,t){return function(r){!function(e,t){if(e.v)throw Error(\"attempted to call addInitializer after decoration was finished\")}(t),assertCallable(r,\"An initializer\"),e.push(r)}}function assertInstanceIfPrivate(e,t){if(!e(t))throw new TypeError(\"Attempted to access private element on non-instance\")}function memberDec(e,t,r,n,a,i,s,o,c){var u;switch(a){case 1:u=\"accessor\";break;case 2:u=\"method\";break;case 3:u=\"getter\";break;case 4:u=\"setter\";break;default:u=\"field\"}var l,f,p={kind:u,name:s?\"#\"+t:toPropertyKey(t),static:i,private:s},d={v:!1};if(0!==a&&(p.addInitializer=createAddInitializerMethod(n,d)),s||0!==a&&2!==a)if(2===a)l=function(e){return assertInstanceIfPrivate(c,e),r.value};else{var h=0===a||1===a;(h||3===a)&&(l=s?function(e){return assertInstanceIfPrivate(c,e),r.get.call(e)}:function(e){return r.get.call(e)}),(h||4===a)&&(f=s?function(e,t){assertInstanceIfPrivate(c,e),r.set.call(e,t)}:function(e,t){r.set.call(e,t)})}else l=function(e){return e[t]},0===a&&(f=function(e,r){e[t]=r});var v=s?c.bind():function(e){return t in e};p.access=l&&f?{get:l,set:f,has:v}:l?{get:l,has:v}:{set:f,has:v};try{return e(o,p)}finally{d.v=!0}}function assertCallable(e,t){if(\"function\"!=typeof e)throw new TypeError(t+\" must be a function\")}function assertValidReturnValue(e,t){var r=typeof t;if(1===e){if(\"object\"!==r||null===t)throw new TypeError(\"accessor decorators must return an object with get, set, or init properties or void 0\");void 0!==t.get&&assertCallable(t.get,\"accessor.get\"),void 0!==t.set&&assertCallable(t.set,\"accessor.set\"),void 0!==t.init&&assertCallable(t.init,\"accessor.init\")}else if(\"function\"!==r)throw new TypeError((0===e?\"field\":10===e?\"class\":\"method\")+\" decorators must return a function or void 0\")}function curryThis2(e){return function(t){e(this,t)}}function applyMemberDec(e,t,r,n,a,i,s,o,c){var u,l,f,p,d,h,v,y,g=r[0];if(s?(0===a||1===a?(u={get:(d=r[3],function(){return d(this)}),set:curryThis2(r[4])},f=\"get\"):3===a?(u={get:r[3]},f=\"get\"):4===a?(u={set:r[3]},f=\"set\"):u={value:r[3]},0!==a&&(1===a&&setFunctionName(u.set,\"#\"+n,\"set\"),setFunctionName(u[f||\"value\"],\"#\"+n,f))):0!==a&&(u=Object.getOwnPropertyDescriptor(t,n)),1===a?p={get:u.get,set:u.set}:2===a?p=u.value:3===a?p=u.get:4===a&&(p=u.set),\"function\"==typeof g)void 0!==(h=memberDec(g,n,u,o,a,i,s,p,c))&&(assertValidReturnValue(a,h),0===a?l=h:1===a?(l=h.init,v=h.get||p.get,y=h.set||p.set,p={get:v,set:y}):p=h);else for(var m=g.length-1;m>=0;m--){var b;void 0!==(h=memberDec(g[m],n,u,o,a,i,s,p,c))&&(assertValidReturnValue(a,h),0===a?b=h:1===a?(b=h.init,v=h.get||p.get,y=h.set||p.set,p={get:v,set:y}):p=h,void 0!==b&&(void 0===l?l=b:\"function\"==typeof l?l=[l,b]:l.push(b)))}if(0===a||1===a){if(void 0===l)l=function(e,t){return t};else if(\"function\"!=typeof l){var I=l;l=function(e,t){for(var r=t,n=0;n<I.length;n++)r=I[n].call(e,r);return r}}else{var w=l;l=function(e,t){return w.call(e,t)}}e.push(l)}0!==a&&(1===a?(u.get=p.get,u.set=p.set):2===a?u.value=p:3===a?u.get=p:4===a&&(u.set=p),s?1===a?(e.push((function(e,t){return p.get.call(e,t)})),e.push((function(e,t){return p.set.call(e,t)}))):2===a?e.push(p):e.push((function(e,t){return p.call(e,t)})):Object.defineProperty(t,n,u))}function applyMemberDecs(e,t,r){for(var n,a,i,s=[],o=new Map,c=new Map,u=0;u<t.length;u++){var l=t[u];if(Array.isArray(l)){var f,p,d=l[1],h=l[2],v=l.length>3,y=d>=5,g=r;if(y?(f=e,0!=(d-=5)&&(p=a=a||[]),v&&!i&&(i=function(t){return checkInRHS(t)===e}),g=i):(f=e.prototype,0!==d&&(p=n=n||[])),0!==d&&!v){var m=y?c:o,b=m.get(h)||0;if(!0===b||3===b&&4!==d||4===b&&3!==d)throw Error(\"Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: \"+h);!b&&d>2?m.set(h,d):m.set(h,!0)}applyMemberDec(s,f,l,h,d,y,v,p,g)}}return pushInitializers(s,n),pushInitializers(s,a),s}function pushInitializers(e,t){t&&e.push((function(e){for(var r=0;r<t.length;r++)t[r].call(e);return e}))}return function(e,t,r,n){return{e:applyMemberDecs(e,t,n),get c(){return function(e,t){if(t.length>0){for(var r=[],n=e,a=e.name,i=t.length-1;i>=0;i--){var s={v:!1};try{var o=t[i](n,{kind:\"class\",name:a,addInitializer:createAddInitializerMethod(r,s)})}finally{s.v=!0}void 0!==o&&(assertValidReturnValue(10,o),n=o)}return[n,function(){for(var e=0;e<r.length;e++)r[e].call(n)}]}}(e,r)}}}}function applyDecs2301(e,t,r,n){return(applyDecs2301=applyDecs2301Factory())(e,t,r,n)}", {
        globals: ["Error", "TypeError", "Object", "Map", "Array"],
        locals: {
          applyDecs2301Factory: ["body.0.id", "body.1.body.body.0.argument.callee.right.callee"],
          applyDecs2301: ["body.1.id", "body.1.body.body.0.argument.callee.left"]
        },
        exportBindingAssignments: ["body.1.body.body.0.argument.callee"],
        exportName: "applyDecs2301",
        dependencies: {
          checkInRHS: ["body.0.body.body.7.body.body.0.body.body.1.consequent.body.1.test.expressions.0.consequent.expressions.2.right.right.body.body.0.argument.left.callee"],
          setFunctionName: ["body.0.body.body.6.body.body.1.test.expressions.0.consequent.expressions.1.right.expressions.0.right.callee", "body.0.body.body.6.body.body.1.test.expressions.0.consequent.expressions.1.right.expressions.1.callee"],
          toPropertyKey: ["body.0.body.body.2.body.body.2.declarations.2.init.properties.1.value.alternate.callee"]
        }
      }),
      applyDecs2305: helper("7.21.0", "function applyDecs2305(e,t,r,n,o,a){function i(e,t,r){return function(n,o){return r&&r(n),e[t].call(n,o)}}function c(e,t){for(var r=0;r<e.length;r++)e[r].call(t);return t}function s(e,t,r,n){if(\"function\"!=typeof e&&(n||void 0!==e))throw new TypeError(t+\" must \"+(r||\"be\")+\" a function\"+(n?\"\":\" or undefined\"));return e}function applyDec(e,t,r,n,o,a,c,u,l,f,p,d,h){function m(e){if(!h(e))throw new TypeError(\"Attempted to access private element on non-instance\")}var y,v=t[0],g=t[3],b=!u;if(!b){r||Array.isArray(v)||(v=[v]);var w={},S=[],A=3===o?\"get\":4===o||d?\"set\":\"value\";f?(p||d?w={get:setFunctionName((function(){return g(this)}),n,\"get\"),set:function(e){t[4](this,e)}}:w[A]=g,p||setFunctionName(w[A],n,2===o?\"\":A)):p||(w=Object.getOwnPropertyDescriptor(e,n))}for(var P=e,j=v.length-1;j>=0;j-=r?2:1){var D=v[j],E=r?v[j-1]:void 0,I={},O={kind:[\"field\",\"accessor\",\"method\",\"getter\",\"setter\",\"class\"][o],name:n,metadata:a,addInitializer:function(e,t){if(e.v)throw Error(\"attempted to call addInitializer after decoration was finished\");s(t,\"An initializer\",\"be\",!0),c.push(t)}.bind(null,I)};try{if(b)(y=s(D.call(E,P,O),\"class decorators\",\"return\"))&&(P=y);else{var k,F;O.static=l,O.private=f,f?2===o?k=function(e){return m(e),w.value}:(o<4&&(k=i(w,\"get\",m)),3!==o&&(F=i(w,\"set\",m))):(k=function(e){return e[n]},(o<2||4===o)&&(F=function(e,t){e[n]=t}));var N=O.access={has:f?h.bind():function(e){return n in e}};if(k&&(N.get=k),F&&(N.set=F),P=D.call(E,d?{get:w.get,set:w.set}:w[A],O),d){if(\"object\"==typeof P&&P)(y=s(P.get,\"accessor.get\"))&&(w.get=y),(y=s(P.set,\"accessor.set\"))&&(w.set=y),(y=s(P.init,\"accessor.init\"))&&S.push(y);else if(void 0!==P)throw new TypeError(\"accessor decorators must return an object with get, set, or init properties or void 0\")}else s(P,(p?\"field\":\"method\")+\" decorators\",\"return\")&&(p?S.push(P):w[A]=P)}}finally{I.v=!0}}return(p||d)&&u.push((function(e,t){for(var r=S.length-1;r>=0;r--)t=S[r].call(e,t);return t})),p||b||(f?d?u.push(i(w,\"get\"),i(w,\"set\")):u.push(2===o?w[A]:i.call.bind(w[A])):Object.defineProperty(e,n,w)),P}function u(e,t){return Object.defineProperty(e,Symbol.metadata||Symbol.for(\"Symbol.metadata\"),{configurable:!0,enumerable:!0,value:t})}if(arguments.length>=6)var l=a[Symbol.metadata||Symbol.for(\"Symbol.metadata\")];var f=Object.create(null==l?null:l),p=function(e,t,r,n){var o,a,i=[],s=function(t){return checkInRHS(t)===e},u=new Map;function l(e){e&&i.push(c.bind(null,e))}for(var f=0;f<t.length;f++){var p=t[f];if(Array.isArray(p)){var d=p[1],h=p[2],m=p.length>3,y=16&d,v=!!(8&d),g=0==(d&=7),b=h+\"/\"+v;if(!g&&!m){var w=u.get(b);if(!0===w||3===w&&4!==d||4===w&&3!==d)throw Error(\"Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: \"+h);u.set(b,!(d>2)||d)}applyDec(v?e:e.prototype,p,y,m?\"#\"+h:toPropertyKey(h),d,n,v?a=a||[]:o=o||[],i,v,m,g,1===d,v&&m?s:r)}}return l(o),l(a),i}(e,t,o,f);return r.length||u(e,f),{e:p,get c(){var t=[];return r.length&&[u(applyDec(e,[r],n,e.name,5,f,t),f),c.bind(null,t,e)]}}}", {
        globals: ["TypeError", "Array", "Object", "Error", "Symbol", "Map"],
        locals: {
          applyDecs2305: ["body.0.id"]
        },
        exportBindingAssignments: [],
        exportName: "applyDecs2305",
        dependencies: {
          checkInRHS: ["body.0.body.body.6.declarations.1.init.callee.body.body.0.declarations.3.init.body.body.0.argument.left.callee"],
          setFunctionName: ["body.0.body.body.3.body.body.2.consequent.body.2.expression.consequent.expressions.0.consequent.right.properties.0.value.callee", "body.0.body.body.3.body.body.2.consequent.body.2.expression.consequent.expressions.1.right.callee"],
          toPropertyKey: ["body.0.body.body.6.declarations.1.init.callee.body.body.2.body.body.1.consequent.body.2.expression.arguments.3.alternate.callee"]
        }
      }),
      classApplyDescriptorDestructureSet: helper("7.13.10", "function _classApplyDescriptorDestructureSet(e,t){if(t.set)return\"__destrObj\"in t||(t.__destrObj={set value(r){t.set.call(e,r)}}),t.__destrObj;if(!t.writable)throw new TypeError(\"attempted to set read only private field\");return t}", {
        globals: ["TypeError"],
        locals: {
          _classApplyDescriptorDestructureSet: ["body.0.id"]
        },
        exportBindingAssignments: [],
        exportName: "_classApplyDescriptorDestructureSet",
        dependencies: {}
      }),
      classApplyDescriptorGet: helper("7.13.10", "function _classApplyDescriptorGet(e,t){return t.get?t.get.call(e):t.value}", {
        globals: [],
        locals: {
          _classApplyDescriptorGet: ["body.0.id"]
        },
        exportBindingAssignments: [],
        exportName: "_classApplyDescriptorGet",
        dependencies: {}
      }),
      classApplyDescriptorSet: helper("7.13.10", "function _classApplyDescriptorSet(e,t,l){if(t.set)t.set.call(e,l);else{if(!t.writable)throw new TypeError(\"attempted to set read only private field\");t.value=l}}", {
        globals: ["TypeError"],
        locals: {
          _classApplyDescriptorSet: ["body.0.id"]
        },
        exportBindingAssignments: [],
        exportName: "_classApplyDescriptorSet",
        dependencies: {}
      }),
      classCheckPrivateStaticAccess: helper("7.13.10", "function _classCheckPrivateStaticAccess(s,a,r){return assertClassBrand(a,s,r)}", {
        globals: [],
        locals: {
          _classCheckPrivateStaticAccess: ["body.0.id"]
        },
        exportBindingAssignments: [],
        exportName: "_classCheckPrivateStaticAccess",
        dependencies: {
          assertClassBrand: ["body.0.body.body.0.argument.callee"]
        }
      }),
      classCheckPrivateStaticFieldDescriptor: helper("7.13.10", "function _classCheckPrivateStaticFieldDescriptor(t,e){if(void 0===t)throw new TypeError(\"attempted to \"+e+\" private static field before its declaration\")}", {
        globals: ["TypeError"],
        locals: {
          _classCheckPrivateStaticFieldDescriptor: ["body.0.id"]
        },
        exportBindingAssignments: [],
        exportName: "_classCheckPrivateStaticFieldDescriptor",
        dependencies: {}
      }),
      classExtractFieldDescriptor: helper("7.13.10", "function _classExtractFieldDescriptor(e,t){return classPrivateFieldGet2(t,e)}", {
        globals: [],
        locals: {
          _classExtractFieldDescriptor: ["body.0.id"]
        },
        exportBindingAssignments: [],
        exportName: "_classExtractFieldDescriptor",
        dependencies: {
          classPrivateFieldGet2: ["body.0.body.body.0.argument.callee"]
        }
      }),
      classPrivateFieldDestructureSet: helper("7.4.4", "function _classPrivateFieldDestructureSet(e,t){var r=classPrivateFieldGet2(t,e);return classApplyDescriptorDestructureSet(e,r)}", {
        globals: [],
        locals: {
          _classPrivateFieldDestructureSet: ["body.0.id"]
        },
        exportBindingAssignments: [],
        exportName: "_classPrivateFieldDestructureSet",
        dependencies: {
          classApplyDescriptorDestructureSet: ["body.0.body.body.1.argument.callee"],
          classPrivateFieldGet2: ["body.0.body.body.0.declarations.0.init.callee"]
        }
      }),
      classPrivateFieldGet: helper("7.0.0-beta.0", "function _classPrivateFieldGet(e,t){var r=classPrivateFieldGet2(t,e);return classApplyDescriptorGet(e,r)}", {
        globals: [],
        locals: {
          _classPrivateFieldGet: ["body.0.id"]
        },
        exportBindingAssignments: [],
        exportName: "_classPrivateFieldGet",
        dependencies: {
          classApplyDescriptorGet: ["body.0.body.body.1.argument.callee"],
          classPrivateFieldGet2: ["body.0.body.body.0.declarations.0.init.callee"]
        }
      }),
      classPrivateFieldSet: helper("7.0.0-beta.0", "function _classPrivateFieldSet(e,t,r){var s=classPrivateFieldGet2(t,e);return classApplyDescriptorSet(e,s,r),r}", {
        globals: [],
        locals: {
          _classPrivateFieldSet: ["body.0.id"]
        },
        exportBindingAssignments: [],
        exportName: "_classPrivateFieldSet",
        dependencies: {
          classApplyDescriptorSet: ["body.0.body.body.1.argument.expressions.0.callee"],
          classPrivateFieldGet2: ["body.0.body.body.0.declarations.0.init.callee"]
        }
      }),
      classPrivateMethodGet: helper("7.1.6", "function _classPrivateMethodGet(s,a,r){return assertClassBrand(a,s),r}", {
        globals: [],
        locals: {
          _classPrivateMethodGet: ["body.0.id"]
        },
        exportBindingAssignments: [],
        exportName: "_classPrivateMethodGet",
        dependencies: {
          assertClassBrand: ["body.0.body.body.0.argument.expressions.0.callee"]
        }
      }),
      classPrivateMethodSet: helper("7.1.6", "function _classPrivateMethodSet(){throw new TypeError(\"attempted to reassign private method\")}", {
        globals: ["TypeError"],
        locals: {
          _classPrivateMethodSet: ["body.0.id"]
        },
        exportBindingAssignments: [],
        exportName: "_classPrivateMethodSet",
        dependencies: {}
      }),
      classStaticPrivateFieldDestructureSet: helper("7.13.10", "function _classStaticPrivateFieldDestructureSet(t,r,s){return assertClassBrand(r,t),classCheckPrivateStaticFieldDescriptor(s,\"set\"),classApplyDescriptorDestructureSet(t,s)}", {
        globals: [],
        locals: {
          _classStaticPrivateFieldDestructureSet: ["body.0.id"]
        },
        exportBindingAssignments: [],
        exportName: "_classStaticPrivateFieldDestructureSet",
        dependencies: {
          classApplyDescriptorDestructureSet: ["body.0.body.body.0.argument.expressions.2.callee"],
          assertClassBrand: ["body.0.body.body.0.argument.expressions.0.callee"],
          classCheckPrivateStaticFieldDescriptor: ["body.0.body.body.0.argument.expressions.1.callee"]
        }
      }),
      classStaticPrivateFieldSpecGet: helper("7.0.2", "function _classStaticPrivateFieldSpecGet(t,s,r){return assertClassBrand(s,t),classCheckPrivateStaticFieldDescriptor(r,\"get\"),classApplyDescriptorGet(t,r)}", {
        globals: [],
        locals: {
          _classStaticPrivateFieldSpecGet: ["body.0.id"]
        },
        exportBindingAssignments: [],
        exportName: "_classStaticPrivateFieldSpecGet",
        dependencies: {
          classApplyDescriptorGet: ["body.0.body.body.0.argument.expressions.2.callee"],
          assertClassBrand: ["body.0.body.body.0.argument.expressions.0.callee"],
          classCheckPrivateStaticFieldDescriptor: ["body.0.body.body.0.argument.expressions.1.callee"]
        }
      }),
      classStaticPrivateFieldSpecSet: helper("7.0.2", "function _classStaticPrivateFieldSpecSet(s,t,r,e){return assertClassBrand(t,s),classCheckPrivateStaticFieldDescriptor(r,\"set\"),classApplyDescriptorSet(s,r,e),e}", {
        globals: [],
        locals: {
          _classStaticPrivateFieldSpecSet: ["body.0.id"]
        },
        exportBindingAssignments: [],
        exportName: "_classStaticPrivateFieldSpecSet",
        dependencies: {
          classApplyDescriptorSet: ["body.0.body.body.0.argument.expressions.2.callee"],
          assertClassBrand: ["body.0.body.body.0.argument.expressions.0.callee"],
          classCheckPrivateStaticFieldDescriptor: ["body.0.body.body.0.argument.expressions.1.callee"]
        }
      }),
      classStaticPrivateMethodSet: helper("7.3.2", "function _classStaticPrivateMethodSet(){throw new TypeError(\"attempted to set read only static private field\")}", {
        globals: ["TypeError"],
        locals: {
          _classStaticPrivateMethodSet: ["body.0.id"]
        },
        exportBindingAssignments: [],
        exportName: "_classStaticPrivateMethodSet",
        dependencies: {}
      }),
      defineEnumerableProperties: helper("7.0.0-beta.0", "function _defineEnumerableProperties(e,r){for(var t in r){var n=r[t];n.configurable=n.enumerable=!0,\"value\"in n&&(n.writable=!0),Object.defineProperty(e,t,n)}if(Object.getOwnPropertySymbols)for(var a=Object.getOwnPropertySymbols(r),b=0;b<a.length;b++){var i=a[b];(n=r[i]).configurable=n.enumerable=!0,\"value\"in n&&(n.writable=!0),Object.defineProperty(e,i,n)}return e}", {
        globals: ["Object"],
        locals: {
          _defineEnumerableProperties: ["body.0.id"]
        },
        exportBindingAssignments: [],
        exportName: "_defineEnumerableProperties",
        dependencies: {}
      }),
      dispose: helper("7.22.0", "function dispose_SuppressedError(r,e){return\"undefined\"!=typeof SuppressedError?dispose_SuppressedError=SuppressedError:(dispose_SuppressedError=function(r,e){this.suppressed=e,this.error=r,this.stack=Error().stack},dispose_SuppressedError.prototype=Object.create(Error.prototype,{constructor:{value:dispose_SuppressedError,writable:!0,configurable:!0}})),new dispose_SuppressedError(r,e)}function _dispose(r,e,s){function next(){for(;r.length>0;)try{var o=r.pop(),p=o.d.call(o.v);if(o.a)return Promise.resolve(p).then(next,err)}catch(r){return err(r)}if(s)throw e}function err(r){return e=s?new dispose_SuppressedError(e,r):r,s=!0,next()}return next()}", {
        globals: ["SuppressedError", "Error", "Object", "Promise"],
        locals: {
          dispose_SuppressedError: ["body.0.id", "body.0.body.body.0.argument.expressions.0.alternate.expressions.1.left.object", "body.0.body.body.0.argument.expressions.0.alternate.expressions.1.right.arguments.1.properties.0.value.properties.0.value", "body.0.body.body.0.argument.expressions.1.callee", "body.1.body.body.1.body.body.0.argument.expressions.0.right.consequent.callee", "body.0.body.body.0.argument.expressions.0.consequent.left", "body.0.body.body.0.argument.expressions.0.alternate.expressions.0.left"],
          _dispose: ["body.1.id"]
        },
        exportBindingAssignments: [],
        exportName: "_dispose",
        dependencies: {}
      }),
      objectSpread: helper("7.0.0-beta.0", "function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?Object(arguments[r]):{},o=Object.keys(t);\"function\"==typeof Object.getOwnPropertySymbols&&o.push.apply(o,Object.getOwnPropertySymbols(t).filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),o.forEach((function(r){defineProperty(e,r,t[r])}))}return e}", {
        globals: ["Object"],
        locals: {
          _objectSpread: ["body.0.id"]
        },
        exportBindingAssignments: [],
        exportName: "_objectSpread",
        dependencies: {
          defineProperty: ["body.0.body.body.0.body.body.1.expression.expressions.1.arguments.0.body.body.0.expression.callee"]
        }
      }),
      using: helper("7.22.0", "function _using(o,n,e){if(null==n)return n;if(Object(n)!==n)throw new TypeError(\"using declarations can only be used with objects, functions, null, or undefined.\");if(e)var r=n[Symbol.asyncDispose||Symbol.for(\"Symbol.asyncDispose\")];if(null==r&&(r=n[Symbol.dispose||Symbol.for(\"Symbol.dispose\")]),\"function\"!=typeof r)throw new TypeError(\"Property [Symbol.dispose] is not a function.\");return o.push({v:n,d:r,a:e}),n}", {
        globals: ["Object", "TypeError", "Symbol"],
        locals: {
          _using: ["body.0.id"]
        },
        exportBindingAssignments: [],
        exportName: "_using",
        dependencies: {}
      })
    });
  }
  return exports$2X;
}

var exports$2W = {},
  _dewExec$2V = false;
function dew$2V() {
  if (_dewExec$2V) return exports$2W;
  _dewExec$2V = true;
  Object.defineProperty(exports$2W, "__esModule", {
    value: true
  });
  exports$2W.default = void 0;
  exports$2W.get = get;
  exports$2W.getDependencies = getDependencies;
  exports$2W.list = void 0;
  exports$2W.minVersion = minVersion;
  var _t = dew$3i();
  var _helpersGenerated = dew$2W();
  const {
    cloneNode,
    identifier
  } = _t;
  function deep(obj, path, value) {
    try {
      const parts = path.split(".");
      let last = parts.shift();
      while (parts.length > 0) {
        obj = obj[last];
        last = parts.shift();
      }
      if (arguments.length > 2) {
        obj[last] = value;
      } else {
        return obj[last];
      }
    } catch (e) {
      e.message += ` (when accessing ${path})`;
      throw e;
    }
  }
  function permuteHelperAST(ast, metadata, bindingName, localBindings, getDependency, adjustAst) {
    const {
      locals,
      dependencies,
      exportBindingAssignments,
      exportName
    } = metadata;
    const bindings = new Set(localBindings || []);
    if (bindingName) bindings.add(bindingName);
    for (const [name, paths] of (Object.entries || (o => Object.keys(o).map(k => [k, o[k]])))(locals)) {
      let newName = name;
      if (bindingName && name === exportName) {
        newName = bindingName;
      } else {
        while (bindings.has(newName)) newName = "_" + newName;
      }
      if (newName !== name) {
        for (const path of paths) {
          deep(ast, path, identifier(newName));
        }
      }
    }
    for (const [name, paths] of (Object.entries || (o => Object.keys(o).map(k => [k, o[k]])))(dependencies)) {
      const ref = typeof getDependency === "function" && getDependency(name) || identifier(name);
      for (const path of paths) {
        deep(ast, path, cloneNode(ref));
      }
    }
    adjustAst == null || adjustAst(ast, exportName, map => {
      exportBindingAssignments.forEach(p => deep(ast, p, map(deep(ast, p))));
    });
  }
  const helperData = Object.create(null);
  function loadHelper(name) {
    if (!helperData[name]) {
      const helper = _helpersGenerated.default[name];
      if (!helper) {
        throw Object.assign(new ReferenceError(`Unknown helper ${name}`), {
          code: "BABEL_HELPER_UNKNOWN",
          helper: name
        });
      }
      helperData[name] = {
        minVersion: helper.minVersion,
        build(getDependency, bindingName, localBindings, adjustAst) {
          const ast = helper.ast();
          permuteHelperAST(ast, helper.metadata, bindingName, localBindings, getDependency, adjustAst);
          return {
            nodes: ast.body,
            globals: helper.metadata.globals
          };
        },
        getDependencies() {
          return Object.keys(helper.metadata.dependencies);
        }
      };
    }
    return helperData[name];
  }
  function get(name, getDependency, bindingName, localBindings, adjustAst) {
    {
      if (typeof bindingName === "object") {
        const id = bindingName;
        if ((id == null ? void 0 : id.type) === "Identifier") {
          bindingName = id.name;
        } else {
          bindingName = undefined;
        }
      }
    }
    return loadHelper(name).build(getDependency, bindingName, localBindings, adjustAst);
  }
  function minVersion(name) {
    return loadHelper(name).minVersion;
  }
  function getDependencies(name) {
    return loadHelper(name).getDependencies();
  }
  {
    exports$2W.ensure = name => {
      loadHelper(name);
    };
  }
  exports$2W.list = Object.keys(_helpersGenerated.default).map(name => name.replace(/^_/, ""));
  exports$2W.default = get;
  return exports$2W;
}

var exports$2V = {},
  _dewExec$2U = false;
function dew$2U() {
  if (_dewExec$2U) return exports$2V;
  _dewExec$2U = true;
  Object.defineProperty(exports$2V, "__esModule", {
    value: true
  });
  exports$2V.Var = exports$2V.User = exports$2V.Statement = exports$2V.SpreadProperty = exports$2V.Scope = exports$2V.RestProperty = exports$2V.ReferencedMemberExpression = exports$2V.ReferencedIdentifier = exports$2V.Referenced = exports$2V.Pure = exports$2V.NumericLiteralTypeAnnotation = exports$2V.Generated = exports$2V.ForAwaitStatement = exports$2V.Flow = exports$2V.Expression = exports$2V.ExistentialTypeParam = exports$2V.BlockScoped = exports$2V.BindingIdentifier = void 0;
  exports$2V.ReferencedIdentifier = ["Identifier", "JSXIdentifier"];
  exports$2V.ReferencedMemberExpression = ["MemberExpression"];
  exports$2V.BindingIdentifier = ["Identifier"];
  exports$2V.Statement = ["Statement"];
  exports$2V.Expression = ["Expression"];
  exports$2V.Scope = ["Scopable", "Pattern"];
  exports$2V.Referenced = null;
  exports$2V.BlockScoped = null;
  exports$2V.Var = ["VariableDeclaration"];
  exports$2V.User = null;
  exports$2V.Generated = null;
  exports$2V.Pure = null;
  exports$2V.Flow = ["Flow", "ImportDeclaration", "ExportDeclaration", "ImportSpecifier"];
  exports$2V.RestProperty = ["RestElement"];
  exports$2V.SpreadProperty = ["RestElement"];
  exports$2V.ExistentialTypeParam = ["ExistsTypeAnnotation"];
  exports$2V.NumericLiteralTypeAnnotation = ["NumberLiteralTypeAnnotation"];
  exports$2V.ForAwaitStatement = ["ForOfStatement"];
  return exports$2V;
}

var exports$2U = {},
  _dewExec$2T = false;
function dew$2T() {
  if (_dewExec$2T) return exports$2U;
  _dewExec$2T = true;
  /**
   * Helpers.
   */

  var s = 1000;
  var m = s * 60;
  var h = m * 60;
  var d = h * 24;
  var w = d * 7;
  var y = d * 365.25;

  /**
   * Parse or format the given `val`.
   *
   * Options:
   *
   *  - `long` verbose formatting [false]
   *
   * @param {String|Number} val
   * @param {Object} [options]
   * @throws {Error} throw an error if val is not a non-empty string or a number
   * @return {String|Number}
   * @api public
   */

  exports$2U = function (val, options) {
    options = options || {};
    var type = typeof val;
    if (type === "string" && val.length > 0) {
      return parse(val);
    } else if (type === "number" && isFinite(val)) {
      return options.long ? fmtLong(val) : fmtShort(val);
    }
    throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(val));
  };

  /**
   * Parse the given `str` and return milliseconds.
   *
   * @param {String} str
   * @return {Number}
   * @api private
   */

  function parse(str) {
    str = String(str);
    if (str.length > 100) {
      return;
    }
    var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(str);
    if (!match) {
      return;
    }
    var n = parseFloat(match[1]);
    var type = (match[2] || "ms").toLowerCase();
    switch (type) {
      case "years":
      case "year":
      case "yrs":
      case "yr":
      case "y":
        return n * y;
      case "weeks":
      case "week":
      case "w":
        return n * w;
      case "days":
      case "day":
      case "d":
        return n * d;
      case "hours":
      case "hour":
      case "hrs":
      case "hr":
      case "h":
        return n * h;
      case "minutes":
      case "minute":
      case "mins":
      case "min":
      case "m":
        return n * m;
      case "seconds":
      case "second":
      case "secs":
      case "sec":
      case "s":
        return n * s;
      case "milliseconds":
      case "millisecond":
      case "msecs":
      case "msec":
      case "ms":
        return n;
      default:
        return undefined;
    }
  }

  /**
   * Short format for `ms`.
   *
   * @param {Number} ms
   * @return {String}
   * @api private
   */

  function fmtShort(ms) {
    var msAbs = Math.abs(ms);
    if (msAbs >= d) {
      return Math.round(ms / d) + "d";
    }
    if (msAbs >= h) {
      return Math.round(ms / h) + "h";
    }
    if (msAbs >= m) {
      return Math.round(ms / m) + "m";
    }
    if (msAbs >= s) {
      return Math.round(ms / s) + "s";
    }
    return ms + "ms";
  }

  /**
   * Long format for `ms`.
   *
   * @param {Number} ms
   * @return {String}
   * @api private
   */

  function fmtLong(ms) {
    var msAbs = Math.abs(ms);
    if (msAbs >= d) {
      return plural(ms, msAbs, d, "day");
    }
    if (msAbs >= h) {
      return plural(ms, msAbs, h, "hour");
    }
    if (msAbs >= m) {
      return plural(ms, msAbs, m, "minute");
    }
    if (msAbs >= s) {
      return plural(ms, msAbs, s, "second");
    }
    return ms + " ms";
  }

  /**
   * Pluralization helper.
   */

  function plural(ms, msAbs, n, name) {
    var isPlural = msAbs >= n * 1.5;
    return Math.round(ms / n) + " " + name + (isPlural ? "s" : "");
  }
  return exports$2U;
}

var exports$2T = {},
  _dewExec$2S = false;
var _global$6 = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
function dew$2S() {
  if (_dewExec$2S) return exports$2T;
  _dewExec$2S = true;
  /**
   * This is the common logic for both the Node.js and web browser
   * implementations of `debug()`.
   */

  function setup(env) {
    createDebug.debug = createDebug;
    createDebug.default = createDebug;
    createDebug.coerce = coerce;
    createDebug.disable = disable;
    createDebug.enable = enable;
    createDebug.enabled = enabled;
    createDebug.humanize = dew$2T();
    createDebug.destroy = destroy;
    Object.keys(env).forEach(key => {
      createDebug[key] = env[key];
    });

    /**
    * The currently active debug mode names, and names to skip.
    */

    createDebug.names = [];
    createDebug.skips = [];

    /**
    * Map of special "%n" handling functions, for the debug "format" argument.
    *
    * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
    */
    createDebug.formatters = {};

    /**
    * Selects a color for a debug namespace
    * @param {String} namespace The namespace string for the debug instance to be colored
    * @return {Number|String} An ANSI color code for the given namespace
    * @api private
    */
    function selectColor(namespace) {
      let hash = 0;
      for (let i = 0; i < namespace.length; i++) {
        hash = (hash << 5) - hash + namespace.charCodeAt(i);
        hash |= 0; // Convert to 32bit integer
      }
      return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
    }
    createDebug.selectColor = selectColor;

    /**
    * Create a debugger with the given `namespace`.
    *
    * @param {String} namespace
    * @return {Function}
    * @api public
    */
    function createDebug(namespace) {
      let prevTime;
      let enableOverride = null;
      let namespacesCache;
      let enabledCache;
      function debug(...args) {
        // Disabled?
        if (!debug.enabled) {
          return;
        }
        const self = debug;

        // Set `diff` timestamp
        const curr = Number(new Date());
        const ms = curr - (prevTime || curr);
        self.diff = ms;
        self.prev = prevTime;
        self.curr = curr;
        prevTime = curr;
        args[0] = createDebug.coerce(args[0]);
        if (typeof args[0] !== "string") {
          // Anything else let's inspect with %O
          args.unshift("%O");
        }

        // Apply any `formatters` transformations
        let index = 0;
        args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
          // If we encounter an escaped % then don't increase the array index
          if (match === "%%") {
            return "%";
          }
          index++;
          const formatter = createDebug.formatters[format];
          if (typeof formatter === "function") {
            const val = args[index];
            match = formatter.call(self, val);

            // Now we need to remove `args[index]` since it's inlined in the `format`
            args.splice(index, 1);
            index--;
          }
          return match;
        });

        // Apply env-specific formatting (colors, etc.)
        createDebug.formatArgs.call(self, args);
        const logFn = self.log || createDebug.log;
        logFn.apply(self, args);
      }
      debug.namespace = namespace;
      debug.useColors = createDebug.useColors();
      debug.color = createDebug.selectColor(namespace);
      debug.extend = extend;
      debug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.

      Object.defineProperty(debug, "enabled", {
        enumerable: true,
        configurable: false,
        get: () => {
          if (enableOverride !== null) {
            return enableOverride;
          }
          if (namespacesCache !== createDebug.namespaces) {
            namespacesCache = createDebug.namespaces;
            enabledCache = createDebug.enabled(namespace);
          }
          return enabledCache;
        },
        set: v => {
          enableOverride = v;
        }
      });

      // Env-specific initialization logic for debug instances
      if (typeof createDebug.init === "function") {
        createDebug.init(debug);
      }
      return debug;
    }
    function extend(namespace, delimiter) {
      const newDebug = createDebug((this || _global$6).namespace + (typeof delimiter === "undefined" ? ":" : delimiter) + namespace);
      newDebug.log = (this || _global$6).log;
      return newDebug;
    }

    /**
    * Enables a debug mode by namespaces. This can include modes
    * separated by a colon and wildcards.
    *
    * @param {String} namespaces
    * @api public
    */
    function enable(namespaces) {
      createDebug.save(namespaces);
      createDebug.namespaces = namespaces;
      createDebug.names = [];
      createDebug.skips = [];
      let i;
      const split = (typeof namespaces === "string" ? namespaces : "").split(/[\s,]+/);
      const len = split.length;
      for (i = 0; i < len; i++) {
        if (!split[i]) {
          // ignore empty strings
          continue;
        }
        namespaces = split[i].replace(/\*/g, ".*?");
        if (namespaces[0] === "-") {
          createDebug.skips.push(new RegExp("^" + namespaces.slice(1) + "$"));
        } else {
          createDebug.names.push(new RegExp("^" + namespaces + "$"));
        }
      }
    }

    /**
    * Disable debug output.
    *
    * @return {String} namespaces
    * @api public
    */
    function disable() {
      const namespaces = [...createDebug.names.map(toNamespace), ...createDebug.skips.map(toNamespace).map(namespace => "-" + namespace)].join(",");
      createDebug.enable("");
      return namespaces;
    }

    /**
    * Returns true if the given mode name is enabled, false otherwise.
    *
    * @param {String} name
    * @return {Boolean}
    * @api public
    */
    function enabled(name) {
      if (name[name.length - 1] === "*") {
        return true;
      }
      let i;
      let len;
      for (i = 0, len = createDebug.skips.length; i < len; i++) {
        if (createDebug.skips[i].test(name)) {
          return false;
        }
      }
      for (i = 0, len = createDebug.names.length; i < len; i++) {
        if (createDebug.names[i].test(name)) {
          return true;
        }
      }
      return false;
    }

    /**
    * Convert regexp to namespace
    *
    * @param {RegExp} regxep
    * @return {String} namespace
    * @api private
    */
    function toNamespace(regexp) {
      return regexp.toString().substring(2, regexp.toString().length - 2).replace(/\.\*\?$/, "*");
    }

    /**
    * Coerce `val`.
    *
    * @param {Mixed} val
    * @return {Mixed}
    * @api private
    */
    function coerce(val) {
      if (val instanceof Error) {
        return val.stack || val.message;
      }
      return val;
    }

    /**
    * XXX DO NOT USE. This is a temporary stub function.
    * XXX It WILL be removed in the next major release.
    */
    function destroy() {
      console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
    }
    createDebug.enable(createDebug.load());
    return createDebug;
  }
  exports$2T = setup;
  return exports$2T;
}

var exports$2S = {},
  _dewExec$2R = false;
var _global$5 = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
function dew$2R() {
  if (_dewExec$2R) return exports$2S;
  _dewExec$2R = true;
  var process = _nodeProcess;
  /* eslint-env browser */

  /**
   * This is the web browser implementation of `debug()`.
   */

  exports$2S.formatArgs = formatArgs;
  exports$2S.save = save;
  exports$2S.load = load;
  exports$2S.useColors = useColors;
  exports$2S.storage = localstorage();
  exports$2S.destroy = (() => {
    let warned = false;
    return () => {
      if (!warned) {
        warned = true;
        console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
      }
    };
  })();

  /**
   * Colors.
   */

  exports$2S.colors = ["#0000CC", "#0000FF", "#0033CC", "#0033FF", "#0066CC", "#0066FF", "#0099CC", "#0099FF", "#00CC00", "#00CC33", "#00CC66", "#00CC99", "#00CCCC", "#00CCFF", "#3300CC", "#3300FF", "#3333CC", "#3333FF", "#3366CC", "#3366FF", "#3399CC", "#3399FF", "#33CC00", "#33CC33", "#33CC66", "#33CC99", "#33CCCC", "#33CCFF", "#6600CC", "#6600FF", "#6633CC", "#6633FF", "#66CC00", "#66CC33", "#9900CC", "#9900FF", "#9933CC", "#9933FF", "#99CC00", "#99CC33", "#CC0000", "#CC0033", "#CC0066", "#CC0099", "#CC00CC", "#CC00FF", "#CC3300", "#CC3333", "#CC3366", "#CC3399", "#CC33CC", "#CC33FF", "#CC6600", "#CC6633", "#CC9900", "#CC9933", "#CCCC00", "#CCCC33", "#FF0000", "#FF0033", "#FF0066", "#FF0099", "#FF00CC", "#FF00FF", "#FF3300", "#FF3333", "#FF3366", "#FF3399", "#FF33CC", "#FF33FF", "#FF6600", "#FF6633", "#FF9900", "#FF9933", "#FFCC00", "#FFCC33"];

  /**
   * Currently only WebKit-based Web Inspectors, Firefox >= v31,
   * and the Firebug extension (any Firefox version) are known
   * to support "%c" CSS customizations.
   *
   * TODO: add a `localStorage` variable to explicitly enable/disable colors
   */

  // eslint-disable-next-line complexity
  function useColors() {
    // NB: In an Electron preload script, document will be defined but not fully
    // initialized. Since we know we're in Chrome, we'll just detect this case
    // explicitly
    if (typeof window !== "undefined" && window.process && (window.process.type === "renderer" || window.process.__nwjs)) {
      return true;
    }

    // Internet Explorer and Edge do not support colors.
    if (typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
      return false;
    }
    let m;

    // Is webkit? http://stackoverflow.com/a/16459606/376773
    // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
    return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance ||
    // Is firebug? http://stackoverflow.com/a/398120/376773
    typeof window !== "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) ||
    // Is firefox >= v31?
    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
    typeof navigator !== "undefined" && navigator.userAgent && (m = navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)) && parseInt(m[1], 10) >= 31 ||
    // Double check webkit in userAgent just in case we are in a worker
    typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
  }

  /**
   * Colorize log arguments if enabled.
   *
   * @api public
   */

  function formatArgs(args) {
    args[0] = ((this || _global$5).useColors ? "%c" : "") + (this || _global$5).namespace + ((this || _global$5).useColors ? " %c" : " ") + args[0] + ((this || _global$5).useColors ? "%c " : " ") + "+" + exports$2S.humanize((this || _global$5).diff);
    if (!(this || _global$5).useColors) {
      return;
    }
    const c = "color: " + (this || _global$5).color;
    args.splice(1, 0, c, "color: inherit");

    // The final "%c" is somewhat tricky, because there could be other
    // arguments passed either before or after the %c, so we need to
    // figure out the correct index to insert the CSS into
    let index = 0;
    let lastC = 0;
    args[0].replace(/%[a-zA-Z%]/g, match => {
      if (match === "%%") {
        return;
      }
      index++;
      if (match === "%c") {
        // We only are interested in the *last* %c
        // (the user may have provided their own)
        lastC = index;
      }
    });
    args.splice(lastC, 0, c);
  }

  /**
   * Invokes `console.debug()` when available.
   * No-op when `console.debug` is not a "function".
   * If `console.debug` is not available, falls back
   * to `console.log`.
   *
   * @api public
   */
  exports$2S.log = console.debug || console.log || (() => {});

  /**
   * Save `namespaces`.
   *
   * @param {String} namespaces
   * @api private
   */
  function save(namespaces) {
    try {
      if (namespaces) {
        exports$2S.storage.setItem("debug", namespaces);
      } else {
        exports$2S.storage.removeItem("debug");
      }
    } catch (error) {
      // Swallow
      // XXX (@Qix-) should we be logging these?
    }
  }

  /**
   * Load `namespaces`.
   *
   * @return {String} returns the previously persisted debug modes
   * @api private
   */
  function load() {
    let r;
    try {
      r = exports$2S.storage.getItem("debug");
    } catch (error) {
      // Swallow
      // XXX (@Qix-) should we be logging these?
    }

    // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
    if (!r && typeof process !== "undefined" && "env" in process) {
      r = process.env.DEBUG;
    }
    return r;
  }

  /**
   * Localstorage attempts to return the localstorage.
   *
   * This is necessary because safari throws
   * when a user disables cookies/localstorage
   * and you attempt to access it.
   *
   * @return {LocalStorage}
   * @api private
   */

  function localstorage() {
    try {
      // TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
      // The Browser also has localStorage in the global context.
      return localStorage;
    } catch (error) {
      // Swallow
      // XXX (@Qix-) should we be logging these?
    }
  }
  exports$2S = dew$2S()(exports$2S);
  const {
    formatters
  } = exports$2S;

  /**
   * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
   */

  formatters.j = function (v) {
    try {
      return JSON.stringify(v);
    } catch (error) {
      return "[UnexpectedJSONParseError]: " + error.message;
    }
  };
  return exports$2S;
}

var exports$2R = {},
  _dewExec$2Q = false;
var _global$4 = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
function dew$2Q() {
  if (_dewExec$2Q) return exports$2R;
  _dewExec$2Q = true;
  var process = _nodeProcess;
  /**
   * Module dependencies.
   */

  const tty = _tty;
  const util = _util;

  /**
   * This is the Node.js implementation of `debug()`.
   */

  exports$2R.init = init;
  exports$2R.log = log;
  exports$2R.formatArgs = formatArgs;
  exports$2R.save = save;
  exports$2R.load = load;
  exports$2R.useColors = useColors;
  exports$2R.destroy = util.deprecate(() => {}, "Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");

  /**
   * Colors.
   */

  exports$2R.colors = [6, 2, 3, 4, 5, 1];
  try {
    // Optional dependency (as in, doesn't need to be installed, NOT like optionalDependencies in package.json)
    // eslint-disable-next-line import/no-extraneous-dependencies
    const supportsColor = dew$35();
    if (supportsColor && (supportsColor.stderr || supportsColor).level >= 2) {
      exports$2R.colors = [20, 21, 26, 27, 32, 33, 38, 39, 40, 41, 42, 43, 44, 45, 56, 57, 62, 63, 68, 69, 74, 75, 76, 77, 78, 79, 80, 81, 92, 93, 98, 99, 112, 113, 128, 129, 134, 135, 148, 149, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 178, 179, 184, 185, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 214, 215, 220, 221];
    }
  } catch (error) {
    // Swallow - we only care if `supports-color` is available; it doesn't have to be.
  }

  /**
   * Build up the default `inspectOpts` object from the environment variables.
   *
   *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js
   */

  exports$2R.inspectOpts = Object.keys(process.env).filter(key => {
    return /^debug_/i.test(key);
  }).reduce((obj, key) => {
    // Camel-case
    const prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, (_, k) => {
      return k.toUpperCase();
    });

    // Coerce string value into JS value
    let val = process.env[key];
    if (/^(yes|on|true|enabled)$/i.test(val)) {
      val = true;
    } else if (/^(no|off|false|disabled)$/i.test(val)) {
      val = false;
    } else if (val === "null") {
      val = null;
    } else {
      val = Number(val);
    }
    obj[prop] = val;
    return obj;
  }, {});

  /**
   * Is stdout a TTY? Colored output is enabled when `true`.
   */

  function useColors() {
    return "colors" in exports$2R.inspectOpts ? Boolean(exports$2R.inspectOpts.colors) : tty.isatty(process.stderr.fd);
  }

  /**
   * Adds ANSI color escape codes if enabled.
   *
   * @api public
   */

  function formatArgs(args) {
    const {
      namespace: name,
      useColors
    } = this || _global$4;
    if (useColors) {
      const c = (this || _global$4).color;
      const colorCode = "\x1B[3" + (c < 8 ? c : "8;5;" + c);
      const prefix = `  ${colorCode};1m${name} \u001B[0m`;
      args[0] = prefix + args[0].split("\n").join("\n" + prefix);
      args.push(colorCode + "m+" + exports$2R.humanize((this || _global$4).diff) + "\x1B[0m");
    } else {
      args[0] = getDate() + name + " " + args[0];
    }
  }
  function getDate() {
    if (exports$2R.inspectOpts.hideDate) {
      return "";
    }
    return new Date().toISOString() + " ";
  }

  /**
   * Invokes `util.formatWithOptions()` with the specified arguments and writes to stderr.
   */

  function log(...args) {
    return process.stderr.write(util.formatWithOptions(exports$2R.inspectOpts, ...args) + "\n");
  }

  /**
   * Save `namespaces`.
   *
   * @param {String} namespaces
   * @api private
   */
  function save(namespaces) {
    if (namespaces) {
      process.env.DEBUG = namespaces;
    } else {
      // If you set a process.env field to null or undefined, it gets cast to the
      // string 'null' or 'undefined'. Just delete instead.
      delete process.env.DEBUG;
    }
  }

  /**
   * Load `namespaces`.
   *
   * @return {String} returns the previously persisted debug modes
   * @api private
   */

  function load() {
    return process.env.DEBUG;
  }

  /**
   * Init logic for `debug` instances.
   *
   * Create a new `inspectOpts` object in case `useColors` is set
   * differently for a particular `debug` instance.
   */

  function init(debug) {
    debug.inspectOpts = {};
    const keys = Object.keys(exports$2R.inspectOpts);
    for (let i = 0; i < keys.length; i++) {
      debug.inspectOpts[keys[i]] = exports$2R.inspectOpts[keys[i]];
    }
  }
  exports$2R = dew$2S()(exports$2R);
  const {
    formatters
  } = exports$2R;

  /**
   * Map %o to `util.inspect()`, all on a single line.
   */

  formatters.o = function (v) {
    (this || _global$4).inspectOpts.colors = (this || _global$4).useColors;
    return util.inspect(v, (this || _global$4).inspectOpts).split("\n").map(str => str.trim()).join(" ");
  };

  /**
   * Map %O to `util.inspect()`, allowing multiple lines if needed.
   */

  formatters.O = function (v) {
    (this || _global$4).inspectOpts.colors = (this || _global$4).useColors;
    return util.inspect(v, (this || _global$4).inspectOpts);
  };
  return exports$2R;
}

var exports$2Q = {},
  _dewExec$2P = false;
function dew$2P() {
  if (_dewExec$2P) return exports$2Q;
  _dewExec$2P = true;
  var process = _nodeProcess;
  /**
   * Detect Electron renderer / nwjs process, which is node, but we should
   * treat as a browser.
   */

  if (typeof process === "undefined" || process.type === "renderer" || process.browser === true || process.__nwjs) {
    exports$2Q = dew$2R();
  } else {
    exports$2Q = dew$2Q();
  }
  return exports$2Q;
}

var exports$2P = {},
  _dewExec$2O = false;
function dew$2O() {
  if (_dewExec$2O) return exports$2P;
  _dewExec$2O = true;
  Object.defineProperty(exports$2P, "__esModule", {
    value: true
  });
  exports$2P.isBindingIdentifier = isBindingIdentifier;
  exports$2P.isBlockScoped = isBlockScoped;
  exports$2P.isExpression = isExpression;
  exports$2P.isFlow = isFlow;
  exports$2P.isForAwaitStatement = isForAwaitStatement;
  exports$2P.isGenerated = isGenerated;
  exports$2P.isPure = isPure;
  exports$2P.isReferenced = isReferenced;
  exports$2P.isReferencedIdentifier = isReferencedIdentifier;
  exports$2P.isReferencedMemberExpression = isReferencedMemberExpression;
  exports$2P.isRestProperty = isRestProperty;
  exports$2P.isScope = isScope;
  exports$2P.isSpreadProperty = isSpreadProperty;
  exports$2P.isStatement = isStatement;
  exports$2P.isUser = isUser;
  exports$2P.isVar = isVar;
  var _t = dew$3i();
  const {
    isBinding,
    isBlockScoped: nodeIsBlockScoped,
    isExportDeclaration,
    isExpression: nodeIsExpression,
    isFlow: nodeIsFlow,
    isForStatement,
    isForXStatement,
    isIdentifier,
    isImportDeclaration,
    isImportSpecifier,
    isJSXIdentifier,
    isJSXMemberExpression,
    isMemberExpression,
    isRestElement: nodeIsRestElement,
    isReferenced: nodeIsReferenced,
    isScope: nodeIsScope,
    isStatement: nodeIsStatement,
    isVar: nodeIsVar,
    isVariableDeclaration,
    react,
    isForOfStatement
  } = _t;
  const {
    isCompatTag
  } = react;
  function isReferencedIdentifier(opts) {
    const {
      node,
      parent
    } = this;
    if (!isIdentifier(node, opts) && !isJSXMemberExpression(parent, opts)) {
      if (isJSXIdentifier(node, opts)) {
        if (isCompatTag(node.name)) return false;
      } else {
        return false;
      }
    }
    return nodeIsReferenced(node, parent, this.parentPath.parent);
  }
  function isReferencedMemberExpression() {
    const {
      node,
      parent
    } = this;
    return isMemberExpression(node) && nodeIsReferenced(node, parent);
  }
  function isBindingIdentifier() {
    const {
      node,
      parent
    } = this;
    const grandparent = this.parentPath.parent;
    return isIdentifier(node) && isBinding(node, parent, grandparent);
  }
  function isStatement() {
    const {
      node,
      parent
    } = this;
    if (nodeIsStatement(node)) {
      if (isVariableDeclaration(node)) {
        if (isForXStatement(parent, {
          left: node
        })) return false;
        if (isForStatement(parent, {
          init: node
        })) return false;
      }
      return true;
    } else {
      return false;
    }
  }
  function isExpression() {
    if (this.isIdentifier()) {
      return this.isReferencedIdentifier();
    } else {
      return nodeIsExpression(this.node);
    }
  }
  function isScope() {
    return nodeIsScope(this.node, this.parent);
  }
  function isReferenced() {
    return nodeIsReferenced(this.node, this.parent);
  }
  function isBlockScoped() {
    return nodeIsBlockScoped(this.node);
  }
  function isVar() {
    return nodeIsVar(this.node);
  }
  function isUser() {
    return this.node && !!this.node.loc;
  }
  function isGenerated() {
    return !this.isUser();
  }
  function isPure(constantsOnly) {
    return this.scope.isPure(this.node, constantsOnly);
  }
  function isFlow() {
    const {
      node
    } = this;
    if (nodeIsFlow(node)) {
      return true;
    } else if (isImportDeclaration(node)) {
      return node.importKind === "type" || node.importKind === "typeof";
    } else if (isExportDeclaration(node)) {
      return node.exportKind === "type";
    } else if (isImportSpecifier(node)) {
      return node.importKind === "type" || node.importKind === "typeof";
    } else {
      return false;
    }
  }
  function isRestProperty() {
    var _this$parentPath;
    return nodeIsRestElement(this.node) && ((_this$parentPath = this.parentPath) == null ? void 0 : _this$parentPath.isObjectPattern());
  }
  function isSpreadProperty() {
    var _this$parentPath2;
    return nodeIsRestElement(this.node) && ((_this$parentPath2 = this.parentPath) == null ? void 0 : _this$parentPath2.isObjectExpression());
  }
  function isForAwaitStatement() {
    return isForOfStatement(this.node, {
      await: true
    });
  }
  {
    exports$2P.isExistentialTypeParam = function isExistentialTypeParam() {
      throw new Error("`path.isExistentialTypeParam` has been renamed to `path.isExistsTypeAnnotation()` in Babel 7.");
    };
    exports$2P.isNumericLiteralTypeAnnotation = function isNumericLiteralTypeAnnotation() {
      throw new Error("`path.isNumericLiteralTypeAnnotation()` has been renamed to `path.isNumberLiteralTypeAnnotation()` in Babel 7.");
    };
  }
  return exports$2P;
}

var exports$2O = {},
  _dewExec$2N = false;
function dew$2N() {
  if (_dewExec$2N) return exports$2O;
  _dewExec$2N = true;
  Object.defineProperty(exports$2O, "__esModule", {
    value: true
  });
  exports$2O.environmentVisitor = environmentVisitor;
  exports$2O.explode = explode$1;
  exports$2O.isExplodedVisitor = isExplodedVisitor;
  exports$2O.merge = merge;
  exports$2O.verify = verify$1;
  var virtualTypes = dew$2U();
  var virtualTypesValidators = dew$2O();
  var _t = dew$3i();
  var _context = dew$20();
  const {
    DEPRECATED_KEYS,
    DEPRECATED_ALIASES,
    FLIPPED_ALIAS_KEYS,
    TYPES,
    __internal__deprecationWarning: deprecationWarning
  } = _t;
  function isVirtualType(type) {
    return type in virtualTypes;
  }
  function isExplodedVisitor(visitor) {
    return visitor == null ? void 0 : visitor._exploded;
  }
  function explode$1(visitor) {
    if (isExplodedVisitor(visitor)) return visitor;
    visitor._exploded = true;
    for (const nodeType of Object.keys(visitor)) {
      if (shouldIgnoreKey(nodeType)) continue;
      const parts = nodeType.split("|");
      if (parts.length === 1) continue;
      const fns = visitor[nodeType];
      delete visitor[nodeType];
      for (const part of parts) {
        visitor[part] = fns;
      }
    }
    verify$1(visitor);
    delete visitor.__esModule;
    ensureEntranceObjects(visitor);
    ensureCallbackArrays(visitor);
    for (const nodeType of Object.keys(visitor)) {
      if (shouldIgnoreKey(nodeType)) continue;
      if (!isVirtualType(nodeType)) continue;
      const fns = visitor[nodeType];
      for (const type of Object.keys(fns)) {
        fns[type] = wrapCheck(nodeType, fns[type]);
      }
      delete visitor[nodeType];
      const types = virtualTypes[nodeType];
      if (types !== null) {
        for (const type of types) {
          if (visitor[type]) {
            mergePair(visitor[type], fns);
          } else {
            visitor[type] = fns;
          }
        }
      } else {
        mergePair(visitor, fns);
      }
    }
    for (const nodeType of Object.keys(visitor)) {
      if (shouldIgnoreKey(nodeType)) continue;
      let aliases = FLIPPED_ALIAS_KEYS[nodeType];
      if (nodeType in DEPRECATED_KEYS) {
        const deprecatedKey = DEPRECATED_KEYS[nodeType];
        deprecationWarning(nodeType, deprecatedKey, "Visitor ");
        aliases = [deprecatedKey];
      } else if (nodeType in DEPRECATED_ALIASES) {
        const deprecatedAlias = DEPRECATED_ALIASES[nodeType];
        deprecationWarning(nodeType, deprecatedAlias, "Visitor ");
        aliases = FLIPPED_ALIAS_KEYS[deprecatedAlias];
      }
      if (!aliases) continue;
      const fns = visitor[nodeType];
      delete visitor[nodeType];
      for (const alias of aliases) {
        const existing = visitor[alias];
        if (existing) {
          mergePair(existing, fns);
        } else {
          visitor[alias] = Object.assign({}, fns);
        }
      }
    }
    for (const nodeType of Object.keys(visitor)) {
      if (shouldIgnoreKey(nodeType)) continue;
      ensureCallbackArrays(visitor[nodeType]);
    }
    return visitor;
  }
  function verify$1(visitor) {
    if (visitor._verified) return;
    if (typeof visitor === "function") {
      throw new Error("You passed `traverse()` a function when it expected a visitor object, " + "are you sure you didn't mean `{ enter: Function }`?");
    }
    for (const nodeType of Object.keys(visitor)) {
      if (nodeType === "enter" || nodeType === "exit") {
        validateVisitorMethods(nodeType, visitor[nodeType]);
      }
      if (shouldIgnoreKey(nodeType)) continue;
      if (!TYPES.includes(nodeType)) {
        throw new Error(`You gave us a visitor for the node type ${nodeType} but it's not a valid type in @babel/traverse ${"7.25.3"}`);
      }
      const visitors = visitor[nodeType];
      if (typeof visitors === "object") {
        for (const visitorKey of Object.keys(visitors)) {
          if (visitorKey === "enter" || visitorKey === "exit") {
            validateVisitorMethods(`${nodeType}.${visitorKey}`, visitors[visitorKey]);
          } else {
            throw new Error("You passed `traverse()` a visitor object with the property " + `${nodeType} that has the invalid property ${visitorKey}`);
          }
        }
      }
    }
    visitor._verified = true;
  }
  function validateVisitorMethods(path, val) {
    const fns = [].concat(val);
    for (const fn of fns) {
      if (typeof fn !== "function") {
        throw new TypeError(`Non-function found defined in ${path} with type ${typeof fn}`);
      }
    }
  }
  function merge(visitors, states = [], wrapper) {
    const mergedVisitor = {
      _verified: true,
      _exploded: true
    };
    {
      Object.defineProperty(mergedVisitor, "_exploded", {
        enumerable: false
      });
      Object.defineProperty(mergedVisitor, "_verified", {
        enumerable: false
      });
    }
    for (let i = 0; i < visitors.length; i++) {
      const visitor = explode$1(visitors[i]);
      const state = states[i];
      let topVisitor = visitor;
      if (state || wrapper) {
        topVisitor = wrapWithStateOrWrapper(topVisitor, state, wrapper);
      }
      mergePair(mergedVisitor, topVisitor);
      for (const key of Object.keys(visitor)) {
        if (shouldIgnoreKey(key)) continue;
        let typeVisitor = visitor[key];
        if (state || wrapper) {
          typeVisitor = wrapWithStateOrWrapper(typeVisitor, state, wrapper);
        }
        const nodeVisitor = mergedVisitor[key] || (mergedVisitor[key] = {});
        mergePair(nodeVisitor, typeVisitor);
      }
    }
    return mergedVisitor;
  }
  function wrapWithStateOrWrapper(oldVisitor, state, wrapper) {
    const newVisitor = {};
    for (const phase of ["enter", "exit"]) {
      let fns = oldVisitor[phase];
      if (!Array.isArray(fns)) continue;
      fns = fns.map(function (fn) {
        let newFn = fn;
        if (state) {
          newFn = function (path) {
            fn.call(state, path, state);
          };
        }
        if (wrapper) {
          newFn = wrapper(state == null ? void 0 : state.key, phase, newFn);
        }
        if (newFn !== fn) {
          newFn.toString = () => fn.toString();
        }
        return newFn;
      });
      newVisitor[phase] = fns;
    }
    return newVisitor;
  }
  function ensureEntranceObjects(obj) {
    for (const key of Object.keys(obj)) {
      if (shouldIgnoreKey(key)) continue;
      const fns = obj[key];
      if (typeof fns === "function") {
        obj[key] = {
          enter: fns
        };
      }
    }
  }
  function ensureCallbackArrays(obj) {
    if (obj.enter && !Array.isArray(obj.enter)) obj.enter = [obj.enter];
    if (obj.exit && !Array.isArray(obj.exit)) obj.exit = [obj.exit];
  }
  function wrapCheck(nodeType, fn) {
    const fnKey = `is${nodeType}`;
    const validator = virtualTypesValidators[fnKey];
    const newFn = function (path) {
      if (validator.call(path)) {
        return fn.apply(this, arguments);
      }
    };
    newFn.toString = () => fn.toString();
    return newFn;
  }
  function shouldIgnoreKey(key) {
    if (key[0] === "_") return true;
    if (key === "enter" || key === "exit" || key === "shouldSkip") return true;
    if (key === "denylist" || key === "noScope" || key === "skipKeys") {
      return true;
    }
    {
      if (key === "blacklist") {
        return true;
      }
    }
    return false;
  }
  function mergePair(dest, src) {
    for (const phase of ["enter", "exit"]) {
      if (!src[phase]) continue;
      dest[phase] = [].concat(dest[phase] || [], src[phase]);
    }
  }
  const _environmentVisitor = {
    FunctionParent(path) {
      if (path.isArrowFunctionExpression()) return;
      path.skip();
      if (path.isMethod()) {
        if (!path.requeueComputedKeyAndDecorators) {
          _context.requeueComputedKeyAndDecorators.call(path);
        } else {
          path.requeueComputedKeyAndDecorators();
        }
      }
    },
    Property(path) {
      if (path.isObjectProperty()) return;
      path.skip();
      if (!path.requeueComputedKeyAndDecorators) {
        _context.requeueComputedKeyAndDecorators.call(path);
      } else {
        path.requeueComputedKeyAndDecorators();
      }
    }
  };
  function environmentVisitor(visitor) {
    return merge([_environmentVisitor, visitor]);
  }
  return exports$2O;
}

var exports$2N = {},
  _dewExec$2M = false;
function dew$2M() {
  if (_dewExec$2M) return exports$2N;
  _dewExec$2M = true;
  Object.defineProperty(exports$2N, "__esModule", {
    value: true
  });
  exports$2N.default = void 0;
  var t = dew$3i();
  var _traverseNode = dew$21();
  var _visitors = dew$2N();
  var _context = dew$20();
  const renameVisitor = {
    ReferencedIdentifier({
      node
    }, state) {
      if (node.name === state.oldName) {
        node.name = state.newName;
      }
    },
    Scope(path, state) {
      if (!path.scope.bindingIdentifierEquals(state.oldName, state.binding.identifier)) {
        path.skip();
        if (path.isMethod()) {
          if (!path.requeueComputedKeyAndDecorators) {
            _context.requeueComputedKeyAndDecorators.call(path);
          } else {
            path.requeueComputedKeyAndDecorators();
          }
        }
      }
    },
    ObjectProperty({
      node,
      scope
    }, state) {
      const {
        name
      } = node.key;
      if (node.shorthand && (name === state.oldName || name === state.newName) && scope.getBindingIdentifier(name) === state.binding.identifier) {
        node.shorthand = false;
        {
          var _node$extra;
          if ((_node$extra = node.extra) != null && _node$extra.shorthand) node.extra.shorthand = false;
        }
      }
    },
    "AssignmentExpression|Declaration|VariableDeclarator"(path, state) {
      if (path.isVariableDeclaration()) return;
      const ids = path.isAssignmentExpression() ? path.getAssignmentIdentifiers() : path.getOuterBindingIdentifiers();
      for (const name in ids) {
        if (name === state.oldName) ids[name].name = state.newName;
      }
    }
  };
  class Renamer {
    constructor(binding, oldName, newName) {
      this.newName = newName;
      this.oldName = oldName;
      this.binding = binding;
    }
    maybeConvertFromExportDeclaration(parentDeclar) {
      const maybeExportDeclar = parentDeclar.parentPath;
      if (!maybeExportDeclar.isExportDeclaration()) {
        return;
      }
      if (maybeExportDeclar.isExportDefaultDeclaration()) {
        const {
          declaration
        } = maybeExportDeclar.node;
        if (t.isDeclaration(declaration) && !declaration.id) {
          return;
        }
      }
      if (maybeExportDeclar.isExportAllDeclaration()) {
        return;
      }
      maybeExportDeclar.splitExportDeclaration();
    }
    maybeConvertFromClassFunctionDeclaration(path) {
      return path;
    }
    maybeConvertFromClassFunctionExpression(path) {
      return path;
    }
    rename() {
      const {
        binding,
        oldName,
        newName
      } = this;
      const {
        scope,
        path
      } = binding;
      const parentDeclar = path.find(path => path.isDeclaration() || path.isFunctionExpression() || path.isClassExpression());
      if (parentDeclar) {
        const bindingIds = parentDeclar.getOuterBindingIdentifiers();
        if (bindingIds[oldName] === binding.identifier) {
          this.maybeConvertFromExportDeclaration(parentDeclar);
        }
      }
      const blockToTraverse = arguments[0] || scope.block;
      (0, _traverseNode.traverseNode)(blockToTraverse, (0, _visitors.explode)(renameVisitor), scope, this, scope.path, {
        discriminant: true
      });
      if (!arguments[0]) {
        scope.removeOwnBinding(oldName);
        scope.bindings[newName] = binding;
        this.binding.identifier.name = newName;
      }
      if (parentDeclar) {
        this.maybeConvertFromClassFunctionDeclaration(path);
        this.maybeConvertFromClassFunctionExpression(path);
      }
    }
  }
  exports$2N.default = Renamer;
  return exports$2N;
}

var exports$2M = {},
  _dewExec$2L = false;
function dew$2L() {
  if (_dewExec$2L) return exports$2M;
  _dewExec$2L = true;
  Object.defineProperty(exports$2M, "__esModule", {
    value: true
  });
  exports$2M.default = void 0;
  class Binding {
    constructor({
      identifier,
      scope,
      path,
      kind
    }) {
      this.identifier = void 0;
      this.scope = void 0;
      this.path = void 0;
      this.kind = void 0;
      this.constantViolations = [];
      this.constant = true;
      this.referencePaths = [];
      this.referenced = false;
      this.references = 0;
      this.identifier = identifier;
      this.scope = scope;
      this.path = path;
      this.kind = kind;
      if ((kind === "var" || kind === "hoisted") && isDeclaredInLoop(path)) {
        this.reassign(path);
      }
      this.clearValue();
    }
    deoptValue() {
      this.clearValue();
      this.hasDeoptedValue = true;
    }
    setValue(value) {
      if (this.hasDeoptedValue) return;
      this.hasValue = true;
      this.value = value;
    }
    clearValue() {
      this.hasDeoptedValue = false;
      this.hasValue = false;
      this.value = null;
    }
    reassign(path) {
      this.constant = false;
      if (this.constantViolations.includes(path)) {
        return;
      }
      this.constantViolations.push(path);
    }
    reference(path) {
      if (this.referencePaths.includes(path)) {
        return;
      }
      this.referenced = true;
      this.references++;
      this.referencePaths.push(path);
    }
    dereference() {
      this.references--;
      this.referenced = !!this.references;
    }
  }
  exports$2M.default = Binding;
  function isDeclaredInLoop(path) {
    for (let {
      parentPath,
      key
    } = path; parentPath; ({
      parentPath,
      key
    } = parentPath)) {
      if (parentPath.isFunctionParent()) return false;
      if (parentPath.isWhile() || parentPath.isForXStatement() || parentPath.isForStatement() && key === "body") {
        return true;
      }
    }
    return false;
  }
  return exports$2M;
}

var _globals = {
	"builtin": {
		"Array": false,
		"ArrayBuffer": false,
		"Atomics": false,
		"BigInt": false,
		"BigInt64Array": false,
		"BigUint64Array": false,
		"Boolean": false,
		"constructor": false,
		"DataView": false,
		"Date": false,
		"decodeURI": false,
		"decodeURIComponent": false,
		"encodeURI": false,
		"encodeURIComponent": false,
		"Error": false,
		"escape": false,
		"eval": false,
		"EvalError": false,
		"Float32Array": false,
		"Float64Array": false,
		"Function": false,
		"globalThis": false,
		"hasOwnProperty": false,
		"Infinity": false,
		"Int16Array": false,
		"Int32Array": false,
		"Int8Array": false,
		"isFinite": false,
		"isNaN": false,
		"isPrototypeOf": false,
		"JSON": false,
		"Map": false,
		"Math": false,
		"NaN": false,
		"Number": false,
		"Object": false,
		"parseFloat": false,
		"parseInt": false,
		"Promise": false,
		"propertyIsEnumerable": false,
		"Proxy": false,
		"RangeError": false,
		"ReferenceError": false,
		"Reflect": false,
		"RegExp": false,
		"Set": false,
		"SharedArrayBuffer": false,
		"String": false,
		"Symbol": false,
		"SyntaxError": false,
		"toLocaleString": false,
		"toString": false,
		"TypeError": false,
		"Uint16Array": false,
		"Uint32Array": false,
		"Uint8Array": false,
		"Uint8ClampedArray": false,
		"undefined": false,
		"unescape": false,
		"URIError": false,
		"valueOf": false,
		"WeakMap": false,
		"WeakSet": false
	},
	"es5": {
		"Array": false,
		"Boolean": false,
		"constructor": false,
		"Date": false,
		"decodeURI": false,
		"decodeURIComponent": false,
		"encodeURI": false,
		"encodeURIComponent": false,
		"Error": false,
		"escape": false,
		"eval": false,
		"EvalError": false,
		"Function": false,
		"hasOwnProperty": false,
		"Infinity": false,
		"isFinite": false,
		"isNaN": false,
		"isPrototypeOf": false,
		"JSON": false,
		"Math": false,
		"NaN": false,
		"Number": false,
		"Object": false,
		"parseFloat": false,
		"parseInt": false,
		"propertyIsEnumerable": false,
		"RangeError": false,
		"ReferenceError": false,
		"RegExp": false,
		"String": false,
		"SyntaxError": false,
		"toLocaleString": false,
		"toString": false,
		"TypeError": false,
		"undefined": false,
		"unescape": false,
		"URIError": false,
		"valueOf": false
	},
	"es2015": {
		"Array": false,
		"ArrayBuffer": false,
		"Boolean": false,
		"constructor": false,
		"DataView": false,
		"Date": false,
		"decodeURI": false,
		"decodeURIComponent": false,
		"encodeURI": false,
		"encodeURIComponent": false,
		"Error": false,
		"escape": false,
		"eval": false,
		"EvalError": false,
		"Float32Array": false,
		"Float64Array": false,
		"Function": false,
		"hasOwnProperty": false,
		"Infinity": false,
		"Int16Array": false,
		"Int32Array": false,
		"Int8Array": false,
		"isFinite": false,
		"isNaN": false,
		"isPrototypeOf": false,
		"JSON": false,
		"Map": false,
		"Math": false,
		"NaN": false,
		"Number": false,
		"Object": false,
		"parseFloat": false,
		"parseInt": false,
		"Promise": false,
		"propertyIsEnumerable": false,
		"Proxy": false,
		"RangeError": false,
		"ReferenceError": false,
		"Reflect": false,
		"RegExp": false,
		"Set": false,
		"String": false,
		"Symbol": false,
		"SyntaxError": false,
		"toLocaleString": false,
		"toString": false,
		"TypeError": false,
		"Uint16Array": false,
		"Uint32Array": false,
		"Uint8Array": false,
		"Uint8ClampedArray": false,
		"undefined": false,
		"unescape": false,
		"URIError": false,
		"valueOf": false,
		"WeakMap": false,
		"WeakSet": false
	},
	"es2017": {
		"Array": false,
		"ArrayBuffer": false,
		"Atomics": false,
		"Boolean": false,
		"constructor": false,
		"DataView": false,
		"Date": false,
		"decodeURI": false,
		"decodeURIComponent": false,
		"encodeURI": false,
		"encodeURIComponent": false,
		"Error": false,
		"escape": false,
		"eval": false,
		"EvalError": false,
		"Float32Array": false,
		"Float64Array": false,
		"Function": false,
		"hasOwnProperty": false,
		"Infinity": false,
		"Int16Array": false,
		"Int32Array": false,
		"Int8Array": false,
		"isFinite": false,
		"isNaN": false,
		"isPrototypeOf": false,
		"JSON": false,
		"Map": false,
		"Math": false,
		"NaN": false,
		"Number": false,
		"Object": false,
		"parseFloat": false,
		"parseInt": false,
		"Promise": false,
		"propertyIsEnumerable": false,
		"Proxy": false,
		"RangeError": false,
		"ReferenceError": false,
		"Reflect": false,
		"RegExp": false,
		"Set": false,
		"SharedArrayBuffer": false,
		"String": false,
		"Symbol": false,
		"SyntaxError": false,
		"toLocaleString": false,
		"toString": false,
		"TypeError": false,
		"Uint16Array": false,
		"Uint32Array": false,
		"Uint8Array": false,
		"Uint8ClampedArray": false,
		"undefined": false,
		"unescape": false,
		"URIError": false,
		"valueOf": false,
		"WeakMap": false,
		"WeakSet": false
	},
	"browser": {
		"AbortController": false,
		"AbortSignal": false,
		"addEventListener": false,
		"alert": false,
		"AnalyserNode": false,
		"Animation": false,
		"AnimationEffectReadOnly": false,
		"AnimationEffectTiming": false,
		"AnimationEffectTimingReadOnly": false,
		"AnimationEvent": false,
		"AnimationPlaybackEvent": false,
		"AnimationTimeline": false,
		"applicationCache": false,
		"ApplicationCache": false,
		"ApplicationCacheErrorEvent": false,
		"atob": false,
		"Attr": false,
		"Audio": false,
		"AudioBuffer": false,
		"AudioBufferSourceNode": false,
		"AudioContext": false,
		"AudioDestinationNode": false,
		"AudioListener": false,
		"AudioNode": false,
		"AudioParam": false,
		"AudioProcessingEvent": false,
		"AudioScheduledSourceNode": false,
		"AudioWorkletGlobalScope ": false,
		"AudioWorkletNode": false,
		"AudioWorkletProcessor": false,
		"BarProp": false,
		"BaseAudioContext": false,
		"BatteryManager": false,
		"BeforeUnloadEvent": false,
		"BiquadFilterNode": false,
		"Blob": false,
		"BlobEvent": false,
		"blur": false,
		"BroadcastChannel": false,
		"btoa": false,
		"BudgetService": false,
		"ByteLengthQueuingStrategy": false,
		"Cache": false,
		"caches": false,
		"CacheStorage": false,
		"cancelAnimationFrame": false,
		"cancelIdleCallback": false,
		"CanvasCaptureMediaStreamTrack": false,
		"CanvasGradient": false,
		"CanvasPattern": false,
		"CanvasRenderingContext2D": false,
		"ChannelMergerNode": false,
		"ChannelSplitterNode": false,
		"CharacterData": false,
		"clearInterval": false,
		"clearTimeout": false,
		"clientInformation": false,
		"ClipboardEvent": false,
		"close": false,
		"closed": false,
		"CloseEvent": false,
		"Comment": false,
		"CompositionEvent": false,
		"confirm": false,
		"console": false,
		"ConstantSourceNode": false,
		"ConvolverNode": false,
		"CountQueuingStrategy": false,
		"createImageBitmap": false,
		"Credential": false,
		"CredentialsContainer": false,
		"crypto": false,
		"Crypto": false,
		"CryptoKey": false,
		"CSS": false,
		"CSSConditionRule": false,
		"CSSFontFaceRule": false,
		"CSSGroupingRule": false,
		"CSSImportRule": false,
		"CSSKeyframeRule": false,
		"CSSKeyframesRule": false,
		"CSSMediaRule": false,
		"CSSNamespaceRule": false,
		"CSSPageRule": false,
		"CSSRule": false,
		"CSSRuleList": false,
		"CSSStyleDeclaration": false,
		"CSSStyleRule": false,
		"CSSStyleSheet": false,
		"CSSSupportsRule": false,
		"CustomElementRegistry": false,
		"customElements": false,
		"CustomEvent": false,
		"DataTransfer": false,
		"DataTransferItem": false,
		"DataTransferItemList": false,
		"defaultstatus": false,
		"defaultStatus": false,
		"DelayNode": false,
		"DeviceMotionEvent": false,
		"DeviceOrientationEvent": false,
		"devicePixelRatio": false,
		"dispatchEvent": false,
		"document": false,
		"Document": false,
		"DocumentFragment": false,
		"DocumentType": false,
		"DOMError": false,
		"DOMException": false,
		"DOMImplementation": false,
		"DOMMatrix": false,
		"DOMMatrixReadOnly": false,
		"DOMParser": false,
		"DOMPoint": false,
		"DOMPointReadOnly": false,
		"DOMQuad": false,
		"DOMRect": false,
		"DOMRectReadOnly": false,
		"DOMStringList": false,
		"DOMStringMap": false,
		"DOMTokenList": false,
		"DragEvent": false,
		"DynamicsCompressorNode": false,
		"Element": false,
		"ErrorEvent": false,
		"event": false,
		"Event": false,
		"EventSource": false,
		"EventTarget": false,
		"external": false,
		"fetch": false,
		"File": false,
		"FileList": false,
		"FileReader": false,
		"find": false,
		"focus": false,
		"FocusEvent": false,
		"FontFace": false,
		"FontFaceSetLoadEvent": false,
		"FormData": false,
		"frameElement": false,
		"frames": false,
		"GainNode": false,
		"Gamepad": false,
		"GamepadButton": false,
		"GamepadEvent": false,
		"getComputedStyle": false,
		"getSelection": false,
		"HashChangeEvent": false,
		"Headers": false,
		"history": false,
		"History": false,
		"HTMLAllCollection": false,
		"HTMLAnchorElement": false,
		"HTMLAreaElement": false,
		"HTMLAudioElement": false,
		"HTMLBaseElement": false,
		"HTMLBodyElement": false,
		"HTMLBRElement": false,
		"HTMLButtonElement": false,
		"HTMLCanvasElement": false,
		"HTMLCollection": false,
		"HTMLContentElement": false,
		"HTMLDataElement": false,
		"HTMLDataListElement": false,
		"HTMLDetailsElement": false,
		"HTMLDialogElement": false,
		"HTMLDirectoryElement": false,
		"HTMLDivElement": false,
		"HTMLDListElement": false,
		"HTMLDocument": false,
		"HTMLElement": false,
		"HTMLEmbedElement": false,
		"HTMLFieldSetElement": false,
		"HTMLFontElement": false,
		"HTMLFormControlsCollection": false,
		"HTMLFormElement": false,
		"HTMLFrameElement": false,
		"HTMLFrameSetElement": false,
		"HTMLHeadElement": false,
		"HTMLHeadingElement": false,
		"HTMLHRElement": false,
		"HTMLHtmlElement": false,
		"HTMLIFrameElement": false,
		"HTMLImageElement": false,
		"HTMLInputElement": false,
		"HTMLLabelElement": false,
		"HTMLLegendElement": false,
		"HTMLLIElement": false,
		"HTMLLinkElement": false,
		"HTMLMapElement": false,
		"HTMLMarqueeElement": false,
		"HTMLMediaElement": false,
		"HTMLMenuElement": false,
		"HTMLMetaElement": false,
		"HTMLMeterElement": false,
		"HTMLModElement": false,
		"HTMLObjectElement": false,
		"HTMLOListElement": false,
		"HTMLOptGroupElement": false,
		"HTMLOptionElement": false,
		"HTMLOptionsCollection": false,
		"HTMLOutputElement": false,
		"HTMLParagraphElement": false,
		"HTMLParamElement": false,
		"HTMLPictureElement": false,
		"HTMLPreElement": false,
		"HTMLProgressElement": false,
		"HTMLQuoteElement": false,
		"HTMLScriptElement": false,
		"HTMLSelectElement": false,
		"HTMLShadowElement": false,
		"HTMLSlotElement": false,
		"HTMLSourceElement": false,
		"HTMLSpanElement": false,
		"HTMLStyleElement": false,
		"HTMLTableCaptionElement": false,
		"HTMLTableCellElement": false,
		"HTMLTableColElement": false,
		"HTMLTableElement": false,
		"HTMLTableRowElement": false,
		"HTMLTableSectionElement": false,
		"HTMLTemplateElement": false,
		"HTMLTextAreaElement": false,
		"HTMLTimeElement": false,
		"HTMLTitleElement": false,
		"HTMLTrackElement": false,
		"HTMLUListElement": false,
		"HTMLUnknownElement": false,
		"HTMLVideoElement": false,
		"IDBCursor": false,
		"IDBCursorWithValue": false,
		"IDBDatabase": false,
		"IDBFactory": false,
		"IDBIndex": false,
		"IDBKeyRange": false,
		"IDBObjectStore": false,
		"IDBOpenDBRequest": false,
		"IDBRequest": false,
		"IDBTransaction": false,
		"IDBVersionChangeEvent": false,
		"IdleDeadline": false,
		"IIRFilterNode": false,
		"Image": false,
		"ImageBitmap": false,
		"ImageBitmapRenderingContext": false,
		"ImageCapture": false,
		"ImageData": false,
		"indexedDB": false,
		"innerHeight": false,
		"innerWidth": false,
		"InputEvent": false,
		"IntersectionObserver": false,
		"IntersectionObserverEntry": false,
		"Intl": false,
		"isSecureContext": false,
		"KeyboardEvent": false,
		"KeyframeEffect": false,
		"KeyframeEffectReadOnly": false,
		"length": false,
		"localStorage": false,
		"location": true,
		"Location": false,
		"locationbar": false,
		"matchMedia": false,
		"MediaDeviceInfo": false,
		"MediaDevices": false,
		"MediaElementAudioSourceNode": false,
		"MediaEncryptedEvent": false,
		"MediaError": false,
		"MediaKeyMessageEvent": false,
		"MediaKeySession": false,
		"MediaKeyStatusMap": false,
		"MediaKeySystemAccess": false,
		"MediaList": false,
		"MediaQueryList": false,
		"MediaQueryListEvent": false,
		"MediaRecorder": false,
		"MediaSettingsRange": false,
		"MediaSource": false,
		"MediaStream": false,
		"MediaStreamAudioDestinationNode": false,
		"MediaStreamAudioSourceNode": false,
		"MediaStreamEvent": false,
		"MediaStreamTrack": false,
		"MediaStreamTrackEvent": false,
		"menubar": false,
		"MessageChannel": false,
		"MessageEvent": false,
		"MessagePort": false,
		"MIDIAccess": false,
		"MIDIConnectionEvent": false,
		"MIDIInput": false,
		"MIDIInputMap": false,
		"MIDIMessageEvent": false,
		"MIDIOutput": false,
		"MIDIOutputMap": false,
		"MIDIPort": false,
		"MimeType": false,
		"MimeTypeArray": false,
		"MouseEvent": false,
		"moveBy": false,
		"moveTo": false,
		"MutationEvent": false,
		"MutationObserver": false,
		"MutationRecord": false,
		"name": false,
		"NamedNodeMap": false,
		"NavigationPreloadManager": false,
		"navigator": false,
		"Navigator": false,
		"NetworkInformation": false,
		"Node": false,
		"NodeFilter": false,
		"NodeIterator": false,
		"NodeList": false,
		"Notification": false,
		"OfflineAudioCompletionEvent": false,
		"OfflineAudioContext": false,
		"offscreenBuffering": false,
		"OffscreenCanvas": true,
		"onabort": true,
		"onafterprint": true,
		"onanimationend": true,
		"onanimationiteration": true,
		"onanimationstart": true,
		"onappinstalled": true,
		"onauxclick": true,
		"onbeforeinstallprompt": true,
		"onbeforeprint": true,
		"onbeforeunload": true,
		"onblur": true,
		"oncancel": true,
		"oncanplay": true,
		"oncanplaythrough": true,
		"onchange": true,
		"onclick": true,
		"onclose": true,
		"oncontextmenu": true,
		"oncuechange": true,
		"ondblclick": true,
		"ondevicemotion": true,
		"ondeviceorientation": true,
		"ondeviceorientationabsolute": true,
		"ondrag": true,
		"ondragend": true,
		"ondragenter": true,
		"ondragleave": true,
		"ondragover": true,
		"ondragstart": true,
		"ondrop": true,
		"ondurationchange": true,
		"onemptied": true,
		"onended": true,
		"onerror": true,
		"onfocus": true,
		"ongotpointercapture": true,
		"onhashchange": true,
		"oninput": true,
		"oninvalid": true,
		"onkeydown": true,
		"onkeypress": true,
		"onkeyup": true,
		"onlanguagechange": true,
		"onload": true,
		"onloadeddata": true,
		"onloadedmetadata": true,
		"onloadstart": true,
		"onlostpointercapture": true,
		"onmessage": true,
		"onmessageerror": true,
		"onmousedown": true,
		"onmouseenter": true,
		"onmouseleave": true,
		"onmousemove": true,
		"onmouseout": true,
		"onmouseover": true,
		"onmouseup": true,
		"onmousewheel": true,
		"onoffline": true,
		"ononline": true,
		"onpagehide": true,
		"onpageshow": true,
		"onpause": true,
		"onplay": true,
		"onplaying": true,
		"onpointercancel": true,
		"onpointerdown": true,
		"onpointerenter": true,
		"onpointerleave": true,
		"onpointermove": true,
		"onpointerout": true,
		"onpointerover": true,
		"onpointerup": true,
		"onpopstate": true,
		"onprogress": true,
		"onratechange": true,
		"onrejectionhandled": true,
		"onreset": true,
		"onresize": true,
		"onscroll": true,
		"onsearch": true,
		"onseeked": true,
		"onseeking": true,
		"onselect": true,
		"onstalled": true,
		"onstorage": true,
		"onsubmit": true,
		"onsuspend": true,
		"ontimeupdate": true,
		"ontoggle": true,
		"ontransitionend": true,
		"onunhandledrejection": true,
		"onunload": true,
		"onvolumechange": true,
		"onwaiting": true,
		"onwheel": true,
		"open": false,
		"openDatabase": false,
		"opener": false,
		"Option": false,
		"origin": false,
		"OscillatorNode": false,
		"outerHeight": false,
		"outerWidth": false,
		"PageTransitionEvent": false,
		"pageXOffset": false,
		"pageYOffset": false,
		"PannerNode": false,
		"parent": false,
		"Path2D": false,
		"PaymentAddress": false,
		"PaymentRequest": false,
		"PaymentRequestUpdateEvent": false,
		"PaymentResponse": false,
		"performance": false,
		"Performance": false,
		"PerformanceEntry": false,
		"PerformanceLongTaskTiming": false,
		"PerformanceMark": false,
		"PerformanceMeasure": false,
		"PerformanceNavigation": false,
		"PerformanceNavigationTiming": false,
		"PerformanceObserver": false,
		"PerformanceObserverEntryList": false,
		"PerformancePaintTiming": false,
		"PerformanceResourceTiming": false,
		"PerformanceTiming": false,
		"PeriodicWave": false,
		"Permissions": false,
		"PermissionStatus": false,
		"personalbar": false,
		"PhotoCapabilities": false,
		"Plugin": false,
		"PluginArray": false,
		"PointerEvent": false,
		"PopStateEvent": false,
		"postMessage": false,
		"Presentation": false,
		"PresentationAvailability": false,
		"PresentationConnection": false,
		"PresentationConnectionAvailableEvent": false,
		"PresentationConnectionCloseEvent": false,
		"PresentationConnectionList": false,
		"PresentationReceiver": false,
		"PresentationRequest": false,
		"print": false,
		"ProcessingInstruction": false,
		"ProgressEvent": false,
		"PromiseRejectionEvent": false,
		"prompt": false,
		"PushManager": false,
		"PushSubscription": false,
		"PushSubscriptionOptions": false,
		"queueMicrotask": false,
		"RadioNodeList": false,
		"Range": false,
		"ReadableStream": false,
		"registerProcessor": false,
		"RemotePlayback": false,
		"removeEventListener": false,
		"Request": false,
		"requestAnimationFrame": false,
		"requestIdleCallback": false,
		"resizeBy": false,
		"ResizeObserver": false,
		"ResizeObserverEntry": false,
		"resizeTo": false,
		"Response": false,
		"RTCCertificate": false,
		"RTCDataChannel": false,
		"RTCDataChannelEvent": false,
		"RTCDtlsTransport": false,
		"RTCIceCandidate": false,
		"RTCIceGatherer": false,
		"RTCIceTransport": false,
		"RTCPeerConnection": false,
		"RTCPeerConnectionIceEvent": false,
		"RTCRtpContributingSource": false,
		"RTCRtpReceiver": false,
		"RTCRtpSender": false,
		"RTCSctpTransport": false,
		"RTCSessionDescription": false,
		"RTCStatsReport": false,
		"RTCTrackEvent": false,
		"screen": false,
		"Screen": false,
		"screenLeft": false,
		"ScreenOrientation": false,
		"screenTop": false,
		"screenX": false,
		"screenY": false,
		"ScriptProcessorNode": false,
		"scroll": false,
		"scrollbars": false,
		"scrollBy": false,
		"scrollTo": false,
		"scrollX": false,
		"scrollY": false,
		"SecurityPolicyViolationEvent": false,
		"Selection": false,
		"self": false,
		"ServiceWorker": false,
		"ServiceWorkerContainer": false,
		"ServiceWorkerRegistration": false,
		"sessionStorage": false,
		"setInterval": false,
		"setTimeout": false,
		"ShadowRoot": false,
		"SharedWorker": false,
		"SourceBuffer": false,
		"SourceBufferList": false,
		"speechSynthesis": false,
		"SpeechSynthesisEvent": false,
		"SpeechSynthesisUtterance": false,
		"StaticRange": false,
		"status": false,
		"statusbar": false,
		"StereoPannerNode": false,
		"stop": false,
		"Storage": false,
		"StorageEvent": false,
		"StorageManager": false,
		"styleMedia": false,
		"StyleSheet": false,
		"StyleSheetList": false,
		"SubtleCrypto": false,
		"SVGAElement": false,
		"SVGAngle": false,
		"SVGAnimatedAngle": false,
		"SVGAnimatedBoolean": false,
		"SVGAnimatedEnumeration": false,
		"SVGAnimatedInteger": false,
		"SVGAnimatedLength": false,
		"SVGAnimatedLengthList": false,
		"SVGAnimatedNumber": false,
		"SVGAnimatedNumberList": false,
		"SVGAnimatedPreserveAspectRatio": false,
		"SVGAnimatedRect": false,
		"SVGAnimatedString": false,
		"SVGAnimatedTransformList": false,
		"SVGAnimateElement": false,
		"SVGAnimateMotionElement": false,
		"SVGAnimateTransformElement": false,
		"SVGAnimationElement": false,
		"SVGCircleElement": false,
		"SVGClipPathElement": false,
		"SVGComponentTransferFunctionElement": false,
		"SVGDefsElement": false,
		"SVGDescElement": false,
		"SVGDiscardElement": false,
		"SVGElement": false,
		"SVGEllipseElement": false,
		"SVGFEBlendElement": false,
		"SVGFEColorMatrixElement": false,
		"SVGFEComponentTransferElement": false,
		"SVGFECompositeElement": false,
		"SVGFEConvolveMatrixElement": false,
		"SVGFEDiffuseLightingElement": false,
		"SVGFEDisplacementMapElement": false,
		"SVGFEDistantLightElement": false,
		"SVGFEDropShadowElement": false,
		"SVGFEFloodElement": false,
		"SVGFEFuncAElement": false,
		"SVGFEFuncBElement": false,
		"SVGFEFuncGElement": false,
		"SVGFEFuncRElement": false,
		"SVGFEGaussianBlurElement": false,
		"SVGFEImageElement": false,
		"SVGFEMergeElement": false,
		"SVGFEMergeNodeElement": false,
		"SVGFEMorphologyElement": false,
		"SVGFEOffsetElement": false,
		"SVGFEPointLightElement": false,
		"SVGFESpecularLightingElement": false,
		"SVGFESpotLightElement": false,
		"SVGFETileElement": false,
		"SVGFETurbulenceElement": false,
		"SVGFilterElement": false,
		"SVGForeignObjectElement": false,
		"SVGGElement": false,
		"SVGGeometryElement": false,
		"SVGGradientElement": false,
		"SVGGraphicsElement": false,
		"SVGImageElement": false,
		"SVGLength": false,
		"SVGLengthList": false,
		"SVGLinearGradientElement": false,
		"SVGLineElement": false,
		"SVGMarkerElement": false,
		"SVGMaskElement": false,
		"SVGMatrix": false,
		"SVGMetadataElement": false,
		"SVGMPathElement": false,
		"SVGNumber": false,
		"SVGNumberList": false,
		"SVGPathElement": false,
		"SVGPatternElement": false,
		"SVGPoint": false,
		"SVGPointList": false,
		"SVGPolygonElement": false,
		"SVGPolylineElement": false,
		"SVGPreserveAspectRatio": false,
		"SVGRadialGradientElement": false,
		"SVGRect": false,
		"SVGRectElement": false,
		"SVGScriptElement": false,
		"SVGSetElement": false,
		"SVGStopElement": false,
		"SVGStringList": false,
		"SVGStyleElement": false,
		"SVGSVGElement": false,
		"SVGSwitchElement": false,
		"SVGSymbolElement": false,
		"SVGTextContentElement": false,
		"SVGTextElement": false,
		"SVGTextPathElement": false,
		"SVGTextPositioningElement": false,
		"SVGTitleElement": false,
		"SVGTransform": false,
		"SVGTransformList": false,
		"SVGTSpanElement": false,
		"SVGUnitTypes": false,
		"SVGUseElement": false,
		"SVGViewElement": false,
		"TaskAttributionTiming": false,
		"Text": false,
		"TextDecoder": false,
		"TextEncoder": false,
		"TextEvent": false,
		"TextMetrics": false,
		"TextTrack": false,
		"TextTrackCue": false,
		"TextTrackCueList": false,
		"TextTrackList": false,
		"TimeRanges": false,
		"toolbar": false,
		"top": false,
		"Touch": false,
		"TouchEvent": false,
		"TouchList": false,
		"TrackEvent": false,
		"TransitionEvent": false,
		"TreeWalker": false,
		"UIEvent": false,
		"URL": false,
		"URLSearchParams": false,
		"ValidityState": false,
		"visualViewport": false,
		"VisualViewport": false,
		"VTTCue": false,
		"WaveShaperNode": false,
		"WebAssembly": false,
		"WebGL2RenderingContext": false,
		"WebGLActiveInfo": false,
		"WebGLBuffer": false,
		"WebGLContextEvent": false,
		"WebGLFramebuffer": false,
		"WebGLProgram": false,
		"WebGLQuery": false,
		"WebGLRenderbuffer": false,
		"WebGLRenderingContext": false,
		"WebGLSampler": false,
		"WebGLShader": false,
		"WebGLShaderPrecisionFormat": false,
		"WebGLSync": false,
		"WebGLTexture": false,
		"WebGLTransformFeedback": false,
		"WebGLUniformLocation": false,
		"WebGLVertexArrayObject": false,
		"WebSocket": false,
		"WheelEvent": false,
		"window": false,
		"Window": false,
		"Worker": false,
		"WritableStream": false,
		"XMLDocument": false,
		"XMLHttpRequest": false,
		"XMLHttpRequestEventTarget": false,
		"XMLHttpRequestUpload": false,
		"XMLSerializer": false,
		"XPathEvaluator": false,
		"XPathExpression": false,
		"XPathResult": false,
		"XSLTProcessor": false
	},
	"worker": {
		"addEventListener": false,
		"applicationCache": false,
		"atob": false,
		"Blob": false,
		"BroadcastChannel": false,
		"btoa": false,
		"Cache": false,
		"caches": false,
		"clearInterval": false,
		"clearTimeout": false,
		"close": true,
		"console": false,
		"fetch": false,
		"FileReaderSync": false,
		"FormData": false,
		"Headers": false,
		"IDBCursor": false,
		"IDBCursorWithValue": false,
		"IDBDatabase": false,
		"IDBFactory": false,
		"IDBIndex": false,
		"IDBKeyRange": false,
		"IDBObjectStore": false,
		"IDBOpenDBRequest": false,
		"IDBRequest": false,
		"IDBTransaction": false,
		"IDBVersionChangeEvent": false,
		"ImageData": false,
		"importScripts": true,
		"indexedDB": false,
		"location": false,
		"MessageChannel": false,
		"MessagePort": false,
		"name": false,
		"navigator": false,
		"Notification": false,
		"onclose": true,
		"onconnect": true,
		"onerror": true,
		"onlanguagechange": true,
		"onmessage": true,
		"onoffline": true,
		"ononline": true,
		"onrejectionhandled": true,
		"onunhandledrejection": true,
		"performance": false,
		"Performance": false,
		"PerformanceEntry": false,
		"PerformanceMark": false,
		"PerformanceMeasure": false,
		"PerformanceNavigation": false,
		"PerformanceResourceTiming": false,
		"PerformanceTiming": false,
		"postMessage": true,
		"Promise": false,
		"queueMicrotask": false,
		"removeEventListener": false,
		"Request": false,
		"Response": false,
		"self": true,
		"ServiceWorkerRegistration": false,
		"setInterval": false,
		"setTimeout": false,
		"TextDecoder": false,
		"TextEncoder": false,
		"URL": false,
		"URLSearchParams": false,
		"WebSocket": false,
		"Worker": false,
		"WorkerGlobalScope": false,
		"XMLHttpRequest": false
	},
	"node": {
		"__dirname": false,
		"__filename": false,
		"Buffer": false,
		"clearImmediate": false,
		"clearInterval": false,
		"clearTimeout": false,
		"console": false,
		"exports": true,
		"global": false,
		"Intl": false,
		"module": false,
		"process": false,
		"queueMicrotask": false,
		"require": false,
		"setImmediate": false,
		"setInterval": false,
		"setTimeout": false,
		"TextDecoder": false,
		"TextEncoder": false,
		"URL": false,
		"URLSearchParams": false
	},
	"commonjs": {
		"exports": true,
		"global": false,
		"module": false,
		"require": false
	},
	"amd": {
		"define": false,
		"require": false
	},
	"mocha": {
		"after": false,
		"afterEach": false,
		"before": false,
		"beforeEach": false,
		"context": false,
		"describe": false,
		"it": false,
		"mocha": false,
		"run": false,
		"setup": false,
		"specify": false,
		"suite": false,
		"suiteSetup": false,
		"suiteTeardown": false,
		"teardown": false,
		"test": false,
		"xcontext": false,
		"xdescribe": false,
		"xit": false,
		"xspecify": false
	},
	"jasmine": {
		"afterAll": false,
		"afterEach": false,
		"beforeAll": false,
		"beforeEach": false,
		"describe": false,
		"expect": false,
		"fail": false,
		"fdescribe": false,
		"fit": false,
		"it": false,
		"jasmine": false,
		"pending": false,
		"runs": false,
		"spyOn": false,
		"spyOnProperty": false,
		"waits": false,
		"waitsFor": false,
		"xdescribe": false,
		"xit": false
	},
	"jest": {
		"afterAll": false,
		"afterEach": false,
		"beforeAll": false,
		"beforeEach": false,
		"describe": false,
		"expect": false,
		"fdescribe": false,
		"fit": false,
		"it": false,
		"jest": false,
		"pit": false,
		"require": false,
		"test": false,
		"xdescribe": false,
		"xit": false,
		"xtest": false
	},
	"qunit": {
		"asyncTest": false,
		"deepEqual": false,
		"equal": false,
		"expect": false,
		"module": false,
		"notDeepEqual": false,
		"notEqual": false,
		"notOk": false,
		"notPropEqual": false,
		"notStrictEqual": false,
		"ok": false,
		"propEqual": false,
		"QUnit": false,
		"raises": false,
		"start": false,
		"stop": false,
		"strictEqual": false,
		"test": false,
		"throws": false
	},
	"phantomjs": {
		"console": true,
		"exports": true,
		"phantom": true,
		"require": true,
		"WebPage": true
	},
	"couch": {
		"emit": false,
		"exports": false,
		"getRow": false,
		"log": false,
		"module": false,
		"provides": false,
		"require": false,
		"respond": false,
		"send": false,
		"start": false,
		"sum": false
	},
	"rhino": {
		"defineClass": false,
		"deserialize": false,
		"gc": false,
		"help": false,
		"importClass": false,
		"importPackage": false,
		"java": false,
		"load": false,
		"loadClass": false,
		"Packages": false,
		"print": false,
		"quit": false,
		"readFile": false,
		"readUrl": false,
		"runCommand": false,
		"seal": false,
		"serialize": false,
		"spawn": false,
		"sync": false,
		"toint32": false,
		"version": false
	},
	"nashorn": {
		"__DIR__": false,
		"__FILE__": false,
		"__LINE__": false,
		"com": false,
		"edu": false,
		"exit": false,
		"java": false,
		"Java": false,
		"javafx": false,
		"JavaImporter": false,
		"javax": false,
		"JSAdapter": false,
		"load": false,
		"loadWithNewGlobal": false,
		"org": false,
		"Packages": false,
		"print": false,
		"quit": false
	},
	"wsh": {
		"ActiveXObject": true,
		"Enumerator": true,
		"GetObject": true,
		"ScriptEngine": true,
		"ScriptEngineBuildVersion": true,
		"ScriptEngineMajorVersion": true,
		"ScriptEngineMinorVersion": true,
		"VBArray": true,
		"WScript": true,
		"WSH": true,
		"XDomainRequest": true
	},
	"jquery": {
		"$": false,
		"jQuery": false
	},
	"yui": {
		"YAHOO": false,
		"YAHOO_config": false,
		"YUI": false,
		"YUI_config": false
	},
	"shelljs": {
		"cat": false,
		"cd": false,
		"chmod": false,
		"config": false,
		"cp": false,
		"dirs": false,
		"echo": false,
		"env": false,
		"error": false,
		"exec": false,
		"exit": false,
		"find": false,
		"grep": false,
		"ln": false,
		"ls": false,
		"mkdir": false,
		"mv": false,
		"popd": false,
		"pushd": false,
		"pwd": false,
		"rm": false,
		"sed": false,
		"set": false,
		"target": false,
		"tempdir": false,
		"test": false,
		"touch": false,
		"which": false
	},
	"prototypejs": {
		"$": false,
		"$$": false,
		"$A": false,
		"$break": false,
		"$continue": false,
		"$F": false,
		"$H": false,
		"$R": false,
		"$w": false,
		"Abstract": false,
		"Ajax": false,
		"Autocompleter": false,
		"Builder": false,
		"Class": false,
		"Control": false,
		"Draggable": false,
		"Draggables": false,
		"Droppables": false,
		"Effect": false,
		"Element": false,
		"Enumerable": false,
		"Event": false,
		"Field": false,
		"Form": false,
		"Hash": false,
		"Insertion": false,
		"ObjectRange": false,
		"PeriodicalExecuter": false,
		"Position": false,
		"Prototype": false,
		"Scriptaculous": false,
		"Selector": false,
		"Sortable": false,
		"SortableObserver": false,
		"Sound": false,
		"Template": false,
		"Toggle": false,
		"Try": false
	},
	"meteor": {
		"_": false,
		"$": false,
		"Accounts": false,
		"AccountsClient": false,
		"AccountsCommon": false,
		"AccountsServer": false,
		"App": false,
		"Assets": false,
		"Blaze": false,
		"check": false,
		"Cordova": false,
		"DDP": false,
		"DDPRateLimiter": false,
		"DDPServer": false,
		"Deps": false,
		"EJSON": false,
		"Email": false,
		"HTTP": false,
		"Log": false,
		"Match": false,
		"Meteor": false,
		"Mongo": false,
		"MongoInternals": false,
		"Npm": false,
		"Package": false,
		"Plugin": false,
		"process": false,
		"Random": false,
		"ReactiveDict": false,
		"ReactiveVar": false,
		"Router": false,
		"ServiceConfiguration": false,
		"Session": false,
		"share": false,
		"Spacebars": false,
		"Template": false,
		"Tinytest": false,
		"Tracker": false,
		"UI": false,
		"Utils": false,
		"WebApp": false,
		"WebAppInternals": false
	},
	"mongo": {
		"_isWindows": false,
		"_rand": false,
		"BulkWriteResult": false,
		"cat": false,
		"cd": false,
		"connect": false,
		"db": false,
		"getHostName": false,
		"getMemInfo": false,
		"hostname": false,
		"ISODate": false,
		"listFiles": false,
		"load": false,
		"ls": false,
		"md5sumFile": false,
		"mkdir": false,
		"Mongo": false,
		"NumberInt": false,
		"NumberLong": false,
		"ObjectId": false,
		"PlanCache": false,
		"print": false,
		"printjson": false,
		"pwd": false,
		"quit": false,
		"removeFile": false,
		"rs": false,
		"sh": false,
		"UUID": false,
		"version": false,
		"WriteResult": false
	},
	"applescript": {
		"$": false,
		"Application": false,
		"Automation": false,
		"console": false,
		"delay": false,
		"Library": false,
		"ObjC": false,
		"ObjectSpecifier": false,
		"Path": false,
		"Progress": false,
		"Ref": false
	},
	"serviceworker": {
		"addEventListener": false,
		"applicationCache": false,
		"atob": false,
		"Blob": false,
		"BroadcastChannel": false,
		"btoa": false,
		"Cache": false,
		"caches": false,
		"CacheStorage": false,
		"clearInterval": false,
		"clearTimeout": false,
		"Client": false,
		"clients": false,
		"Clients": false,
		"close": true,
		"console": false,
		"ExtendableEvent": false,
		"ExtendableMessageEvent": false,
		"fetch": false,
		"FetchEvent": false,
		"FileReaderSync": false,
		"FormData": false,
		"Headers": false,
		"IDBCursor": false,
		"IDBCursorWithValue": false,
		"IDBDatabase": false,
		"IDBFactory": false,
		"IDBIndex": false,
		"IDBKeyRange": false,
		"IDBObjectStore": false,
		"IDBOpenDBRequest": false,
		"IDBRequest": false,
		"IDBTransaction": false,
		"IDBVersionChangeEvent": false,
		"ImageData": false,
		"importScripts": false,
		"indexedDB": false,
		"location": false,
		"MessageChannel": false,
		"MessagePort": false,
		"name": false,
		"navigator": false,
		"Notification": false,
		"onclose": true,
		"onconnect": true,
		"onerror": true,
		"onfetch": true,
		"oninstall": true,
		"onlanguagechange": true,
		"onmessage": true,
		"onmessageerror": true,
		"onnotificationclick": true,
		"onnotificationclose": true,
		"onoffline": true,
		"ononline": true,
		"onpush": true,
		"onpushsubscriptionchange": true,
		"onrejectionhandled": true,
		"onsync": true,
		"onunhandledrejection": true,
		"performance": false,
		"Performance": false,
		"PerformanceEntry": false,
		"PerformanceMark": false,
		"PerformanceMeasure": false,
		"PerformanceNavigation": false,
		"PerformanceResourceTiming": false,
		"PerformanceTiming": false,
		"postMessage": true,
		"Promise": false,
		"queueMicrotask": false,
		"registration": false,
		"removeEventListener": false,
		"Request": false,
		"Response": false,
		"self": false,
		"ServiceWorker": false,
		"ServiceWorkerContainer": false,
		"ServiceWorkerGlobalScope": false,
		"ServiceWorkerMessageEvent": false,
		"ServiceWorkerRegistration": false,
		"setInterval": false,
		"setTimeout": false,
		"skipWaiting": false,
		"TextDecoder": false,
		"TextEncoder": false,
		"URL": false,
		"URLSearchParams": false,
		"WebSocket": false,
		"WindowClient": false,
		"Worker": false,
		"WorkerGlobalScope": false,
		"XMLHttpRequest": false
	},
	"atomtest": {
		"advanceClock": false,
		"fakeClearInterval": false,
		"fakeClearTimeout": false,
		"fakeSetInterval": false,
		"fakeSetTimeout": false,
		"resetTimeouts": false,
		"waitsForPromise": false
	},
	"embertest": {
		"andThen": false,
		"click": false,
		"currentPath": false,
		"currentRouteName": false,
		"currentURL": false,
		"fillIn": false,
		"find": false,
		"findAll": false,
		"findWithAssert": false,
		"keyEvent": false,
		"pauseTest": false,
		"resumeTest": false,
		"triggerEvent": false,
		"visit": false,
		"wait": false
	},
	"protractor": {
		"$": false,
		"$$": false,
		"browser": false,
		"by": false,
		"By": false,
		"DartObject": false,
		"element": false,
		"protractor": false
	},
	"shared-node-browser": {
		"clearInterval": false,
		"clearTimeout": false,
		"console": false,
		"setInterval": false,
		"setTimeout": false,
		"URL": false,
		"URLSearchParams": false
	},
	"webextensions": {
		"browser": false,
		"chrome": false,
		"opr": false
	},
	"greasemonkey": {
		"cloneInto": false,
		"createObjectIn": false,
		"exportFunction": false,
		"GM": false,
		"GM_addStyle": false,
		"GM_deleteValue": false,
		"GM_getResourceText": false,
		"GM_getResourceURL": false,
		"GM_getValue": false,
		"GM_info": false,
		"GM_listValues": false,
		"GM_log": false,
		"GM_openInTab": false,
		"GM_registerMenuCommand": false,
		"GM_setClipboard": false,
		"GM_setValue": false,
		"GM_xmlhttpRequest": false,
		"unsafeWindow": false
	},
	"devtools": {
		"$": false,
		"$_": false,
		"$$": false,
		"$0": false,
		"$1": false,
		"$2": false,
		"$3": false,
		"$4": false,
		"$x": false,
		"chrome": false,
		"clear": false,
		"copy": false,
		"debug": false,
		"dir": false,
		"dirxml": false,
		"getEventListeners": false,
		"inspect": false,
		"keys": false,
		"monitor": false,
		"monitorEvents": false,
		"profile": false,
		"profileEnd": false,
		"queryObjects": false,
		"table": false,
		"undebug": false,
		"unmonitor": false,
		"unmonitorEvents": false,
		"values": false
	}
};

var exports$2L = {},
  _dewExec$2K = false;
function dew$2K() {
  if (_dewExec$2K) return exports$2L;
  _dewExec$2K = true;
  exports$2L = _globals;
  return exports$2L;
}

var exports$2K = {},
  _dewExec$2J = false;
function dew$2J() {
  if (_dewExec$2J) return exports$2K;
  _dewExec$2J = true;
  Object.defineProperty(exports$2K, "__esModule", {
    value: true
  });
  exports$2K.clear = clear;
  exports$2K.clearPath = clearPath;
  exports$2K.clearScope = clearScope;
  exports$2K.getCachedPaths = getCachedPaths;
  exports$2K.getOrCreateCachedPaths = getOrCreateCachedPaths;
  exports$2K.scope = exports$2K.path = void 0;
  let pathsCache = exports$2K.path = new WeakMap();
  exports$2K.scope = new WeakMap();
  function clear() {
    clearPath();
    clearScope();
  }
  function clearPath() {
    exports$2K.path = pathsCache = new WeakMap();
  }
  function clearScope() {
    exports$2K.scope = new WeakMap();
  }
  const nullHub = Object.freeze({});
  function getCachedPaths(hub, parent) {
    var _pathsCache$get, _hub;
    {
      hub = null;
    }
    return (_pathsCache$get = pathsCache.get((_hub = hub) != null ? _hub : nullHub)) == null ? void 0 : _pathsCache$get.get(parent);
  }
  function getOrCreateCachedPaths(hub, parent) {
    var _hub2, _hub3;
    {
      hub = null;
    }
    let parents = pathsCache.get((_hub2 = hub) != null ? _hub2 : nullHub);
    if (!parents) pathsCache.set((_hub3 = hub) != null ? _hub3 : nullHub, parents = new WeakMap());
    let paths = parents.get(parent);
    if (!paths) parents.set(parent, paths = new Map());
    return paths;
  }
  return exports$2K;
}

var exports$2J = {},
  _dewExec$2I = false;
function dew$2I() {
  if (_dewExec$2I) return exports$2J;
  _dewExec$2I = true;
  Object.defineProperty(exports$2J, "__esModule", {
    value: true
  });
  exports$2J.default = void 0;
  var _renamer = dew$2M();
  var _index = dew$1_();
  var _binding = dew$2L();
  var _globals = dew$2K();
  var _t = dew$3i();
  var t = _t;
  var _cache = dew$2J();
  var _visitors = dew$2N();
  const {
    NOT_LOCAL_BINDING,
    assignmentExpression,
    callExpression,
    cloneNode,
    getBindingIdentifiers,
    identifier,
    isArrayExpression,
    isBinary,
    isCallExpression,
    isClass,
    isClassBody,
    isClassDeclaration,
    isExportAllDeclaration,
    isExportDefaultDeclaration,
    isExportNamedDeclaration,
    isFunctionDeclaration,
    isIdentifier,
    isImportDeclaration,
    isLiteral,
    isMemberExpression,
    isMethod,
    isModuleSpecifier,
    isNullLiteral,
    isObjectExpression,
    isProperty,
    isPureish,
    isRegExpLiteral,
    isSuper,
    isTaggedTemplateExpression,
    isTemplateLiteral,
    isThisExpression,
    isUnaryExpression,
    isVariableDeclaration,
    expressionStatement,
    matchesPattern,
    memberExpression,
    numericLiteral,
    toIdentifier,
    variableDeclaration,
    variableDeclarator,
    isRecordExpression,
    isTupleExpression,
    isObjectProperty,
    isTopicReference,
    isMetaProperty,
    isPrivateName,
    isExportDeclaration,
    buildUndefinedNode,
    sequenceExpression
  } = _t;
  function gatherNodeParts(node, parts) {
    switch (node == null ? void 0 : node.type) {
      default:
        if (isImportDeclaration(node) || isExportDeclaration(node)) {
          var _node$specifiers;
          if ((isExportAllDeclaration(node) || isExportNamedDeclaration(node) || isImportDeclaration(node)) && node.source) {
            gatherNodeParts(node.source, parts);
          } else if ((isExportNamedDeclaration(node) || isImportDeclaration(node)) && (_node$specifiers = node.specifiers) != null && _node$specifiers.length) {
            for (const e of node.specifiers) gatherNodeParts(e, parts);
          } else if ((isExportDefaultDeclaration(node) || isExportNamedDeclaration(node)) && node.declaration) {
            gatherNodeParts(node.declaration, parts);
          }
        } else if (isModuleSpecifier(node)) {
          gatherNodeParts(node.local, parts);
        } else if (isLiteral(node) && !isNullLiteral(node) && !isRegExpLiteral(node) && !isTemplateLiteral(node)) {
          parts.push(node.value);
        }
        break;
      case "MemberExpression":
      case "OptionalMemberExpression":
      case "JSXMemberExpression":
        gatherNodeParts(node.object, parts);
        gatherNodeParts(node.property, parts);
        break;
      case "Identifier":
      case "JSXIdentifier":
        parts.push(node.name);
        break;
      case "CallExpression":
      case "OptionalCallExpression":
      case "NewExpression":
        gatherNodeParts(node.callee, parts);
        break;
      case "ObjectExpression":
      case "ObjectPattern":
        for (const e of node.properties) {
          gatherNodeParts(e, parts);
        }
        break;
      case "SpreadElement":
      case "RestElement":
        gatherNodeParts(node.argument, parts);
        break;
      case "ObjectProperty":
      case "ObjectMethod":
      case "ClassProperty":
      case "ClassMethod":
      case "ClassPrivateProperty":
      case "ClassPrivateMethod":
        gatherNodeParts(node.key, parts);
        break;
      case "ThisExpression":
        parts.push("this");
        break;
      case "Super":
        parts.push("super");
        break;
      case "Import":
        parts.push("import");
        break;
      case "DoExpression":
        parts.push("do");
        break;
      case "YieldExpression":
        parts.push("yield");
        gatherNodeParts(node.argument, parts);
        break;
      case "AwaitExpression":
        parts.push("await");
        gatherNodeParts(node.argument, parts);
        break;
      case "AssignmentExpression":
        gatherNodeParts(node.left, parts);
        break;
      case "VariableDeclarator":
        gatherNodeParts(node.id, parts);
        break;
      case "FunctionExpression":
      case "FunctionDeclaration":
      case "ClassExpression":
      case "ClassDeclaration":
        gatherNodeParts(node.id, parts);
        break;
      case "PrivateName":
        gatherNodeParts(node.id, parts);
        break;
      case "ParenthesizedExpression":
        gatherNodeParts(node.expression, parts);
        break;
      case "UnaryExpression":
      case "UpdateExpression":
        gatherNodeParts(node.argument, parts);
        break;
      case "MetaProperty":
        gatherNodeParts(node.meta, parts);
        gatherNodeParts(node.property, parts);
        break;
      case "JSXElement":
        gatherNodeParts(node.openingElement, parts);
        break;
      case "JSXOpeningElement":
        gatherNodeParts(node.name, parts);
        break;
      case "JSXFragment":
        gatherNodeParts(node.openingFragment, parts);
        break;
      case "JSXOpeningFragment":
        parts.push("Fragment");
        break;
      case "JSXNamespacedName":
        gatherNodeParts(node.namespace, parts);
        gatherNodeParts(node.name, parts);
        break;
    }
  }
  const collectorVisitor = {
    ForStatement(path) {
      const declar = path.get("init");
      if (declar.isVar()) {
        const {
          scope
        } = path;
        const parentScope = scope.getFunctionParent() || scope.getProgramParent();
        parentScope.registerBinding("var", declar);
      }
    },
    Declaration(path) {
      if (path.isBlockScoped()) return;
      if (path.isImportDeclaration()) return;
      if (path.isExportDeclaration()) return;
      const parent = path.scope.getFunctionParent() || path.scope.getProgramParent();
      parent.registerDeclaration(path);
    },
    ImportDeclaration(path) {
      const parent = path.scope.getBlockParent();
      parent.registerDeclaration(path);
    },
    ReferencedIdentifier(path, state) {
      state.references.push(path);
    },
    ForXStatement(path, state) {
      const left = path.get("left");
      if (left.isPattern() || left.isIdentifier()) {
        state.constantViolations.push(path);
      } else if (left.isVar()) {
        const {
          scope
        } = path;
        const parentScope = scope.getFunctionParent() || scope.getProgramParent();
        parentScope.registerBinding("var", left);
      }
    },
    ExportDeclaration: {
      exit(path) {
        const {
          node,
          scope
        } = path;
        if (isExportAllDeclaration(node)) return;
        const declar = node.declaration;
        if (isClassDeclaration(declar) || isFunctionDeclaration(declar)) {
          const id = declar.id;
          if (!id) return;
          const binding = scope.getBinding(id.name);
          binding == null || binding.reference(path);
        } else if (isVariableDeclaration(declar)) {
          for (const decl of declar.declarations) {
            for (const name of Object.keys(getBindingIdentifiers(decl))) {
              const binding = scope.getBinding(name);
              binding == null || binding.reference(path);
            }
          }
        }
      }
    },
    LabeledStatement(path) {
      path.scope.getBlockParent().registerDeclaration(path);
    },
    AssignmentExpression(path, state) {
      state.assignments.push(path);
    },
    UpdateExpression(path, state) {
      state.constantViolations.push(path);
    },
    UnaryExpression(path, state) {
      if (path.node.operator === "delete") {
        state.constantViolations.push(path);
      }
    },
    BlockScoped(path) {
      let scope = path.scope;
      if (scope.path === path) scope = scope.parent;
      const parent = scope.getBlockParent();
      parent.registerDeclaration(path);
      if (path.isClassDeclaration() && path.node.id) {
        const id = path.node.id;
        const name = id.name;
        path.scope.bindings[name] = path.scope.parent.getBinding(name);
      }
    },
    CatchClause(path) {
      path.scope.registerBinding("let", path);
    },
    Function(path) {
      const params = path.get("params");
      for (const param of params) {
        path.scope.registerBinding("param", param);
      }
      if (path.isFunctionExpression() && path.has("id") && !path.get("id").node[NOT_LOCAL_BINDING]) {
        path.scope.registerBinding("local", path.get("id"), path);
      }
    },
    ClassExpression(path) {
      if (path.has("id") && !path.get("id").node[NOT_LOCAL_BINDING]) {
        path.scope.registerBinding("local", path.get("id"), path);
      }
    },
    TSTypeAnnotation(path) {
      path.skip();
    }
  };
  let uid = 0;
  class Scope {
    constructor(path) {
      this.uid = void 0;
      this.path = void 0;
      this.block = void 0;
      this.labels = void 0;
      this.inited = void 0;
      this.bindings = void 0;
      this.references = void 0;
      this.globals = void 0;
      this.uids = void 0;
      this.data = void 0;
      this.crawling = void 0;
      const {
        node
      } = path;
      const cached = _cache.scope.get(node);
      if ((cached == null ? void 0 : cached.path) === path) {
        return cached;
      }
      _cache.scope.set(node, this);
      this.uid = uid++;
      this.block = node;
      this.path = path;
      this.labels = new Map();
      this.inited = false;
    }
    get parent() {
      var _parent;
      let parent,
        path = this.path;
      do {
        var _path;
        const shouldSkip = path.key === "key" || path.listKey === "decorators";
        path = path.parentPath;
        if (shouldSkip && path.isMethod()) path = path.parentPath;
        if ((_path = path) != null && _path.isScope()) parent = path;
      } while (path && !parent);
      return (_parent = parent) == null ? void 0 : _parent.scope;
    }
    get parentBlock() {
      return this.path.parent;
    }
    get hub() {
      return this.path.hub;
    }
    traverse(node, opts, state) {
      (0, _index.default)(node, opts, this, state, this.path);
    }
    generateDeclaredUidIdentifier(name) {
      const id = this.generateUidIdentifier(name);
      this.push({
        id
      });
      return cloneNode(id);
    }
    generateUidIdentifier(name) {
      return identifier(this.generateUid(name));
    }
    generateUid(name = "temp") {
      name = toIdentifier(name).replace(/^_+/, "").replace(/\d+$/g, "");
      let uid;
      let i = 1;
      do {
        uid = this._generateUid(name, i);
        i++;
      } while (this.hasLabel(uid) || this.hasBinding(uid) || this.hasGlobal(uid) || this.hasReference(uid));
      const program = this.getProgramParent();
      program.references[uid] = true;
      program.uids[uid] = true;
      return uid;
    }
    _generateUid(name, i) {
      let id = name;
      if (i > 1) id += i;
      return `_${id}`;
    }
    generateUidBasedOnNode(node, defaultName) {
      const parts = [];
      gatherNodeParts(node, parts);
      let id = parts.join("$");
      id = id.replace(/^_/, "") || defaultName || "ref";
      return this.generateUid(id.slice(0, 20));
    }
    generateUidIdentifierBasedOnNode(node, defaultName) {
      return identifier(this.generateUidBasedOnNode(node, defaultName));
    }
    isStatic(node) {
      if (isThisExpression(node) || isSuper(node) || isTopicReference(node)) {
        return true;
      }
      if (isIdentifier(node)) {
        const binding = this.getBinding(node.name);
        if (binding) {
          return binding.constant;
        } else {
          return this.hasBinding(node.name);
        }
      }
      return false;
    }
    maybeGenerateMemoised(node, dontPush) {
      if (this.isStatic(node)) {
        return null;
      } else {
        const id = this.generateUidIdentifierBasedOnNode(node);
        if (!dontPush) {
          this.push({
            id
          });
          return cloneNode(id);
        }
        return id;
      }
    }
    checkBlockScopedCollisions(local, kind, name, id) {
      if (kind === "param") return;
      if (local.kind === "local") return;
      const duplicate = kind === "let" || local.kind === "let" || local.kind === "const" || local.kind === "module" || local.kind === "param" && kind === "const";
      if (duplicate) {
        throw this.hub.buildError(id, `Duplicate declaration "${name}"`, TypeError);
      }
    }
    rename(oldName, newName) {
      const binding = this.getBinding(oldName);
      if (binding) {
        newName || (newName = this.generateUidIdentifier(oldName).name);
        const renamer = new _renamer.default(binding, oldName, newName);
        {
          renamer.rename(arguments[2]);
        }
      }
    }
    _renameFromMap(map, oldName, newName, value) {
      if (map[oldName]) {
        map[newName] = value;
        map[oldName] = null;
      }
    }
    dump() {
      const sep = "-".repeat(60);
      console.log(sep);
      let scope = this;
      do {
        console.log("#", scope.block.type);
        for (const name of Object.keys(scope.bindings)) {
          const binding = scope.bindings[name];
          console.log(" -", name, {
            constant: binding.constant,
            references: binding.references,
            violations: binding.constantViolations.length,
            kind: binding.kind
          });
        }
      } while (scope = scope.parent);
      console.log(sep);
    }
    toArray(node, i, arrayLikeIsIterable) {
      if (isIdentifier(node)) {
        const binding = this.getBinding(node.name);
        if (binding != null && binding.constant && binding.path.isGenericType("Array")) {
          return node;
        }
      }
      if (isArrayExpression(node)) {
        return node;
      }
      if (isIdentifier(node, {
        name: "arguments"
      })) {
        return callExpression(memberExpression(memberExpression(memberExpression(identifier("Array"), identifier("prototype")), identifier("slice")), identifier("call")), [node]);
      }
      let helperName;
      const args = [node];
      if (i === true) {
        helperName = "toConsumableArray";
      } else if (typeof i === "number") {
        args.push(numericLiteral(i));
        helperName = "slicedToArray";
      } else {
        helperName = "toArray";
      }
      if (arrayLikeIsIterable) {
        args.unshift(this.hub.addHelper(helperName));
        helperName = "maybeArrayLike";
      }
      return callExpression(this.hub.addHelper(helperName), args);
    }
    hasLabel(name) {
      return !!this.getLabel(name);
    }
    getLabel(name) {
      return this.labels.get(name);
    }
    registerLabel(path) {
      this.labels.set(path.node.label.name, path);
    }
    registerDeclaration(path) {
      if (path.isLabeledStatement()) {
        this.registerLabel(path);
      } else if (path.isFunctionDeclaration()) {
        this.registerBinding("hoisted", path.get("id"), path);
      } else if (path.isVariableDeclaration()) {
        const declarations = path.get("declarations");
        const {
          kind
        } = path.node;
        for (const declar of declarations) {
          this.registerBinding(kind === "using" || kind === "await using" ? "const" : kind, declar);
        }
      } else if (path.isClassDeclaration()) {
        if (path.node.declare) return;
        this.registerBinding("let", path);
      } else if (path.isImportDeclaration()) {
        const isTypeDeclaration = path.node.importKind === "type" || path.node.importKind === "typeof";
        const specifiers = path.get("specifiers");
        for (const specifier of specifiers) {
          const isTypeSpecifier = isTypeDeclaration || specifier.isImportSpecifier() && (specifier.node.importKind === "type" || specifier.node.importKind === "typeof");
          this.registerBinding(isTypeSpecifier ? "unknown" : "module", specifier);
        }
      } else if (path.isExportDeclaration()) {
        const declar = path.get("declaration");
        if (declar.isClassDeclaration() || declar.isFunctionDeclaration() || declar.isVariableDeclaration()) {
          this.registerDeclaration(declar);
        }
      } else {
        this.registerBinding("unknown", path);
      }
    }
    buildUndefinedNode() {
      return buildUndefinedNode();
    }
    registerConstantViolation(path) {
      const ids = path.getAssignmentIdentifiers();
      for (const name of Object.keys(ids)) {
        var _this$getBinding;
        (_this$getBinding = this.getBinding(name)) == null || _this$getBinding.reassign(path);
      }
    }
    registerBinding(kind, path, bindingPath = path) {
      if (!kind) throw new ReferenceError("no `kind`");
      if (path.isVariableDeclaration()) {
        const declarators = path.get("declarations");
        for (const declar of declarators) {
          this.registerBinding(kind, declar);
        }
        return;
      }
      const parent = this.getProgramParent();
      const ids = path.getOuterBindingIdentifiers(true);
      for (const name of Object.keys(ids)) {
        parent.references[name] = true;
        for (const id of ids[name]) {
          const local = this.getOwnBinding(name);
          if (local) {
            if (local.identifier === id) continue;
            this.checkBlockScopedCollisions(local, kind, name, id);
          }
          if (local) {
            local.reassign(bindingPath);
          } else {
            this.bindings[name] = new _binding.default({
              identifier: id,
              scope: this,
              path: bindingPath,
              kind: kind
            });
          }
        }
      }
    }
    addGlobal(node) {
      this.globals[node.name] = node;
    }
    hasUid(name) {
      let scope = this;
      do {
        if (scope.uids[name]) return true;
      } while (scope = scope.parent);
      return false;
    }
    hasGlobal(name) {
      let scope = this;
      do {
        if (scope.globals[name]) return true;
      } while (scope = scope.parent);
      return false;
    }
    hasReference(name) {
      return !!this.getProgramParent().references[name];
    }
    isPure(node, constantsOnly) {
      if (isIdentifier(node)) {
        const binding = this.getBinding(node.name);
        if (!binding) return false;
        if (constantsOnly) return binding.constant;
        return true;
      } else if (isThisExpression(node) || isMetaProperty(node) || isTopicReference(node) || isPrivateName(node)) {
        return true;
      } else if (isClass(node)) {
        var _node$decorators;
        if (node.superClass && !this.isPure(node.superClass, constantsOnly)) {
          return false;
        }
        if (((_node$decorators = node.decorators) == null ? void 0 : _node$decorators.length) > 0) {
          return false;
        }
        return this.isPure(node.body, constantsOnly);
      } else if (isClassBody(node)) {
        for (const method of node.body) {
          if (!this.isPure(method, constantsOnly)) return false;
        }
        return true;
      } else if (isBinary(node)) {
        return this.isPure(node.left, constantsOnly) && this.isPure(node.right, constantsOnly);
      } else if (isArrayExpression(node) || isTupleExpression(node)) {
        for (const elem of node.elements) {
          if (elem !== null && !this.isPure(elem, constantsOnly)) return false;
        }
        return true;
      } else if (isObjectExpression(node) || isRecordExpression(node)) {
        for (const prop of node.properties) {
          if (!this.isPure(prop, constantsOnly)) return false;
        }
        return true;
      } else if (isMethod(node)) {
        var _node$decorators2;
        if (node.computed && !this.isPure(node.key, constantsOnly)) return false;
        if (((_node$decorators2 = node.decorators) == null ? void 0 : _node$decorators2.length) > 0) {
          return false;
        }
        return true;
      } else if (isProperty(node)) {
        var _node$decorators3;
        if (node.computed && !this.isPure(node.key, constantsOnly)) return false;
        if (((_node$decorators3 = node.decorators) == null ? void 0 : _node$decorators3.length) > 0) {
          return false;
        }
        if (isObjectProperty(node) || node.static) {
          if (node.value !== null && !this.isPure(node.value, constantsOnly)) {
            return false;
          }
        }
        return true;
      } else if (isUnaryExpression(node)) {
        return this.isPure(node.argument, constantsOnly);
      } else if (isTemplateLiteral(node)) {
        for (const expression of node.expressions) {
          if (!this.isPure(expression, constantsOnly)) return false;
        }
        return true;
      } else if (isTaggedTemplateExpression(node)) {
        return matchesPattern(node.tag, "String.raw") && !this.hasBinding("String", {
          noGlobals: true
        }) && this.isPure(node.quasi, constantsOnly);
      } else if (isMemberExpression(node)) {
        return !node.computed && isIdentifier(node.object) && node.object.name === "Symbol" && isIdentifier(node.property) && node.property.name !== "for" && !this.hasBinding("Symbol", {
          noGlobals: true
        });
      } else if (isCallExpression(node)) {
        return matchesPattern(node.callee, "Symbol.for") && !this.hasBinding("Symbol", {
          noGlobals: true
        }) && node.arguments.length === 1 && t.isStringLiteral(node.arguments[0]);
      } else {
        return isPureish(node);
      }
    }
    setData(key, val) {
      return this.data[key] = val;
    }
    getData(key) {
      let scope = this;
      do {
        const data = scope.data[key];
        if (data != null) return data;
      } while (scope = scope.parent);
    }
    removeData(key) {
      let scope = this;
      do {
        const data = scope.data[key];
        if (data != null) scope.data[key] = null;
      } while (scope = scope.parent);
    }
    init() {
      if (!this.inited) {
        this.inited = true;
        this.crawl();
      }
    }
    crawl() {
      const path = this.path;
      this.references = Object.create(null);
      this.bindings = Object.create(null);
      this.globals = Object.create(null);
      this.uids = Object.create(null);
      this.data = Object.create(null);
      const programParent = this.getProgramParent();
      if (programParent.crawling) return;
      const state = {
        references: [],
        constantViolations: [],
        assignments: []
      };
      this.crawling = true;
      if (path.type !== "Program" && (0, _visitors.isExplodedVisitor)(collectorVisitor)) {
        for (const visit of collectorVisitor.enter) {
          visit.call(state, path, state);
        }
        const typeVisitors = collectorVisitor[path.type];
        if (typeVisitors) {
          for (const visit of typeVisitors.enter) {
            visit.call(state, path, state);
          }
        }
      }
      path.traverse(collectorVisitor, state);
      this.crawling = false;
      for (const path of state.assignments) {
        const ids = path.getAssignmentIdentifiers();
        for (const name of Object.keys(ids)) {
          if (path.scope.getBinding(name)) continue;
          programParent.addGlobal(ids[name]);
        }
        path.scope.registerConstantViolation(path);
      }
      for (const ref of state.references) {
        const binding = ref.scope.getBinding(ref.node.name);
        if (binding) {
          binding.reference(ref);
        } else {
          programParent.addGlobal(ref.node);
        }
      }
      for (const path of state.constantViolations) {
        path.scope.registerConstantViolation(path);
      }
    }
    push(opts) {
      let path = this.path;
      if (path.isPattern()) {
        path = this.getPatternParent().path;
      } else if (!path.isBlockStatement() && !path.isProgram()) {
        path = this.getBlockParent().path;
      }
      if (path.isSwitchStatement()) {
        path = (this.getFunctionParent() || this.getProgramParent()).path;
      }
      const {
        init,
        unique,
        kind = "var",
        id
      } = opts;
      if (!init && !unique && (kind === "var" || kind === "let") && path.isFunction() && !path.node.name && isCallExpression(path.parent, {
        callee: path.node
      }) && path.parent.arguments.length <= path.node.params.length && isIdentifier(id)) {
        path.pushContainer("params", id);
        path.scope.registerBinding("param", path.get("params")[path.node.params.length - 1]);
        return;
      }
      if (path.isLoop() || path.isCatchClause() || path.isFunction()) {
        path.ensureBlock();
        path = path.get("body");
      }
      const blockHoist = opts._blockHoist == null ? 2 : opts._blockHoist;
      const dataKey = `declaration:${kind}:${blockHoist}`;
      let declarPath = !unique && path.getData(dataKey);
      if (!declarPath) {
        const declar = variableDeclaration(kind, []);
        declar._blockHoist = blockHoist;
        [declarPath] = path.unshiftContainer("body", [declar]);
        if (!unique) path.setData(dataKey, declarPath);
      }
      const declarator = variableDeclarator(id, init);
      const len = declarPath.node.declarations.push(declarator);
      path.scope.registerBinding(kind, declarPath.get("declarations")[len - 1]);
    }
    getProgramParent() {
      let scope = this;
      do {
        if (scope.path.isProgram()) {
          return scope;
        }
      } while (scope = scope.parent);
      throw new Error("Couldn't find a Program");
    }
    getFunctionParent() {
      let scope = this;
      do {
        if (scope.path.isFunctionParent()) {
          return scope;
        }
      } while (scope = scope.parent);
      return null;
    }
    getBlockParent() {
      let scope = this;
      do {
        if (scope.path.isBlockParent()) {
          return scope;
        }
      } while (scope = scope.parent);
      throw new Error("We couldn't find a BlockStatement, For, Switch, Function, Loop or Program...");
    }
    getPatternParent() {
      let scope = this;
      do {
        if (!scope.path.isPattern()) {
          return scope.getBlockParent();
        }
      } while (scope = scope.parent.parent);
      throw new Error("We couldn't find a BlockStatement, For, Switch, Function, Loop or Program...");
    }
    getAllBindings() {
      const ids = Object.create(null);
      let scope = this;
      do {
        for (const key of Object.keys(scope.bindings)) {
          if (key in ids === false) {
            ids[key] = scope.bindings[key];
          }
        }
        scope = scope.parent;
      } while (scope);
      return ids;
    }
    getAllBindingsOfKind(...kinds) {
      const ids = Object.create(null);
      for (const kind of kinds) {
        let scope = this;
        do {
          for (const name of Object.keys(scope.bindings)) {
            const binding = scope.bindings[name];
            if (binding.kind === kind) ids[name] = binding;
          }
          scope = scope.parent;
        } while (scope);
      }
      return ids;
    }
    bindingIdentifierEquals(name, node) {
      return this.getBindingIdentifier(name) === node;
    }
    getBinding(name) {
      let scope = this;
      let previousPath;
      do {
        const binding = scope.getOwnBinding(name);
        if (binding) {
          var _previousPath;
          if ((_previousPath = previousPath) != null && _previousPath.isPattern() && binding.kind !== "param" && binding.kind !== "local") ; else {
            return binding;
          }
        } else if (!binding && name === "arguments" && scope.path.isFunction() && !scope.path.isArrowFunctionExpression()) {
          break;
        }
        previousPath = scope.path;
      } while (scope = scope.parent);
    }
    getOwnBinding(name) {
      return this.bindings[name];
    }
    getBindingIdentifier(name) {
      var _this$getBinding2;
      return (_this$getBinding2 = this.getBinding(name)) == null ? void 0 : _this$getBinding2.identifier;
    }
    getOwnBindingIdentifier(name) {
      const binding = this.bindings[name];
      return binding == null ? void 0 : binding.identifier;
    }
    hasOwnBinding(name) {
      return !!this.getOwnBinding(name);
    }
    hasBinding(name, opts) {
      if (!name) return false;
      let scope = this;
      do {
        if (scope.hasOwnBinding(name)) {
          return true;
        }
      } while (scope = scope.parent);
      let noGlobals;
      let noUids;
      if (typeof opts === "object") {
        noGlobals = opts.noGlobals;
        noUids = opts.noUids;
      } else if (typeof opts === "boolean") {
        noGlobals = opts;
      }
      if (!noUids && this.hasUid(name)) return true;
      if (!noGlobals && Scope.globals.includes(name)) return true;
      if (!noGlobals && Scope.contextVariables.includes(name)) return true;
      return false;
    }
    parentHasBinding(name, opts) {
      var _this$parent;
      return (_this$parent = this.parent) == null ? void 0 : _this$parent.hasBinding(name, opts);
    }
    moveBindingTo(name, scope) {
      const info = this.getBinding(name);
      if (info) {
        info.scope.removeOwnBinding(name);
        info.scope = scope;
        scope.bindings[name] = info;
      }
    }
    removeOwnBinding(name) {
      delete this.bindings[name];
    }
    removeBinding(name) {
      var _this$getBinding3;
      (_this$getBinding3 = this.getBinding(name)) == null || _this$getBinding3.scope.removeOwnBinding(name);
      let scope = this;
      do {
        if (scope.uids[name]) {
          scope.uids[name] = false;
        }
      } while (scope = scope.parent);
    }
    hoistVariables(emit = id => this.push({
      id
    })) {
      this.crawl();
      const seen = new Set();
      for (const name of Object.keys(this.bindings)) {
        const binding = this.bindings[name];
        if (!binding) continue;
        const {
          path
        } = binding;
        if (!path.isVariableDeclarator()) continue;
        const {
          parent,
          parentPath
        } = path;
        if (parent.kind !== "var" || seen.has(parent)) continue;
        seen.add(path.parent);
        let firstId;
        const init = [];
        for (const decl of parent.declarations) {
          var _firstId;
          (_firstId = firstId) != null ? _firstId : firstId = decl.id;
          if (decl.init) {
            init.push(assignmentExpression("=", decl.id, decl.init));
          }
          const ids = Object.keys(getBindingIdentifiers(decl, false, true, true));
          for (const name of ids) {
            emit(identifier(name), decl.init != null);
          }
        }
        if (parentPath.parentPath.isFor({
          left: parent
        })) {
          parentPath.replaceWith(firstId);
        } else if (init.length === 0) {
          parentPath.remove();
        } else {
          const expr = init.length === 1 ? init[0] : sequenceExpression(init);
          if (parentPath.parentPath.isForStatement({
            init: parent
          })) {
            parentPath.replaceWith(expr);
          } else {
            parentPath.replaceWith(expressionStatement(expr));
          }
        }
      }
    }
  }
  exports$2J.default = Scope;
  Scope.globals = Object.keys(_globals.builtin);
  Scope.contextVariables = ["arguments", "undefined", "Infinity", "NaN"];
  return exports$2J;
}

var exports$2I = {},
  _dewExec$2H = false;
function dew$2H() {
  if (_dewExec$2H) return exports$2I;
  _dewExec$2H = true;
  (function (global, factory) {
    factory(exports$2I);
  })(exports$2I, function (exports) {

    /**
     * SetArray acts like a `Set` (allowing only one occurrence of a string `key`), but provides the
     * index of the `key` in the backing array.
     *
     * This is designed to allow synchronizing a second array with the contents of the backing array,
     * like how in a sourcemap `sourcesContent[i]` is the source content associated with `source[i]`,
     * and there are never duplicates.
     */
    class SetArray {
      constructor() {
        this._indexes = {
          __proto__: null
        };
        this.array = [];
      }
    }
    /**
     * Typescript doesn't allow friend access to private fields, so this just casts the set into a type
     * with public access modifiers.
     */
    function cast(set) {
      return set;
    }
    /**
     * Gets the index associated with `key` in the backing array, if it is already present.
     */
    function get(setarr, key) {
      return cast(setarr)._indexes[key];
    }
    /**
     * Puts `key` into the backing array, if it is not already present. Returns
     * the index of the `key` in the backing array.
     */
    function put(setarr, key) {
      // The key may or may not be present. If it is present, it's a number.
      const index = get(setarr, key);
      if (index !== undefined) return index;
      const {
        array,
        _indexes: indexes
      } = cast(setarr);
      const length = array.push(key);
      return indexes[key] = length - 1;
    }
    /**
     * Pops the last added item out of the SetArray.
     */
    function pop(setarr) {
      const {
        array,
        _indexes: indexes
      } = cast(setarr);
      if (array.length === 0) return;
      const last = array.pop();
      indexes[last] = undefined;
    }
    /**
     * Removes the key, if it exists in the set.
     */
    function remove(setarr, key) {
      const index = get(setarr, key);
      if (index === undefined) return;
      const {
        array,
        _indexes: indexes
      } = cast(setarr);
      for (let i = index + 1; i < array.length; i++) {
        const k = array[i];
        array[i - 1] = k;
        indexes[k]--;
      }
      indexes[key] = undefined;
      array.pop();
    }
    exports.SetArray = SetArray;
    exports.get = get;
    exports.pop = pop;
    exports.put = put;
    exports.remove = remove;
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
  });
  return exports$2I;
}

var exports$2H = {},
  _dewExec$2G = false;
function dew$2G() {
  if (_dewExec$2G) return exports$2H;
  _dewExec$2G = true;
  var Buffer = _nodeBuffer.Buffer;
  (function (global, factory) {
    factory(exports$2H);
  })(exports$2H, function (exports) {

    const comma = ",".charCodeAt(0);
    const semicolon = ";".charCodeAt(0);
    const chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    const intToChar = new Uint8Array(64); // 64 possible chars.
    const charToInt = new Uint8Array(128); // z is 122 in ASCII
    for (let i = 0; i < chars.length; i++) {
      const c = chars.charCodeAt(i);
      intToChar[i] = c;
      charToInt[c] = i;
    }
    function decodeInteger(reader, relative) {
      let value = 0;
      let shift = 0;
      let integer = 0;
      do {
        const c = reader.next();
        integer = charToInt[c];
        value |= (integer & 31) << shift;
        shift += 5;
      } while (integer & 32);
      const shouldNegate = value & 1;
      value >>>= 1;
      if (shouldNegate) {
        value = -2147483648 | -value;
      }
      return relative + value;
    }
    function encodeInteger(builder, num, relative) {
      let delta = num - relative;
      delta = delta < 0 ? -delta << 1 | 1 : delta << 1;
      do {
        let clamped = delta & 31;
        delta >>>= 5;
        if (delta > 0) clamped |= 32;
        builder.write(intToChar[clamped]);
      } while (delta > 0);
      return num;
    }
    function hasMoreVlq(reader, max) {
      if (reader.pos >= max) return false;
      return reader.peek() !== comma;
    }
    const bufLength = 1024 * 16;
    // Provide a fallback for older environments.
    const td = typeof TextDecoder !== "undefined" ? /* #__PURE__ */new TextDecoder() : typeof Buffer !== "undefined" ? {
      decode(buf) {
        const out = Buffer.from(buf.buffer, buf.byteOffset, buf.byteLength);
        return out.toString();
      }
    } : {
      decode(buf) {
        let out = "";
        for (let i = 0; i < buf.length; i++) {
          out += String.fromCharCode(buf[i]);
        }
        return out;
      }
    };
    class StringWriter {
      constructor() {
        this.pos = 0;
        this.out = "";
        this.buffer = new Uint8Array(bufLength);
      }
      write(v) {
        const {
          buffer
        } = this;
        buffer[this.pos++] = v;
        if (this.pos === bufLength) {
          this.out += td.decode(buffer);
          this.pos = 0;
        }
      }
      flush() {
        const {
          buffer,
          out,
          pos
        } = this;
        return pos > 0 ? out + td.decode(buffer.subarray(0, pos)) : out;
      }
    }
    class StringReader {
      constructor(buffer) {
        this.pos = 0;
        this.buffer = buffer;
      }
      next() {
        return this.buffer.charCodeAt(this.pos++);
      }
      peek() {
        return this.buffer.charCodeAt(this.pos);
      }
      indexOf(char) {
        const {
          buffer,
          pos
        } = this;
        const idx = buffer.indexOf(char, pos);
        return idx === -1 ? buffer.length : idx;
      }
    }
    const EMPTY = [];
    function decodeOriginalScopes(input) {
      const {
        length
      } = input;
      const reader = new StringReader(input);
      const scopes = [];
      const stack = [];
      let line = 0;
      for (; reader.pos < length; reader.pos++) {
        line = decodeInteger(reader, line);
        const column = decodeInteger(reader, 0);
        if (!hasMoreVlq(reader, length)) {
          const last = stack.pop();
          last[2] = line;
          last[3] = column;
          continue;
        }
        const kind = decodeInteger(reader, 0);
        const fields = decodeInteger(reader, 0);
        const hasName = fields & 1;
        const scope = hasName ? [line, column, 0, 0, kind, decodeInteger(reader, 0)] : [line, column, 0, 0, kind];
        let vars = EMPTY;
        if (hasMoreVlq(reader, length)) {
          vars = [];
          do {
            const varsIndex = decodeInteger(reader, 0);
            vars.push(varsIndex);
          } while (hasMoreVlq(reader, length));
        }
        scope.vars = vars;
        scopes.push(scope);
        stack.push(scope);
      }
      return scopes;
    }
    function encodeOriginalScopes(scopes) {
      const writer = new StringWriter();
      for (let i = 0; i < scopes.length;) {
        i = _encodeOriginalScopes(scopes, i, writer, [0]);
      }
      return writer.flush();
    }
    function _encodeOriginalScopes(scopes, index, writer, state) {
      const scope = scopes[index];
      const {
        0: startLine,
        1: startColumn,
        2: endLine,
        3: endColumn,
        4: kind,
        vars
      } = scope;
      if (index > 0) writer.write(comma);
      state[0] = encodeInteger(writer, startLine, state[0]);
      encodeInteger(writer, startColumn, 0);
      encodeInteger(writer, kind, 0);
      const fields = scope.length === 6 ? 1 : 0;
      encodeInteger(writer, fields, 0);
      if (scope.length === 6) encodeInteger(writer, scope[5], 0);
      for (const v of vars) {
        encodeInteger(writer, v, 0);
      }
      for (index++; index < scopes.length;) {
        const next = scopes[index];
        const {
          0: l,
          1: c
        } = next;
        if (l > endLine || l === endLine && c >= endColumn) {
          break;
        }
        index = _encodeOriginalScopes(scopes, index, writer, state);
      }
      writer.write(comma);
      state[0] = encodeInteger(writer, endLine, state[0]);
      encodeInteger(writer, endColumn, 0);
      return index;
    }
    function decodeGeneratedRanges(input) {
      const {
        length
      } = input;
      const reader = new StringReader(input);
      const ranges = [];
      const stack = [];
      let genLine = 0;
      let definitionSourcesIndex = 0;
      let definitionScopeIndex = 0;
      let callsiteSourcesIndex = 0;
      let callsiteLine = 0;
      let callsiteColumn = 0;
      let bindingLine = 0;
      let bindingColumn = 0;
      do {
        const semi = reader.indexOf(";");
        let genColumn = 0;
        for (; reader.pos < semi; reader.pos++) {
          genColumn = decodeInteger(reader, genColumn);
          if (!hasMoreVlq(reader, semi)) {
            const last = stack.pop();
            last[2] = genLine;
            last[3] = genColumn;
            continue;
          }
          const fields = decodeInteger(reader, 0);
          const hasDefinition = fields & 1;
          const hasCallsite = fields & 2;
          const hasScope = fields & 4;
          let callsite = null;
          let bindings = EMPTY;
          let range;
          if (hasDefinition) {
            const defSourcesIndex = decodeInteger(reader, definitionSourcesIndex);
            definitionScopeIndex = decodeInteger(reader, definitionSourcesIndex === defSourcesIndex ? definitionScopeIndex : 0);
            definitionSourcesIndex = defSourcesIndex;
            range = [genLine, genColumn, 0, 0, defSourcesIndex, definitionScopeIndex];
          } else {
            range = [genLine, genColumn, 0, 0];
          }
          range.isScope = !!hasScope;
          if (hasCallsite) {
            const prevCsi = callsiteSourcesIndex;
            const prevLine = callsiteLine;
            callsiteSourcesIndex = decodeInteger(reader, callsiteSourcesIndex);
            const sameSource = prevCsi === callsiteSourcesIndex;
            callsiteLine = decodeInteger(reader, sameSource ? callsiteLine : 0);
            callsiteColumn = decodeInteger(reader, sameSource && prevLine === callsiteLine ? callsiteColumn : 0);
            callsite = [callsiteSourcesIndex, callsiteLine, callsiteColumn];
          }
          range.callsite = callsite;
          if (hasMoreVlq(reader, semi)) {
            bindings = [];
            do {
              bindingLine = genLine;
              bindingColumn = genColumn;
              const expressionsCount = decodeInteger(reader, 0);
              let expressionRanges;
              if (expressionsCount < -1) {
                expressionRanges = [[decodeInteger(reader, 0)]];
                for (let i = -1; i > expressionsCount; i--) {
                  const prevBl = bindingLine;
                  bindingLine = decodeInteger(reader, bindingLine);
                  bindingColumn = decodeInteger(reader, bindingLine === prevBl ? bindingColumn : 0);
                  const expression = decodeInteger(reader, 0);
                  expressionRanges.push([expression, bindingLine, bindingColumn]);
                }
              } else {
                expressionRanges = [[expressionsCount]];
              }
              bindings.push(expressionRanges);
            } while (hasMoreVlq(reader, semi));
          }
          range.bindings = bindings;
          ranges.push(range);
          stack.push(range);
        }
        genLine++;
        reader.pos = semi + 1;
      } while (reader.pos < length);
      return ranges;
    }
    function encodeGeneratedRanges(ranges) {
      if (ranges.length === 0) return "";
      const writer = new StringWriter();
      for (let i = 0; i < ranges.length;) {
        i = _encodeGeneratedRanges(ranges, i, writer, [0, 0, 0, 0, 0, 0, 0]);
      }
      return writer.flush();
    }
    function _encodeGeneratedRanges(ranges, index, writer, state) {
      const range = ranges[index];
      const {
        0: startLine,
        1: startColumn,
        2: endLine,
        3: endColumn,
        isScope,
        callsite,
        bindings
      } = range;
      if (state[0] < startLine) {
        catchupLine(writer, state[0], startLine);
        state[0] = startLine;
        state[1] = 0;
      } else if (index > 0) {
        writer.write(comma);
      }
      state[1] = encodeInteger(writer, range[1], state[1]);
      const fields = (range.length === 6 ? 1 : 0) | (callsite ? 2 : 0) | (isScope ? 4 : 0);
      encodeInteger(writer, fields, 0);
      if (range.length === 6) {
        const {
          4: sourcesIndex,
          5: scopesIndex
        } = range;
        if (sourcesIndex !== state[2]) {
          state[3] = 0;
        }
        state[2] = encodeInteger(writer, sourcesIndex, state[2]);
        state[3] = encodeInteger(writer, scopesIndex, state[3]);
      }
      if (callsite) {
        const {
          0: sourcesIndex,
          1: callLine,
          2: callColumn
        } = range.callsite;
        if (sourcesIndex !== state[4]) {
          state[5] = 0;
          state[6] = 0;
        } else if (callLine !== state[5]) {
          state[6] = 0;
        }
        state[4] = encodeInteger(writer, sourcesIndex, state[4]);
        state[5] = encodeInteger(writer, callLine, state[5]);
        state[6] = encodeInteger(writer, callColumn, state[6]);
      }
      if (bindings) {
        for (const binding of bindings) {
          if (binding.length > 1) encodeInteger(writer, -binding.length, 0);
          const expression = binding[0][0];
          encodeInteger(writer, expression, 0);
          let bindingStartLine = startLine;
          let bindingStartColumn = startColumn;
          for (let i = 1; i < binding.length; i++) {
            const expRange = binding[i];
            bindingStartLine = encodeInteger(writer, expRange[1], bindingStartLine);
            bindingStartColumn = encodeInteger(writer, expRange[2], bindingStartColumn);
            encodeInteger(writer, expRange[0], 0);
          }
        }
      }
      for (index++; index < ranges.length;) {
        const next = ranges[index];
        const {
          0: l,
          1: c
        } = next;
        if (l > endLine || l === endLine && c >= endColumn) {
          break;
        }
        index = _encodeGeneratedRanges(ranges, index, writer, state);
      }
      if (state[0] < endLine) {
        catchupLine(writer, state[0], endLine);
        state[0] = endLine;
        state[1] = 0;
      } else {
        writer.write(comma);
      }
      state[1] = encodeInteger(writer, endColumn, state[1]);
      return index;
    }
    function catchupLine(writer, lastLine, line) {
      do {
        writer.write(semicolon);
      } while (++lastLine < line);
    }
    function decode(mappings) {
      const {
        length
      } = mappings;
      const reader = new StringReader(mappings);
      const decoded = [];
      let genColumn = 0;
      let sourcesIndex = 0;
      let sourceLine = 0;
      let sourceColumn = 0;
      let namesIndex = 0;
      do {
        const semi = reader.indexOf(";");
        const line = [];
        let sorted = true;
        let lastCol = 0;
        genColumn = 0;
        while (reader.pos < semi) {
          let seg;
          genColumn = decodeInteger(reader, genColumn);
          if (genColumn < lastCol) sorted = false;
          lastCol = genColumn;
          if (hasMoreVlq(reader, semi)) {
            sourcesIndex = decodeInteger(reader, sourcesIndex);
            sourceLine = decodeInteger(reader, sourceLine);
            sourceColumn = decodeInteger(reader, sourceColumn);
            if (hasMoreVlq(reader, semi)) {
              namesIndex = decodeInteger(reader, namesIndex);
              seg = [genColumn, sourcesIndex, sourceLine, sourceColumn, namesIndex];
            } else {
              seg = [genColumn, sourcesIndex, sourceLine, sourceColumn];
            }
          } else {
            seg = [genColumn];
          }
          line.push(seg);
          reader.pos++;
        }
        if (!sorted) sort(line);
        decoded.push(line);
        reader.pos = semi + 1;
      } while (reader.pos <= length);
      return decoded;
    }
    function sort(line) {
      line.sort(sortComparator);
    }
    function sortComparator(a, b) {
      return a[0] - b[0];
    }
    function encode(decoded) {
      const writer = new StringWriter();
      let sourcesIndex = 0;
      let sourceLine = 0;
      let sourceColumn = 0;
      let namesIndex = 0;
      for (let i = 0; i < decoded.length; i++) {
        const line = decoded[i];
        if (i > 0) writer.write(semicolon);
        if (line.length === 0) continue;
        let genColumn = 0;
        for (let j = 0; j < line.length; j++) {
          const segment = line[j];
          if (j > 0) writer.write(comma);
          genColumn = encodeInteger(writer, segment[0], genColumn);
          if (segment.length === 1) continue;
          sourcesIndex = encodeInteger(writer, segment[1], sourcesIndex);
          sourceLine = encodeInteger(writer, segment[2], sourceLine);
          sourceColumn = encodeInteger(writer, segment[3], sourceColumn);
          if (segment.length === 4) continue;
          namesIndex = encodeInteger(writer, segment[4], namesIndex);
        }
      }
      return writer.flush();
    }
    exports.decode = decode;
    exports.decodeGeneratedRanges = decodeGeneratedRanges;
    exports.decodeOriginalScopes = decodeOriginalScopes;
    exports.encode = encode;
    exports.encodeGeneratedRanges = encodeGeneratedRanges;
    exports.encodeOriginalScopes = encodeOriginalScopes;
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
  });
  return exports$2H;
}

var exports$2G = {},
  _dewExec$2F = false;
function dew$2F() {
  if (_dewExec$2F) return exports$2G;
  _dewExec$2F = true;
  (function (global, factory) {
    exports$2G = factory();
  })(exports$2G, function () {

    // Matches the scheme of a URL, eg "http://"
    const schemeRegex = /^[\w+.-]+:\/\//;
    /**
     * Matches the parts of a URL:
     * 1. Scheme, including ":", guaranteed.
     * 2. User/password, including "@", optional.
     * 3. Host, guaranteed.
     * 4. Port, including ":", optional.
     * 5. Path, including "/", optional.
     * 6. Query, including "?", optional.
     * 7. Hash, including "#", optional.
     */
    const urlRegex = /^([\w+.-]+:)\/\/([^@/#?]*@)?([^:/#?]*)(:\d+)?(\/[^#?]*)?(\?[^#]*)?(#.*)?/;
    /**
     * File URLs are weird. They dont' need the regular `//` in the scheme, they may or may not start
     * with a leading `/`, they can have a domain (but only if they don't start with a Windows drive).
     *
     * 1. Host, optional.
     * 2. Path, which may include "/", guaranteed.
     * 3. Query, including "?", optional.
     * 4. Hash, including "#", optional.
     */
    const fileRegex = /^file:(?:\/\/((?![a-z]:)[^/#?]*)?)?(\/?[^#?]*)(\?[^#]*)?(#.*)?/i;
    function isAbsoluteUrl(input) {
      return schemeRegex.test(input);
    }
    function isSchemeRelativeUrl(input) {
      return input.startsWith("//");
    }
    function isAbsolutePath(input) {
      return input.startsWith("/");
    }
    function isFileUrl(input) {
      return input.startsWith("file:");
    }
    function isRelative(input) {
      return /^[.?#]/.test(input);
    }
    function parseAbsoluteUrl(input) {
      const match = urlRegex.exec(input);
      return makeUrl(match[1], match[2] || "", match[3], match[4] || "", match[5] || "/", match[6] || "", match[7] || "");
    }
    function parseFileUrl(input) {
      const match = fileRegex.exec(input);
      const path = match[2];
      return makeUrl("file:", "", match[1] || "", "", isAbsolutePath(path) ? path : "/" + path, match[3] || "", match[4] || "");
    }
    function makeUrl(scheme, user, host, port, path, query, hash) {
      return {
        scheme,
        user,
        host,
        port,
        path,
        query,
        hash,
        type: 7 /* Absolute */
      };
    }
    function parseUrl(input) {
      if (isSchemeRelativeUrl(input)) {
        const url = parseAbsoluteUrl("http:" + input);
        url.scheme = "";
        url.type = 6 /* SchemeRelative */;
        return url;
      }
      if (isAbsolutePath(input)) {
        const url = parseAbsoluteUrl("http://foo.com" + input);
        url.scheme = "";
        url.host = "";
        url.type = 5 /* AbsolutePath */;
        return url;
      }
      if (isFileUrl(input)) return parseFileUrl(input);
      if (isAbsoluteUrl(input)) return parseAbsoluteUrl(input);
      const url = parseAbsoluteUrl("http://foo.com/" + input);
      url.scheme = "";
      url.host = "";
      url.type = input ? input.startsWith("?") ? 3 /* Query */ : input.startsWith("#") ? 2 /* Hash */ : 4 /* RelativePath */ : 1 /* Empty */;
      return url;
    }
    function stripPathFilename(path) {
      // If a path ends with a parent directory "..", then it's a relative path with excess parent
      // paths. It's not a file, so we can't strip it.
      if (path.endsWith("/..")) return path;
      const index = path.lastIndexOf("/");
      return path.slice(0, index + 1);
    }
    function mergePaths(url, base) {
      normalizePath(base, base.type);
      // If the path is just a "/", then it was an empty path to begin with (remember, we're a relative
      // path).
      if (url.path === "/") {
        url.path = base.path;
      } else {
        // Resolution happens relative to the base path's directory, not the file.
        url.path = stripPathFilename(base.path) + url.path;
      }
    }
    /**
     * The path can have empty directories "//", unneeded parents "foo/..", or current directory
     * "foo/.". We need to normalize to a standard representation.
     */
    function normalizePath(url, type) {
      const rel = type <= 4 /* RelativePath */;
      const pieces = url.path.split("/");
      // We need to preserve the first piece always, so that we output a leading slash. The item at
      // pieces[0] is an empty string.
      let pointer = 1;
      // Positive is the number of real directories we've output, used for popping a parent directory.
      // Eg, "foo/bar/.." will have a positive 2, and we can decrement to be left with just "foo".
      let positive = 0;
      // We need to keep a trailing slash if we encounter an empty directory (eg, splitting "foo/" will
      // generate `["foo", ""]` pieces). And, if we pop a parent directory. But once we encounter a
      // real directory, we won't need to append, unless the other conditions happen again.
      let addTrailingSlash = false;
      for (let i = 1; i < pieces.length; i++) {
        const piece = pieces[i];
        // An empty directory, could be a trailing slash, or just a double "//" in the path.
        if (!piece) {
          addTrailingSlash = true;
          continue;
        }
        // If we encounter a real directory, then we don't need to append anymore.
        addTrailingSlash = false;
        // A current directory, which we can always drop.
        if (piece === ".") continue;
        // A parent directory, we need to see if there are any real directories we can pop. Else, we
        // have an excess of parents, and we'll need to keep the "..".
        if (piece === "..") {
          if (positive) {
            addTrailingSlash = true;
            positive--;
            pointer--;
          } else if (rel) {
            // If we're in a relativePath, then we need to keep the excess parents. Else, in an absolute
            // URL, protocol relative URL, or an absolute path, we don't need to keep excess.
            pieces[pointer++] = piece;
          }
          continue;
        }
        // We've encountered a real directory. Move it to the next insertion pointer, which accounts for
        // any popped or dropped directories.
        pieces[pointer++] = piece;
        positive++;
      }
      let path = "";
      for (let i = 1; i < pointer; i++) {
        path += "/" + pieces[i];
      }
      if (!path || addTrailingSlash && !path.endsWith("/..")) {
        path += "/";
      }
      url.path = path;
    }
    /**
     * Attempts to resolve `input` URL/path relative to `base`.
     */
    function resolve(input, base) {
      if (!input && !base) return "";
      const url = parseUrl(input);
      let inputType = url.type;
      if (base && inputType !== 7 /* Absolute */) {
        const baseUrl = parseUrl(base);
        const baseType = baseUrl.type;
        switch (inputType) {
          case 1 /* Empty */:
            url.hash = baseUrl.hash;
          // fall through
          case 2 /* Hash */:
            url.query = baseUrl.query;
          // fall through
          case 3 /* Query */:
          case 4 /* RelativePath */:
            mergePaths(url, baseUrl);
          // fall through
          case 5 /* AbsolutePath */:
            // The host, user, and port are joined, you can't copy one without the others.
            url.user = baseUrl.user;
            url.host = baseUrl.host;
            url.port = baseUrl.port;
          // fall through
          case 6 /* SchemeRelative */:
            // The input doesn't have a schema at least, so we need to copy at least that over.
            url.scheme = baseUrl.scheme;
        }
        if (baseType > inputType) inputType = baseType;
      }
      normalizePath(url, inputType);
      const queryHash = url.query + url.hash;
      switch (inputType) {
        // This is impossible, because of the empty checks at the start of the function.
        // case UrlType.Empty:
        case 2 /* Hash */:
        case 3 /* Query */:
          return queryHash;
        case 4 /* RelativePath */:
          {
            // The first char is always a "/", and we need it to be relative.
            const path = url.path.slice(1);
            if (!path) return queryHash || ".";
            if (isRelative(base || input) && !isRelative(path)) {
              // If base started with a leading ".", or there is no base and input started with a ".",
              // then we need to ensure that the relative path starts with a ".". We don't know if
              // relative starts with a "..", though, so check before prepending.
              return "./" + path + queryHash;
            }
            return path + queryHash;
          }
        case 5 /* AbsolutePath */:
          return url.path + queryHash;
        default:
          return url.scheme + "//" + url.user + url.host + url.port + url.path + queryHash;
      }
    }
    return resolve;
  });
  return exports$2G;
}

var exports$2F = {},
  _dewExec$2E = false;
function dew$2E() {
  if (_dewExec$2E) return exports$2F;
  _dewExec$2E = true;
  (function (global, factory) {
    factory(exports$2F, dew$2G(), dew$2F());
  })(exports$2F, function (exports, sourcemapCodec, resolveUri) {

    function resolve(input, base) {
      // The base is always treated as a directory, if it's not empty.
      // https://github.com/mozilla/source-map/blob/8cb3ee57/lib/util.js#L327
      // https://github.com/chromium/chromium/blob/da4adbb3/third_party/blink/renderer/devtools/front_end/sdk/SourceMap.js#L400-L401
      if (base && !base.endsWith("/")) base += "/";
      return resolveUri(input, base);
    }

    /**
     * Removes everything after the last "/", but leaves the slash.
     */
    function stripFilename(path) {
      if (!path) return "";
      const index = path.lastIndexOf("/");
      return path.slice(0, index + 1);
    }
    const COLUMN = 0;
    const SOURCES_INDEX = 1;
    const SOURCE_LINE = 2;
    const SOURCE_COLUMN = 3;
    const NAMES_INDEX = 4;
    const REV_GENERATED_LINE = 1;
    const REV_GENERATED_COLUMN = 2;
    function maybeSort(mappings, owned) {
      const unsortedIndex = nextUnsortedSegmentLine(mappings, 0);
      if (unsortedIndex === mappings.length) return mappings;
      // If we own the array (meaning we parsed it from JSON), then we're free to directly mutate it. If
      // not, we do not want to modify the consumer's input array.
      if (!owned) mappings = mappings.slice();
      for (let i = unsortedIndex; i < mappings.length; i = nextUnsortedSegmentLine(mappings, i + 1)) {
        mappings[i] = sortSegments(mappings[i], owned);
      }
      return mappings;
    }
    function nextUnsortedSegmentLine(mappings, start) {
      for (let i = start; i < mappings.length; i++) {
        if (!isSorted(mappings[i])) return i;
      }
      return mappings.length;
    }
    function isSorted(line) {
      for (let j = 1; j < line.length; j++) {
        if (line[j][COLUMN] < line[j - 1][COLUMN]) {
          return false;
        }
      }
      return true;
    }
    function sortSegments(line, owned) {
      if (!owned) line = line.slice();
      return line.sort(sortComparator);
    }
    function sortComparator(a, b) {
      return a[COLUMN] - b[COLUMN];
    }
    let found = false;
    /**
     * A binary search implementation that returns the index if a match is found.
     * If no match is found, then the left-index (the index associated with the item that comes just
     * before the desired index) is returned. To maintain proper sort order, a splice would happen at
     * the next index:
     *
     * ```js
     * const array = [1, 3];
     * const needle = 2;
     * const index = binarySearch(array, needle, (item, needle) => item - needle);
     *
     * assert.equal(index, 0);
     * array.splice(index + 1, 0, needle);
     * assert.deepEqual(array, [1, 2, 3]);
     * ```
     */
    function binarySearch(haystack, needle, low, high) {
      while (low <= high) {
        const mid = low + (high - low >> 1);
        const cmp = haystack[mid][COLUMN] - needle;
        if (cmp === 0) {
          found = true;
          return mid;
        }
        if (cmp < 0) {
          low = mid + 1;
        } else {
          high = mid - 1;
        }
      }
      found = false;
      return low - 1;
    }
    function upperBound(haystack, needle, index) {
      for (let i = index + 1; i < haystack.length; index = i++) {
        if (haystack[i][COLUMN] !== needle) break;
      }
      return index;
    }
    function lowerBound(haystack, needle, index) {
      for (let i = index - 1; i >= 0; index = i--) {
        if (haystack[i][COLUMN] !== needle) break;
      }
      return index;
    }
    function memoizedState() {
      return {
        lastKey: -1,
        lastNeedle: -1,
        lastIndex: -1
      };
    }
    /**
     * This overly complicated beast is just to record the last tested line/column and the resulting
     * index, allowing us to skip a few tests if mappings are monotonically increasing.
     */
    function memoizedBinarySearch(haystack, needle, state, key) {
      const {
        lastKey,
        lastNeedle,
        lastIndex
      } = state;
      let low = 0;
      let high = haystack.length - 1;
      if (key === lastKey) {
        if (needle === lastNeedle) {
          found = lastIndex !== -1 && haystack[lastIndex][COLUMN] === needle;
          return lastIndex;
        }
        if (needle >= lastNeedle) {
          // lastIndex may be -1 if the previous needle was not found.
          low = lastIndex === -1 ? 0 : lastIndex;
        } else {
          high = lastIndex;
        }
      }
      state.lastKey = key;
      state.lastNeedle = needle;
      return state.lastIndex = binarySearch(haystack, needle, low, high);
    }

    // Rebuilds the original source files, with mappings that are ordered by source line/column instead
    // of generated line/column.
    function buildBySources(decoded, memos) {
      const sources = memos.map(buildNullArray);
      for (let i = 0; i < decoded.length; i++) {
        const line = decoded[i];
        for (let j = 0; j < line.length; j++) {
          const seg = line[j];
          if (seg.length === 1) continue;
          const sourceIndex = seg[SOURCES_INDEX];
          const sourceLine = seg[SOURCE_LINE];
          const sourceColumn = seg[SOURCE_COLUMN];
          const originalSource = sources[sourceIndex];
          const originalLine = originalSource[sourceLine] || (originalSource[sourceLine] = []);
          const memo = memos[sourceIndex];
          // The binary search either found a match, or it found the left-index just before where the
          // segment should go. Either way, we want to insert after that. And there may be multiple
          // generated segments associated with an original location, so there may need to move several
          // indexes before we find where we need to insert.
          let index = upperBound(originalLine, sourceColumn, memoizedBinarySearch(originalLine, sourceColumn, memo, sourceLine));
          memo.lastIndex = ++index;
          insert(originalLine, index, [sourceColumn, i, seg[COLUMN]]);
        }
      }
      return sources;
    }
    function insert(array, index, value) {
      for (let i = array.length; i > index; i--) {
        array[i] = array[i - 1];
      }
      array[index] = value;
    }
    // Null arrays allow us to use ordered index keys without actually allocating contiguous memory like
    // a real array. We use a null-prototype object to avoid prototype pollution and deoptimizations.
    // Numeric properties on objects are magically sorted in ascending order by the engine regardless of
    // the insertion order. So, by setting any numeric keys, even out of order, we'll get ascending
    // order when iterating with for-in.
    function buildNullArray() {
      return {
        __proto__: null
      };
    }
    const AnyMap = function (map, mapUrl) {
      const parsed = parse(map);
      if (!("sections" in parsed)) {
        return new TraceMap(parsed, mapUrl);
      }
      const mappings = [];
      const sources = [];
      const sourcesContent = [];
      const names = [];
      const ignoreList = [];
      recurse(parsed, mapUrl, mappings, sources, sourcesContent, names, ignoreList, 0, 0, Infinity, Infinity);
      const joined = {
        version: 3,
        file: parsed.file,
        names,
        sources,
        sourcesContent,
        mappings,
        ignoreList
      };
      return presortedDecodedMap(joined);
    };
    function parse(map) {
      return typeof map === "string" ? JSON.parse(map) : map;
    }
    function recurse(input, mapUrl, mappings, sources, sourcesContent, names, ignoreList, lineOffset, columnOffset, stopLine, stopColumn) {
      const {
        sections
      } = input;
      for (let i = 0; i < sections.length; i++) {
        const {
          map,
          offset
        } = sections[i];
        let sl = stopLine;
        let sc = stopColumn;
        if (i + 1 < sections.length) {
          const nextOffset = sections[i + 1].offset;
          sl = Math.min(stopLine, lineOffset + nextOffset.line);
          if (sl === stopLine) {
            sc = Math.min(stopColumn, columnOffset + nextOffset.column);
          } else if (sl < stopLine) {
            sc = columnOffset + nextOffset.column;
          }
        }
        addSection(map, mapUrl, mappings, sources, sourcesContent, names, ignoreList, lineOffset + offset.line, columnOffset + offset.column, sl, sc);
      }
    }
    function addSection(input, mapUrl, mappings, sources, sourcesContent, names, ignoreList, lineOffset, columnOffset, stopLine, stopColumn) {
      const parsed = parse(input);
      if ("sections" in parsed) return recurse(...arguments);
      const map = new TraceMap(parsed, mapUrl);
      const sourcesOffset = sources.length;
      const namesOffset = names.length;
      const decoded = decodedMappings(map);
      const {
        resolvedSources,
        sourcesContent: contents,
        ignoreList: ignores
      } = map;
      append(sources, resolvedSources);
      append(names, map.names);
      if (contents) append(sourcesContent, contents);else for (let i = 0; i < resolvedSources.length; i++) sourcesContent.push(null);
      if (ignores) for (let i = 0; i < ignores.length; i++) ignoreList.push(ignores[i] + sourcesOffset);
      for (let i = 0; i < decoded.length; i++) {
        const lineI = lineOffset + i;
        // We can only add so many lines before we step into the range that the next section's map
        // controls. When we get to the last line, then we'll start checking the segments to see if
        // they've crossed into the column range. But it may not have any columns that overstep, so we
        // still need to check that we don't overstep lines, too.
        if (lineI > stopLine) return;
        // The out line may already exist in mappings (if we're continuing the line started by a
        // previous section). Or, we may have jumped ahead several lines to start this section.
        const out = getLine(mappings, lineI);
        // On the 0th loop, the section's column offset shifts us forward. On all other lines (since the
        // map can be multiple lines), it doesn't.
        const cOffset = i === 0 ? columnOffset : 0;
        const line = decoded[i];
        for (let j = 0; j < line.length; j++) {
          const seg = line[j];
          const column = cOffset + seg[COLUMN];
          // If this segment steps into the column range that the next section's map controls, we need
          // to stop early.
          if (lineI === stopLine && column >= stopColumn) return;
          if (seg.length === 1) {
            out.push([column]);
            continue;
          }
          const sourcesIndex = sourcesOffset + seg[SOURCES_INDEX];
          const sourceLine = seg[SOURCE_LINE];
          const sourceColumn = seg[SOURCE_COLUMN];
          out.push(seg.length === 4 ? [column, sourcesIndex, sourceLine, sourceColumn] : [column, sourcesIndex, sourceLine, sourceColumn, namesOffset + seg[NAMES_INDEX]]);
        }
      }
    }
    function append(arr, other) {
      for (let i = 0; i < other.length; i++) arr.push(other[i]);
    }
    function getLine(arr, index) {
      for (let i = arr.length; i <= index; i++) arr[i] = [];
      return arr[index];
    }
    const LINE_GTR_ZERO = "`line` must be greater than 0 (lines start at line 1)";
    const COL_GTR_EQ_ZERO = "`column` must be greater than or equal to 0 (columns start at column 0)";
    const LEAST_UPPER_BOUND = -1;
    const GREATEST_LOWER_BOUND = 1;
    class TraceMap {
      constructor(map, mapUrl) {
        const isString = typeof map === "string";
        if (!isString && map._decodedMemo) return map;
        const parsed = isString ? JSON.parse(map) : map;
        const {
          version,
          file,
          names,
          sourceRoot,
          sources,
          sourcesContent
        } = parsed;
        this.version = version;
        this.file = file;
        this.names = names || [];
        this.sourceRoot = sourceRoot;
        this.sources = sources;
        this.sourcesContent = sourcesContent;
        this.ignoreList = parsed.ignoreList || parsed.x_google_ignoreList || undefined;
        const from = resolve(sourceRoot || "", stripFilename(mapUrl));
        this.resolvedSources = sources.map(s => resolve(s || "", from));
        const {
          mappings
        } = parsed;
        if (typeof mappings === "string") {
          this._encoded = mappings;
          this._decoded = undefined;
        } else {
          this._encoded = undefined;
          this._decoded = maybeSort(mappings, isString);
        }
        this._decodedMemo = memoizedState();
        this._bySources = undefined;
        this._bySourceMemos = undefined;
      }
    }
    /**
     * Typescript doesn't allow friend access to private fields, so this just casts the map into a type
     * with public access modifiers.
     */
    function cast(map) {
      return map;
    }
    /**
     * Returns the encoded (VLQ string) form of the SourceMap's mappings field.
     */
    function encodedMappings(map) {
      var _a;
      var _b;
      return (_a = (_b = cast(map))._encoded) !== null && _a !== void 0 ? _a : _b._encoded = sourcemapCodec.encode(cast(map)._decoded);
    }
    /**
     * Returns the decoded (array of lines of segments) form of the SourceMap's mappings field.
     */
    function decodedMappings(map) {
      var _a;
      return (_a = cast(map))._decoded || (_a._decoded = sourcemapCodec.decode(cast(map)._encoded));
    }
    /**
     * A low-level API to find the segment associated with a generated line/column (think, from a
     * stack trace). Line and column here are 0-based, unlike `originalPositionFor`.
     */
    function traceSegment(map, line, column) {
      const decoded = decodedMappings(map);
      // It's common for parent source maps to have pointers to lines that have no
      // mapping (like a "//# sourceMappingURL=") at the end of the child file.
      if (line >= decoded.length) return null;
      const segments = decoded[line];
      const index = traceSegmentInternal(segments, cast(map)._decodedMemo, line, column, GREATEST_LOWER_BOUND);
      return index === -1 ? null : segments[index];
    }
    /**
     * A higher-level API to find the source/line/column associated with a generated line/column
     * (think, from a stack trace). Line is 1-based, but column is 0-based, due to legacy behavior in
     * `source-map` library.
     */
    function originalPositionFor(map, needle) {
      let {
        line,
        column,
        bias
      } = needle;
      line--;
      if (line < 0) throw new Error(LINE_GTR_ZERO);
      if (column < 0) throw new Error(COL_GTR_EQ_ZERO);
      const decoded = decodedMappings(map);
      // It's common for parent source maps to have pointers to lines that have no
      // mapping (like a "//# sourceMappingURL=") at the end of the child file.
      if (line >= decoded.length) return OMapping(null, null, null, null);
      const segments = decoded[line];
      const index = traceSegmentInternal(segments, cast(map)._decodedMemo, line, column, bias || GREATEST_LOWER_BOUND);
      if (index === -1) return OMapping(null, null, null, null);
      const segment = segments[index];
      if (segment.length === 1) return OMapping(null, null, null, null);
      const {
        names,
        resolvedSources
      } = map;
      return OMapping(resolvedSources[segment[SOURCES_INDEX]], segment[SOURCE_LINE] + 1, segment[SOURCE_COLUMN], segment.length === 5 ? names[segment[NAMES_INDEX]] : null);
    }
    /**
     * Finds the generated line/column position of the provided source/line/column source position.
     */
    function generatedPositionFor(map, needle) {
      const {
        source,
        line,
        column,
        bias
      } = needle;
      return generatedPosition(map, source, line, column, bias || GREATEST_LOWER_BOUND, false);
    }
    /**
     * Finds all generated line/column positions of the provided source/line/column source position.
     */
    function allGeneratedPositionsFor(map, needle) {
      const {
        source,
        line,
        column,
        bias
      } = needle;
      // SourceMapConsumer uses LEAST_UPPER_BOUND for some reason, so we follow suit.
      return generatedPosition(map, source, line, column, bias || LEAST_UPPER_BOUND, true);
    }
    /**
     * Iterates each mapping in generated position order.
     */
    function eachMapping(map, cb) {
      const decoded = decodedMappings(map);
      const {
        names,
        resolvedSources
      } = map;
      for (let i = 0; i < decoded.length; i++) {
        const line = decoded[i];
        for (let j = 0; j < line.length; j++) {
          const seg = line[j];
          const generatedLine = i + 1;
          const generatedColumn = seg[0];
          let source = null;
          let originalLine = null;
          let originalColumn = null;
          let name = null;
          if (seg.length !== 1) {
            source = resolvedSources[seg[1]];
            originalLine = seg[2] + 1;
            originalColumn = seg[3];
          }
          if (seg.length === 5) name = names[seg[4]];
          cb({
            generatedLine,
            generatedColumn,
            source,
            originalLine,
            originalColumn,
            name
          });
        }
      }
    }
    function sourceIndex(map, source) {
      const {
        sources,
        resolvedSources
      } = map;
      let index = sources.indexOf(source);
      if (index === -1) index = resolvedSources.indexOf(source);
      return index;
    }
    /**
     * Retrieves the source content for a particular source, if its found. Returns null if not.
     */
    function sourceContentFor(map, source) {
      const {
        sourcesContent
      } = map;
      if (sourcesContent == null) return null;
      const index = sourceIndex(map, source);
      return index === -1 ? null : sourcesContent[index];
    }
    /**
     * Determines if the source is marked to ignore by the source map.
     */
    function isIgnored(map, source) {
      const {
        ignoreList
      } = map;
      if (ignoreList == null) return false;
      const index = sourceIndex(map, source);
      return index === -1 ? false : ignoreList.includes(index);
    }
    /**
     * A helper that skips sorting of the input map's mappings array, which can be expensive for larger
     * maps.
     */
    function presortedDecodedMap(map, mapUrl) {
      const tracer = new TraceMap(clone(map, []), mapUrl);
      cast(tracer)._decoded = map.mappings;
      return tracer;
    }
    /**
     * Returns a sourcemap object (with decoded mappings) suitable for passing to a library that expects
     * a sourcemap, or to JSON.stringify.
     */
    function decodedMap(map) {
      return clone(map, decodedMappings(map));
    }
    /**
     * Returns a sourcemap object (with encoded mappings) suitable for passing to a library that expects
     * a sourcemap, or to JSON.stringify.
     */
    function encodedMap(map) {
      return clone(map, encodedMappings(map));
    }
    function clone(map, mappings) {
      return {
        version: map.version,
        file: map.file,
        names: map.names,
        sourceRoot: map.sourceRoot,
        sources: map.sources,
        sourcesContent: map.sourcesContent,
        mappings,
        ignoreList: map.ignoreList || map.x_google_ignoreList
      };
    }
    function OMapping(source, line, column, name) {
      return {
        source,
        line,
        column,
        name
      };
    }
    function GMapping(line, column) {
      return {
        line,
        column
      };
    }
    function traceSegmentInternal(segments, memo, line, column, bias) {
      let index = memoizedBinarySearch(segments, column, memo, line);
      if (found) {
        index = (bias === LEAST_UPPER_BOUND ? upperBound : lowerBound)(segments, column, index);
      } else if (bias === LEAST_UPPER_BOUND) index++;
      if (index === -1 || index === segments.length) return -1;
      return index;
    }
    function sliceGeneratedPositions(segments, memo, line, column, bias) {
      let min = traceSegmentInternal(segments, memo, line, column, GREATEST_LOWER_BOUND);
      // We ignored the bias when tracing the segment so that we're guarnateed to find the first (in
      // insertion order) segment that matched. Even if we did respect the bias when tracing, we would
      // still need to call `lowerBound()` to find the first segment, which is slower than just looking
      // for the GREATEST_LOWER_BOUND to begin with. The only difference that matters for us is when the
      // binary search didn't match, in which case GREATEST_LOWER_BOUND just needs to increment to
      // match LEAST_UPPER_BOUND.
      if (!found && bias === LEAST_UPPER_BOUND) min++;
      if (min === -1 || min === segments.length) return [];
      // We may have found the segment that started at an earlier column. If this is the case, then we
      // need to slice all generated segments that match _that_ column, because all such segments span
      // to our desired column.
      const matchedColumn = found ? column : segments[min][COLUMN];
      // The binary search is not guaranteed to find the lower bound when a match wasn't found.
      if (!found) min = lowerBound(segments, matchedColumn, min);
      const max = upperBound(segments, matchedColumn, min);
      const result = [];
      for (; min <= max; min++) {
        const segment = segments[min];
        result.push(GMapping(segment[REV_GENERATED_LINE] + 1, segment[REV_GENERATED_COLUMN]));
      }
      return result;
    }
    function generatedPosition(map, source, line, column, bias, all) {
      var _a;
      line--;
      if (line < 0) throw new Error(LINE_GTR_ZERO);
      if (column < 0) throw new Error(COL_GTR_EQ_ZERO);
      const {
        sources,
        resolvedSources
      } = map;
      let sourceIndex = sources.indexOf(source);
      if (sourceIndex === -1) sourceIndex = resolvedSources.indexOf(source);
      if (sourceIndex === -1) return all ? [] : GMapping(null, null);
      const generated = (_a = cast(map))._bySources || (_a._bySources = buildBySources(decodedMappings(map), cast(map)._bySourceMemos = sources.map(memoizedState)));
      const segments = generated[sourceIndex][line];
      if (segments == null) return all ? [] : GMapping(null, null);
      const memo = cast(map)._bySourceMemos[sourceIndex];
      if (all) return sliceGeneratedPositions(segments, memo, line, column, bias);
      const index = traceSegmentInternal(segments, memo, line, column, bias);
      if (index === -1) return GMapping(null, null);
      const segment = segments[index];
      return GMapping(segment[REV_GENERATED_LINE] + 1, segment[REV_GENERATED_COLUMN]);
    }
    exports.AnyMap = AnyMap;
    exports.GREATEST_LOWER_BOUND = GREATEST_LOWER_BOUND;
    exports.LEAST_UPPER_BOUND = LEAST_UPPER_BOUND;
    exports.TraceMap = TraceMap;
    exports.allGeneratedPositionsFor = allGeneratedPositionsFor;
    exports.decodedMap = decodedMap;
    exports.decodedMappings = decodedMappings;
    exports.eachMapping = eachMapping;
    exports.encodedMap = encodedMap;
    exports.encodedMappings = encodedMappings;
    exports.generatedPositionFor = generatedPositionFor;
    exports.isIgnored = isIgnored;
    exports.originalPositionFor = originalPositionFor;
    exports.presortedDecodedMap = presortedDecodedMap;
    exports.sourceContentFor = sourceContentFor;
    exports.traceSegment = traceSegment;
  });
  return exports$2F;
}

var exports$2E = {},
  _dewExec$2D = false;
function dew$2D() {
  if (_dewExec$2D) return exports$2E;
  _dewExec$2D = true;
  (function (global, factory) {
    factory(exports$2E, dew$2H(), dew$2G(), dew$2E());
  })(exports$2E, function (exports, setArray, sourcemapCodec, traceMapping) {

    const COLUMN = 0;
    const SOURCES_INDEX = 1;
    const SOURCE_LINE = 2;
    const SOURCE_COLUMN = 3;
    const NAMES_INDEX = 4;
    const NO_NAME = -1;
    /**
     * Provides the state to generate a sourcemap.
     */
    class GenMapping {
      constructor({
        file,
        sourceRoot
      } = {}) {
        this._names = new setArray.SetArray();
        this._sources = new setArray.SetArray();
        this._sourcesContent = [];
        this._mappings = [];
        this.file = file;
        this.sourceRoot = sourceRoot;
        this._ignoreList = new setArray.SetArray();
      }
    }
    /**
     * Typescript doesn't allow friend access to private fields, so this just casts the map into a type
     * with public access modifiers.
     */
    function cast(map) {
      return map;
    }
    function addSegment(map, genLine, genColumn, source, sourceLine, sourceColumn, name, content) {
      return addSegmentInternal(false, map, genLine, genColumn, source, sourceLine, sourceColumn, name, content);
    }
    function addMapping(map, mapping) {
      return addMappingInternal(false, map, mapping);
    }
    /**
     * Same as `addSegment`, but will only add the segment if it generates useful information in the
     * resulting map. This only works correctly if segments are added **in order**, meaning you should
     * not add a segment with a lower generated line/column than one that came before.
     */
    const maybeAddSegment = (map, genLine, genColumn, source, sourceLine, sourceColumn, name, content) => {
      return addSegmentInternal(true, map, genLine, genColumn, source, sourceLine, sourceColumn, name, content);
    };
    /**
     * Same as `addMapping`, but will only add the mapping if it generates useful information in the
     * resulting map. This only works correctly if mappings are added **in order**, meaning you should
     * not add a mapping with a lower generated line/column than one that came before.
     */
    const maybeAddMapping = (map, mapping) => {
      return addMappingInternal(true, map, mapping);
    };
    /**
     * Adds/removes the content of the source file to the source map.
     */
    function setSourceContent(map, source, content) {
      const {
        _sources: sources,
        _sourcesContent: sourcesContent
      } = cast(map);
      const index = setArray.put(sources, source);
      sourcesContent[index] = content;
    }
    function setIgnore(map, source, ignore = true) {
      const {
        _sources: sources,
        _sourcesContent: sourcesContent,
        _ignoreList: ignoreList
      } = cast(map);
      const index = setArray.put(sources, source);
      if (index === sourcesContent.length) sourcesContent[index] = null;
      if (ignore) setArray.put(ignoreList, index);else setArray.remove(ignoreList, index);
    }
    /**
     * Returns a sourcemap object (with decoded mappings) suitable for passing to a library that expects
     * a sourcemap, or to JSON.stringify.
     */
    function toDecodedMap(map) {
      const {
        _mappings: mappings,
        _sources: sources,
        _sourcesContent: sourcesContent,
        _names: names,
        _ignoreList: ignoreList
      } = cast(map);
      removeEmptyFinalLines(mappings);
      return {
        version: 3,
        file: map.file || undefined,
        names: names.array,
        sourceRoot: map.sourceRoot || undefined,
        sources: sources.array,
        sourcesContent,
        mappings,
        ignoreList: ignoreList.array
      };
    }
    /**
     * Returns a sourcemap object (with encoded mappings) suitable for passing to a library that expects
     * a sourcemap, or to JSON.stringify.
     */
    function toEncodedMap(map) {
      const decoded = toDecodedMap(map);
      return Object.assign(Object.assign({}, decoded), {
        mappings: sourcemapCodec.encode(decoded.mappings)
      });
    }
    /**
     * Constructs a new GenMapping, using the already present mappings of the input.
     */
    function fromMap(input) {
      const map = new traceMapping.TraceMap(input);
      const gen = new GenMapping({
        file: map.file,
        sourceRoot: map.sourceRoot
      });
      putAll(cast(gen)._names, map.names);
      putAll(cast(gen)._sources, map.sources);
      cast(gen)._sourcesContent = map.sourcesContent || map.sources.map(() => null);
      cast(gen)._mappings = traceMapping.decodedMappings(map);
      if (map.ignoreList) putAll(cast(gen)._ignoreList, map.ignoreList);
      return gen;
    }
    /**
     * Returns an array of high-level mapping objects for every recorded segment, which could then be
     * passed to the `source-map` library.
     */
    function allMappings(map) {
      const out = [];
      const {
        _mappings: mappings,
        _sources: sources,
        _names: names
      } = cast(map);
      for (let i = 0; i < mappings.length; i++) {
        const line = mappings[i];
        for (let j = 0; j < line.length; j++) {
          const seg = line[j];
          const generated = {
            line: i + 1,
            column: seg[COLUMN]
          };
          let source = undefined;
          let original = undefined;
          let name = undefined;
          if (seg.length !== 1) {
            source = sources.array[seg[SOURCES_INDEX]];
            original = {
              line: seg[SOURCE_LINE] + 1,
              column: seg[SOURCE_COLUMN]
            };
            if (seg.length === 5) name = names.array[seg[NAMES_INDEX]];
          }
          out.push({
            generated,
            source,
            original,
            name
          });
        }
      }
      return out;
    }
    // This split declaration is only so that terser can elminiate the static initialization block.
    function addSegmentInternal(skipable, map, genLine, genColumn, source, sourceLine, sourceColumn, name, content) {
      const {
        _mappings: mappings,
        _sources: sources,
        _sourcesContent: sourcesContent,
        _names: names
      } = cast(map);
      const line = getLine(mappings, genLine);
      const index = getColumnIndex(line, genColumn);
      if (!source) {
        if (skipable && skipSourceless(line, index)) return;
        return insert(line, index, [genColumn]);
      }
      const sourcesIndex = setArray.put(sources, source);
      const namesIndex = name ? setArray.put(names, name) : NO_NAME;
      if (sourcesIndex === sourcesContent.length) sourcesContent[sourcesIndex] = content !== null && content !== void 0 ? content : null;
      if (skipable && skipSource(line, index, sourcesIndex, sourceLine, sourceColumn, namesIndex)) {
        return;
      }
      return insert(line, index, name ? [genColumn, sourcesIndex, sourceLine, sourceColumn, namesIndex] : [genColumn, sourcesIndex, sourceLine, sourceColumn]);
    }
    function getLine(mappings, index) {
      for (let i = mappings.length; i <= index; i++) {
        mappings[i] = [];
      }
      return mappings[index];
    }
    function getColumnIndex(line, genColumn) {
      let index = line.length;
      for (let i = index - 1; i >= 0; index = i--) {
        const current = line[i];
        if (genColumn >= current[COLUMN]) break;
      }
      return index;
    }
    function insert(array, index, value) {
      for (let i = array.length; i > index; i--) {
        array[i] = array[i - 1];
      }
      array[index] = value;
    }
    function removeEmptyFinalLines(mappings) {
      const {
        length
      } = mappings;
      let len = length;
      for (let i = len - 1; i >= 0; len = i, i--) {
        if (mappings[i].length > 0) break;
      }
      if (len < length) mappings.length = len;
    }
    function putAll(setarr, array) {
      for (let i = 0; i < array.length; i++) setArray.put(setarr, array[i]);
    }
    function skipSourceless(line, index) {
      // The start of a line is already sourceless, so adding a sourceless segment to the beginning
      // doesn't generate any useful information.
      if (index === 0) return true;
      const prev = line[index - 1];
      // If the previous segment is also sourceless, then adding another sourceless segment doesn't
      // genrate any new information. Else, this segment will end the source/named segment and point to
      // a sourceless position, which is useful.
      return prev.length === 1;
    }
    function skipSource(line, index, sourcesIndex, sourceLine, sourceColumn, namesIndex) {
      // A source/named segment at the start of a line gives position at that genColumn
      if (index === 0) return false;
      const prev = line[index - 1];
      // If the previous segment is sourceless, then we're transitioning to a source.
      if (prev.length === 1) return false;
      // If the previous segment maps to the exact same source position, then this segment doesn't
      // provide any new position information.
      return sourcesIndex === prev[SOURCES_INDEX] && sourceLine === prev[SOURCE_LINE] && sourceColumn === prev[SOURCE_COLUMN] && namesIndex === (prev.length === 5 ? prev[NAMES_INDEX] : NO_NAME);
    }
    function addMappingInternal(skipable, map, mapping) {
      const {
        generated,
        source,
        original,
        name,
        content
      } = mapping;
      if (!source) {
        return addSegmentInternal(skipable, map, generated.line - 1, generated.column, null, null, null, null, null);
      }
      return addSegmentInternal(skipable, map, generated.line - 1, generated.column, source, original.line - 1, original.column, name, content);
    }
    exports.GenMapping = GenMapping;
    exports.addMapping = addMapping;
    exports.addSegment = addSegment;
    exports.allMappings = allMappings;
    exports.fromMap = fromMap;
    exports.maybeAddMapping = maybeAddMapping;
    exports.maybeAddSegment = maybeAddSegment;
    exports.setIgnore = setIgnore;
    exports.setSourceContent = setSourceContent;
    exports.toDecodedMap = toDecodedMap;
    exports.toEncodedMap = toEncodedMap;
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
  });
  return exports$2E;
}

var exports$2D = {},
  _dewExec$2C = false;
function dew$2C() {
  if (_dewExec$2C) return exports$2D;
  _dewExec$2C = true;
  Object.defineProperty(exports$2D, "__esModule", {
    value: true
  });
  exports$2D.default = void 0;
  var _genMapping = dew$2D();
  var _traceMapping = dew$2E();
  class SourceMap {
    constructor(opts, code) {
      var _opts$sourceFileName;
      this._map = void 0;
      this._rawMappings = void 0;
      this._sourceFileName = void 0;
      this._lastGenLine = 0;
      this._lastSourceLine = 0;
      this._lastSourceColumn = 0;
      this._inputMap = void 0;
      const map = this._map = new _genMapping.GenMapping({
        sourceRoot: opts.sourceRoot
      });
      this._sourceFileName = (_opts$sourceFileName = opts.sourceFileName) == null ? void 0 : _opts$sourceFileName.replace(/\\/g, "/");
      this._rawMappings = undefined;
      if (opts.inputSourceMap) {
        this._inputMap = new _traceMapping.TraceMap(opts.inputSourceMap);
        const resolvedSources = this._inputMap.resolvedSources;
        if (resolvedSources.length) {
          for (let i = 0; i < resolvedSources.length; i++) {
            var _this$_inputMap$sourc;
            (0, _genMapping.setSourceContent)(map, resolvedSources[i], (_this$_inputMap$sourc = this._inputMap.sourcesContent) == null ? void 0 : _this$_inputMap$sourc[i]);
          }
        }
      }
      if (typeof code === "string" && !opts.inputSourceMap) {
        (0, _genMapping.setSourceContent)(map, this._sourceFileName, code);
      } else if (typeof code === "object") {
        for (const sourceFileName of Object.keys(code)) {
          (0, _genMapping.setSourceContent)(map, sourceFileName.replace(/\\/g, "/"), code[sourceFileName]);
        }
      }
    }
    get() {
      return (0, _genMapping.toEncodedMap)(this._map);
    }
    getDecoded() {
      return (0, _genMapping.toDecodedMap)(this._map);
    }
    getRawMappings() {
      return this._rawMappings || (this._rawMappings = (0, _genMapping.allMappings)(this._map));
    }
    mark(generated, line, column, identifierName, identifierNamePos, filename) {
      var _originalMapping;
      this._rawMappings = undefined;
      let originalMapping;
      if (line != null) {
        if (this._inputMap) {
          originalMapping = (0, _traceMapping.originalPositionFor)(this._inputMap, {
            line,
            column
          });
          if (!originalMapping.name && identifierNamePos) {
            const originalIdentifierMapping = (0, _traceMapping.originalPositionFor)(this._inputMap, identifierNamePos);
            if (originalIdentifierMapping.name) {
              identifierName = originalIdentifierMapping.name;
            }
          }
        } else {
          originalMapping = {
            source: (filename == null ? void 0 : filename.replace(/\\/g, "/")) || this._sourceFileName,
            line: line,
            column: column
          };
        }
      }
      (0, _genMapping.maybeAddMapping)(this._map, {
        name: identifierName,
        generated,
        source: (_originalMapping = originalMapping) == null ? void 0 : _originalMapping.source,
        original: originalMapping
      });
    }
  }
  exports$2D.default = SourceMap;
  return exports$2D;
}

var exports$2C = {},
  _dewExec$2B = false;
function dew$2B() {
  if (_dewExec$2B) return exports$2C;
  _dewExec$2B = true;
  Object.defineProperty(exports$2C, "__esModule", {
    value: true
  });
  exports$2C.default = void 0;
  class Buffer {
    constructor(map, indentChar) {
      this._map = null;
      this._buf = "";
      this._str = "";
      this._appendCount = 0;
      this._last = 0;
      this._queue = [];
      this._queueCursor = 0;
      this._canMarkIdName = true;
      this._indentChar = "";
      this._fastIndentations = [];
      this._position = {
        line: 1,
        column: 0
      };
      this._sourcePosition = {
        identifierName: undefined,
        identifierNamePos: undefined,
        line: undefined,
        column: undefined,
        filename: undefined
      };
      this._map = map;
      this._indentChar = indentChar;
      for (let i = 0; i < 64; i++) {
        this._fastIndentations.push(indentChar.repeat(i));
      }
      this._allocQueue();
    }
    _allocQueue() {
      const queue = this._queue;
      for (let i = 0; i < 16; i++) {
        queue.push({
          char: 0,
          repeat: 1,
          line: undefined,
          column: undefined,
          identifierName: undefined,
          identifierNamePos: undefined,
          filename: ""
        });
      }
    }
    _pushQueue(char, repeat, line, column, filename) {
      const cursor = this._queueCursor;
      if (cursor === this._queue.length) {
        this._allocQueue();
      }
      const item = this._queue[cursor];
      item.char = char;
      item.repeat = repeat;
      item.line = line;
      item.column = column;
      item.filename = filename;
      this._queueCursor++;
    }
    _popQueue() {
      if (this._queueCursor === 0) {
        throw new Error("Cannot pop from empty queue");
      }
      return this._queue[--this._queueCursor];
    }
    get() {
      this._flush();
      const map = this._map;
      const result = {
        code: (this._buf + this._str).trimRight(),
        decodedMap: map == null ? void 0 : map.getDecoded(),
        get __mergedMap() {
          return this.map;
        },
        get map() {
          const resultMap = map ? map.get() : null;
          result.map = resultMap;
          return resultMap;
        },
        set map(value) {
          Object.defineProperty(result, "map", {
            value,
            writable: true
          });
        },
        get rawMappings() {
          const mappings = map == null ? void 0 : map.getRawMappings();
          result.rawMappings = mappings;
          return mappings;
        },
        set rawMappings(value) {
          Object.defineProperty(result, "rawMappings", {
            value,
            writable: true
          });
        }
      };
      return result;
    }
    append(str, maybeNewline) {
      this._flush();
      this._append(str, this._sourcePosition, maybeNewline);
    }
    appendChar(char) {
      this._flush();
      this._appendChar(char, 1, this._sourcePosition);
    }
    queue(char) {
      if (char === 10) {
        while (this._queueCursor !== 0) {
          const char = this._queue[this._queueCursor - 1].char;
          if (char !== 32 && char !== 9) {
            break;
          }
          this._queueCursor--;
        }
      }
      const sourcePosition = this._sourcePosition;
      this._pushQueue(char, 1, sourcePosition.line, sourcePosition.column, sourcePosition.filename);
    }
    queueIndentation(repeat) {
      if (repeat === 0) return;
      this._pushQueue(-1, repeat, undefined, undefined, undefined);
    }
    _flush() {
      const queueCursor = this._queueCursor;
      const queue = this._queue;
      for (let i = 0; i < queueCursor; i++) {
        const item = queue[i];
        this._appendChar(item.char, item.repeat, item);
      }
      this._queueCursor = 0;
    }
    _appendChar(char, repeat, sourcePos) {
      this._last = char;
      if (char === -1) {
        const fastIndentation = this._fastIndentations[repeat];
        if (fastIndentation !== undefined) {
          this._str += fastIndentation;
        } else {
          this._str += repeat > 1 ? this._indentChar.repeat(repeat) : this._indentChar;
        }
      } else {
        this._str += repeat > 1 ? String.fromCharCode(char).repeat(repeat) : String.fromCharCode(char);
      }
      if (char !== 10) {
        this._mark(sourcePos.line, sourcePos.column, sourcePos.identifierName, sourcePos.identifierNamePos, sourcePos.filename);
        this._position.column += repeat;
      } else {
        this._position.line++;
        this._position.column = 0;
      }
      if (this._canMarkIdName) {
        sourcePos.identifierName = undefined;
        sourcePos.identifierNamePos = undefined;
      }
    }
    _append(str, sourcePos, maybeNewline) {
      const len = str.length;
      const position = this._position;
      this._last = str.charCodeAt(len - 1);
      if (++this._appendCount > 4096) {
        +this._str;
        this._buf += this._str;
        this._str = str;
        this._appendCount = 0;
      } else {
        this._str += str;
      }
      if (!maybeNewline && !this._map) {
        position.column += len;
        return;
      }
      const {
        column,
        identifierName,
        identifierNamePos,
        filename
      } = sourcePos;
      let line = sourcePos.line;
      if ((identifierName != null || identifierNamePos != null) && this._canMarkIdName) {
        sourcePos.identifierName = undefined;
        sourcePos.identifierNamePos = undefined;
      }
      let i = str.indexOf("\n");
      let last = 0;
      if (i !== 0) {
        this._mark(line, column, identifierName, identifierNamePos, filename);
      }
      while (i !== -1) {
        position.line++;
        position.column = 0;
        last = i + 1;
        if (last < len && line !== undefined) {
          this._mark(++line, 0, null, null, filename);
        }
        i = str.indexOf("\n", last);
      }
      position.column += len - last;
    }
    _mark(line, column, identifierName, identifierNamePos, filename) {
      var _this$_map;
      (_this$_map = this._map) == null || _this$_map.mark(this._position, line, column, identifierName, identifierNamePos, filename);
    }
    removeTrailingNewline() {
      const queueCursor = this._queueCursor;
      if (queueCursor !== 0 && this._queue[queueCursor - 1].char === 10) {
        this._queueCursor--;
      }
    }
    removeLastSemicolon() {
      const queueCursor = this._queueCursor;
      if (queueCursor !== 0 && this._queue[queueCursor - 1].char === 59) {
        this._queueCursor--;
      }
    }
    getLastChar() {
      const queueCursor = this._queueCursor;
      return queueCursor !== 0 ? this._queue[queueCursor - 1].char : this._last;
    }
    getNewlineCount() {
      const queueCursor = this._queueCursor;
      let count = 0;
      if (queueCursor === 0) return this._last === 10 ? 1 : 0;
      for (let i = queueCursor - 1; i >= 0; i--) {
        if (this._queue[i].char !== 10) {
          break;
        }
        count++;
      }
      return count === queueCursor && this._last === 10 ? count + 1 : count;
    }
    endsWithCharAndNewline() {
      const queue = this._queue;
      const queueCursor = this._queueCursor;
      if (queueCursor !== 0) {
        const lastCp = queue[queueCursor - 1].char;
        if (lastCp !== 10) return;
        if (queueCursor > 1) {
          return queue[queueCursor - 2].char;
        } else {
          return this._last;
        }
      }
    }
    hasContent() {
      return this._queueCursor !== 0 || !!this._last;
    }
    exactSource(loc, cb) {
      if (!this._map) {
        cb();
        return;
      }
      this.source("start", loc);
      const identifierName = loc.identifierName;
      const sourcePos = this._sourcePosition;
      if (identifierName) {
        this._canMarkIdName = false;
        sourcePos.identifierName = identifierName;
      }
      cb();
      if (identifierName) {
        this._canMarkIdName = true;
        sourcePos.identifierName = undefined;
        sourcePos.identifierNamePos = undefined;
      }
      this.source("end", loc);
    }
    source(prop, loc) {
      if (!this._map) return;
      this._normalizePosition(prop, loc, 0);
    }
    sourceWithOffset(prop, loc, columnOffset) {
      if (!this._map) return;
      this._normalizePosition(prop, loc, columnOffset);
    }
    _normalizePosition(prop, loc, columnOffset) {
      const pos = loc[prop];
      const target = this._sourcePosition;
      if (pos) {
        target.line = pos.line;
        target.column = Math.max(pos.column + columnOffset, 0);
        target.filename = loc.filename;
      }
    }
    getCurrentColumn() {
      const queue = this._queue;
      const queueCursor = this._queueCursor;
      let lastIndex = -1;
      let len = 0;
      for (let i = 0; i < queueCursor; i++) {
        const item = queue[i];
        if (item.char === 10) {
          lastIndex = len;
        }
        len += item.repeat;
      }
      return lastIndex === -1 ? this._position.column + len : len - 1 - lastIndex;
    }
    getCurrentLine() {
      let count = 0;
      const queue = this._queue;
      for (let i = 0; i < this._queueCursor; i++) {
        if (queue[i].char === 10) {
          count++;
        }
      }
      return this._position.line + count;
    }
  }
  exports$2C.default = Buffer;
  return exports$2C;
}

var exports$2B = {},
  _dewExec$2A = false;
function dew$2A() {
  if (_dewExec$2A) return exports$2B;
  _dewExec$2A = true;
  Object.defineProperty(exports$2B, "__esModule", {
    value: true
  });
  exports$2B.nodes = void 0;
  var _t = dew$3i();
  const {
    FLIPPED_ALIAS_KEYS,
    isArrayExpression,
    isAssignmentExpression,
    isBinary,
    isBlockStatement,
    isCallExpression,
    isFunction,
    isIdentifier,
    isLiteral,
    isMemberExpression,
    isObjectExpression,
    isOptionalCallExpression,
    isOptionalMemberExpression,
    isStringLiteral
  } = _t;
  function crawlInternal(node, state) {
    if (!node) return state;
    if (isMemberExpression(node) || isOptionalMemberExpression(node)) {
      crawlInternal(node.object, state);
      if (node.computed) crawlInternal(node.property, state);
    } else if (isBinary(node) || isAssignmentExpression(node)) {
      crawlInternal(node.left, state);
      crawlInternal(node.right, state);
    } else if (isCallExpression(node) || isOptionalCallExpression(node)) {
      state.hasCall = true;
      crawlInternal(node.callee, state);
    } else if (isFunction(node)) {
      state.hasFunction = true;
    } else if (isIdentifier(node)) {
      state.hasHelper = state.hasHelper || node.callee && isHelper(node.callee);
    }
    return state;
  }
  function crawl(node) {
    return crawlInternal(node, {
      hasCall: false,
      hasFunction: false,
      hasHelper: false
    });
  }
  function isHelper(node) {
    if (!node) return false;
    if (isMemberExpression(node)) {
      return isHelper(node.object) || isHelper(node.property);
    } else if (isIdentifier(node)) {
      return node.name === "require" || node.name.charCodeAt(0) === 95;
    } else if (isCallExpression(node)) {
      return isHelper(node.callee);
    } else if (isBinary(node) || isAssignmentExpression(node)) {
      return isIdentifier(node.left) && isHelper(node.left) || isHelper(node.right);
    } else {
      return false;
    }
  }
  function isType(node) {
    return isLiteral(node) || isObjectExpression(node) || isArrayExpression(node) || isIdentifier(node) || isMemberExpression(node);
  }
  const nodes = exports$2B.nodes = {
    AssignmentExpression(node) {
      const state = crawl(node.right);
      if (state.hasCall && state.hasHelper || state.hasFunction) {
        return state.hasFunction ? 1 | 2 : 2;
      }
    },
    SwitchCase(node, parent) {
      return (!!node.consequent.length || parent.cases[0] === node ? 1 : 0) | (!node.consequent.length && parent.cases[parent.cases.length - 1] === node ? 2 : 0);
    },
    LogicalExpression(node) {
      if (isFunction(node.left) || isFunction(node.right)) {
        return 2;
      }
    },
    Literal(node) {
      if (isStringLiteral(node) && node.value === "use strict") {
        return 2;
      }
    },
    CallExpression(node) {
      if (isFunction(node.callee) || isHelper(node)) {
        return 1 | 2;
      }
    },
    OptionalCallExpression(node) {
      if (isFunction(node.callee)) {
        return 1 | 2;
      }
    },
    VariableDeclaration(node) {
      for (let i = 0; i < node.declarations.length; i++) {
        const declar = node.declarations[i];
        let enabled = isHelper(declar.id) && !isType(declar.init);
        if (!enabled && declar.init) {
          const state = crawl(declar.init);
          enabled = isHelper(declar.init) && state.hasCall || state.hasFunction;
        }
        if (enabled) {
          return 1 | 2;
        }
      }
    },
    IfStatement(node) {
      if (isBlockStatement(node.consequent)) {
        return 1 | 2;
      }
    }
  };
  nodes.ObjectProperty = nodes.ObjectTypeProperty = nodes.ObjectMethod = function (node, parent) {
    if (parent.properties[0] === node) {
      return 1;
    }
  };
  nodes.ObjectTypeCallProperty = function (node, parent) {
    var _parent$properties;
    if (parent.callProperties[0] === node && !((_parent$properties = parent.properties) != null && _parent$properties.length)) {
      return 1;
    }
  };
  nodes.ObjectTypeIndexer = function (node, parent) {
    var _parent$properties2, _parent$callPropertie;
    if (parent.indexers[0] === node && !((_parent$properties2 = parent.properties) != null && _parent$properties2.length) && !((_parent$callPropertie = parent.callProperties) != null && _parent$callPropertie.length)) {
      return 1;
    }
  };
  nodes.ObjectTypeInternalSlot = function (node, parent) {
    var _parent$properties3, _parent$callPropertie2, _parent$indexers;
    if (parent.internalSlots[0] === node && !((_parent$properties3 = parent.properties) != null && _parent$properties3.length) && !((_parent$callPropertie2 = parent.callProperties) != null && _parent$callPropertie2.length) && !((_parent$indexers = parent.indexers) != null && _parent$indexers.length)) {
      return 1;
    }
  };
  [["Function", true], ["Class", true], ["Loop", true], ["LabeledStatement", true], ["SwitchStatement", true], ["TryStatement", true]].forEach(function ([type, amounts]) {
    [type].concat(FLIPPED_ALIAS_KEYS[type] || []).forEach(function (type) {
      const ret = amounts ? 1 | 2 : 0;
      nodes[type] = () => ret;
    });
  });
  return exports$2B;
}

var exports$2A = {},
  _dewExec$2z = false;
function dew$2z() {
  if (_dewExec$2z) return exports$2A;
  _dewExec$2z = true;
  Object.defineProperty(exports$2A, "__esModule", {
    value: true
  });
  exports$2A.ArrowFunctionExpression = ArrowFunctionExpression;
  exports$2A.AssignmentExpression = AssignmentExpression;
  exports$2A.Binary = Binary;
  exports$2A.BinaryExpression = BinaryExpression;
  exports$2A.ClassExpression = ClassExpression;
  exports$2A.ConditionalExpression = ConditionalExpression;
  exports$2A.DoExpression = DoExpression;
  exports$2A.FunctionExpression = FunctionExpression;
  exports$2A.FunctionTypeAnnotation = FunctionTypeAnnotation;
  exports$2A.Identifier = Identifier;
  exports$2A.LogicalExpression = LogicalExpression;
  exports$2A.NullableTypeAnnotation = NullableTypeAnnotation;
  exports$2A.ObjectExpression = ObjectExpression;
  exports$2A.OptionalIndexedAccessType = OptionalIndexedAccessType;
  exports$2A.OptionalCallExpression = exports$2A.OptionalMemberExpression = OptionalMemberExpression;
  exports$2A.SequenceExpression = SequenceExpression;
  exports$2A.TSSatisfiesExpression = exports$2A.TSAsExpression = TSAsExpression;
  exports$2A.TSInferType = TSInferType;
  exports$2A.TSInstantiationExpression = TSInstantiationExpression;
  exports$2A.UnaryLike = exports$2A.TSTypeAssertion = UnaryLike;
  exports$2A.TSIntersectionType = exports$2A.TSUnionType = TSUnionType;
  exports$2A.IntersectionTypeAnnotation = exports$2A.UnionTypeAnnotation = UnionTypeAnnotation;
  exports$2A.UpdateExpression = UpdateExpression;
  exports$2A.AwaitExpression = exports$2A.YieldExpression = YieldExpression;
  var _t = dew$3i();
  var _index = dew$2y();
  const {
    isArrayTypeAnnotation,
    isBinaryExpression,
    isCallExpression,
    isExportDeclaration,
    isForOfStatement,
    isIndexedAccessType,
    isMemberExpression,
    isObjectPattern,
    isOptionalMemberExpression,
    isYieldExpression
  } = _t;
  const PRECEDENCE = new Map([["||", 0], ["??", 0], ["|>", 0], ["&&", 1], ["|", 2], ["^", 3], ["&", 4], ["==", 5], ["===", 5], ["!=", 5], ["!==", 5], ["<", 6], [">", 6], ["<=", 6], [">=", 6], ["in", 6], ["instanceof", 6], [">>", 7], ["<<", 7], [">>>", 7], ["+", 8], ["-", 8], ["*", 9], ["/", 9], ["%", 9], ["**", 10]]);
  function getBinaryPrecedence(node, nodeType) {
    if (nodeType === "BinaryExpression" || nodeType === "LogicalExpression") {
      return PRECEDENCE.get(node.operator);
    }
    if (nodeType === "TSAsExpression" || nodeType === "TSSatisfiesExpression") {
      return PRECEDENCE.get("in");
    }
  }
  function isTSTypeExpression(nodeType) {
    return nodeType === "TSAsExpression" || nodeType === "TSSatisfiesExpression" || nodeType === "TSTypeAssertion";
  }
  const isClassExtendsClause = (node, parent) => {
    const parentType = parent.type;
    return (parentType === "ClassDeclaration" || parentType === "ClassExpression") && parent.superClass === node;
  };
  const hasPostfixPart = (node, parent) => {
    const parentType = parent.type;
    return (parentType === "MemberExpression" || parentType === "OptionalMemberExpression") && parent.object === node || (parentType === "CallExpression" || parentType === "OptionalCallExpression" || parentType === "NewExpression") && parent.callee === node || parentType === "TaggedTemplateExpression" && parent.tag === node || parentType === "TSNonNullExpression";
  };
  function NullableTypeAnnotation(node, parent) {
    return isArrayTypeAnnotation(parent);
  }
  function FunctionTypeAnnotation(node, parent, tokenContext) {
    const parentType = parent.type;
    return parentType === "UnionTypeAnnotation" || parentType === "IntersectionTypeAnnotation" || parentType === "ArrayTypeAnnotation" || Boolean(tokenContext & _index.TokenContext.arrowFlowReturnType);
  }
  function UpdateExpression(node, parent) {
    return hasPostfixPart(node, parent) || isClassExtendsClause(node, parent);
  }
  function ObjectExpression(node, parent, tokenContext) {
    return Boolean(tokenContext & (_index.TokenContext.expressionStatement | _index.TokenContext.arrowBody));
  }
  function DoExpression(node, parent, tokenContext) {
    return !node.async && Boolean(tokenContext & _index.TokenContext.expressionStatement);
  }
  function Binary(node, parent) {
    const parentType = parent.type;
    if (node.type === "BinaryExpression" && node.operator === "**" && parentType === "BinaryExpression" && parent.operator === "**") {
      return parent.left === node;
    }
    if (isClassExtendsClause(node, parent)) {
      return true;
    }
    if (hasPostfixPart(node, parent) || parentType === "UnaryExpression" || parentType === "SpreadElement" || parentType === "AwaitExpression") {
      return true;
    }
    const parentPos = getBinaryPrecedence(parent, parentType);
    if (parentPos != null) {
      const nodePos = getBinaryPrecedence(node, node.type);
      if (parentPos === nodePos && parentType === "BinaryExpression" && parent.right === node || parentPos > nodePos) {
        return true;
      }
    }
    return undefined;
  }
  function UnionTypeAnnotation(node, parent) {
    const parentType = parent.type;
    return parentType === "ArrayTypeAnnotation" || parentType === "NullableTypeAnnotation" || parentType === "IntersectionTypeAnnotation" || parentType === "UnionTypeAnnotation";
  }
  function OptionalIndexedAccessType(node, parent) {
    return isIndexedAccessType(parent) && parent.objectType === node;
  }
  function TSAsExpression(node, parent) {
    if ((parent.type === "AssignmentExpression" || parent.type === "AssignmentPattern") && parent.left === node) {
      return true;
    }
    if (parent.type === "BinaryExpression" && (parent.operator === "|" || parent.operator === "&") && node === parent.left) {
      return true;
    }
    return Binary(node, parent);
  }
  function TSUnionType(node, parent) {
    const parentType = parent.type;
    return parentType === "TSArrayType" || parentType === "TSOptionalType" || parentType === "TSIntersectionType" || parentType === "TSUnionType" || parentType === "TSRestType";
  }
  function TSInferType(node, parent) {
    const parentType = parent.type;
    return parentType === "TSArrayType" || parentType === "TSOptionalType";
  }
  function TSInstantiationExpression(node, parent) {
    const parentType = parent.type;
    return (parentType === "CallExpression" || parentType === "OptionalCallExpression" || parentType === "NewExpression" || parentType === "TSInstantiationExpression") && !!parent.typeParameters;
  }
  function BinaryExpression(node, parent, tokenContext, inForStatementInit) {
    return node.operator === "in" && inForStatementInit;
  }
  function SequenceExpression(node, parent) {
    const parentType = parent.type;
    if (parentType === "ForStatement" || parentType === "ThrowStatement" || parentType === "ReturnStatement" || parentType === "IfStatement" && parent.test === node || parentType === "WhileStatement" && parent.test === node || parentType === "ForInStatement" && parent.right === node || parentType === "SwitchStatement" && parent.discriminant === node || parentType === "ExpressionStatement" && parent.expression === node) {
      return false;
    }
    return true;
  }
  function YieldExpression(node, parent) {
    const parentType = parent.type;
    return parentType === "BinaryExpression" || parentType === "LogicalExpression" || parentType === "UnaryExpression" || parentType === "SpreadElement" || hasPostfixPart(node, parent) || parentType === "AwaitExpression" && isYieldExpression(node) || parentType === "ConditionalExpression" && node === parent.test || isClassExtendsClause(node, parent) || isTSTypeExpression(parentType);
  }
  function ClassExpression(node, parent, tokenContext) {
    return Boolean(tokenContext & (_index.TokenContext.expressionStatement | _index.TokenContext.exportDefault));
  }
  function UnaryLike(node, parent) {
    return hasPostfixPart(node, parent) || isBinaryExpression(parent) && parent.operator === "**" && parent.left === node || isClassExtendsClause(node, parent);
  }
  function FunctionExpression(node, parent, tokenContext) {
    return Boolean(tokenContext & (_index.TokenContext.expressionStatement | _index.TokenContext.exportDefault));
  }
  function ArrowFunctionExpression(node, parent) {
    return isExportDeclaration(parent) || ConditionalExpression(node, parent);
  }
  function ConditionalExpression(node, parent) {
    const parentType = parent.type;
    if (parentType === "UnaryExpression" || parentType === "SpreadElement" || parentType === "BinaryExpression" || parentType === "LogicalExpression" || parentType === "ConditionalExpression" && parent.test === node || parentType === "AwaitExpression" || isTSTypeExpression(parentType)) {
      return true;
    }
    return UnaryLike(node, parent);
  }
  function OptionalMemberExpression(node, parent) {
    return isCallExpression(parent) && parent.callee === node || isMemberExpression(parent) && parent.object === node;
  }
  function AssignmentExpression(node, parent) {
    if (isObjectPattern(node.left)) {
      return true;
    } else {
      return ConditionalExpression(node, parent);
    }
  }
  function LogicalExpression(node, parent) {
    const parentType = parent.type;
    if (isTSTypeExpression(parentType)) return true;
    if (parentType !== "LogicalExpression") return false;
    switch (node.operator) {
      case "||":
        return parent.operator === "??" || parent.operator === "&&";
      case "&&":
        return parent.operator === "??";
      case "??":
        return parent.operator !== "??";
    }
  }
  function Identifier(node, parent, tokenContext) {
    var _node$extra;
    const parentType = parent.type;
    if ((_node$extra = node.extra) != null && _node$extra.parenthesized && parentType === "AssignmentExpression" && parent.left === node) {
      const rightType = parent.right.type;
      if ((rightType === "FunctionExpression" || rightType === "ClassExpression") && parent.right.id == null) {
        return true;
      }
    }
    if (node.name === "let") {
      const isFollowedByBracket = isMemberExpression(parent, {
        object: node,
        computed: true
      }) || isOptionalMemberExpression(parent, {
        object: node,
        computed: true,
        optional: false
      });
      if (isFollowedByBracket && tokenContext & (_index.TokenContext.expressionStatement | _index.TokenContext.forHead | _index.TokenContext.forInHead)) {
        return true;
      }
      return Boolean(tokenContext & _index.TokenContext.forOfHead);
    }
    return node.name === "async" && isForOfStatement(parent, {
      left: node,
      await: false
    });
  }
  return exports$2A;
}

var exports$2z = {},
  _dewExec$2y = false;
function dew$2y() {
  if (_dewExec$2y) return exports$2z;
  _dewExec$2y = true;
  Object.defineProperty(exports$2z, "__esModule", {
    value: true
  });
  exports$2z.TokenContext = void 0;
  exports$2z.needsParens = needsParens;
  exports$2z.needsWhitespace = needsWhitespace;
  exports$2z.needsWhitespaceAfter = needsWhitespaceAfter;
  exports$2z.needsWhitespaceBefore = needsWhitespaceBefore;
  var whitespace = dew$2A();
  var parens = dew$2z();
  var _t = dew$3i();
  const {
    FLIPPED_ALIAS_KEYS,
    isCallExpression,
    isDecorator,
    isExpressionStatement,
    isMemberExpression,
    isNewExpression,
    isParenthesizedExpression
  } = _t;
  exports$2z.TokenContext = {
    expressionStatement: 1,
    arrowBody: 2,
    exportDefault: 4,
    forHead: 8,
    forInHead: 16,
    forOfHead: 32,
    arrowFlowReturnType: 64
  };
  function expandAliases(obj) {
    const map = new Map();
    function add(type, func) {
      const fn = map.get(type);
      map.set(type, fn ? function (node, parent, stack, inForInit) {
        var _fn;
        return (_fn = fn(node, parent, stack, inForInit)) != null ? _fn : func(node, parent, stack, inForInit);
      } : func);
    }
    for (const type of Object.keys(obj)) {
      const aliases = FLIPPED_ALIAS_KEYS[type];
      if (aliases) {
        for (const alias of aliases) {
          add(alias, obj[type]);
        }
      } else {
        add(type, obj[type]);
      }
    }
    return map;
  }
  const expandedParens = expandAliases(parens);
  const expandedWhitespaceNodes = expandAliases(whitespace.nodes);
  function isOrHasCallExpression(node) {
    if (isCallExpression(node)) {
      return true;
    }
    return isMemberExpression(node) && isOrHasCallExpression(node.object);
  }
  function needsWhitespace(node, parent, type) {
    var _expandedWhitespaceNo;
    if (!node) return false;
    if (isExpressionStatement(node)) {
      node = node.expression;
    }
    const flag = (_expandedWhitespaceNo = expandedWhitespaceNodes.get(node.type)) == null ? void 0 : _expandedWhitespaceNo(node, parent);
    if (typeof flag === "number") {
      return (flag & type) !== 0;
    }
    return false;
  }
  function needsWhitespaceBefore(node, parent) {
    return needsWhitespace(node, parent, 1);
  }
  function needsWhitespaceAfter(node, parent) {
    return needsWhitespace(node, parent, 2);
  }
  function needsParens(node, parent, tokenContext, inForInit) {
    var _expandedParens$get;
    if (!parent) return false;
    if (isNewExpression(parent) && parent.callee === node) {
      if (isOrHasCallExpression(node)) return true;
    }
    if (isDecorator(parent)) {
      return !isDecoratorMemberExpression(node) && !(isCallExpression(node) && isDecoratorMemberExpression(node.callee)) && !isParenthesizedExpression(node);
    }
    return (_expandedParens$get = expandedParens.get(node.type)) == null ? void 0 : _expandedParens$get(node, parent, tokenContext, inForInit);
  }
  function isDecoratorMemberExpression(node) {
    switch (node.type) {
      case "Identifier":
        return true;
      case "MemberExpression":
        return !node.computed && node.property.type === "Identifier" && isDecoratorMemberExpression(node.object);
      default:
        return false;
    }
  }
  return exports$2z;
}

var exports$2y = {},
  _dewExec$2x = false;
function dew$2x() {
  if (_dewExec$2x) return exports$2y;
  _dewExec$2x = true;
  Object.defineProperty(exports$2y, "__esModule", {
    value: true
  });
  exports$2y.TaggedTemplateExpression = TaggedTemplateExpression;
  exports$2y.TemplateElement = TemplateElement;
  exports$2y.TemplateLiteral = TemplateLiteral;
  function TaggedTemplateExpression(node) {
    this.print(node.tag, node);
    this.print(node.typeParameters, node);
    this.print(node.quasi, node);
  }
  function TemplateElement() {
    throw new Error("TemplateElement printing is handled in TemplateLiteral");
  }
  function TemplateLiteral(node) {
    const quasis = node.quasis;
    let partRaw = "`";
    for (let i = 0; i < quasis.length; i++) {
      partRaw += quasis[i].value.raw;
      if (i + 1 < quasis.length) {
        this.token(partRaw + "${", true);
        this.print(node.expressions[i], node);
        partRaw = "}";
      }
    }
    this.token(partRaw + "`", true);
  }
  return exports$2y;
}

var exports$2x = {},
  _dewExec$2w = false;
function dew$2w() {
  if (_dewExec$2w) return exports$2x;
  _dewExec$2w = true;
  Object.defineProperty(exports$2x, "__esModule", {
    value: true
  });
  exports$2x.LogicalExpression = exports$2x.BinaryExpression = exports$2x.AssignmentExpression = AssignmentExpression;
  exports$2x.AssignmentPattern = AssignmentPattern;
  exports$2x.AwaitExpression = AwaitExpression;
  exports$2x.BindExpression = BindExpression;
  exports$2x.CallExpression = CallExpression;
  exports$2x.ConditionalExpression = ConditionalExpression;
  exports$2x.Decorator = Decorator;
  exports$2x.DoExpression = DoExpression;
  exports$2x.EmptyStatement = EmptyStatement;
  exports$2x.ExpressionStatement = ExpressionStatement;
  exports$2x.Import = Import;
  exports$2x.MemberExpression = MemberExpression;
  exports$2x.MetaProperty = MetaProperty;
  exports$2x.ModuleExpression = ModuleExpression;
  exports$2x.NewExpression = NewExpression;
  exports$2x.OptionalCallExpression = OptionalCallExpression;
  exports$2x.OptionalMemberExpression = OptionalMemberExpression;
  exports$2x.ParenthesizedExpression = ParenthesizedExpression;
  exports$2x.PrivateName = PrivateName;
  exports$2x.SequenceExpression = SequenceExpression;
  exports$2x.Super = Super;
  exports$2x.ThisExpression = ThisExpression;
  exports$2x.UnaryExpression = UnaryExpression;
  exports$2x.UpdateExpression = UpdateExpression;
  exports$2x.V8IntrinsicIdentifier = V8IntrinsicIdentifier;
  exports$2x.YieldExpression = YieldExpression;
  exports$2x._shouldPrintDecoratorsBeforeExport = _shouldPrintDecoratorsBeforeExport;
  var _t = dew$3i();
  var _index = dew$2y();
  const {
    isCallExpression,
    isLiteral,
    isMemberExpression,
    isNewExpression
  } = _t;
  function UnaryExpression(node) {
    const {
      operator
    } = node;
    if (operator === "void" || operator === "delete" || operator === "typeof" || operator === "throw") {
      this.word(operator);
      this.space();
    } else {
      this.token(operator);
    }
    this.print(node.argument, node);
  }
  function DoExpression(node) {
    if (node.async) {
      this.word("async", true);
      this.space();
    }
    this.word("do");
    this.space();
    this.print(node.body, node);
  }
  function ParenthesizedExpression(node) {
    this.tokenChar(40);
    this.print(node.expression, node);
    this.rightParens(node);
  }
  function UpdateExpression(node) {
    if (node.prefix) {
      this.token(node.operator);
      this.print(node.argument, node);
    } else {
      this.printTerminatorless(node.argument, node, true);
      this.token(node.operator);
    }
  }
  function ConditionalExpression(node) {
    this.print(node.test, node);
    this.space();
    this.tokenChar(63);
    this.space();
    this.print(node.consequent, node);
    this.space();
    this.tokenChar(58);
    this.space();
    this.print(node.alternate, node);
  }
  function NewExpression(node, parent) {
    this.word("new");
    this.space();
    this.print(node.callee, node);
    if (this.format.minified && node.arguments.length === 0 && !node.optional && !isCallExpression(parent, {
      callee: node
    }) && !isMemberExpression(parent) && !isNewExpression(parent)) {
      return;
    }
    this.print(node.typeArguments, node);
    this.print(node.typeParameters, node);
    if (node.optional) {
      this.token("?.");
    }
    this.tokenChar(40);
    const exit = this.enterForStatementInit(false);
    this.printList(node.arguments, node);
    exit();
    this.rightParens(node);
  }
  function SequenceExpression(node) {
    this.printList(node.expressions, node);
  }
  function ThisExpression() {
    this.word("this");
  }
  function Super() {
    this.word("super");
  }
  function _shouldPrintDecoratorsBeforeExport(node) {
    if (typeof this.format.decoratorsBeforeExport === "boolean") {
      return this.format.decoratorsBeforeExport;
    }
    return typeof node.start === "number" && node.start === node.declaration.start;
  }
  function Decorator(node) {
    this.tokenChar(64);
    this.print(node.expression, node);
    this.newline();
  }
  function OptionalMemberExpression(node) {
    let {
      computed
    } = node;
    const {
      optional,
      property
    } = node;
    this.print(node.object, node);
    if (!computed && isMemberExpression(property)) {
      throw new TypeError("Got a MemberExpression for MemberExpression property");
    }
    if (isLiteral(property) && typeof property.value === "number") {
      computed = true;
    }
    if (optional) {
      this.token("?.");
    }
    if (computed) {
      this.tokenChar(91);
      this.print(property, node);
      this.tokenChar(93);
    } else {
      if (!optional) {
        this.tokenChar(46);
      }
      this.print(property, node);
    }
  }
  function OptionalCallExpression(node) {
    this.print(node.callee, node);
    this.print(node.typeParameters, node);
    if (node.optional) {
      this.token("?.");
    }
    this.print(node.typeArguments, node);
    this.tokenChar(40);
    const exit = this.enterForStatementInit(false);
    this.printList(node.arguments, node);
    exit();
    this.rightParens(node);
  }
  function CallExpression(node) {
    this.print(node.callee, node);
    this.print(node.typeArguments, node);
    this.print(node.typeParameters, node);
    this.tokenChar(40);
    const exit = this.enterForStatementInit(false);
    this.printList(node.arguments, node);
    exit();
    this.rightParens(node);
  }
  function Import() {
    this.word("import");
  }
  function AwaitExpression(node) {
    this.word("await");
    if (node.argument) {
      this.space();
      this.printTerminatorless(node.argument, node, false);
    }
  }
  function YieldExpression(node) {
    this.word("yield", true);
    if (node.delegate) {
      this.tokenChar(42);
      if (node.argument) {
        this.space();
        this.print(node.argument, node);
      }
    } else {
      if (node.argument) {
        this.space();
        this.printTerminatorless(node.argument, node, false);
      }
    }
  }
  function EmptyStatement() {
    this.semicolon(true);
  }
  function ExpressionStatement(node) {
    this.tokenContext |= _index.TokenContext.expressionStatement;
    this.print(node.expression, node);
    this.semicolon();
  }
  function AssignmentPattern(node) {
    this.print(node.left, node);
    if (node.left.type === "Identifier") {
      if (node.left.optional) this.tokenChar(63);
      this.print(node.left.typeAnnotation, node);
    }
    this.space();
    this.tokenChar(61);
    this.space();
    this.print(node.right, node);
  }
  function AssignmentExpression(node) {
    this.print(node.left, node);
    this.space();
    if (node.operator === "in" || node.operator === "instanceof") {
      this.word(node.operator);
    } else {
      this.token(node.operator);
    }
    this.space();
    this.print(node.right, node);
  }
  function BindExpression(node) {
    this.print(node.object, node);
    this.token("::");
    this.print(node.callee, node);
  }
  function MemberExpression(node) {
    this.print(node.object, node);
    if (!node.computed && isMemberExpression(node.property)) {
      throw new TypeError("Got a MemberExpression for MemberExpression property");
    }
    let computed = node.computed;
    if (isLiteral(node.property) && typeof node.property.value === "number") {
      computed = true;
    }
    if (computed) {
      const exit = this.enterForStatementInit(false);
      this.tokenChar(91);
      this.print(node.property, node);
      this.tokenChar(93);
      exit();
    } else {
      this.tokenChar(46);
      this.print(node.property, node);
    }
  }
  function MetaProperty(node) {
    this.print(node.meta, node);
    this.tokenChar(46);
    this.print(node.property, node);
  }
  function PrivateName(node) {
    this.tokenChar(35);
    this.print(node.id, node);
  }
  function V8IntrinsicIdentifier(node) {
    this.tokenChar(37);
    this.word(node.name);
  }
  function ModuleExpression(node) {
    this.word("module", true);
    this.space();
    this.tokenChar(123);
    this.indent();
    const {
      body
    } = node;
    if (body.body.length || body.directives.length) {
      this.newline();
    }
    this.print(body, node);
    this.dedent();
    this.rightBrace(node);
  }
  return exports$2x;
}

var exports$2w = {},
  _dewExec$2v = false;
function dew$2v() {
  if (_dewExec$2v) return exports$2w;
  _dewExec$2v = true;
  Object.defineProperty(exports$2w, "__esModule", {
    value: true
  });
  exports$2w.BreakStatement = BreakStatement;
  exports$2w.CatchClause = CatchClause;
  exports$2w.ContinueStatement = ContinueStatement;
  exports$2w.DebuggerStatement = DebuggerStatement;
  exports$2w.DoWhileStatement = DoWhileStatement;
  exports$2w.ForOfStatement = exports$2w.ForInStatement = void 0;
  exports$2w.ForStatement = ForStatement;
  exports$2w.IfStatement = IfStatement;
  exports$2w.LabeledStatement = LabeledStatement;
  exports$2w.ReturnStatement = ReturnStatement;
  exports$2w.SwitchCase = SwitchCase;
  exports$2w.SwitchStatement = SwitchStatement;
  exports$2w.ThrowStatement = ThrowStatement;
  exports$2w.TryStatement = TryStatement;
  exports$2w.VariableDeclaration = VariableDeclaration;
  exports$2w.VariableDeclarator = VariableDeclarator;
  exports$2w.WhileStatement = WhileStatement;
  exports$2w.WithStatement = WithStatement;
  var _t = dew$3i();
  var _index = dew$2y();
  const {
    isFor,
    isForStatement,
    isIfStatement,
    isStatement
  } = _t;
  function WithStatement(node) {
    this.word("with");
    this.space();
    this.tokenChar(40);
    this.print(node.object, node);
    this.tokenChar(41);
    this.printBlock(node);
  }
  function IfStatement(node) {
    this.word("if");
    this.space();
    this.tokenChar(40);
    this.print(node.test, node);
    this.tokenChar(41);
    this.space();
    const needsBlock = node.alternate && isIfStatement(getLastStatement(node.consequent));
    if (needsBlock) {
      this.tokenChar(123);
      this.newline();
      this.indent();
    }
    this.printAndIndentOnComments(node.consequent, node);
    if (needsBlock) {
      this.dedent();
      this.newline();
      this.tokenChar(125);
    }
    if (node.alternate) {
      if (this.endsWith(125)) this.space();
      this.word("else");
      this.space();
      this.printAndIndentOnComments(node.alternate, node);
    }
  }
  function getLastStatement(statement) {
    const {
      body
    } = statement;
    if (isStatement(body) === false) {
      return statement;
    }
    return getLastStatement(body);
  }
  function ForStatement(node) {
    this.word("for");
    this.space();
    this.tokenChar(40);
    {
      const exit = this.enterForStatementInit(true);
      this.tokenContext |= _index.TokenContext.forHead;
      this.print(node.init, node);
      exit();
    }
    this.tokenChar(59);
    if (node.test) {
      this.space();
      this.print(node.test, node);
    }
    this.tokenChar(59);
    if (node.update) {
      this.space();
      this.print(node.update, node);
    }
    this.tokenChar(41);
    this.printBlock(node);
  }
  function WhileStatement(node) {
    this.word("while");
    this.space();
    this.tokenChar(40);
    this.print(node.test, node);
    this.tokenChar(41);
    this.printBlock(node);
  }
  function ForXStatement(node) {
    this.word("for");
    this.space();
    const isForOf = node.type === "ForOfStatement";
    if (isForOf && node.await) {
      this.word("await");
      this.space();
    }
    this.noIndentInnerCommentsHere();
    this.tokenChar(40);
    {
      const exit = isForOf ? null : this.enterForStatementInit(true);
      this.tokenContext |= isForOf ? _index.TokenContext.forOfHead : _index.TokenContext.forInHead;
      this.print(node.left, node);
      exit == null || exit();
    }
    this.space();
    this.word(isForOf ? "of" : "in");
    this.space();
    this.print(node.right, node);
    this.tokenChar(41);
    this.printBlock(node);
  }
  exports$2w.ForInStatement = ForXStatement;
  exports$2w.ForOfStatement = ForXStatement;
  function DoWhileStatement(node) {
    this.word("do");
    this.space();
    this.print(node.body, node);
    this.space();
    this.word("while");
    this.space();
    this.tokenChar(40);
    this.print(node.test, node);
    this.tokenChar(41);
    this.semicolon();
  }
  function printStatementAfterKeyword(printer, node, parent, isLabel) {
    if (node) {
      printer.space();
      printer.printTerminatorless(node, parent, isLabel);
    }
    printer.semicolon();
  }
  function BreakStatement(node) {
    this.word("break");
    printStatementAfterKeyword(this, node.label, node, true);
  }
  function ContinueStatement(node) {
    this.word("continue");
    printStatementAfterKeyword(this, node.label, node, true);
  }
  function ReturnStatement(node) {
    this.word("return");
    printStatementAfterKeyword(this, node.argument, node, false);
  }
  function ThrowStatement(node) {
    this.word("throw");
    printStatementAfterKeyword(this, node.argument, node, false);
  }
  function LabeledStatement(node) {
    this.print(node.label, node);
    this.tokenChar(58);
    this.space();
    this.print(node.body, node);
  }
  function TryStatement(node) {
    this.word("try");
    this.space();
    this.print(node.block, node);
    this.space();
    if (node.handlers) {
      this.print(node.handlers[0], node);
    } else {
      this.print(node.handler, node);
    }
    if (node.finalizer) {
      this.space();
      this.word("finally");
      this.space();
      this.print(node.finalizer, node);
    }
  }
  function CatchClause(node) {
    this.word("catch");
    this.space();
    if (node.param) {
      this.tokenChar(40);
      this.print(node.param, node);
      this.print(node.param.typeAnnotation, node);
      this.tokenChar(41);
      this.space();
    }
    this.print(node.body, node);
  }
  function SwitchStatement(node) {
    this.word("switch");
    this.space();
    this.tokenChar(40);
    this.print(node.discriminant, node);
    this.tokenChar(41);
    this.space();
    this.tokenChar(123);
    this.printSequence(node.cases, node, {
      indent: true,
      addNewlines(leading, cas) {
        if (!leading && node.cases[node.cases.length - 1] === cas) return -1;
      }
    });
    this.rightBrace(node);
  }
  function SwitchCase(node) {
    if (node.test) {
      this.word("case");
      this.space();
      this.print(node.test, node);
      this.tokenChar(58);
    } else {
      this.word("default");
      this.tokenChar(58);
    }
    if (node.consequent.length) {
      this.newline();
      this.printSequence(node.consequent, node, {
        indent: true
      });
    }
  }
  function DebuggerStatement() {
    this.word("debugger");
    this.semicolon();
  }
  function VariableDeclaration(node, parent) {
    if (node.declare) {
      this.word("declare");
      this.space();
    }
    const {
      kind
    } = node;
    if (kind === "await using") {
      this.word("await");
      this.space();
      this.word("using", true);
    } else {
      this.word(kind, kind === "using");
    }
    this.space();
    let hasInits = false;
    if (!isFor(parent)) {
      for (const declar of node.declarations) {
        if (declar.init) {
          hasInits = true;
        }
      }
    }
    this.printList(node.declarations, node, {
      separator: hasInits ? function () {
        this.tokenChar(44);
        this.newline();
      } : undefined,
      indent: node.declarations.length > 1 ? true : false
    });
    if (isFor(parent)) {
      if (isForStatement(parent)) {
        if (parent.init === node) return;
      } else {
        if (parent.left === node) return;
      }
    }
    this.semicolon();
  }
  function VariableDeclarator(node) {
    this.print(node.id, node);
    if (node.definite) this.tokenChar(33);
    this.print(node.id.typeAnnotation, node);
    if (node.init) {
      this.space();
      this.tokenChar(61);
      this.space();
      this.print(node.init, node);
    }
  }
  return exports$2w;
}

var exports$2v = {},
  _dewExec$2u = false;
function dew$2u() {
  if (_dewExec$2u) return exports$2v;
  _dewExec$2u = true;
  Object.defineProperty(exports$2v, "__esModule", {
    value: true
  });
  exports$2v.ClassAccessorProperty = ClassAccessorProperty;
  exports$2v.ClassBody = ClassBody;
  exports$2v.ClassExpression = exports$2v.ClassDeclaration = ClassDeclaration;
  exports$2v.ClassMethod = ClassMethod;
  exports$2v.ClassPrivateMethod = ClassPrivateMethod;
  exports$2v.ClassPrivateProperty = ClassPrivateProperty;
  exports$2v.ClassProperty = ClassProperty;
  exports$2v.StaticBlock = StaticBlock;
  exports$2v._classMethodHead = _classMethodHead;
  var _t = dew$3i();
  const {
    isExportDefaultDeclaration,
    isExportNamedDeclaration
  } = _t;
  function ClassDeclaration(node, parent) {
    const inExport = isExportDefaultDeclaration(parent) || isExportNamedDeclaration(parent);
    if (!inExport || !this._shouldPrintDecoratorsBeforeExport(parent)) {
      this.printJoin(node.decorators, node);
    }
    if (node.declare) {
      this.word("declare");
      this.space();
    }
    if (node.abstract) {
      this.word("abstract");
      this.space();
    }
    this.word("class");
    if (node.id) {
      this.space();
      this.print(node.id, node);
    }
    this.print(node.typeParameters, node);
    if (node.superClass) {
      this.space();
      this.word("extends");
      this.space();
      this.print(node.superClass, node);
      this.print(node.superTypeParameters, node);
    }
    if (node.implements) {
      this.space();
      this.word("implements");
      this.space();
      this.printList(node.implements, node);
    }
    this.space();
    this.print(node.body, node);
  }
  function ClassBody(node) {
    this.tokenChar(123);
    if (node.body.length === 0) {
      this.tokenChar(125);
    } else {
      this.newline();
      const exit = this.enterForStatementInit(false);
      this.printSequence(node.body, node, {
        indent: true
      });
      exit();
      if (!this.endsWith(10)) this.newline();
      this.rightBrace(node);
    }
  }
  function ClassProperty(node) {
    var _node$key$loc;
    this.printJoin(node.decorators, node);
    const endLine = (_node$key$loc = node.key.loc) == null || (_node$key$loc = _node$key$loc.end) == null ? void 0 : _node$key$loc.line;
    if (endLine) this.catchUp(endLine);
    this.tsPrintClassMemberModifiers(node);
    if (node.computed) {
      this.tokenChar(91);
      this.print(node.key, node);
      this.tokenChar(93);
    } else {
      this._variance(node);
      this.print(node.key, node);
    }
    if (node.optional) {
      this.tokenChar(63);
    }
    if (node.definite) {
      this.tokenChar(33);
    }
    this.print(node.typeAnnotation, node);
    if (node.value) {
      this.space();
      this.tokenChar(61);
      this.space();
      this.print(node.value, node);
    }
    this.semicolon();
  }
  function ClassAccessorProperty(node) {
    var _node$key$loc2;
    this.printJoin(node.decorators, node);
    const endLine = (_node$key$loc2 = node.key.loc) == null || (_node$key$loc2 = _node$key$loc2.end) == null ? void 0 : _node$key$loc2.line;
    if (endLine) this.catchUp(endLine);
    this.tsPrintClassMemberModifiers(node);
    this.word("accessor", true);
    this.space();
    if (node.computed) {
      this.tokenChar(91);
      this.print(node.key, node);
      this.tokenChar(93);
    } else {
      this._variance(node);
      this.print(node.key, node);
    }
    if (node.optional) {
      this.tokenChar(63);
    }
    if (node.definite) {
      this.tokenChar(33);
    }
    this.print(node.typeAnnotation, node);
    if (node.value) {
      this.space();
      this.tokenChar(61);
      this.space();
      this.print(node.value, node);
    }
    this.semicolon();
  }
  function ClassPrivateProperty(node) {
    this.printJoin(node.decorators, node);
    if (node.static) {
      this.word("static");
      this.space();
    }
    this.print(node.key, node);
    this.print(node.typeAnnotation, node);
    if (node.value) {
      this.space();
      this.tokenChar(61);
      this.space();
      this.print(node.value, node);
    }
    this.semicolon();
  }
  function ClassMethod(node) {
    this._classMethodHead(node);
    this.space();
    this.print(node.body, node);
  }
  function ClassPrivateMethod(node) {
    this._classMethodHead(node);
    this.space();
    this.print(node.body, node);
  }
  function _classMethodHead(node) {
    var _node$key$loc3;
    this.printJoin(node.decorators, node);
    const endLine = (_node$key$loc3 = node.key.loc) == null || (_node$key$loc3 = _node$key$loc3.end) == null ? void 0 : _node$key$loc3.line;
    if (endLine) this.catchUp(endLine);
    this.tsPrintClassMemberModifiers(node);
    this._methodHead(node);
  }
  function StaticBlock(node) {
    this.word("static");
    this.space();
    this.tokenChar(123);
    if (node.body.length === 0) {
      this.tokenChar(125);
    } else {
      this.newline();
      this.printSequence(node.body, node, {
        indent: true
      });
      this.rightBrace(node);
    }
  }
  return exports$2v;
}

var exports$2u = {},
  _dewExec$2t = false;
function dew$2t() {
  if (_dewExec$2t) return exports$2u;
  _dewExec$2t = true;
  Object.defineProperty(exports$2u, "__esModule", {
    value: true
  });
  exports$2u.ArrowFunctionExpression = ArrowFunctionExpression;
  exports$2u.FunctionDeclaration = exports$2u.FunctionExpression = FunctionExpression;
  exports$2u._functionHead = _functionHead;
  exports$2u._methodHead = _methodHead;
  exports$2u._param = _param;
  exports$2u._parameters = _parameters;
  exports$2u._params = _params;
  exports$2u._predicate = _predicate;
  var _t = dew$3i();
  var _index = dew$2y();
  const {
    isIdentifier
  } = _t;
  function _params(node, idNode, parentNode) {
    this.print(node.typeParameters, node);
    const nameInfo = _getFuncIdName.call(this, idNode, parentNode);
    if (nameInfo) {
      this.sourceIdentifierName(nameInfo.name, nameInfo.pos);
    }
    this.tokenChar(40);
    this._parameters(node.params, node);
    this.tokenChar(41);
    const noLineTerminator = node.type === "ArrowFunctionExpression";
    this.print(node.returnType, node, noLineTerminator);
    this._noLineTerminator = noLineTerminator;
  }
  function _parameters(parameters, parent) {
    const exit = this.enterForStatementInit(false);
    const paramLength = parameters.length;
    for (let i = 0; i < paramLength; i++) {
      this._param(parameters[i], parent);
      if (i < parameters.length - 1) {
        this.tokenChar(44);
        this.space();
      }
    }
    exit();
  }
  function _param(parameter, parent) {
    this.printJoin(parameter.decorators, parameter);
    this.print(parameter, parent);
    if (parameter.optional) {
      this.tokenChar(63);
    }
    this.print(parameter.typeAnnotation, parameter);
  }
  function _methodHead(node) {
    const kind = node.kind;
    const key = node.key;
    if (kind === "get" || kind === "set") {
      this.word(kind);
      this.space();
    }
    if (node.async) {
      this.word("async", true);
      this.space();
    }
    if (kind === "method" || kind === "init") {
      if (node.generator) {
        this.tokenChar(42);
      }
    }
    if (node.computed) {
      this.tokenChar(91);
      this.print(key, node);
      this.tokenChar(93);
    } else {
      this.print(key, node);
    }
    if (node.optional) {
      this.tokenChar(63);
    }
    this._params(node, node.computed && node.key.type !== "StringLiteral" ? undefined : node.key, undefined);
  }
  function _predicate(node, noLineTerminatorAfter) {
    if (node.predicate) {
      if (!node.returnType) {
        this.tokenChar(58);
      }
      this.space();
      this.print(node.predicate, node, noLineTerminatorAfter);
    }
  }
  function _functionHead(node, parent) {
    if (node.async) {
      this.word("async");
      this._endsWithInnerRaw = false;
      this.space();
    }
    this.word("function");
    if (node.generator) {
      this._endsWithInnerRaw = false;
      this.tokenChar(42);
    }
    this.space();
    if (node.id) {
      this.print(node.id, node);
    }
    this._params(node, node.id, parent);
    if (node.type !== "TSDeclareFunction") {
      this._predicate(node);
    }
  }
  function FunctionExpression(node, parent) {
    this._functionHead(node, parent);
    this.space();
    this.print(node.body, node);
  }
  function ArrowFunctionExpression(node, parent) {
    if (node.async) {
      this.word("async", true);
      this.space();
    }
    let firstParam;
    if (!this.format.retainLines && node.params.length === 1 && isIdentifier(firstParam = node.params[0]) && !hasTypesOrComments(node, firstParam)) {
      this.print(firstParam, node, true);
    } else {
      this._params(node, undefined, parent);
    }
    this._predicate(node, true);
    this.space();
    this.printInnerComments();
    this.token("=>");
    this.space();
    this.tokenContext |= _index.TokenContext.arrowBody;
    this.print(node.body, node);
  }
  function hasTypesOrComments(node, param) {
    var _param$leadingComment, _param$trailingCommen;
    return !!(node.typeParameters || node.returnType || node.predicate || param.typeAnnotation || param.optional || (_param$leadingComment = param.leadingComments) != null && _param$leadingComment.length || (_param$trailingCommen = param.trailingComments) != null && _param$trailingCommen.length);
  }
  function _getFuncIdName(idNode, parent) {
    let id = idNode;
    if (!id && parent) {
      const parentType = parent.type;
      if (parentType === "VariableDeclarator") {
        id = parent.id;
      } else if (parentType === "AssignmentExpression" || parentType === "AssignmentPattern") {
        id = parent.left;
      } else if (parentType === "ObjectProperty" || parentType === "ClassProperty") {
        if (!parent.computed || parent.key.type === "StringLiteral") {
          id = parent.key;
        }
      } else if (parentType === "ClassPrivateProperty" || parentType === "ClassAccessorProperty") {
        id = parent.key;
      }
    }
    if (!id) return;
    let nameInfo;
    if (id.type === "Identifier") {
      var _id$loc, _id$loc2;
      nameInfo = {
        pos: (_id$loc = id.loc) == null ? void 0 : _id$loc.start,
        name: ((_id$loc2 = id.loc) == null ? void 0 : _id$loc2.identifierName) || id.name
      };
    } else if (id.type === "PrivateName") {
      var _id$loc3;
      nameInfo = {
        pos: (_id$loc3 = id.loc) == null ? void 0 : _id$loc3.start,
        name: "#" + id.id.name
      };
    } else if (id.type === "StringLiteral") {
      var _id$loc4;
      nameInfo = {
        pos: (_id$loc4 = id.loc) == null ? void 0 : _id$loc4.start,
        name: id.value
      };
    }
    return nameInfo;
  }
  return exports$2u;
}

var exports$2t = {},
  _dewExec$2s = false;
function dew$2s() {
  if (_dewExec$2s) return exports$2t;
  _dewExec$2s = true;
  Object.defineProperty(exports$2t, "__esModule", {
    value: true
  });
  exports$2t.ExportAllDeclaration = ExportAllDeclaration;
  exports$2t.ExportDefaultDeclaration = ExportDefaultDeclaration;
  exports$2t.ExportDefaultSpecifier = ExportDefaultSpecifier;
  exports$2t.ExportNamedDeclaration = ExportNamedDeclaration;
  exports$2t.ExportNamespaceSpecifier = ExportNamespaceSpecifier;
  exports$2t.ExportSpecifier = ExportSpecifier;
  exports$2t.ImportAttribute = ImportAttribute;
  exports$2t.ImportDeclaration = ImportDeclaration;
  exports$2t.ImportDefaultSpecifier = ImportDefaultSpecifier;
  exports$2t.ImportExpression = ImportExpression;
  exports$2t.ImportNamespaceSpecifier = ImportNamespaceSpecifier;
  exports$2t.ImportSpecifier = ImportSpecifier;
  exports$2t._printAttributes = _printAttributes;
  var _t = dew$3i();
  var _index = dew$2y();
  const {
    isClassDeclaration,
    isExportDefaultSpecifier,
    isExportNamespaceSpecifier,
    isImportDefaultSpecifier,
    isImportNamespaceSpecifier,
    isStatement
  } = _t;
  function ImportSpecifier(node) {
    if (node.importKind === "type" || node.importKind === "typeof") {
      this.word(node.importKind);
      this.space();
    }
    this.print(node.imported, node);
    if (node.local && node.local.name !== node.imported.name) {
      this.space();
      this.word("as");
      this.space();
      this.print(node.local, node);
    }
  }
  function ImportDefaultSpecifier(node) {
    this.print(node.local, node);
  }
  function ExportDefaultSpecifier(node) {
    this.print(node.exported, node);
  }
  function ExportSpecifier(node) {
    if (node.exportKind === "type") {
      this.word("type");
      this.space();
    }
    this.print(node.local, node);
    if (node.exported && node.local.name !== node.exported.name) {
      this.space();
      this.word("as");
      this.space();
      this.print(node.exported, node);
    }
  }
  function ExportNamespaceSpecifier(node) {
    this.tokenChar(42);
    this.space();
    this.word("as");
    this.space();
    this.print(node.exported, node);
  }
  let warningShown = false;
  function _printAttributes(node) {
    const {
      importAttributesKeyword
    } = this.format;
    const {
      attributes,
      assertions
    } = node;
    if (attributes && !importAttributesKeyword && !warningShown) {
      warningShown = true;
      console.warn(`\
You are using import attributes, without specifying the desired output syntax.
Please specify the "importAttributesKeyword" generator option, whose value can be one of:
 - "with"        : \`import { a } from "b" with { type: "json" };\`
 - "assert"      : \`import { a } from "b" assert { type: "json" };\`
 - "with-legacy" : \`import { a } from "b" with type: "json";\`
`);
    }
    const useAssertKeyword = importAttributesKeyword === "assert" || !importAttributesKeyword && assertions;
    this.word(useAssertKeyword ? "assert" : "with");
    this.space();
    if (!useAssertKeyword && importAttributesKeyword !== "with") {
      this.printList(attributes || assertions, node);
      return;
    }
    this.tokenChar(123);
    this.space();
    this.printList(attributes || assertions, node);
    this.space();
    this.tokenChar(125);
  }
  function ExportAllDeclaration(node) {
    var _node$attributes, _node$assertions;
    this.word("export");
    this.space();
    if (node.exportKind === "type") {
      this.word("type");
      this.space();
    }
    this.tokenChar(42);
    this.space();
    this.word("from");
    this.space();
    if ((_node$attributes = node.attributes) != null && _node$attributes.length || (_node$assertions = node.assertions) != null && _node$assertions.length) {
      this.print(node.source, node, true);
      this.space();
      this._printAttributes(node);
    } else {
      this.print(node.source, node);
    }
    this.semicolon();
  }
  function maybePrintDecoratorsBeforeExport(printer, node) {
    if (isClassDeclaration(node.declaration) && printer._shouldPrintDecoratorsBeforeExport(node)) {
      printer.printJoin(node.declaration.decorators, node);
    }
  }
  function ExportNamedDeclaration(node) {
    maybePrintDecoratorsBeforeExport(this, node);
    this.word("export");
    this.space();
    if (node.declaration) {
      const declar = node.declaration;
      this.print(declar, node);
      if (!isStatement(declar)) this.semicolon();
    } else {
      if (node.exportKind === "type") {
        this.word("type");
        this.space();
      }
      const specifiers = node.specifiers.slice(0);
      let hasSpecial = false;
      for (;;) {
        const first = specifiers[0];
        if (isExportDefaultSpecifier(first) || isExportNamespaceSpecifier(first)) {
          hasSpecial = true;
          this.print(specifiers.shift(), node);
          if (specifiers.length) {
            this.tokenChar(44);
            this.space();
          }
        } else {
          break;
        }
      }
      if (specifiers.length || !specifiers.length && !hasSpecial) {
        this.tokenChar(123);
        if (specifiers.length) {
          this.space();
          this.printList(specifiers, node);
          this.space();
        }
        this.tokenChar(125);
      }
      if (node.source) {
        var _node$attributes2, _node$assertions2;
        this.space();
        this.word("from");
        this.space();
        if ((_node$attributes2 = node.attributes) != null && _node$attributes2.length || (_node$assertions2 = node.assertions) != null && _node$assertions2.length) {
          this.print(node.source, node, true);
          this.space();
          this._printAttributes(node);
        } else {
          this.print(node.source, node);
        }
      }
      this.semicolon();
    }
  }
  function ExportDefaultDeclaration(node) {
    maybePrintDecoratorsBeforeExport(this, node);
    this.word("export");
    this.noIndentInnerCommentsHere();
    this.space();
    this.word("default");
    this.space();
    this.tokenContext |= _index.TokenContext.exportDefault;
    const declar = node.declaration;
    this.print(declar, node);
    if (!isStatement(declar)) this.semicolon();
  }
  function ImportDeclaration(node) {
    var _node$attributes3, _node$assertions3;
    this.word("import");
    this.space();
    const isTypeKind = node.importKind === "type" || node.importKind === "typeof";
    if (isTypeKind) {
      this.noIndentInnerCommentsHere();
      this.word(node.importKind);
      this.space();
    } else if (node.module) {
      this.noIndentInnerCommentsHere();
      this.word("module");
      this.space();
    } else if (node.phase) {
      this.noIndentInnerCommentsHere();
      this.word(node.phase);
      this.space();
    }
    const specifiers = node.specifiers.slice(0);
    const hasSpecifiers = !!specifiers.length;
    while (hasSpecifiers) {
      const first = specifiers[0];
      if (isImportDefaultSpecifier(first) || isImportNamespaceSpecifier(first)) {
        this.print(specifiers.shift(), node);
        if (specifiers.length) {
          this.tokenChar(44);
          this.space();
        }
      } else {
        break;
      }
    }
    if (specifiers.length) {
      this.tokenChar(123);
      this.space();
      this.printList(specifiers, node);
      this.space();
      this.tokenChar(125);
    } else if (isTypeKind && !hasSpecifiers) {
      this.tokenChar(123);
      this.tokenChar(125);
    }
    if (hasSpecifiers || isTypeKind) {
      this.space();
      this.word("from");
      this.space();
    }
    if ((_node$attributes3 = node.attributes) != null && _node$attributes3.length || (_node$assertions3 = node.assertions) != null && _node$assertions3.length) {
      this.print(node.source, node, true);
      this.space();
      this._printAttributes(node);
    } else {
      this.print(node.source, node);
    }
    this.semicolon();
  }
  function ImportAttribute(node) {
    this.print(node.key);
    this.tokenChar(58);
    this.space();
    this.print(node.value);
  }
  function ImportNamespaceSpecifier(node) {
    this.tokenChar(42);
    this.space();
    this.word("as");
    this.space();
    this.print(node.local, node);
  }
  function ImportExpression(node) {
    this.word("import");
    if (node.phase) {
      this.tokenChar(46);
      this.word(node.phase);
    }
    this.tokenChar(40);
    this.print(node.source, node);
    if (node.options != null) {
      this.tokenChar(44);
      this.space();
      this.print(node.options, node);
    }
    this.tokenChar(41);
  }
  return exports$2t;
}

var exports$2s = {},
  _dewExec$2r = false;
function dew$2r() {
  if (_dewExec$2r) return exports$2s;
  _dewExec$2r = true;
  var Buffer = _nodeBuffer.Buffer;
  const object = {};
  const hasOwnProperty = object.hasOwnProperty;
  const forOwn = (object, callback) => {
    for (const key in object) {
      if (hasOwnProperty.call(object, key)) {
        callback(key, object[key]);
      }
    }
  };
  const extend = (destination, source) => {
    if (!source) {
      return destination;
    }
    forOwn(source, (key, value) => {
      destination[key] = value;
    });
    return destination;
  };
  const forEach = (array, callback) => {
    const length = array.length;
    let index = -1;
    while (++index < length) {
      callback(array[index]);
    }
  };
  const toString = object.toString;
  const isArray = Array.isArray;
  const isBuffer = Buffer.isBuffer;
  const isObject = value => {
    // This is a very simple check, but it’s good enough for what we need.
    return toString.call(value) == "[object Object]";
  };
  const isString = value => {
    return typeof value == "string" || toString.call(value) == "[object String]";
  };
  const isNumber = value => {
    return typeof value == "number" || toString.call(value) == "[object Number]";
  };
  const isFunction = value => {
    return typeof value == "function";
  };
  const isMap = value => {
    return toString.call(value) == "[object Map]";
  };
  const isSet = value => {
    return toString.call(value) == "[object Set]";
  };

  /*--------------------------------------------------------------------------*/

  // https://mathiasbynens.be/notes/javascript-escapes#single
  const singleEscapes = {
    "\"": "\\\"",
    "'": "\\'",
    "\\": "\\\\",
    "\b": "\\b",
    "\f": "\\f",
    "\n": "\\n",
    "\r": "\\r",
    "\t": "\\t"
    // `\v` is omitted intentionally, because in IE < 9, '\v' == 'v'.
    // '\v': '\\x0B'
  };
  const regexSingleEscape = /["'\\\b\f\n\r\t]/;
  const regexDigit = /[0-9]/;
  const regexWhitelist = /[ !#-&\(-\[\]-_a-~]/;
  const jsesc = (argument, options) => {
    const increaseIndentation = () => {
      oldIndent = indent;
      ++options.indentLevel;
      indent = options.indent.repeat(options.indentLevel);
    };
    // Handle options
    const defaults = {
      "escapeEverything": false,
      "minimal": false,
      "isScriptContext": false,
      "quotes": "single",
      "wrap": false,
      "es6": false,
      "json": false,
      "compact": true,
      "lowercaseHex": false,
      "numbers": "decimal",
      "indent": "\t",
      "indentLevel": 0,
      "__inline1__": false,
      "__inline2__": false
    };
    const json = options && options.json;
    if (json) {
      defaults.quotes = "double";
      defaults.wrap = true;
    }
    options = extend(defaults, options);
    if (options.quotes != "single" && options.quotes != "double" && options.quotes != "backtick") {
      options.quotes = "single";
    }
    const quote = options.quotes == "double" ? "\"" : options.quotes == "backtick" ? "`" : "'";
    const compact = options.compact;
    const lowercaseHex = options.lowercaseHex;
    let indent = options.indent.repeat(options.indentLevel);
    let oldIndent = "";
    const inline1 = options.__inline1__;
    const inline2 = options.__inline2__;
    const newLine = compact ? "" : "\n";
    let result;
    let isEmpty = true;
    const useBinNumbers = options.numbers == "binary";
    const useOctNumbers = options.numbers == "octal";
    const useDecNumbers = options.numbers == "decimal";
    const useHexNumbers = options.numbers == "hexadecimal";
    if (json && argument && isFunction(argument.toJSON)) {
      argument = argument.toJSON();
    }
    if (!isString(argument)) {
      if (isMap(argument)) {
        if (argument.size == 0) {
          return "new Map()";
        }
        if (!compact) {
          options.__inline1__ = true;
          options.__inline2__ = false;
        }
        return "new Map(" + jsesc(Array.from(argument), options) + ")";
      }
      if (isSet(argument)) {
        if (argument.size == 0) {
          return "new Set()";
        }
        return "new Set(" + jsesc(Array.from(argument), options) + ")";
      }
      if (isBuffer(argument)) {
        if (argument.length == 0) {
          return "Buffer.from([])";
        }
        return "Buffer.from(" + jsesc(Array.from(argument), options) + ")";
      }
      if (isArray(argument)) {
        result = [];
        options.wrap = true;
        if (inline1) {
          options.__inline1__ = false;
          options.__inline2__ = true;
        }
        if (!inline2) {
          increaseIndentation();
        }
        forEach(argument, value => {
          isEmpty = false;
          if (inline2) {
            options.__inline2__ = false;
          }
          result.push((compact || inline2 ? "" : indent) + jsesc(value, options));
        });
        if (isEmpty) {
          return "[]";
        }
        if (inline2) {
          return "[" + result.join(", ") + "]";
        }
        return "[" + newLine + result.join("," + newLine) + newLine + (compact ? "" : oldIndent) + "]";
      } else if (isNumber(argument)) {
        if (json) {
          // Some number values (e.g. `Infinity`) cannot be represented in JSON.
          return JSON.stringify(argument);
        }
        if (useDecNumbers) {
          return String(argument);
        }
        if (useHexNumbers) {
          let hexadecimal = argument.toString(16);
          if (!lowercaseHex) {
            hexadecimal = hexadecimal.toUpperCase();
          }
          return "0x" + hexadecimal;
        }
        if (useBinNumbers) {
          return "0b" + argument.toString(2);
        }
        if (useOctNumbers) {
          return "0o" + argument.toString(8);
        }
      } else if (!isObject(argument)) {
        if (json) {
          // For some values (e.g. `undefined`, `function` objects),
          // `JSON.stringify(value)` returns `undefined` (which isn’t valid
          // JSON) instead of `'null'`.
          return JSON.stringify(argument) || "null";
        }
        return String(argument);
      } else {
        // it’s an object
        result = [];
        options.wrap = true;
        increaseIndentation();
        forOwn(argument, (key, value) => {
          isEmpty = false;
          result.push((compact ? "" : indent) + jsesc(key, options) + ":" + (compact ? "" : " ") + jsesc(value, options));
        });
        if (isEmpty) {
          return "{}";
        }
        return "{" + newLine + result.join("," + newLine) + newLine + (compact ? "" : oldIndent) + "}";
      }
    }
    const string = argument;
    // Loop over each code unit in the string and escape it
    let index = -1;
    const length = string.length;
    result = "";
    while (++index < length) {
      const character = string.charAt(index);
      if (options.es6) {
        const first = string.charCodeAt(index);
        if (
        // check if it’s the start of a surrogate pair
        first >= 55296 && first <= 56319 &&
        // high surrogate
        length > index + 1 // there is a next code unit
        ) {
          const second = string.charCodeAt(index + 1);
          if (second >= 56320 && second <= 57343) {
            // low surrogate
            // https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
            const codePoint = (first - 55296) * 1024 + second - 56320 + 65536;
            let hexadecimal = codePoint.toString(16);
            if (!lowercaseHex) {
              hexadecimal = hexadecimal.toUpperCase();
            }
            result += "\\u{" + hexadecimal + "}";
            ++index;
            continue;
          }
        }
      }
      if (!options.escapeEverything) {
        if (regexWhitelist.test(character)) {
          // It’s a printable ASCII character that is not `"`, `'` or `\`,
          // so don’t escape it.
          result += character;
          continue;
        }
        if (character == "\"") {
          result += quote == character ? "\\\"" : character;
          continue;
        }
        if (character == "`") {
          result += quote == character ? "\\`" : character;
          continue;
        }
        if (character == "'") {
          result += quote == character ? "\\'" : character;
          continue;
        }
      }
      if (character == "\0" && !json && !regexDigit.test(string.charAt(index + 1))) {
        result += "\\0";
        continue;
      }
      if (regexSingleEscape.test(character)) {
        // no need for a `hasOwnProperty` check here
        result += singleEscapes[character];
        continue;
      }
      const charCode = character.charCodeAt(0);
      if (options.minimal && charCode != 8232 && charCode != 8233) {
        result += character;
        continue;
      }
      let hexadecimal = charCode.toString(16);
      if (!lowercaseHex) {
        hexadecimal = hexadecimal.toUpperCase();
      }
      const longhand = hexadecimal.length > 2 || json;
      const escaped = "\\" + (longhand ? "u" : "x") + ("0000" + hexadecimal).slice(longhand ? -4 : -2);
      result += escaped;
      continue;
    }
    if (options.wrap) {
      result = quote + result + quote;
    }
    if (quote == "`") {
      result = result.replace(/\$\{/g, "\\${");
    }
    if (options.isScriptContext) {
      // https://mathiasbynens.be/notes/etago
      return result.replace(/<\/(script|style)/gi, "<\\/$1").replace(/<!--/g, json ? "\\u003C!--" : "\\x3C!--");
    }
    return result;
  };
  jsesc.version = "2.5.2";
  exports$2s = jsesc;
  return exports$2s;
}

var exports$2r = {},
  _dewExec$2q = false;
function dew$2q() {
  if (_dewExec$2q) return exports$2r;
  _dewExec$2q = true;
  Object.defineProperty(exports$2r, "__esModule", {
    value: true
  });
  exports$2r.ArgumentPlaceholder = ArgumentPlaceholder;
  exports$2r.ArrayPattern = exports$2r.ArrayExpression = ArrayExpression;
  exports$2r.BigIntLiteral = BigIntLiteral;
  exports$2r.BooleanLiteral = BooleanLiteral;
  exports$2r.DecimalLiteral = DecimalLiteral;
  exports$2r.Identifier = Identifier;
  exports$2r.NullLiteral = NullLiteral;
  exports$2r.NumericLiteral = NumericLiteral;
  exports$2r.ObjectPattern = exports$2r.ObjectExpression = ObjectExpression;
  exports$2r.ObjectMethod = ObjectMethod;
  exports$2r.ObjectProperty = ObjectProperty;
  exports$2r.PipelineBareFunction = PipelineBareFunction;
  exports$2r.PipelinePrimaryTopicReference = PipelinePrimaryTopicReference;
  exports$2r.PipelineTopicExpression = PipelineTopicExpression;
  exports$2r.RecordExpression = RecordExpression;
  exports$2r.RegExpLiteral = RegExpLiteral;
  exports$2r.SpreadElement = exports$2r.RestElement = RestElement;
  exports$2r.StringLiteral = StringLiteral;
  exports$2r.TopicReference = TopicReference;
  exports$2r.TupleExpression = TupleExpression;
  var _t = dew$3i();
  var _jsesc = dew$2r();
  const {
    isAssignmentPattern,
    isIdentifier
  } = _t;
  function Identifier(node) {
    var _node$loc;
    this.sourceIdentifierName(((_node$loc = node.loc) == null ? void 0 : _node$loc.identifierName) || node.name);
    this.word(node.name);
  }
  function ArgumentPlaceholder() {
    this.tokenChar(63);
  }
  function RestElement(node) {
    this.token("...");
    this.print(node.argument, node);
  }
  function ObjectExpression(node) {
    const props = node.properties;
    this.tokenChar(123);
    if (props.length) {
      const exit = this.enterForStatementInit(false);
      this.space();
      this.printList(props, node, {
        indent: true,
        statement: true
      });
      this.space();
      exit();
    }
    this.sourceWithOffset("end", node.loc, -1);
    this.tokenChar(125);
  }
  function ObjectMethod(node) {
    this.printJoin(node.decorators, node);
    this._methodHead(node);
    this.space();
    this.print(node.body, node);
  }
  function ObjectProperty(node) {
    this.printJoin(node.decorators, node);
    if (node.computed) {
      this.tokenChar(91);
      this.print(node.key, node);
      this.tokenChar(93);
    } else {
      if (isAssignmentPattern(node.value) && isIdentifier(node.key) && node.key.name === node.value.left.name) {
        this.print(node.value, node);
        return;
      }
      this.print(node.key, node);
      if (node.shorthand && isIdentifier(node.key) && isIdentifier(node.value) && node.key.name === node.value.name) {
        return;
      }
    }
    this.tokenChar(58);
    this.space();
    this.print(node.value, node);
  }
  function ArrayExpression(node) {
    const elems = node.elements;
    const len = elems.length;
    this.tokenChar(91);
    const exit = this.enterForStatementInit(false);
    for (let i = 0; i < elems.length; i++) {
      const elem = elems[i];
      if (elem) {
        if (i > 0) this.space();
        this.print(elem, node);
        if (i < len - 1) this.tokenChar(44);
      } else {
        this.tokenChar(44);
      }
    }
    exit();
    this.tokenChar(93);
  }
  function RecordExpression(node) {
    const props = node.properties;
    let startToken;
    let endToken;
    {
      if (this.format.recordAndTupleSyntaxType === "bar") {
        startToken = "{|";
        endToken = "|}";
      } else if (this.format.recordAndTupleSyntaxType !== "hash" && this.format.recordAndTupleSyntaxType != null) {
        throw new Error(`The "recordAndTupleSyntaxType" generator option must be "bar" or "hash" (${JSON.stringify(this.format.recordAndTupleSyntaxType)} received).`);
      } else {
        startToken = "#{";
        endToken = "}";
      }
    }
    this.token(startToken);
    if (props.length) {
      this.space();
      this.printList(props, node, {
        indent: true,
        statement: true
      });
      this.space();
    }
    this.token(endToken);
  }
  function TupleExpression(node) {
    const elems = node.elements;
    const len = elems.length;
    let startToken;
    let endToken;
    {
      if (this.format.recordAndTupleSyntaxType === "bar") {
        startToken = "[|";
        endToken = "|]";
      } else if (this.format.recordAndTupleSyntaxType === "hash") {
        startToken = "#[";
        endToken = "]";
      } else {
        throw new Error(`${this.format.recordAndTupleSyntaxType} is not a valid recordAndTuple syntax type`);
      }
    }
    this.token(startToken);
    for (let i = 0; i < elems.length; i++) {
      const elem = elems[i];
      if (elem) {
        if (i > 0) this.space();
        this.print(elem, node);
        if (i < len - 1) this.tokenChar(44);
      }
    }
    this.token(endToken);
  }
  function RegExpLiteral(node) {
    this.word(`/${node.pattern}/${node.flags}`);
  }
  function BooleanLiteral(node) {
    this.word(node.value ? "true" : "false");
  }
  function NullLiteral() {
    this.word("null");
  }
  function NumericLiteral(node) {
    const raw = this.getPossibleRaw(node);
    const opts = this.format.jsescOption;
    const value = node.value;
    const str = value + "";
    if (opts.numbers) {
      this.number(_jsesc(value, opts), value);
    } else if (raw == null) {
      this.number(str, value);
    } else if (this.format.minified) {
      this.number(raw.length < str.length ? raw : str, value);
    } else {
      this.number(raw, value);
    }
  }
  function StringLiteral(node) {
    const raw = this.getPossibleRaw(node);
    if (!this.format.minified && raw !== undefined) {
      this.token(raw);
      return;
    }
    const val = _jsesc(node.value, this.format.jsescOption);
    this.token(val);
  }
  function BigIntLiteral(node) {
    const raw = this.getPossibleRaw(node);
    if (!this.format.minified && raw !== undefined) {
      this.word(raw);
      return;
    }
    this.word(node.value + "n");
  }
  function DecimalLiteral(node) {
    const raw = this.getPossibleRaw(node);
    if (!this.format.minified && raw !== undefined) {
      this.word(raw);
      return;
    }
    this.word(node.value + "m");
  }
  const validTopicTokenSet = new Set(["^^", "@@", "^", "%", "#"]);
  function TopicReference() {
    const {
      topicToken
    } = this.format;
    if (validTopicTokenSet.has(topicToken)) {
      this.token(topicToken);
    } else {
      const givenTopicTokenJSON = JSON.stringify(topicToken);
      const validTopics = Array.from(validTopicTokenSet, v => JSON.stringify(v));
      throw new Error(`The "topicToken" generator option must be one of ` + `${validTopics.join(", ")} (${givenTopicTokenJSON} received instead).`);
    }
  }
  function PipelineTopicExpression(node) {
    this.print(node.expression, node);
  }
  function PipelineBareFunction(node) {
    this.print(node.callee, node);
  }
  function PipelinePrimaryTopicReference() {
    this.tokenChar(35);
  }
  return exports$2r;
}

var exports$2q = {},
  _dewExec$2p = false;
function dew$2p() {
  if (_dewExec$2p) return exports$2q;
  _dewExec$2p = true;
  Object.defineProperty(exports$2q, "__esModule", {
    value: true
  });
  exports$2q.AnyTypeAnnotation = AnyTypeAnnotation;
  exports$2q.ArrayTypeAnnotation = ArrayTypeAnnotation;
  exports$2q.BooleanLiteralTypeAnnotation = BooleanLiteralTypeAnnotation;
  exports$2q.BooleanTypeAnnotation = BooleanTypeAnnotation;
  exports$2q.DeclareClass = DeclareClass;
  exports$2q.DeclareExportAllDeclaration = DeclareExportAllDeclaration;
  exports$2q.DeclareExportDeclaration = DeclareExportDeclaration;
  exports$2q.DeclareFunction = DeclareFunction;
  exports$2q.DeclareInterface = DeclareInterface;
  exports$2q.DeclareModule = DeclareModule;
  exports$2q.DeclareModuleExports = DeclareModuleExports;
  exports$2q.DeclareOpaqueType = DeclareOpaqueType;
  exports$2q.DeclareTypeAlias = DeclareTypeAlias;
  exports$2q.DeclareVariable = DeclareVariable;
  exports$2q.DeclaredPredicate = DeclaredPredicate;
  exports$2q.EmptyTypeAnnotation = EmptyTypeAnnotation;
  exports$2q.EnumBooleanBody = EnumBooleanBody;
  exports$2q.EnumBooleanMember = EnumBooleanMember;
  exports$2q.EnumDeclaration = EnumDeclaration;
  exports$2q.EnumDefaultedMember = EnumDefaultedMember;
  exports$2q.EnumNumberBody = EnumNumberBody;
  exports$2q.EnumNumberMember = EnumNumberMember;
  exports$2q.EnumStringBody = EnumStringBody;
  exports$2q.EnumStringMember = EnumStringMember;
  exports$2q.EnumSymbolBody = EnumSymbolBody;
  exports$2q.ExistsTypeAnnotation = ExistsTypeAnnotation;
  exports$2q.FunctionTypeAnnotation = FunctionTypeAnnotation;
  exports$2q.FunctionTypeParam = FunctionTypeParam;
  exports$2q.IndexedAccessType = IndexedAccessType;
  exports$2q.InferredPredicate = InferredPredicate;
  exports$2q.InterfaceDeclaration = InterfaceDeclaration;
  exports$2q.GenericTypeAnnotation = exports$2q.ClassImplements = exports$2q.InterfaceExtends = InterfaceExtends;
  exports$2q.InterfaceTypeAnnotation = InterfaceTypeAnnotation;
  exports$2q.IntersectionTypeAnnotation = IntersectionTypeAnnotation;
  exports$2q.MixedTypeAnnotation = MixedTypeAnnotation;
  exports$2q.NullLiteralTypeAnnotation = NullLiteralTypeAnnotation;
  exports$2q.NullableTypeAnnotation = NullableTypeAnnotation;
  Object.defineProperty(exports$2q, "NumberLiteralTypeAnnotation", {
    enumerable: true,
    get: function () {
      return _types2.NumericLiteral;
    }
  });
  exports$2q.NumberTypeAnnotation = NumberTypeAnnotation;
  exports$2q.ObjectTypeAnnotation = ObjectTypeAnnotation;
  exports$2q.ObjectTypeCallProperty = ObjectTypeCallProperty;
  exports$2q.ObjectTypeIndexer = ObjectTypeIndexer;
  exports$2q.ObjectTypeInternalSlot = ObjectTypeInternalSlot;
  exports$2q.ObjectTypeProperty = ObjectTypeProperty;
  exports$2q.ObjectTypeSpreadProperty = ObjectTypeSpreadProperty;
  exports$2q.OpaqueType = OpaqueType;
  exports$2q.OptionalIndexedAccessType = OptionalIndexedAccessType;
  exports$2q.QualifiedTypeIdentifier = QualifiedTypeIdentifier;
  Object.defineProperty(exports$2q, "StringLiteralTypeAnnotation", {
    enumerable: true,
    get: function () {
      return _types2.StringLiteral;
    }
  });
  exports$2q.StringTypeAnnotation = StringTypeAnnotation;
  exports$2q.SymbolTypeAnnotation = SymbolTypeAnnotation;
  exports$2q.ThisTypeAnnotation = ThisTypeAnnotation;
  exports$2q.TupleTypeAnnotation = TupleTypeAnnotation;
  exports$2q.TypeAlias = TypeAlias;
  exports$2q.TypeAnnotation = TypeAnnotation;
  exports$2q.TypeCastExpression = TypeCastExpression;
  exports$2q.TypeParameter = TypeParameter;
  exports$2q.TypeParameterDeclaration = exports$2q.TypeParameterInstantiation = TypeParameterInstantiation;
  exports$2q.TypeofTypeAnnotation = TypeofTypeAnnotation;
  exports$2q.UnionTypeAnnotation = UnionTypeAnnotation;
  exports$2q.Variance = Variance;
  exports$2q.VoidTypeAnnotation = VoidTypeAnnotation;
  exports$2q._interfaceish = _interfaceish;
  exports$2q._variance = _variance;
  var _t = dew$3i();
  var _modules = dew$2s();
  var _index = dew$2y();
  var _types2 = dew$2q();
  const {
    isDeclareExportDeclaration,
    isStatement
  } = _t;
  function AnyTypeAnnotation() {
    this.word("any");
  }
  function ArrayTypeAnnotation(node) {
    this.print(node.elementType, node, true);
    this.tokenChar(91);
    this.tokenChar(93);
  }
  function BooleanTypeAnnotation() {
    this.word("boolean");
  }
  function BooleanLiteralTypeAnnotation(node) {
    this.word(node.value ? "true" : "false");
  }
  function NullLiteralTypeAnnotation() {
    this.word("null");
  }
  function DeclareClass(node, parent) {
    if (!isDeclareExportDeclaration(parent)) {
      this.word("declare");
      this.space();
    }
    this.word("class");
    this.space();
    this._interfaceish(node);
  }
  function DeclareFunction(node, parent) {
    if (!isDeclareExportDeclaration(parent)) {
      this.word("declare");
      this.space();
    }
    this.word("function");
    this.space();
    this.print(node.id, node);
    this.print(node.id.typeAnnotation.typeAnnotation, node);
    if (node.predicate) {
      this.space();
      this.print(node.predicate, node);
    }
    this.semicolon();
  }
  function InferredPredicate() {
    this.tokenChar(37);
    this.word("checks");
  }
  function DeclaredPredicate(node) {
    this.tokenChar(37);
    this.word("checks");
    this.tokenChar(40);
    this.print(node.value, node);
    this.tokenChar(41);
  }
  function DeclareInterface(node) {
    this.word("declare");
    this.space();
    this.InterfaceDeclaration(node);
  }
  function DeclareModule(node) {
    this.word("declare");
    this.space();
    this.word("module");
    this.space();
    this.print(node.id, node);
    this.space();
    this.print(node.body, node);
  }
  function DeclareModuleExports(node) {
    this.word("declare");
    this.space();
    this.word("module");
    this.tokenChar(46);
    this.word("exports");
    this.print(node.typeAnnotation, node);
  }
  function DeclareTypeAlias(node) {
    this.word("declare");
    this.space();
    this.TypeAlias(node);
  }
  function DeclareOpaqueType(node, parent) {
    if (!isDeclareExportDeclaration(parent)) {
      this.word("declare");
      this.space();
    }
    this.OpaqueType(node);
  }
  function DeclareVariable(node, parent) {
    if (!isDeclareExportDeclaration(parent)) {
      this.word("declare");
      this.space();
    }
    this.word("var");
    this.space();
    this.print(node.id, node);
    this.print(node.id.typeAnnotation, node);
    this.semicolon();
  }
  function DeclareExportDeclaration(node) {
    this.word("declare");
    this.space();
    this.word("export");
    this.space();
    if (node.default) {
      this.word("default");
      this.space();
    }
    FlowExportDeclaration.call(this, node);
  }
  function DeclareExportAllDeclaration(node) {
    this.word("declare");
    this.space();
    _modules.ExportAllDeclaration.call(this, node);
  }
  function EnumDeclaration(node) {
    const {
      id,
      body
    } = node;
    this.word("enum");
    this.space();
    this.print(id, node);
    this.print(body, node);
  }
  function enumExplicitType(context, name, hasExplicitType) {
    if (hasExplicitType) {
      context.space();
      context.word("of");
      context.space();
      context.word(name);
    }
    context.space();
  }
  function enumBody(context, node) {
    const {
      members
    } = node;
    context.token("{");
    context.indent();
    context.newline();
    for (const member of members) {
      context.print(member, node);
      context.newline();
    }
    if (node.hasUnknownMembers) {
      context.token("...");
      context.newline();
    }
    context.dedent();
    context.token("}");
  }
  function EnumBooleanBody(node) {
    const {
      explicitType
    } = node;
    enumExplicitType(this, "boolean", explicitType);
    enumBody(this, node);
  }
  function EnumNumberBody(node) {
    const {
      explicitType
    } = node;
    enumExplicitType(this, "number", explicitType);
    enumBody(this, node);
  }
  function EnumStringBody(node) {
    const {
      explicitType
    } = node;
    enumExplicitType(this, "string", explicitType);
    enumBody(this, node);
  }
  function EnumSymbolBody(node) {
    enumExplicitType(this, "symbol", true);
    enumBody(this, node);
  }
  function EnumDefaultedMember(node) {
    const {
      id
    } = node;
    this.print(id, node);
    this.tokenChar(44);
  }
  function enumInitializedMember(context, node) {
    const {
      id,
      init
    } = node;
    context.print(id, node);
    context.space();
    context.token("=");
    context.space();
    context.print(init, node);
    context.token(",");
  }
  function EnumBooleanMember(node) {
    enumInitializedMember(this, node);
  }
  function EnumNumberMember(node) {
    enumInitializedMember(this, node);
  }
  function EnumStringMember(node) {
    enumInitializedMember(this, node);
  }
  function FlowExportDeclaration(node) {
    if (node.declaration) {
      const declar = node.declaration;
      this.print(declar, node);
      if (!isStatement(declar)) this.semicolon();
    } else {
      this.tokenChar(123);
      if (node.specifiers.length) {
        this.space();
        this.printList(node.specifiers, node);
        this.space();
      }
      this.tokenChar(125);
      if (node.source) {
        this.space();
        this.word("from");
        this.space();
        this.print(node.source, node);
      }
      this.semicolon();
    }
  }
  function ExistsTypeAnnotation() {
    this.tokenChar(42);
  }
  function FunctionTypeAnnotation(node, parent) {
    this.print(node.typeParameters, node);
    this.tokenChar(40);
    if (node.this) {
      this.word("this");
      this.tokenChar(58);
      this.space();
      this.print(node.this.typeAnnotation, node);
      if (node.params.length || node.rest) {
        this.tokenChar(44);
        this.space();
      }
    }
    this.printList(node.params, node);
    if (node.rest) {
      if (node.params.length) {
        this.tokenChar(44);
        this.space();
      }
      this.token("...");
      this.print(node.rest, node);
    }
    this.tokenChar(41);
    const type = parent == null ? void 0 : parent.type;
    if (type != null && (type === "ObjectTypeCallProperty" || type === "ObjectTypeInternalSlot" || type === "DeclareFunction" || type === "ObjectTypeProperty" && parent.method)) {
      this.tokenChar(58);
    } else {
      this.space();
      this.token("=>");
    }
    this.space();
    this.print(node.returnType, node);
  }
  function FunctionTypeParam(node) {
    this.print(node.name, node);
    if (node.optional) this.tokenChar(63);
    if (node.name) {
      this.tokenChar(58);
      this.space();
    }
    this.print(node.typeAnnotation, node);
  }
  function InterfaceExtends(node) {
    this.print(node.id, node);
    this.print(node.typeParameters, node, true);
  }
  function _interfaceish(node) {
    var _node$extends;
    this.print(node.id, node);
    this.print(node.typeParameters, node);
    if ((_node$extends = node.extends) != null && _node$extends.length) {
      this.space();
      this.word("extends");
      this.space();
      this.printList(node.extends, node);
    }
    if (node.type === "DeclareClass") {
      var _node$mixins, _node$implements;
      if ((_node$mixins = node.mixins) != null && _node$mixins.length) {
        this.space();
        this.word("mixins");
        this.space();
        this.printList(node.mixins, node);
      }
      if ((_node$implements = node.implements) != null && _node$implements.length) {
        this.space();
        this.word("implements");
        this.space();
        this.printList(node.implements, node);
      }
    }
    this.space();
    this.print(node.body, node);
  }
  function _variance(node) {
    var _node$variance;
    const kind = (_node$variance = node.variance) == null ? void 0 : _node$variance.kind;
    if (kind != null) {
      if (kind === "plus") {
        this.tokenChar(43);
      } else if (kind === "minus") {
        this.tokenChar(45);
      }
    }
  }
  function InterfaceDeclaration(node) {
    this.word("interface");
    this.space();
    this._interfaceish(node);
  }
  function andSeparator() {
    this.space();
    this.tokenChar(38);
    this.space();
  }
  function InterfaceTypeAnnotation(node) {
    var _node$extends2;
    this.word("interface");
    if ((_node$extends2 = node.extends) != null && _node$extends2.length) {
      this.space();
      this.word("extends");
      this.space();
      this.printList(node.extends, node);
    }
    this.space();
    this.print(node.body, node);
  }
  function IntersectionTypeAnnotation(node) {
    this.printJoin(node.types, node, {
      separator: andSeparator
    });
  }
  function MixedTypeAnnotation() {
    this.word("mixed");
  }
  function EmptyTypeAnnotation() {
    this.word("empty");
  }
  function NullableTypeAnnotation(node) {
    this.tokenChar(63);
    this.print(node.typeAnnotation, node);
  }
  function NumberTypeAnnotation() {
    this.word("number");
  }
  function StringTypeAnnotation() {
    this.word("string");
  }
  function ThisTypeAnnotation() {
    this.word("this");
  }
  function TupleTypeAnnotation(node) {
    this.tokenChar(91);
    this.printList(node.types, node);
    this.tokenChar(93);
  }
  function TypeofTypeAnnotation(node) {
    this.word("typeof");
    this.space();
    this.print(node.argument, node);
  }
  function TypeAlias(node) {
    this.word("type");
    this.space();
    this.print(node.id, node);
    this.print(node.typeParameters, node);
    this.space();
    this.tokenChar(61);
    this.space();
    this.print(node.right, node);
    this.semicolon();
  }
  function TypeAnnotation(node, parent) {
    this.tokenChar(58);
    this.space();
    if (parent.type === "ArrowFunctionExpression") {
      this.tokenContext |= _index.TokenContext.arrowFlowReturnType;
    } else if (node.optional) {
      this.tokenChar(63);
    }
    this.print(node.typeAnnotation, node);
  }
  function TypeParameterInstantiation(node) {
    this.tokenChar(60);
    this.printList(node.params, node, {});
    this.tokenChar(62);
  }
  function TypeParameter(node) {
    this._variance(node);
    this.word(node.name);
    if (node.bound) {
      this.print(node.bound, node);
    }
    if (node.default) {
      this.space();
      this.tokenChar(61);
      this.space();
      this.print(node.default, node);
    }
  }
  function OpaqueType(node) {
    this.word("opaque");
    this.space();
    this.word("type");
    this.space();
    this.print(node.id, node);
    this.print(node.typeParameters, node);
    if (node.supertype) {
      this.tokenChar(58);
      this.space();
      this.print(node.supertype, node);
    }
    if (node.impltype) {
      this.space();
      this.tokenChar(61);
      this.space();
      this.print(node.impltype, node);
    }
    this.semicolon();
  }
  function ObjectTypeAnnotation(node) {
    if (node.exact) {
      this.token("{|");
    } else {
      this.tokenChar(123);
    }
    const props = [...node.properties, ...(node.callProperties || []), ...(node.indexers || []), ...(node.internalSlots || [])];
    if (props.length) {
      this.newline();
      this.space();
      this.printJoin(props, node, {
        addNewlines(leading) {
          if (leading && !props[0]) return 1;
        },
        indent: true,
        statement: true,
        iterator: () => {
          if (props.length !== 1 || node.inexact) {
            this.tokenChar(44);
            this.space();
          }
        }
      });
      this.space();
    }
    if (node.inexact) {
      this.indent();
      this.token("...");
      if (props.length) {
        this.newline();
      }
      this.dedent();
    }
    if (node.exact) {
      this.token("|}");
    } else {
      this.tokenChar(125);
    }
  }
  function ObjectTypeInternalSlot(node) {
    if (node.static) {
      this.word("static");
      this.space();
    }
    this.tokenChar(91);
    this.tokenChar(91);
    this.print(node.id, node);
    this.tokenChar(93);
    this.tokenChar(93);
    if (node.optional) this.tokenChar(63);
    if (!node.method) {
      this.tokenChar(58);
      this.space();
    }
    this.print(node.value, node);
  }
  function ObjectTypeCallProperty(node) {
    if (node.static) {
      this.word("static");
      this.space();
    }
    this.print(node.value, node);
  }
  function ObjectTypeIndexer(node) {
    if (node.static) {
      this.word("static");
      this.space();
    }
    this._variance(node);
    this.tokenChar(91);
    if (node.id) {
      this.print(node.id, node);
      this.tokenChar(58);
      this.space();
    }
    this.print(node.key, node);
    this.tokenChar(93);
    this.tokenChar(58);
    this.space();
    this.print(node.value, node);
  }
  function ObjectTypeProperty(node) {
    if (node.proto) {
      this.word("proto");
      this.space();
    }
    if (node.static) {
      this.word("static");
      this.space();
    }
    if (node.kind === "get" || node.kind === "set") {
      this.word(node.kind);
      this.space();
    }
    this._variance(node);
    this.print(node.key, node);
    if (node.optional) this.tokenChar(63);
    if (!node.method) {
      this.tokenChar(58);
      this.space();
    }
    this.print(node.value, node);
  }
  function ObjectTypeSpreadProperty(node) {
    this.token("...");
    this.print(node.argument, node);
  }
  function QualifiedTypeIdentifier(node) {
    this.print(node.qualification, node);
    this.tokenChar(46);
    this.print(node.id, node);
  }
  function SymbolTypeAnnotation() {
    this.word("symbol");
  }
  function orSeparator() {
    this.space();
    this.tokenChar(124);
    this.space();
  }
  function UnionTypeAnnotation(node) {
    this.printJoin(node.types, node, {
      separator: orSeparator
    });
  }
  function TypeCastExpression(node) {
    this.tokenChar(40);
    this.print(node.expression, node);
    this.print(node.typeAnnotation, node);
    this.tokenChar(41);
  }
  function Variance(node) {
    if (node.kind === "plus") {
      this.tokenChar(43);
    } else {
      this.tokenChar(45);
    }
  }
  function VoidTypeAnnotation() {
    this.word("void");
  }
  function IndexedAccessType(node) {
    this.print(node.objectType, node, true);
    this.tokenChar(91);
    this.print(node.indexType, node);
    this.tokenChar(93);
  }
  function OptionalIndexedAccessType(node) {
    this.print(node.objectType, node);
    if (node.optional) {
      this.token("?.");
    }
    this.tokenChar(91);
    this.print(node.indexType, node);
    this.tokenChar(93);
  }
  return exports$2q;
}

var exports$2p = {},
  _dewExec$2o = false;
function dew$2o() {
  if (_dewExec$2o) return exports$2p;
  _dewExec$2o = true;
  Object.defineProperty(exports$2p, "__esModule", {
    value: true
  });
  exports$2p.BlockStatement = BlockStatement;
  exports$2p.Directive = Directive;
  exports$2p.DirectiveLiteral = DirectiveLiteral;
  exports$2p.File = File;
  exports$2p.InterpreterDirective = InterpreterDirective;
  exports$2p.Placeholder = Placeholder;
  exports$2p.Program = Program;
  function File(node) {
    if (node.program) {
      this.print(node.program.interpreter, node);
    }
    this.print(node.program, node);
  }
  function Program(node) {
    var _node$directives;
    this.noIndentInnerCommentsHere();
    this.printInnerComments();
    const directivesLen = (_node$directives = node.directives) == null ? void 0 : _node$directives.length;
    if (directivesLen) {
      var _node$directives$trai;
      const newline = node.body.length ? 2 : 1;
      this.printSequence(node.directives, node, {
        trailingCommentsLineOffset: newline
      });
      if (!((_node$directives$trai = node.directives[directivesLen - 1].trailingComments) != null && _node$directives$trai.length)) {
        this.newline(newline);
      }
    }
    this.printSequence(node.body, node);
  }
  function BlockStatement(node) {
    var _node$directives2;
    this.tokenChar(123);
    const directivesLen = (_node$directives2 = node.directives) == null ? void 0 : _node$directives2.length;
    if (directivesLen) {
      var _node$directives$trai2;
      const newline = node.body.length ? 2 : 1;
      this.printSequence(node.directives, node, {
        indent: true,
        trailingCommentsLineOffset: newline
      });
      if (!((_node$directives$trai2 = node.directives[directivesLen - 1].trailingComments) != null && _node$directives$trai2.length)) {
        this.newline(newline);
      }
    }
    const exit = this.enterForStatementInit(false);
    this.printSequence(node.body, node, {
      indent: true
    });
    exit();
    this.rightBrace(node);
  }
  function Directive(node) {
    this.print(node.value, node);
    this.semicolon();
  }
  const unescapedSingleQuoteRE = /(?:^|[^\\])(?:\\\\)*'/;
  const unescapedDoubleQuoteRE = /(?:^|[^\\])(?:\\\\)*"/;
  function DirectiveLiteral(node) {
    const raw = this.getPossibleRaw(node);
    if (!this.format.minified && raw !== undefined) {
      this.token(raw);
      return;
    }
    const {
      value
    } = node;
    if (!unescapedDoubleQuoteRE.test(value)) {
      this.token(`"${value}"`);
    } else if (!unescapedSingleQuoteRE.test(value)) {
      this.token(`'${value}'`);
    } else {
      throw new Error("Malformed AST: it is not possible to print a directive containing" + " both unescaped single and double quotes.");
    }
  }
  function InterpreterDirective(node) {
    this.token(`#!${node.value}`);
    this.newline(1, true);
  }
  function Placeholder(node) {
    this.token("%%");
    this.print(node.name);
    this.token("%%");
    if (node.expectedNode === "Statement") {
      this.semicolon();
    }
  }
  return exports$2p;
}

var exports$2o = {},
  _dewExec$2n = false;
function dew$2n() {
  if (_dewExec$2n) return exports$2o;
  _dewExec$2n = true;
  Object.defineProperty(exports$2o, "__esModule", {
    value: true
  });
  exports$2o.JSXAttribute = JSXAttribute;
  exports$2o.JSXClosingElement = JSXClosingElement;
  exports$2o.JSXClosingFragment = JSXClosingFragment;
  exports$2o.JSXElement = JSXElement;
  exports$2o.JSXEmptyExpression = JSXEmptyExpression;
  exports$2o.JSXExpressionContainer = JSXExpressionContainer;
  exports$2o.JSXFragment = JSXFragment;
  exports$2o.JSXIdentifier = JSXIdentifier;
  exports$2o.JSXMemberExpression = JSXMemberExpression;
  exports$2o.JSXNamespacedName = JSXNamespacedName;
  exports$2o.JSXOpeningElement = JSXOpeningElement;
  exports$2o.JSXOpeningFragment = JSXOpeningFragment;
  exports$2o.JSXSpreadAttribute = JSXSpreadAttribute;
  exports$2o.JSXSpreadChild = JSXSpreadChild;
  exports$2o.JSXText = JSXText;
  function JSXAttribute(node) {
    this.print(node.name, node);
    if (node.value) {
      this.tokenChar(61);
      this.print(node.value, node);
    }
  }
  function JSXIdentifier(node) {
    this.word(node.name);
  }
  function JSXNamespacedName(node) {
    this.print(node.namespace, node);
    this.tokenChar(58);
    this.print(node.name, node);
  }
  function JSXMemberExpression(node) {
    this.print(node.object, node);
    this.tokenChar(46);
    this.print(node.property, node);
  }
  function JSXSpreadAttribute(node) {
    this.tokenChar(123);
    this.token("...");
    this.print(node.argument, node);
    this.tokenChar(125);
  }
  function JSXExpressionContainer(node) {
    this.tokenChar(123);
    this.print(node.expression, node);
    this.tokenChar(125);
  }
  function JSXSpreadChild(node) {
    this.tokenChar(123);
    this.token("...");
    this.print(node.expression, node);
    this.tokenChar(125);
  }
  function JSXText(node) {
    const raw = this.getPossibleRaw(node);
    if (raw !== undefined) {
      this.token(raw, true);
    } else {
      this.token(node.value, true);
    }
  }
  function JSXElement(node) {
    const open = node.openingElement;
    this.print(open, node);
    if (open.selfClosing) return;
    this.indent();
    for (const child of node.children) {
      this.print(child, node);
    }
    this.dedent();
    this.print(node.closingElement, node);
  }
  function spaceSeparator() {
    this.space();
  }
  function JSXOpeningElement(node) {
    this.tokenChar(60);
    this.print(node.name, node);
    this.print(node.typeParameters, node);
    if (node.attributes.length > 0) {
      this.space();
      this.printJoin(node.attributes, node, {
        separator: spaceSeparator
      });
    }
    if (node.selfClosing) {
      this.space();
      this.token("/>");
    } else {
      this.tokenChar(62);
    }
  }
  function JSXClosingElement(node) {
    this.token("</");
    this.print(node.name, node);
    this.tokenChar(62);
  }
  function JSXEmptyExpression() {
    this.printInnerComments();
  }
  function JSXFragment(node) {
    this.print(node.openingFragment, node);
    this.indent();
    for (const child of node.children) {
      this.print(child, node);
    }
    this.dedent();
    this.print(node.closingFragment, node);
  }
  function JSXOpeningFragment() {
    this.tokenChar(60);
    this.tokenChar(62);
  }
  function JSXClosingFragment() {
    this.token("</");
    this.tokenChar(62);
  }
  return exports$2o;
}

var exports$2n = {},
  _dewExec$2m = false;
function dew$2m() {
  if (_dewExec$2m) return exports$2n;
  _dewExec$2m = true;
  Object.defineProperty(exports$2n, "__esModule", {
    value: true
  });
  exports$2n.TSAnyKeyword = TSAnyKeyword;
  exports$2n.TSArrayType = TSArrayType;
  exports$2n.TSSatisfiesExpression = exports$2n.TSAsExpression = TSTypeExpression;
  exports$2n.TSBigIntKeyword = TSBigIntKeyword;
  exports$2n.TSBooleanKeyword = TSBooleanKeyword;
  exports$2n.TSCallSignatureDeclaration = TSCallSignatureDeclaration;
  exports$2n.TSConditionalType = TSConditionalType;
  exports$2n.TSConstructSignatureDeclaration = TSConstructSignatureDeclaration;
  exports$2n.TSConstructorType = TSConstructorType;
  exports$2n.TSDeclareFunction = TSDeclareFunction;
  exports$2n.TSDeclareMethod = TSDeclareMethod;
  exports$2n.TSEnumDeclaration = TSEnumDeclaration;
  exports$2n.TSEnumMember = TSEnumMember;
  exports$2n.TSExportAssignment = TSExportAssignment;
  exports$2n.TSExpressionWithTypeArguments = TSExpressionWithTypeArguments;
  exports$2n.TSExternalModuleReference = TSExternalModuleReference;
  exports$2n.TSFunctionType = TSFunctionType;
  exports$2n.TSImportEqualsDeclaration = TSImportEqualsDeclaration;
  exports$2n.TSImportType = TSImportType;
  exports$2n.TSIndexSignature = TSIndexSignature;
  exports$2n.TSIndexedAccessType = TSIndexedAccessType;
  exports$2n.TSInferType = TSInferType;
  exports$2n.TSInstantiationExpression = TSInstantiationExpression;
  exports$2n.TSInterfaceBody = TSInterfaceBody;
  exports$2n.TSInterfaceDeclaration = TSInterfaceDeclaration;
  exports$2n.TSIntersectionType = TSIntersectionType;
  exports$2n.TSIntrinsicKeyword = TSIntrinsicKeyword;
  exports$2n.TSLiteralType = TSLiteralType;
  exports$2n.TSMappedType = TSMappedType;
  exports$2n.TSMethodSignature = TSMethodSignature;
  exports$2n.TSModuleBlock = TSModuleBlock;
  exports$2n.TSModuleDeclaration = TSModuleDeclaration;
  exports$2n.TSNamedTupleMember = TSNamedTupleMember;
  exports$2n.TSNamespaceExportDeclaration = TSNamespaceExportDeclaration;
  exports$2n.TSNeverKeyword = TSNeverKeyword;
  exports$2n.TSNonNullExpression = TSNonNullExpression;
  exports$2n.TSNullKeyword = TSNullKeyword;
  exports$2n.TSNumberKeyword = TSNumberKeyword;
  exports$2n.TSObjectKeyword = TSObjectKeyword;
  exports$2n.TSOptionalType = TSOptionalType;
  exports$2n.TSParameterProperty = TSParameterProperty;
  exports$2n.TSParenthesizedType = TSParenthesizedType;
  exports$2n.TSPropertySignature = TSPropertySignature;
  exports$2n.TSQualifiedName = TSQualifiedName;
  exports$2n.TSRestType = TSRestType;
  exports$2n.TSStringKeyword = TSStringKeyword;
  exports$2n.TSSymbolKeyword = TSSymbolKeyword;
  exports$2n.TSThisType = TSThisType;
  exports$2n.TSTupleType = TSTupleType;
  exports$2n.TSTypeAliasDeclaration = TSTypeAliasDeclaration;
  exports$2n.TSTypeAnnotation = TSTypeAnnotation;
  exports$2n.TSTypeAssertion = TSTypeAssertion;
  exports$2n.TSTypeLiteral = TSTypeLiteral;
  exports$2n.TSTypeOperator = TSTypeOperator;
  exports$2n.TSTypeParameter = TSTypeParameter;
  exports$2n.TSTypeParameterDeclaration = exports$2n.TSTypeParameterInstantiation = TSTypeParameterInstantiation;
  exports$2n.TSTypePredicate = TSTypePredicate;
  exports$2n.TSTypeQuery = TSTypeQuery;
  exports$2n.TSTypeReference = TSTypeReference;
  exports$2n.TSUndefinedKeyword = TSUndefinedKeyword;
  exports$2n.TSUnionType = TSUnionType;
  exports$2n.TSUnknownKeyword = TSUnknownKeyword;
  exports$2n.TSVoidKeyword = TSVoidKeyword;
  exports$2n.tsPrintClassMemberModifiers = tsPrintClassMemberModifiers;
  exports$2n.tsPrintFunctionOrConstructorType = tsPrintFunctionOrConstructorType;
  exports$2n.tsPrintPropertyOrMethodName = tsPrintPropertyOrMethodName;
  exports$2n.tsPrintSignatureDeclarationBase = tsPrintSignatureDeclarationBase;
  exports$2n.tsPrintTypeLiteralOrInterfaceBody = tsPrintTypeLiteralOrInterfaceBody;
  function TSTypeAnnotation(node) {
    this.tokenChar(58);
    this.space();
    if (node.optional) this.tokenChar(63);
    this.print(node.typeAnnotation, node);
  }
  function TSTypeParameterInstantiation(node, parent) {
    this.tokenChar(60);
    this.printList(node.params, node, {});
    if (parent.type === "ArrowFunctionExpression" && node.params.length === 1) {
      this.tokenChar(44);
    }
    this.tokenChar(62);
  }
  function TSTypeParameter(node) {
    if (node.in) {
      this.word("in");
      this.space();
    }
    if (node.out) {
      this.word("out");
      this.space();
    }
    this.word(node.name);
    if (node.constraint) {
      this.space();
      this.word("extends");
      this.space();
      this.print(node.constraint, node);
    }
    if (node.default) {
      this.space();
      this.tokenChar(61);
      this.space();
      this.print(node.default, node);
    }
  }
  function TSParameterProperty(node) {
    if (node.accessibility) {
      this.word(node.accessibility);
      this.space();
    }
    if (node.readonly) {
      this.word("readonly");
      this.space();
    }
    this._param(node.parameter);
  }
  function TSDeclareFunction(node, parent) {
    if (node.declare) {
      this.word("declare");
      this.space();
    }
    this._functionHead(node, parent);
    this.tokenChar(59);
  }
  function TSDeclareMethod(node) {
    this._classMethodHead(node);
    this.tokenChar(59);
  }
  function TSQualifiedName(node) {
    this.print(node.left, node);
    this.tokenChar(46);
    this.print(node.right, node);
  }
  function TSCallSignatureDeclaration(node) {
    this.tsPrintSignatureDeclarationBase(node);
    this.tokenChar(59);
  }
  function TSConstructSignatureDeclaration(node) {
    this.word("new");
    this.space();
    this.tsPrintSignatureDeclarationBase(node);
    this.tokenChar(59);
  }
  function TSPropertySignature(node) {
    const {
      readonly
    } = node;
    if (readonly) {
      this.word("readonly");
      this.space();
    }
    this.tsPrintPropertyOrMethodName(node);
    this.print(node.typeAnnotation, node);
    this.tokenChar(59);
  }
  function tsPrintPropertyOrMethodName(node) {
    if (node.computed) {
      this.tokenChar(91);
    }
    this.print(node.key, node);
    if (node.computed) {
      this.tokenChar(93);
    }
    if (node.optional) {
      this.tokenChar(63);
    }
  }
  function TSMethodSignature(node) {
    const {
      kind
    } = node;
    if (kind === "set" || kind === "get") {
      this.word(kind);
      this.space();
    }
    this.tsPrintPropertyOrMethodName(node);
    this.tsPrintSignatureDeclarationBase(node);
    this.tokenChar(59);
  }
  function TSIndexSignature(node) {
    const {
      readonly,
      static: isStatic
    } = node;
    if (isStatic) {
      this.word("static");
      this.space();
    }
    if (readonly) {
      this.word("readonly");
      this.space();
    }
    this.tokenChar(91);
    this._parameters(node.parameters, node);
    this.tokenChar(93);
    this.print(node.typeAnnotation, node);
    this.tokenChar(59);
  }
  function TSAnyKeyword() {
    this.word("any");
  }
  function TSBigIntKeyword() {
    this.word("bigint");
  }
  function TSUnknownKeyword() {
    this.word("unknown");
  }
  function TSNumberKeyword() {
    this.word("number");
  }
  function TSObjectKeyword() {
    this.word("object");
  }
  function TSBooleanKeyword() {
    this.word("boolean");
  }
  function TSStringKeyword() {
    this.word("string");
  }
  function TSSymbolKeyword() {
    this.word("symbol");
  }
  function TSVoidKeyword() {
    this.word("void");
  }
  function TSUndefinedKeyword() {
    this.word("undefined");
  }
  function TSNullKeyword() {
    this.word("null");
  }
  function TSNeverKeyword() {
    this.word("never");
  }
  function TSIntrinsicKeyword() {
    this.word("intrinsic");
  }
  function TSThisType() {
    this.word("this");
  }
  function TSFunctionType(node) {
    this.tsPrintFunctionOrConstructorType(node);
  }
  function TSConstructorType(node) {
    if (node.abstract) {
      this.word("abstract");
      this.space();
    }
    this.word("new");
    this.space();
    this.tsPrintFunctionOrConstructorType(node);
  }
  function tsPrintFunctionOrConstructorType(node) {
    const {
      typeParameters
    } = node;
    const parameters = node.parameters;
    this.print(typeParameters, node);
    this.tokenChar(40);
    this._parameters(parameters, node);
    this.tokenChar(41);
    this.space();
    this.token("=>");
    this.space();
    const returnType = node.typeAnnotation;
    this.print(returnType.typeAnnotation, node);
  }
  function TSTypeReference(node) {
    this.print(node.typeName, node, true);
    this.print(node.typeParameters, node, true);
  }
  function TSTypePredicate(node) {
    if (node.asserts) {
      this.word("asserts");
      this.space();
    }
    this.print(node.parameterName);
    if (node.typeAnnotation) {
      this.space();
      this.word("is");
      this.space();
      this.print(node.typeAnnotation.typeAnnotation);
    }
  }
  function TSTypeQuery(node) {
    this.word("typeof");
    this.space();
    this.print(node.exprName);
    if (node.typeParameters) {
      this.print(node.typeParameters, node);
    }
  }
  function TSTypeLiteral(node) {
    this.tsPrintTypeLiteralOrInterfaceBody(node.members, node);
  }
  function tsPrintTypeLiteralOrInterfaceBody(members, node) {
    tsPrintBraced(this, members, node);
  }
  function tsPrintBraced(printer, members, node) {
    printer.token("{");
    if (members.length) {
      printer.indent();
      printer.newline();
      for (const member of members) {
        printer.print(member, node);
        printer.newline();
      }
      printer.dedent();
    }
    printer.rightBrace(node);
  }
  function TSArrayType(node) {
    this.print(node.elementType, node, true);
    this.token("[]");
  }
  function TSTupleType(node) {
    this.tokenChar(91);
    this.printList(node.elementTypes, node);
    this.tokenChar(93);
  }
  function TSOptionalType(node) {
    this.print(node.typeAnnotation, node);
    this.tokenChar(63);
  }
  function TSRestType(node) {
    this.token("...");
    this.print(node.typeAnnotation, node);
  }
  function TSNamedTupleMember(node) {
    this.print(node.label, node);
    if (node.optional) this.tokenChar(63);
    this.tokenChar(58);
    this.space();
    this.print(node.elementType, node);
  }
  function TSUnionType(node) {
    tsPrintUnionOrIntersectionType(this, node, "|");
  }
  function TSIntersectionType(node) {
    tsPrintUnionOrIntersectionType(this, node, "&");
  }
  function tsPrintUnionOrIntersectionType(printer, node, sep) {
    printer.printJoin(node.types, node, {
      separator() {
        this.space();
        this.token(sep);
        this.space();
      }
    });
  }
  function TSConditionalType(node) {
    this.print(node.checkType);
    this.space();
    this.word("extends");
    this.space();
    this.print(node.extendsType);
    this.space();
    this.tokenChar(63);
    this.space();
    this.print(node.trueType);
    this.space();
    this.tokenChar(58);
    this.space();
    this.print(node.falseType);
  }
  function TSInferType(node) {
    this.token("infer");
    this.space();
    this.print(node.typeParameter);
  }
  function TSParenthesizedType(node) {
    this.tokenChar(40);
    this.print(node.typeAnnotation, node);
    this.tokenChar(41);
  }
  function TSTypeOperator(node) {
    this.word(node.operator);
    this.space();
    this.print(node.typeAnnotation, node);
  }
  function TSIndexedAccessType(node) {
    this.print(node.objectType, node, true);
    this.tokenChar(91);
    this.print(node.indexType, node);
    this.tokenChar(93);
  }
  function TSMappedType(node) {
    const {
      nameType,
      optional,
      readonly,
      typeParameter,
      typeAnnotation
    } = node;
    this.tokenChar(123);
    this.space();
    if (readonly) {
      tokenIfPlusMinus(this, readonly);
      this.word("readonly");
      this.space();
    }
    this.tokenChar(91);
    this.word(typeParameter.name);
    this.space();
    this.word("in");
    this.space();
    this.print(typeParameter.constraint, typeParameter);
    if (nameType) {
      this.space();
      this.word("as");
      this.space();
      this.print(nameType, node);
    }
    this.tokenChar(93);
    if (optional) {
      tokenIfPlusMinus(this, optional);
      this.tokenChar(63);
    }
    if (typeAnnotation) {
      this.tokenChar(58);
      this.space();
      this.print(typeAnnotation, node);
    }
    this.space();
    this.tokenChar(125);
  }
  function tokenIfPlusMinus(self, tok) {
    if (tok !== true) {
      self.token(tok);
    }
  }
  function TSLiteralType(node) {
    this.print(node.literal, node);
  }
  function TSExpressionWithTypeArguments(node) {
    this.print(node.expression, node);
    this.print(node.typeParameters, node);
  }
  function TSInterfaceDeclaration(node) {
    const {
      declare,
      id,
      typeParameters,
      extends: extendz,
      body
    } = node;
    if (declare) {
      this.word("declare");
      this.space();
    }
    this.word("interface");
    this.space();
    this.print(id, node);
    this.print(typeParameters, node);
    if (extendz != null && extendz.length) {
      this.space();
      this.word("extends");
      this.space();
      this.printList(extendz, node);
    }
    this.space();
    this.print(body, node);
  }
  function TSInterfaceBody(node) {
    this.tsPrintTypeLiteralOrInterfaceBody(node.body, node);
  }
  function TSTypeAliasDeclaration(node) {
    const {
      declare,
      id,
      typeParameters,
      typeAnnotation
    } = node;
    if (declare) {
      this.word("declare");
      this.space();
    }
    this.word("type");
    this.space();
    this.print(id, node);
    this.print(typeParameters, node);
    this.space();
    this.tokenChar(61);
    this.space();
    this.print(typeAnnotation, node);
    this.tokenChar(59);
  }
  function TSTypeExpression(node) {
    var _expression$trailingC;
    const {
      type,
      expression,
      typeAnnotation
    } = node;
    const forceParens = !!((_expression$trailingC = expression.trailingComments) != null && _expression$trailingC.length);
    this.print(expression, node, true, undefined, forceParens);
    this.space();
    this.word(type === "TSAsExpression" ? "as" : "satisfies");
    this.space();
    this.print(typeAnnotation, node);
  }
  function TSTypeAssertion(node) {
    const {
      typeAnnotation,
      expression
    } = node;
    this.tokenChar(60);
    this.print(typeAnnotation, node);
    this.tokenChar(62);
    this.space();
    this.print(expression, node);
  }
  function TSInstantiationExpression(node) {
    this.print(node.expression, node);
    this.print(node.typeParameters, node);
  }
  function TSEnumDeclaration(node) {
    const {
      declare,
      const: isConst,
      id,
      members
    } = node;
    if (declare) {
      this.word("declare");
      this.space();
    }
    if (isConst) {
      this.word("const");
      this.space();
    }
    this.word("enum");
    this.space();
    this.print(id, node);
    this.space();
    tsPrintBraced(this, members, node);
  }
  function TSEnumMember(node) {
    const {
      id,
      initializer
    } = node;
    this.print(id, node);
    if (initializer) {
      this.space();
      this.tokenChar(61);
      this.space();
      this.print(initializer, node);
    }
    this.tokenChar(44);
  }
  function TSModuleDeclaration(node) {
    const {
      declare,
      id
    } = node;
    if (declare) {
      this.word("declare");
      this.space();
    }
    if (!node.global) {
      this.word(id.type === "Identifier" ? "namespace" : "module");
      this.space();
    }
    this.print(id, node);
    if (!node.body) {
      this.tokenChar(59);
      return;
    }
    let body = node.body;
    while (body.type === "TSModuleDeclaration") {
      this.tokenChar(46);
      this.print(body.id, body);
      body = body.body;
    }
    this.space();
    this.print(body, node);
  }
  function TSModuleBlock(node) {
    tsPrintBraced(this, node.body, node);
  }
  function TSImportType(node) {
    const {
      argument,
      qualifier,
      typeParameters
    } = node;
    this.word("import");
    this.tokenChar(40);
    this.print(argument, node);
    this.tokenChar(41);
    if (qualifier) {
      this.tokenChar(46);
      this.print(qualifier, node);
    }
    if (typeParameters) {
      this.print(typeParameters, node);
    }
  }
  function TSImportEqualsDeclaration(node) {
    const {
      isExport,
      id,
      moduleReference
    } = node;
    if (isExport) {
      this.word("export");
      this.space();
    }
    this.word("import");
    this.space();
    this.print(id, node);
    this.space();
    this.tokenChar(61);
    this.space();
    this.print(moduleReference, node);
    this.tokenChar(59);
  }
  function TSExternalModuleReference(node) {
    this.token("require(");
    this.print(node.expression, node);
    this.tokenChar(41);
  }
  function TSNonNullExpression(node) {
    this.print(node.expression, node);
    this.tokenChar(33);
  }
  function TSExportAssignment(node) {
    this.word("export");
    this.space();
    this.tokenChar(61);
    this.space();
    this.print(node.expression, node);
    this.tokenChar(59);
  }
  function TSNamespaceExportDeclaration(node) {
    this.word("export");
    this.space();
    this.word("as");
    this.space();
    this.word("namespace");
    this.space();
    this.print(node.id, node);
  }
  function tsPrintSignatureDeclarationBase(node) {
    const {
      typeParameters
    } = node;
    const parameters = node.parameters;
    this.print(typeParameters, node);
    this.tokenChar(40);
    this._parameters(parameters, node);
    this.tokenChar(41);
    const returnType = node.typeAnnotation;
    this.print(returnType, node);
  }
  function tsPrintClassMemberModifiers(node) {
    const isField = node.type === "ClassAccessorProperty" || node.type === "ClassProperty";
    if (isField && node.declare) {
      this.word("declare");
      this.space();
    }
    if (node.accessibility) {
      this.word(node.accessibility);
      this.space();
    }
    if (node.static) {
      this.word("static");
      this.space();
    }
    if (node.override) {
      this.word("override");
      this.space();
    }
    if (node.abstract) {
      this.word("abstract");
      this.space();
    }
    if (isField && node.readonly) {
      this.word("readonly");
      this.space();
    }
  }
  return exports$2n;
}

var exports$2m = {},
  _dewExec$2l = false;
function dew$2l() {
  if (_dewExec$2l) return exports$2m;
  _dewExec$2l = true;
  Object.defineProperty(exports$2m, "__esModule", {
    value: true
  });
  var _templateLiterals = dew$2x();
  Object.keys(_templateLiterals).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports$2m && exports$2m[key] === _templateLiterals[key]) return;
    Object.defineProperty(exports$2m, key, {
      enumerable: true,
      get: function () {
        return _templateLiterals[key];
      }
    });
  });
  var _expressions = dew$2w();
  Object.keys(_expressions).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports$2m && exports$2m[key] === _expressions[key]) return;
    Object.defineProperty(exports$2m, key, {
      enumerable: true,
      get: function () {
        return _expressions[key];
      }
    });
  });
  var _statements = dew$2v();
  Object.keys(_statements).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports$2m && exports$2m[key] === _statements[key]) return;
    Object.defineProperty(exports$2m, key, {
      enumerable: true,
      get: function () {
        return _statements[key];
      }
    });
  });
  var _classes = dew$2u();
  Object.keys(_classes).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports$2m && exports$2m[key] === _classes[key]) return;
    Object.defineProperty(exports$2m, key, {
      enumerable: true,
      get: function () {
        return _classes[key];
      }
    });
  });
  var _methods = dew$2t();
  Object.keys(_methods).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports$2m && exports$2m[key] === _methods[key]) return;
    Object.defineProperty(exports$2m, key, {
      enumerable: true,
      get: function () {
        return _methods[key];
      }
    });
  });
  var _modules = dew$2s();
  Object.keys(_modules).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports$2m && exports$2m[key] === _modules[key]) return;
    Object.defineProperty(exports$2m, key, {
      enumerable: true,
      get: function () {
        return _modules[key];
      }
    });
  });
  var _types = dew$2q();
  Object.keys(_types).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports$2m && exports$2m[key] === _types[key]) return;
    Object.defineProperty(exports$2m, key, {
      enumerable: true,
      get: function () {
        return _types[key];
      }
    });
  });
  var _flow = dew$2p();
  Object.keys(_flow).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports$2m && exports$2m[key] === _flow[key]) return;
    Object.defineProperty(exports$2m, key, {
      enumerable: true,
      get: function () {
        return _flow[key];
      }
    });
  });
  var _base = dew$2o();
  Object.keys(_base).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports$2m && exports$2m[key] === _base[key]) return;
    Object.defineProperty(exports$2m, key, {
      enumerable: true,
      get: function () {
        return _base[key];
      }
    });
  });
  var _jsx = dew$2n();
  Object.keys(_jsx).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports$2m && exports$2m[key] === _jsx[key]) return;
    Object.defineProperty(exports$2m, key, {
      enumerable: true,
      get: function () {
        return _jsx[key];
      }
    });
  });
  var _typescript = dew$2m();
  Object.keys(_typescript).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports$2m && exports$2m[key] === _typescript[key]) return;
    Object.defineProperty(exports$2m, key, {
      enumerable: true,
      get: function () {
        return _typescript[key];
      }
    });
  });
  return exports$2m;
}

var exports$2l = {},
  _dewExec$2k = false;
function dew$2k() {
  if (_dewExec$2k) return exports$2l;
  _dewExec$2k = true;
  Object.defineProperty(exports$2l, "__esModule", {
    value: true
  });
  exports$2l.default = void 0;
  var _buffer = dew$2B();
  var n = dew$2y();
  var _t = dew$3i();
  var generatorFunctions = dew$2l();
  const {
    isFunction,
    isStatement,
    isClassBody,
    isTSInterfaceBody,
    isTSEnumDeclaration
  } = _t;
  const SCIENTIFIC_NOTATION = /e/i;
  const ZERO_DECIMAL_INTEGER = /\.0+$/;
  const HAS_NEWLINE = /[\n\r\u2028\u2029]/;
  const HAS_NEWLINE_OR_BlOCK_COMMENT_END = /[\n\r\u2028\u2029]|\*\//;
  const {
    needsParens
  } = n;
  class Printer {
    constructor(format, map) {
      this.inForStatementInit = false;
      this.tokenContext = 0;
      this._currentNode = null;
      this._indent = 0;
      this._indentRepeat = 0;
      this._insideAux = false;
      this._parenPushNewlineState = null;
      this._noLineTerminator = false;
      this._printAuxAfterOnNextUserNode = false;
      this._printedComments = new Set();
      this._endsWithInteger = false;
      this._endsWithWord = false;
      this._lastCommentLine = 0;
      this._endsWithInnerRaw = false;
      this._indentInnerComments = true;
      this.format = format;
      this._indentRepeat = format.indent.style.length;
      this._inputMap = map == null ? void 0 : map._inputMap;
      this._buf = new _buffer.default(map, format.indent.style[0]);
    }
    enterForStatementInit(val) {
      const old = this.inForStatementInit;
      if (old === val) return () => {};
      this.inForStatementInit = val;
      return () => {
        this.inForStatementInit = old;
      };
    }
    generate(ast) {
      this.print(ast);
      this._maybeAddAuxComment();
      return this._buf.get();
    }
    indent() {
      if (this.format.compact || this.format.concise) return;
      this._indent++;
    }
    dedent() {
      if (this.format.compact || this.format.concise) return;
      this._indent--;
    }
    semicolon(force = false) {
      this._maybeAddAuxComment();
      if (force) {
        this._appendChar(59);
      } else {
        this._queue(59);
      }
      this._noLineTerminator = false;
    }
    rightBrace(node) {
      if (this.format.minified) {
        this._buf.removeLastSemicolon();
      }
      this.sourceWithOffset("end", node.loc, -1);
      this.tokenChar(125);
    }
    rightParens(node) {
      this.sourceWithOffset("end", node.loc, -1);
      this.tokenChar(41);
    }
    space(force = false) {
      if (this.format.compact) return;
      if (force) {
        this._space();
      } else if (this._buf.hasContent()) {
        const lastCp = this.getLastChar();
        if (lastCp !== 32 && lastCp !== 10) {
          this._space();
        }
      }
    }
    word(str, noLineTerminatorAfter = false) {
      this.tokenContext = 0;
      this._maybePrintInnerComments();
      if (this._endsWithWord || str.charCodeAt(0) === 47 && this.endsWith(47)) {
        this._space();
      }
      this._maybeAddAuxComment();
      this._append(str, false);
      this._endsWithWord = true;
      this._noLineTerminator = noLineTerminatorAfter;
    }
    number(str, number) {
      function isNonDecimalLiteral(str) {
        if (str.length > 2 && str.charCodeAt(0) === 48) {
          const secondChar = str.charCodeAt(1);
          return secondChar === 98 || secondChar === 111 || secondChar === 120;
        }
        return false;
      }
      this.word(str);
      this._endsWithInteger = Number.isInteger(number) && !isNonDecimalLiteral(str) && !SCIENTIFIC_NOTATION.test(str) && !ZERO_DECIMAL_INTEGER.test(str) && str.charCodeAt(str.length - 1) !== 46;
    }
    token(str, maybeNewline = false) {
      this.tokenContext = 0;
      this._maybePrintInnerComments();
      const lastChar = this.getLastChar();
      const strFirst = str.charCodeAt(0);
      if (lastChar === 33 && (str === "--" || strFirst === 61) || strFirst === 43 && lastChar === 43 || strFirst === 45 && lastChar === 45 || strFirst === 46 && this._endsWithInteger) {
        this._space();
      }
      this._maybeAddAuxComment();
      this._append(str, maybeNewline);
      this._noLineTerminator = false;
    }
    tokenChar(char) {
      this.tokenContext = 0;
      this._maybePrintInnerComments();
      const lastChar = this.getLastChar();
      if (char === 43 && lastChar === 43 || char === 45 && lastChar === 45 || char === 46 && this._endsWithInteger) {
        this._space();
      }
      this._maybeAddAuxComment();
      this._appendChar(char);
      this._noLineTerminator = false;
    }
    newline(i = 1, force) {
      if (i <= 0) return;
      if (!force) {
        if (this.format.retainLines || this.format.compact) return;
        if (this.format.concise) {
          this.space();
          return;
        }
      }
      if (i > 2) i = 2;
      i -= this._buf.getNewlineCount();
      for (let j = 0; j < i; j++) {
        this._newline();
      }
      return;
    }
    endsWith(char) {
      return this.getLastChar() === char;
    }
    getLastChar() {
      return this._buf.getLastChar();
    }
    endsWithCharAndNewline() {
      return this._buf.endsWithCharAndNewline();
    }
    removeTrailingNewline() {
      this._buf.removeTrailingNewline();
    }
    exactSource(loc, cb) {
      if (!loc) {
        cb();
        return;
      }
      this._catchUp("start", loc);
      this._buf.exactSource(loc, cb);
    }
    source(prop, loc) {
      if (!loc) return;
      this._catchUp(prop, loc);
      this._buf.source(prop, loc);
    }
    sourceWithOffset(prop, loc, columnOffset) {
      if (!loc) return;
      this._catchUp(prop, loc);
      this._buf.sourceWithOffset(prop, loc, columnOffset);
    }
    sourceIdentifierName(identifierName, pos) {
      if (!this._buf._canMarkIdName) return;
      const sourcePosition = this._buf._sourcePosition;
      sourcePosition.identifierNamePos = pos;
      sourcePosition.identifierName = identifierName;
    }
    _space() {
      this._queue(32);
    }
    _newline() {
      this._queue(10);
    }
    _append(str, maybeNewline) {
      this._maybeAddParen(str);
      this._maybeIndent(str.charCodeAt(0));
      this._buf.append(str, maybeNewline);
      this._endsWithWord = false;
      this._endsWithInteger = false;
    }
    _appendChar(char) {
      this._maybeAddParenChar(char);
      this._maybeIndent(char);
      this._buf.appendChar(char);
      this._endsWithWord = false;
      this._endsWithInteger = false;
    }
    _queue(char) {
      this._maybeAddParenChar(char);
      this._maybeIndent(char);
      this._buf.queue(char);
      this._endsWithWord = false;
      this._endsWithInteger = false;
    }
    _maybeIndent(firstChar) {
      if (this._indent && firstChar !== 10 && this.endsWith(10)) {
        this._buf.queueIndentation(this._getIndent());
      }
    }
    _shouldIndent(firstChar) {
      if (this._indent && firstChar !== 10 && this.endsWith(10)) {
        return true;
      }
    }
    _maybeAddParenChar(char) {
      const parenPushNewlineState = this._parenPushNewlineState;
      if (!parenPushNewlineState) return;
      if (char === 32) {
        return;
      }
      if (char !== 10) {
        this._parenPushNewlineState = null;
        return;
      }
      this.tokenChar(40);
      this.indent();
      parenPushNewlineState.printed = true;
    }
    _maybeAddParen(str) {
      const parenPushNewlineState = this._parenPushNewlineState;
      if (!parenPushNewlineState) return;
      const len = str.length;
      let i;
      for (i = 0; i < len && str.charCodeAt(i) === 32; i++) continue;
      if (i === len) {
        return;
      }
      const cha = str.charCodeAt(i);
      if (cha !== 10) {
        if (cha !== 47 || i + 1 === len) {
          this._parenPushNewlineState = null;
          return;
        }
        const chaPost = str.charCodeAt(i + 1);
        if (chaPost === 42) {
          return;
        } else if (chaPost !== 47) {
          this._parenPushNewlineState = null;
          return;
        }
      }
      this.tokenChar(40);
      this.indent();
      parenPushNewlineState.printed = true;
    }
    catchUp(line) {
      if (!this.format.retainLines) return;
      const count = line - this._buf.getCurrentLine();
      for (let i = 0; i < count; i++) {
        this._newline();
      }
    }
    _catchUp(prop, loc) {
      var _loc$prop;
      if (!this.format.retainLines) return;
      const line = loc == null || (_loc$prop = loc[prop]) == null ? void 0 : _loc$prop.line;
      if (line != null) {
        const count = line - this._buf.getCurrentLine();
        for (let i = 0; i < count; i++) {
          this._newline();
        }
      }
    }
    _getIndent() {
      return this._indentRepeat * this._indent;
    }
    printTerminatorless(node, parent, isLabel) {
      if (isLabel) {
        this._noLineTerminator = true;
        this.print(node, parent);
      } else {
        const terminatorState = {
          printed: false
        };
        this._parenPushNewlineState = terminatorState;
        this.print(node, parent);
        if (terminatorState.printed) {
          this.dedent();
          this.newline();
          this.tokenChar(41);
        }
      }
    }
    print(node, parent, noLineTerminatorAfter, trailingCommentsLineOffset, forceParens) {
      var _node$extra, _node$leadingComments;
      if (!node) return;
      this._endsWithInnerRaw = false;
      const nodeType = node.type;
      const format = this.format;
      const oldConcise = format.concise;
      if (node._compact) {
        format.concise = true;
      }
      const printMethod = this[nodeType];
      if (printMethod === undefined) {
        throw new ReferenceError(`unknown node of type ${JSON.stringify(nodeType)} with constructor ${JSON.stringify(node.constructor.name)}`);
      }
      const oldNode = this._currentNode;
      this._currentNode = node;
      const oldInAux = this._insideAux;
      this._insideAux = node.loc == null;
      this._maybeAddAuxComment(this._insideAux && !oldInAux);
      const parenthesized = (_node$extra = node.extra) == null ? void 0 : _node$extra.parenthesized;
      let shouldPrintParens = forceParens || parenthesized && format.retainFunctionParens && nodeType === "FunctionExpression" || needsParens(node, parent, this.tokenContext, this.inForStatementInit);
      if (!shouldPrintParens && parenthesized && (_node$leadingComments = node.leadingComments) != null && _node$leadingComments.length && node.leadingComments[0].type === "CommentBlock") {
        const parentType = parent == null ? void 0 : parent.type;
        switch (parentType) {
          case "ExpressionStatement":
          case "VariableDeclarator":
          case "AssignmentExpression":
          case "ReturnStatement":
            break;
          case "CallExpression":
          case "OptionalCallExpression":
          case "NewExpression":
            if (parent.callee !== node) break;
          default:
            shouldPrintParens = true;
        }
      }
      let exitInForStatementInit;
      if (shouldPrintParens) {
        this.tokenChar(40);
        this._endsWithInnerRaw = false;
        exitInForStatementInit = this.enterForStatementInit(false);
      }
      this._lastCommentLine = 0;
      this._printLeadingComments(node, parent);
      const loc = nodeType === "Program" || nodeType === "File" ? null : node.loc;
      this.exactSource(loc, printMethod.bind(this, node, parent));
      if (shouldPrintParens) {
        this._printTrailingComments(node, parent);
        this.tokenChar(41);
        this._noLineTerminator = noLineTerminatorAfter;
        exitInForStatementInit();
      } else if (noLineTerminatorAfter && !this._noLineTerminator) {
        this._noLineTerminator = true;
        this._printTrailingComments(node, parent);
      } else {
        this._printTrailingComments(node, parent, trailingCommentsLineOffset);
      }
      this._currentNode = oldNode;
      format.concise = oldConcise;
      this._insideAux = oldInAux;
      this._endsWithInnerRaw = false;
    }
    _maybeAddAuxComment(enteredPositionlessNode) {
      if (enteredPositionlessNode) this._printAuxBeforeComment();
      if (!this._insideAux) this._printAuxAfterComment();
    }
    _printAuxBeforeComment() {
      if (this._printAuxAfterOnNextUserNode) return;
      this._printAuxAfterOnNextUserNode = true;
      const comment = this.format.auxiliaryCommentBefore;
      if (comment) {
        this._printComment({
          type: "CommentBlock",
          value: comment
        }, 0);
      }
    }
    _printAuxAfterComment() {
      if (!this._printAuxAfterOnNextUserNode) return;
      this._printAuxAfterOnNextUserNode = false;
      const comment = this.format.auxiliaryCommentAfter;
      if (comment) {
        this._printComment({
          type: "CommentBlock",
          value: comment
        }, 0);
      }
    }
    getPossibleRaw(node) {
      const extra = node.extra;
      if ((extra == null ? void 0 : extra.raw) != null && extra.rawValue != null && node.value === extra.rawValue) {
        return extra.raw;
      }
    }
    printJoin(nodes, parent, opts = {}) {
      if (!(nodes != null && nodes.length)) return;
      let {
        indent
      } = opts;
      if (indent == null && this.format.retainLines) {
        var _nodes$0$loc;
        const startLine = (_nodes$0$loc = nodes[0].loc) == null ? void 0 : _nodes$0$loc.start.line;
        if (startLine != null && startLine !== this._buf.getCurrentLine()) {
          indent = true;
        }
      }
      if (indent) this.indent();
      const newlineOpts = {
        addNewlines: opts.addNewlines,
        nextNodeStartLine: 0
      };
      const separator = opts.separator ? opts.separator.bind(this) : null;
      const len = nodes.length;
      for (let i = 0; i < len; i++) {
        const node = nodes[i];
        if (!node) continue;
        if (opts.statement) this._printNewline(i === 0, newlineOpts);
        this.print(node, parent, undefined, opts.trailingCommentsLineOffset || 0);
        opts.iterator == null || opts.iterator(node, i);
        if (i < len - 1) separator == null || separator();
        if (opts.statement) {
          var _node$trailingComment;
          if (!((_node$trailingComment = node.trailingComments) != null && _node$trailingComment.length)) {
            this._lastCommentLine = 0;
          }
          if (i + 1 === len) {
            this.newline(1);
          } else {
            var _nextNode$loc;
            const nextNode = nodes[i + 1];
            newlineOpts.nextNodeStartLine = ((_nextNode$loc = nextNode.loc) == null ? void 0 : _nextNode$loc.start.line) || 0;
            this._printNewline(true, newlineOpts);
          }
        }
      }
      if (indent) this.dedent();
    }
    printAndIndentOnComments(node, parent) {
      const indent = node.leadingComments && node.leadingComments.length > 0;
      if (indent) this.indent();
      this.print(node, parent);
      if (indent) this.dedent();
    }
    printBlock(parent) {
      const node = parent.body;
      if (node.type !== "EmptyStatement") {
        this.space();
      }
      this.print(node, parent);
    }
    _printTrailingComments(node, parent, lineOffset) {
      const {
        innerComments,
        trailingComments
      } = node;
      if (innerComments != null && innerComments.length) {
        this._printComments(2, innerComments, node, parent, lineOffset);
      }
      if (trailingComments != null && trailingComments.length) {
        this._printComments(2, trailingComments, node, parent, lineOffset);
      }
    }
    _printLeadingComments(node, parent) {
      const comments = node.leadingComments;
      if (!(comments != null && comments.length)) return;
      this._printComments(0, comments, node, parent);
    }
    _maybePrintInnerComments() {
      if (this._endsWithInnerRaw) this.printInnerComments();
      this._endsWithInnerRaw = true;
      this._indentInnerComments = true;
    }
    printInnerComments() {
      const node = this._currentNode;
      const comments = node.innerComments;
      if (!(comments != null && comments.length)) return;
      const hasSpace = this.endsWith(32);
      const indent = this._indentInnerComments;
      const printedCommentsCount = this._printedComments.size;
      if (indent) this.indent();
      this._printComments(1, comments, node);
      if (hasSpace && printedCommentsCount !== this._printedComments.size) {
        this.space();
      }
      if (indent) this.dedent();
    }
    noIndentInnerCommentsHere() {
      this._indentInnerComments = false;
    }
    printSequence(nodes, parent, opts = {}) {
      var _opts$indent;
      opts.statement = true;
      (_opts$indent = opts.indent) != null ? _opts$indent : opts.indent = false;
      this.printJoin(nodes, parent, opts);
    }
    printList(items, parent, opts = {}) {
      if (opts.separator == null) {
        opts.separator = commaSeparator;
      }
      this.printJoin(items, parent, opts);
    }
    _printNewline(newLine, opts) {
      const format = this.format;
      if (format.retainLines || format.compact) return;
      if (format.concise) {
        this.space();
        return;
      }
      if (!newLine) {
        return;
      }
      const startLine = opts.nextNodeStartLine;
      const lastCommentLine = this._lastCommentLine;
      if (startLine > 0 && lastCommentLine > 0) {
        const offset = startLine - lastCommentLine;
        if (offset >= 0) {
          this.newline(offset || 1);
          return;
        }
      }
      if (this._buf.hasContent()) {
        this.newline(1);
      }
    }
    _shouldPrintComment(comment) {
      if (comment.ignore) return 0;
      if (this._printedComments.has(comment)) return 0;
      if (this._noLineTerminator && HAS_NEWLINE_OR_BlOCK_COMMENT_END.test(comment.value)) {
        return 2;
      }
      this._printedComments.add(comment);
      if (!this.format.shouldPrintComment(comment.value)) {
        return 0;
      }
      return 1;
    }
    _printComment(comment, skipNewLines) {
      const noLineTerminator = this._noLineTerminator;
      const isBlockComment = comment.type === "CommentBlock";
      const printNewLines = isBlockComment && skipNewLines !== 1 && !this._noLineTerminator;
      if (printNewLines && this._buf.hasContent() && skipNewLines !== 2) {
        this.newline(1);
      }
      const lastCharCode = this.getLastChar();
      if (lastCharCode !== 91 && lastCharCode !== 123) {
        this.space();
      }
      let val;
      if (isBlockComment) {
        const {
          _parenPushNewlineState
        } = this;
        if ((_parenPushNewlineState == null ? void 0 : _parenPushNewlineState.printed) === false && HAS_NEWLINE.test(comment.value)) {
          this.tokenChar(40);
          this.indent();
          _parenPushNewlineState.printed = true;
        }
        val = `/*${comment.value}*/`;
        if (this.format.indent.adjustMultilineComment) {
          var _comment$loc;
          const offset = (_comment$loc = comment.loc) == null ? void 0 : _comment$loc.start.column;
          if (offset) {
            const newlineRegex = new RegExp("\\n\\s{1," + offset + "}", "g");
            val = val.replace(newlineRegex, "\n");
          }
          if (this.format.concise) {
            val = val.replace(/\n(?!$)/g, `\n`);
          } else {
            let indentSize = this.format.retainLines ? 0 : this._buf.getCurrentColumn();
            if (this._shouldIndent(47) || this.format.retainLines) {
              indentSize += this._getIndent();
            }
            val = val.replace(/\n(?!$)/g, `\n${" ".repeat(indentSize)}`);
          }
        }
      } else if (!noLineTerminator) {
        val = `//${comment.value}`;
      } else {
        val = `/*${comment.value}*/`;
      }
      if (this.endsWith(47)) this._space();
      this.source("start", comment.loc);
      this._append(val, isBlockComment);
      if (!isBlockComment && !noLineTerminator) {
        this.newline(1, true);
      }
      if (printNewLines && skipNewLines !== 3) {
        this.newline(1);
      }
    }
    _printComments(type, comments, node, parent, lineOffset = 0) {
      const nodeLoc = node.loc;
      const len = comments.length;
      let hasLoc = !!nodeLoc;
      const nodeStartLine = hasLoc ? nodeLoc.start.line : 0;
      const nodeEndLine = hasLoc ? nodeLoc.end.line : 0;
      let lastLine = 0;
      let leadingCommentNewline = 0;
      const maybeNewline = this._noLineTerminator ? function () {} : this.newline.bind(this);
      for (let i = 0; i < len; i++) {
        const comment = comments[i];
        const shouldPrint = this._shouldPrintComment(comment);
        if (shouldPrint === 2) {
          hasLoc = false;
          break;
        }
        if (hasLoc && comment.loc && shouldPrint === 1) {
          const commentStartLine = comment.loc.start.line;
          const commentEndLine = comment.loc.end.line;
          if (type === 0) {
            let offset = 0;
            if (i === 0) {
              if (this._buf.hasContent() && (comment.type === "CommentLine" || commentStartLine !== commentEndLine)) {
                offset = leadingCommentNewline = 1;
              }
            } else {
              offset = commentStartLine - lastLine;
            }
            lastLine = commentEndLine;
            maybeNewline(offset);
            this._printComment(comment, 1);
            if (i + 1 === len) {
              maybeNewline(Math.max(nodeStartLine - lastLine, leadingCommentNewline));
              lastLine = nodeStartLine;
            }
          } else if (type === 1) {
            const offset = commentStartLine - (i === 0 ? nodeStartLine : lastLine);
            lastLine = commentEndLine;
            maybeNewline(offset);
            this._printComment(comment, 1);
            if (i + 1 === len) {
              maybeNewline(Math.min(1, nodeEndLine - lastLine));
              lastLine = nodeEndLine;
            }
          } else {
            const offset = commentStartLine - (i === 0 ? nodeEndLine - lineOffset : lastLine);
            lastLine = commentEndLine;
            maybeNewline(offset);
            this._printComment(comment, 1);
          }
        } else {
          hasLoc = false;
          if (shouldPrint !== 1) {
            continue;
          }
          if (len === 1) {
            const singleLine = comment.loc ? comment.loc.start.line === comment.loc.end.line : !HAS_NEWLINE.test(comment.value);
            const shouldSkipNewline = singleLine && !isStatement(node) && !isClassBody(parent) && !isTSInterfaceBody(parent) && !isTSEnumDeclaration(parent);
            if (type === 0) {
              this._printComment(comment, shouldSkipNewline && node.type !== "ObjectExpression" || singleLine && isFunction(parent, {
                body: node
              }) ? 1 : 0);
            } else if (shouldSkipNewline && type === 2) {
              this._printComment(comment, 1);
            } else {
              this._printComment(comment, 0);
            }
          } else if (type === 1 && !(node.type === "ObjectExpression" && node.properties.length > 1) && node.type !== "ClassBody" && node.type !== "TSInterfaceBody") {
            this._printComment(comment, i === 0 ? 2 : i === len - 1 ? 3 : 0);
          } else {
            this._printComment(comment, 0);
          }
        }
      }
      if (type === 2 && hasLoc && lastLine) {
        this._lastCommentLine = lastLine;
      }
    }
  }
  Object.assign(Printer.prototype, generatorFunctions);
  {
    Printer.prototype.Noop = function Noop() {};
  }
  exports$2l.default = Printer;
  function commaSeparator() {
    this.tokenChar(44);
    this.space();
  }
  return exports$2l;
}

var exports$2k = {},
  _dewExec$2j = false;
function dew$2j() {
  if (_dewExec$2j) return exports$2k;
  _dewExec$2j = true;
  Object.defineProperty(exports$2k, "__esModule", {
    value: true
  });
  exports$2k.default = generate;
  var _sourceMap = dew$2C();
  var _printer = dew$2k();
  function normalizeOptions(code, opts) {
    const format = {
      auxiliaryCommentBefore: opts.auxiliaryCommentBefore,
      auxiliaryCommentAfter: opts.auxiliaryCommentAfter,
      shouldPrintComment: opts.shouldPrintComment,
      retainLines: opts.retainLines,
      retainFunctionParens: opts.retainFunctionParens,
      comments: opts.comments == null || opts.comments,
      compact: opts.compact,
      minified: opts.minified,
      concise: opts.concise,
      indent: {
        adjustMultilineComment: true,
        style: "  "
      },
      jsescOption: Object.assign({
        quotes: "double",
        wrap: true,
        minimal: false
      }, opts.jsescOption),
      topicToken: opts.topicToken,
      importAttributesKeyword: opts.importAttributesKeyword
    };
    {
      var _opts$recordAndTupleS;
      format.decoratorsBeforeExport = opts.decoratorsBeforeExport;
      format.jsescOption.json = opts.jsonCompatibleStrings;
      format.recordAndTupleSyntaxType = (_opts$recordAndTupleS = opts.recordAndTupleSyntaxType) != null ? _opts$recordAndTupleS : "hash";
    }
    if (format.minified) {
      format.compact = true;
      format.shouldPrintComment = format.shouldPrintComment || (() => format.comments);
    } else {
      format.shouldPrintComment = format.shouldPrintComment || (value => format.comments || value.includes("@license") || value.includes("@preserve"));
    }
    if (format.compact === "auto") {
      format.compact = typeof code === "string" && code.length > 500000;
      if (format.compact) {
        console.error("[BABEL] Note: The code generator has deoptimised the styling of " + `${opts.filename} as it exceeds the max of ${"500KB"}.`);
      }
    }
    if (format.compact) {
      format.indent.adjustMultilineComment = false;
    }
    const {
      auxiliaryCommentBefore,
      auxiliaryCommentAfter,
      shouldPrintComment
    } = format;
    if (auxiliaryCommentBefore && !shouldPrintComment(auxiliaryCommentBefore)) {
      format.auxiliaryCommentBefore = undefined;
    }
    if (auxiliaryCommentAfter && !shouldPrintComment(auxiliaryCommentAfter)) {
      format.auxiliaryCommentAfter = undefined;
    }
    return format;
  }
  {
    exports$2k.CodeGenerator = class CodeGenerator {
      constructor(ast, opts = {}, code) {
        this._ast = void 0;
        this._format = void 0;
        this._map = void 0;
        this._ast = ast;
        this._format = normalizeOptions(code, opts);
        this._map = opts.sourceMaps ? new _sourceMap.default(opts, code) : null;
      }
      generate() {
        const printer = new _printer.default(this._format, this._map);
        return printer.generate(this._ast);
      }
    };
  }
  function generate(ast, opts = {}, code) {
    const format = normalizeOptions(code, opts);
    const map = opts.sourceMaps ? new _sourceMap.default(opts, code) : null;
    const printer = new _printer.default(format, map);
    return printer.generate(ast);
  }
  return exports$2k;
}

var exports$2j = {},
  _dewExec$2i = false;
function dew$2i() {
  if (_dewExec$2i) return exports$2j;
  _dewExec$2i = true;
  Object.defineProperty(exports$2j, "__esModule", {
    value: true
  });
  exports$2j.find = find;
  exports$2j.findParent = findParent;
  exports$2j.getAncestry = getAncestry;
  exports$2j.getDeepestCommonAncestorFrom = getDeepestCommonAncestorFrom;
  exports$2j.getEarliestCommonAncestorFrom = getEarliestCommonAncestorFrom;
  exports$2j.getFunctionParent = getFunctionParent;
  exports$2j.getStatementParent = getStatementParent;
  exports$2j.inType = inType;
  exports$2j.isAncestor = isAncestor;
  exports$2j.isDescendant = isDescendant;
  var _t = dew$3i();
  const {
    VISITOR_KEYS
  } = _t;
  function findParent(callback) {
    let path = this;
    while (path = path.parentPath) {
      if (callback(path)) return path;
    }
    return null;
  }
  function find(callback) {
    let path = this;
    do {
      if (callback(path)) return path;
    } while (path = path.parentPath);
    return null;
  }
  function getFunctionParent() {
    return this.findParent(p => p.isFunction());
  }
  function getStatementParent() {
    let path = this;
    do {
      if (!path.parentPath || Array.isArray(path.container) && path.isStatement()) {
        break;
      } else {
        path = path.parentPath;
      }
    } while (path);
    if (path && (path.isProgram() || path.isFile())) {
      throw new Error("File/Program node, we can't possibly find a statement parent to this");
    }
    return path;
  }
  function getEarliestCommonAncestorFrom(paths) {
    return this.getDeepestCommonAncestorFrom(paths, function (deepest, i, ancestries) {
      let earliest;
      const keys = VISITOR_KEYS[deepest.type];
      for (const ancestry of ancestries) {
        const path = ancestry[i + 1];
        if (!earliest) {
          earliest = path;
          continue;
        }
        if (path.listKey && earliest.listKey === path.listKey) {
          if (path.key < earliest.key) {
            earliest = path;
            continue;
          }
        }
        const earliestKeyIndex = keys.indexOf(earliest.parentKey);
        const currentKeyIndex = keys.indexOf(path.parentKey);
        if (earliestKeyIndex > currentKeyIndex) {
          earliest = path;
        }
      }
      return earliest;
    });
  }
  function getDeepestCommonAncestorFrom(paths, filter) {
    if (!paths.length) {
      return this;
    }
    if (paths.length === 1) {
      return paths[0];
    }
    let minDepth = Infinity;
    let lastCommonIndex, lastCommon;
    const ancestries = paths.map(path => {
      const ancestry = [];
      do {
        ancestry.unshift(path);
      } while ((path = path.parentPath) && path !== this);
      if (ancestry.length < minDepth) {
        minDepth = ancestry.length;
      }
      return ancestry;
    });
    const first = ancestries[0];
    depthLoop: for (let i = 0; i < minDepth; i++) {
      const shouldMatch = first[i];
      for (const ancestry of ancestries) {
        if (ancestry[i] !== shouldMatch) {
          break depthLoop;
        }
      }
      lastCommonIndex = i;
      lastCommon = shouldMatch;
    }
    if (lastCommon) {
      if (filter) {
        return filter(lastCommon, lastCommonIndex, ancestries);
      } else {
        return lastCommon;
      }
    } else {
      throw new Error("Couldn't find intersection");
    }
  }
  function getAncestry() {
    let path = this;
    const paths = [];
    do {
      paths.push(path);
    } while (path = path.parentPath);
    return paths;
  }
  function isAncestor(maybeDescendant) {
    return maybeDescendant.isDescendant(this);
  }
  function isDescendant(maybeAncestor) {
    return !!this.findParent(parent => parent === maybeAncestor);
  }
  function inType(...candidateTypes) {
    let path = this;
    while (path) {
      for (const type of candidateTypes) {
        if (path.node.type === type) return true;
      }
      path = path.parentPath;
    }
    return false;
  }
  return exports$2j;
}

var exports$2i = {},
  _dewExec$2h = false;
function dew$2h() {
  if (_dewExec$2h) return exports$2i;
  _dewExec$2h = true;
  Object.defineProperty(exports$2i, "__esModule", {
    value: true
  });
  exports$2i.createUnionType = createUnionType;
  var _t = dew$3i();
  const {
    createFlowUnionType,
    createTSUnionType,
    createUnionTypeAnnotation,
    isFlowType,
    isTSType
  } = _t;
  function createUnionType(types) {
    {
      if (types.every(v => isFlowType(v))) {
        if (createFlowUnionType) {
          return createFlowUnionType(types);
        }
        return createUnionTypeAnnotation(types);
      } else if (types.every(v => isTSType(v))) {
        if (createTSUnionType) {
          return createTSUnionType(types);
        }
      }
    }
  }
  return exports$2i;
}

var exports$2h = {},
  _dewExec$2g = false;
function dew$2g() {
  if (_dewExec$2g) return exports$2h;
  _dewExec$2g = true;
  Object.defineProperty(exports$2h, "__esModule", {
    value: true
  });
  exports$2h.default = _default;
  var _t = dew$3i();
  var _util = dew$2h();
  const {
    BOOLEAN_NUMBER_BINARY_OPERATORS,
    createTypeAnnotationBasedOnTypeof,
    numberTypeAnnotation,
    voidTypeAnnotation
  } = _t;
  function _default(node) {
    if (!this.isReferenced()) return;
    const binding = this.scope.getBinding(node.name);
    if (binding) {
      if (binding.identifier.typeAnnotation) {
        return binding.identifier.typeAnnotation;
      } else {
        return getTypeAnnotationBindingConstantViolations(binding, this, node.name);
      }
    }
    if (node.name === "undefined") {
      return voidTypeAnnotation();
    } else if (node.name === "NaN" || node.name === "Infinity") {
      return numberTypeAnnotation();
    } else if (node.name === "arguments") ;
  }
  function getTypeAnnotationBindingConstantViolations(binding, path, name) {
    const types = [];
    const functionConstantViolations = [];
    let constantViolations = getConstantViolationsBefore(binding, path, functionConstantViolations);
    const testType = getConditionalAnnotation(binding, path, name);
    if (testType) {
      const testConstantViolations = getConstantViolationsBefore(binding, testType.ifStatement);
      constantViolations = constantViolations.filter(path => !testConstantViolations.includes(path));
      types.push(testType.typeAnnotation);
    }
    if (constantViolations.length) {
      constantViolations.push(...functionConstantViolations);
      for (const violation of constantViolations) {
        types.push(violation.getTypeAnnotation());
      }
    }
    if (!types.length) {
      return;
    }
    return (0, _util.createUnionType)(types);
  }
  function getConstantViolationsBefore(binding, path, functions) {
    const violations = binding.constantViolations.slice();
    violations.unshift(binding.path);
    return violations.filter(violation => {
      violation = violation.resolve();
      const status = violation._guessExecutionStatusRelativeTo(path);
      if (functions && status === "unknown") functions.push(violation);
      return status === "before";
    });
  }
  function inferAnnotationFromBinaryExpression(name, path) {
    const operator = path.node.operator;
    const right = path.get("right").resolve();
    const left = path.get("left").resolve();
    let target;
    if (left.isIdentifier({
      name
    })) {
      target = right;
    } else if (right.isIdentifier({
      name
    })) {
      target = left;
    }
    if (target) {
      if (operator === "===") {
        return target.getTypeAnnotation();
      }
      if (BOOLEAN_NUMBER_BINARY_OPERATORS.includes(operator)) {
        return numberTypeAnnotation();
      }
      return;
    }
    if (operator !== "===" && operator !== "==") return;
    let typeofPath;
    let typePath;
    if (left.isUnaryExpression({
      operator: "typeof"
    })) {
      typeofPath = left;
      typePath = right;
    } else if (right.isUnaryExpression({
      operator: "typeof"
    })) {
      typeofPath = right;
      typePath = left;
    }
    if (!typeofPath) return;
    if (!typeofPath.get("argument").isIdentifier({
      name
    })) return;
    typePath = typePath.resolve();
    if (!typePath.isLiteral()) return;
    const typeValue = typePath.node.value;
    if (typeof typeValue !== "string") return;
    return createTypeAnnotationBasedOnTypeof(typeValue);
  }
  function getParentConditionalPath(binding, path, name) {
    let parentPath;
    while (parentPath = path.parentPath) {
      if (parentPath.isIfStatement() || parentPath.isConditionalExpression()) {
        if (path.key === "test") {
          return;
        }
        return parentPath;
      }
      if (parentPath.isFunction()) {
        if (parentPath.parentPath.scope.getBinding(name) !== binding) return;
      }
      path = parentPath;
    }
  }
  function getConditionalAnnotation(binding, path, name) {
    const ifStatement = getParentConditionalPath(binding, path, name);
    if (!ifStatement) return;
    const test = ifStatement.get("test");
    const paths = [test];
    const types = [];
    for (let i = 0; i < paths.length; i++) {
      const path = paths[i];
      if (path.isLogicalExpression()) {
        if (path.node.operator === "&&") {
          paths.push(path.get("left"));
          paths.push(path.get("right"));
        }
      } else if (path.isBinaryExpression()) {
        const type = inferAnnotationFromBinaryExpression(name, path);
        if (type) types.push(type);
      }
    }
    if (types.length) {
      return {
        typeAnnotation: (0, _util.createUnionType)(types),
        ifStatement
      };
    }
    return getConditionalAnnotation(binding, ifStatement, name);
  }
  return exports$2h;
}

var exports$2g = {},
  _dewExec$2f = false;
function dew$2f() {
  if (_dewExec$2f) return exports$2g;
  _dewExec$2f = true;
  Object.defineProperty(exports$2g, "__esModule", {
    value: true
  });
  exports$2g.ArrayExpression = ArrayExpression;
  exports$2g.AssignmentExpression = AssignmentExpression;
  exports$2g.BinaryExpression = BinaryExpression;
  exports$2g.BooleanLiteral = BooleanLiteral;
  exports$2g.CallExpression = CallExpression;
  exports$2g.ConditionalExpression = ConditionalExpression;
  exports$2g.ClassDeclaration = exports$2g.ClassExpression = exports$2g.FunctionDeclaration = exports$2g.ArrowFunctionExpression = exports$2g.FunctionExpression = Func;
  Object.defineProperty(exports$2g, "Identifier", {
    enumerable: true,
    get: function () {
      return _infererReference.default;
    }
  });
  exports$2g.LogicalExpression = LogicalExpression;
  exports$2g.NewExpression = NewExpression;
  exports$2g.NullLiteral = NullLiteral;
  exports$2g.NumericLiteral = NumericLiteral;
  exports$2g.ObjectExpression = ObjectExpression;
  exports$2g.ParenthesizedExpression = ParenthesizedExpression;
  exports$2g.RegExpLiteral = RegExpLiteral;
  exports$2g.RestElement = RestElement;
  exports$2g.SequenceExpression = SequenceExpression;
  exports$2g.StringLiteral = StringLiteral;
  exports$2g.TSAsExpression = TSAsExpression;
  exports$2g.TSNonNullExpression = TSNonNullExpression;
  exports$2g.TaggedTemplateExpression = TaggedTemplateExpression;
  exports$2g.TemplateLiteral = TemplateLiteral;
  exports$2g.TypeCastExpression = TypeCastExpression;
  exports$2g.UnaryExpression = UnaryExpression;
  exports$2g.UpdateExpression = UpdateExpression;
  exports$2g.VariableDeclarator = VariableDeclarator;
  var _t = dew$3i();
  var _infererReference = dew$2g();
  var _util = dew$2h();
  const {
    BOOLEAN_BINARY_OPERATORS,
    BOOLEAN_UNARY_OPERATORS,
    NUMBER_BINARY_OPERATORS,
    NUMBER_UNARY_OPERATORS,
    STRING_UNARY_OPERATORS,
    anyTypeAnnotation,
    arrayTypeAnnotation,
    booleanTypeAnnotation,
    buildMatchMemberExpression,
    genericTypeAnnotation,
    identifier,
    nullLiteralTypeAnnotation,
    numberTypeAnnotation,
    stringTypeAnnotation,
    tupleTypeAnnotation,
    unionTypeAnnotation,
    voidTypeAnnotation,
    isIdentifier
  } = _t;
  function VariableDeclarator() {
    if (!this.get("id").isIdentifier()) return;
    return this.get("init").getTypeAnnotation();
  }
  function TypeCastExpression(node) {
    return node.typeAnnotation;
  }
  TypeCastExpression.validParent = true;
  function TSAsExpression(node) {
    return node.typeAnnotation;
  }
  TSAsExpression.validParent = true;
  function TSNonNullExpression() {
    return this.get("expression").getTypeAnnotation();
  }
  function NewExpression(node) {
    if (node.callee.type === "Identifier") {
      return genericTypeAnnotation(node.callee);
    }
  }
  function TemplateLiteral() {
    return stringTypeAnnotation();
  }
  function UnaryExpression(node) {
    const operator = node.operator;
    if (operator === "void") {
      return voidTypeAnnotation();
    } else if (NUMBER_UNARY_OPERATORS.includes(operator)) {
      return numberTypeAnnotation();
    } else if (STRING_UNARY_OPERATORS.includes(operator)) {
      return stringTypeAnnotation();
    } else if (BOOLEAN_UNARY_OPERATORS.includes(operator)) {
      return booleanTypeAnnotation();
    }
  }
  function BinaryExpression(node) {
    const operator = node.operator;
    if (NUMBER_BINARY_OPERATORS.includes(operator)) {
      return numberTypeAnnotation();
    } else if (BOOLEAN_BINARY_OPERATORS.includes(operator)) {
      return booleanTypeAnnotation();
    } else if (operator === "+") {
      const right = this.get("right");
      const left = this.get("left");
      if (left.isBaseType("number") && right.isBaseType("number")) {
        return numberTypeAnnotation();
      } else if (left.isBaseType("string") || right.isBaseType("string")) {
        return stringTypeAnnotation();
      }
      return unionTypeAnnotation([stringTypeAnnotation(), numberTypeAnnotation()]);
    }
  }
  function LogicalExpression() {
    const argumentTypes = [this.get("left").getTypeAnnotation(), this.get("right").getTypeAnnotation()];
    return (0, _util.createUnionType)(argumentTypes);
  }
  function ConditionalExpression() {
    const argumentTypes = [this.get("consequent").getTypeAnnotation(), this.get("alternate").getTypeAnnotation()];
    return (0, _util.createUnionType)(argumentTypes);
  }
  function SequenceExpression() {
    return this.get("expressions").pop().getTypeAnnotation();
  }
  function ParenthesizedExpression() {
    return this.get("expression").getTypeAnnotation();
  }
  function AssignmentExpression() {
    return this.get("right").getTypeAnnotation();
  }
  function UpdateExpression(node) {
    const operator = node.operator;
    if (operator === "++" || operator === "--") {
      return numberTypeAnnotation();
    }
  }
  function StringLiteral() {
    return stringTypeAnnotation();
  }
  function NumericLiteral() {
    return numberTypeAnnotation();
  }
  function BooleanLiteral() {
    return booleanTypeAnnotation();
  }
  function NullLiteral() {
    return nullLiteralTypeAnnotation();
  }
  function RegExpLiteral() {
    return genericTypeAnnotation(identifier("RegExp"));
  }
  function ObjectExpression() {
    return genericTypeAnnotation(identifier("Object"));
  }
  function ArrayExpression() {
    return genericTypeAnnotation(identifier("Array"));
  }
  function RestElement() {
    return ArrayExpression();
  }
  RestElement.validParent = true;
  function Func() {
    return genericTypeAnnotation(identifier("Function"));
  }
  const isArrayFrom = buildMatchMemberExpression("Array.from");
  const isObjectKeys = buildMatchMemberExpression("Object.keys");
  const isObjectValues = buildMatchMemberExpression("Object.values");
  const isObjectEntries = buildMatchMemberExpression("Object.entries");
  function CallExpression() {
    const {
      callee
    } = this.node;
    if (isObjectKeys(callee)) {
      return arrayTypeAnnotation(stringTypeAnnotation());
    } else if (isArrayFrom(callee) || isObjectValues(callee) || isIdentifier(callee, {
      name: "Array"
    })) {
      return arrayTypeAnnotation(anyTypeAnnotation());
    } else if (isObjectEntries(callee)) {
      return arrayTypeAnnotation(tupleTypeAnnotation([stringTypeAnnotation(), anyTypeAnnotation()]));
    }
    return resolveCall(this.get("callee"));
  }
  function TaggedTemplateExpression() {
    return resolveCall(this.get("tag"));
  }
  function resolveCall(callee) {
    callee = callee.resolve();
    if (callee.isFunction()) {
      const {
        node
      } = callee;
      if (node.async) {
        if (node.generator) {
          return genericTypeAnnotation(identifier("AsyncIterator"));
        } else {
          return genericTypeAnnotation(identifier("Promise"));
        }
      } else {
        if (node.generator) {
          return genericTypeAnnotation(identifier("Iterator"));
        } else if (callee.node.returnType) {
          return callee.node.returnType;
        } else ;
      }
    }
  }
  return exports$2g;
}

var exports$2f = {},
  _dewExec$2e = false;
function dew$2e() {
  if (_dewExec$2e) return exports$2f;
  _dewExec$2e = true;
  Object.defineProperty(exports$2f, "__esModule", {
    value: true
  });
  exports$2f._getTypeAnnotation = _getTypeAnnotation;
  exports$2f.baseTypeStrictlyMatches = baseTypeStrictlyMatches;
  exports$2f.couldBeBaseType = couldBeBaseType;
  exports$2f.getTypeAnnotation = getTypeAnnotation;
  exports$2f.isBaseType = isBaseType;
  exports$2f.isGenericType = isGenericType;
  var inferers = dew$2f();
  var _t = dew$3i();
  const {
    anyTypeAnnotation,
    isAnyTypeAnnotation,
    isArrayTypeAnnotation,
    isBooleanTypeAnnotation,
    isEmptyTypeAnnotation,
    isFlowBaseAnnotation,
    isGenericTypeAnnotation,
    isIdentifier,
    isMixedTypeAnnotation,
    isNumberTypeAnnotation,
    isStringTypeAnnotation,
    isTSArrayType,
    isTSTypeAnnotation,
    isTSTypeReference,
    isTupleTypeAnnotation,
    isTypeAnnotation,
    isUnionTypeAnnotation,
    isVoidTypeAnnotation,
    stringTypeAnnotation,
    voidTypeAnnotation
  } = _t;
  function getTypeAnnotation() {
    let type = this.getData("typeAnnotation");
    if (type != null) {
      return type;
    }
    type = _getTypeAnnotation.call(this) || anyTypeAnnotation();
    if (isTypeAnnotation(type) || isTSTypeAnnotation(type)) {
      type = type.typeAnnotation;
    }
    this.setData("typeAnnotation", type);
    return type;
  }
  const typeAnnotationInferringNodes = new WeakSet();
  function _getTypeAnnotation() {
    const node = this.node;
    if (!node) {
      if (this.key === "init" && this.parentPath.isVariableDeclarator()) {
        const declar = this.parentPath.parentPath;
        const declarParent = declar.parentPath;
        if (declar.key === "left" && declarParent.isForInStatement()) {
          return stringTypeAnnotation();
        }
        if (declar.key === "left" && declarParent.isForOfStatement()) {
          return anyTypeAnnotation();
        }
        return voidTypeAnnotation();
      } else {
        return;
      }
    }
    if (node.typeAnnotation) {
      return node.typeAnnotation;
    }
    if (typeAnnotationInferringNodes.has(node)) {
      return;
    }
    typeAnnotationInferringNodes.add(node);
    try {
      var _inferer;
      let inferer = inferers[node.type];
      if (inferer) {
        return inferer.call(this, node);
      }
      inferer = inferers[this.parentPath.type];
      if ((_inferer = inferer) != null && _inferer.validParent) {
        return this.parentPath.getTypeAnnotation();
      }
    } finally {
      typeAnnotationInferringNodes.delete(node);
    }
  }
  function isBaseType(baseName, soft) {
    return _isBaseType(baseName, this.getTypeAnnotation(), soft);
  }
  function _isBaseType(baseName, type, soft) {
    if (baseName === "string") {
      return isStringTypeAnnotation(type);
    } else if (baseName === "number") {
      return isNumberTypeAnnotation(type);
    } else if (baseName === "boolean") {
      return isBooleanTypeAnnotation(type);
    } else if (baseName === "any") {
      return isAnyTypeAnnotation(type);
    } else if (baseName === "mixed") {
      return isMixedTypeAnnotation(type);
    } else if (baseName === "empty") {
      return isEmptyTypeAnnotation(type);
    } else if (baseName === "void") {
      return isVoidTypeAnnotation(type);
    } else {
      if (soft) {
        return false;
      } else {
        throw new Error(`Unknown base type ${baseName}`);
      }
    }
  }
  function couldBeBaseType(name) {
    const type = this.getTypeAnnotation();
    if (isAnyTypeAnnotation(type)) return true;
    if (isUnionTypeAnnotation(type)) {
      for (const type2 of type.types) {
        if (isAnyTypeAnnotation(type2) || _isBaseType(name, type2, true)) {
          return true;
        }
      }
      return false;
    } else {
      return _isBaseType(name, type, true);
    }
  }
  function baseTypeStrictlyMatches(rightArg) {
    const left = this.getTypeAnnotation();
    const right = rightArg.getTypeAnnotation();
    if (!isAnyTypeAnnotation(left) && isFlowBaseAnnotation(left)) {
      return right.type === left.type;
    }
    return false;
  }
  function isGenericType(genericName) {
    const type = this.getTypeAnnotation();
    if (genericName === "Array") {
      if (isTSArrayType(type) || isArrayTypeAnnotation(type) || isTupleTypeAnnotation(type)) {
        return true;
      }
    }
    return isGenericTypeAnnotation(type) && isIdentifier(type.id, {
      name: genericName
    }) || isTSTypeReference(type) && isIdentifier(type.typeName, {
      name: genericName
    });
  }
  return exports$2f;
}

var exports$2e = {},
  _dewExec$2d = false;
function dew$2d() {
  if (_dewExec$2d) return exports$2e;
  _dewExec$2d = true;
  Object.defineProperty(exports$2e, "__esModule", {
    value: true
  });
  exports$2e.default = void 0;
  var _t = dew$3i();
  var _t2 = _t;
  const {
    react
  } = _t;
  const {
    cloneNode,
    jsxExpressionContainer,
    variableDeclaration,
    variableDeclarator
  } = _t2;
  const referenceVisitor = {
    ReferencedIdentifier(path, state) {
      if (path.isJSXIdentifier() && react.isCompatTag(path.node.name) && !path.parentPath.isJSXMemberExpression()) {
        return;
      }
      if (path.node.name === "this") {
        let scope = path.scope;
        do {
          if (scope.path.isFunction() && !scope.path.isArrowFunctionExpression()) {
            break;
          }
        } while (scope = scope.parent);
        if (scope) state.breakOnScopePaths.push(scope.path);
      }
      const binding = path.scope.getBinding(path.node.name);
      if (!binding) return;
      for (const violation of binding.constantViolations) {
        if (violation.scope !== binding.path.scope) {
          state.mutableBinding = true;
          path.stop();
          return;
        }
      }
      if (binding !== state.scope.getBinding(path.node.name)) return;
      state.bindings[path.node.name] = binding;
    }
  };
  class PathHoister {
    constructor(path, scope) {
      this.breakOnScopePaths = void 0;
      this.bindings = void 0;
      this.mutableBinding = void 0;
      this.scopes = void 0;
      this.scope = void 0;
      this.path = void 0;
      this.attachAfter = void 0;
      this.breakOnScopePaths = [];
      this.bindings = {};
      this.mutableBinding = false;
      this.scopes = [];
      this.scope = scope;
      this.path = path;
      this.attachAfter = false;
    }
    isCompatibleScope(scope) {
      for (const key of Object.keys(this.bindings)) {
        const binding = this.bindings[key];
        if (!scope.bindingIdentifierEquals(key, binding.identifier)) {
          return false;
        }
      }
      return true;
    }
    getCompatibleScopes() {
      let scope = this.path.scope;
      do {
        if (this.isCompatibleScope(scope)) {
          this.scopes.push(scope);
        } else {
          break;
        }
        if (this.breakOnScopePaths.includes(scope.path)) {
          break;
        }
      } while (scope = scope.parent);
    }
    getAttachmentPath() {
      let path = this._getAttachmentPath();
      if (!path) return;
      let targetScope = path.scope;
      if (targetScope.path === path) {
        targetScope = path.scope.parent;
      }
      if (targetScope.path.isProgram() || targetScope.path.isFunction()) {
        for (const name of Object.keys(this.bindings)) {
          if (!targetScope.hasOwnBinding(name)) continue;
          const binding = this.bindings[name];
          if (binding.kind === "param" || binding.path.parentKey === "params") {
            continue;
          }
          const bindingParentPath = this.getAttachmentParentForPath(binding.path);
          if (bindingParentPath.key >= path.key) {
            this.attachAfter = true;
            path = binding.path;
            for (const violationPath of binding.constantViolations) {
              if (this.getAttachmentParentForPath(violationPath).key > path.key) {
                path = violationPath;
              }
            }
          }
        }
      }
      return path;
    }
    _getAttachmentPath() {
      const scopes = this.scopes;
      const scope = scopes.pop();
      if (!scope) return;
      if (scope.path.isFunction()) {
        if (this.hasOwnParamBindings(scope)) {
          if (this.scope === scope) return;
          const bodies = scope.path.get("body").get("body");
          for (let i = 0; i < bodies.length; i++) {
            if (bodies[i].node._blockHoist) continue;
            return bodies[i];
          }
        } else {
          return this.getNextScopeAttachmentParent();
        }
      } else if (scope.path.isProgram()) {
        return this.getNextScopeAttachmentParent();
      }
    }
    getNextScopeAttachmentParent() {
      const scope = this.scopes.pop();
      if (scope) return this.getAttachmentParentForPath(scope.path);
    }
    getAttachmentParentForPath(path) {
      do {
        if (!path.parentPath || Array.isArray(path.container) && path.isStatement()) {
          return path;
        }
      } while (path = path.parentPath);
    }
    hasOwnParamBindings(scope) {
      for (const name of Object.keys(this.bindings)) {
        if (!scope.hasOwnBinding(name)) continue;
        const binding = this.bindings[name];
        if (binding.kind === "param" && binding.constant) return true;
      }
      return false;
    }
    run() {
      this.path.traverse(referenceVisitor, this);
      if (this.mutableBinding) return;
      this.getCompatibleScopes();
      const attachTo = this.getAttachmentPath();
      if (!attachTo) return;
      if (attachTo.getFunctionParent() === this.path.getFunctionParent()) return;
      let uid = attachTo.scope.generateUidIdentifier("ref");
      const declarator = variableDeclarator(uid, this.path.node);
      const insertFn = this.attachAfter ? "insertAfter" : "insertBefore";
      const [attached] = attachTo[insertFn]([attachTo.isVariableDeclarator() ? declarator : variableDeclaration("var", [declarator])]);
      const parent = this.path.parentPath;
      if (parent.isJSXElement() && this.path.container === parent.node.children) {
        uid = jsxExpressionContainer(uid);
      }
      this.path.replaceWith(cloneNode(uid));
      return attachTo.isVariableDeclarator() ? attached.get("init") : attached.get("declarations.0.init");
    }
  }
  exports$2e.default = PathHoister;
  return exports$2e;
}

var exports$2d = {},
  _dewExec$2c = false;
function dew$2c() {
  if (_dewExec$2c) return exports$2d;
  _dewExec$2c = true;
  Object.defineProperty(exports$2d, "__esModule", {
    value: true
  });
  exports$2d.hooks = void 0;
  exports$2d.hooks = [function (self, parent) {
    const removeParent = self.key === "test" && (parent.isWhile() || parent.isSwitchCase()) || self.key === "declaration" && parent.isExportDeclaration() || self.key === "body" && parent.isLabeledStatement() || self.listKey === "declarations" && parent.isVariableDeclaration() && parent.node.declarations.length === 1 || self.key === "expression" && parent.isExpressionStatement();
    if (removeParent) {
      parent.remove();
      return true;
    }
  }, function (self, parent) {
    if (parent.isSequenceExpression() && parent.node.expressions.length === 1) {
      parent.replaceWith(parent.node.expressions[0]);
      return true;
    }
  }, function (self, parent) {
    if (parent.isBinary()) {
      if (self.key === "left") {
        parent.replaceWith(parent.node.right);
      } else {
        parent.replaceWith(parent.node.left);
      }
      return true;
    }
  }, function (self, parent) {
    if (parent.isIfStatement() && self.key === "consequent" || self.key === "body" && (parent.isLoop() || parent.isArrowFunctionExpression())) {
      self.replaceWith({
        type: "BlockStatement",
        body: []
      });
      return true;
    }
  }];
  return exports$2d;
}

var exports$2c = {},
  _dewExec$2b = false;
function dew$2b() {
  if (_dewExec$2b) return exports$2c;
  _dewExec$2b = true;
  Object.defineProperty(exports$2c, "__esModule", {
    value: true
  });
  exports$2c._assertUnremoved = _assertUnremoved;
  exports$2c._callRemovalHooks = _callRemovalHooks;
  exports$2c._markRemoved = _markRemoved;
  exports$2c._remove = _remove;
  exports$2c._removeFromScope = _removeFromScope;
  exports$2c.remove = remove;
  var _removalHooks = dew$2c();
  var _cache = dew$2J();
  var _replacement = dew$29();
  var _index = dew$23();
  var _t = dew$3i();
  const {
    getBindingIdentifiers
  } = _t;
  function remove() {
    var _this$opts;
    _assertUnremoved.call(this);
    this.resync();
    if (_callRemovalHooks.call(this)) {
      _markRemoved.call(this);
      return;
    }
    if (!((_this$opts = this.opts) != null && _this$opts.noScope)) {
      _removeFromScope.call(this);
    }
    this.shareCommentsWithSiblings();
    _remove.call(this);
    _markRemoved.call(this);
  }
  function _removeFromScope() {
    const bindings = getBindingIdentifiers(this.node, false, false, true);
    Object.keys(bindings).forEach(name => this.scope.removeBinding(name));
  }
  function _callRemovalHooks() {
    if (this.parentPath) {
      for (const fn of _removalHooks.hooks) {
        if (fn(this, this.parentPath)) return true;
      }
    }
  }
  function _remove() {
    if (Array.isArray(this.container)) {
      this.container.splice(this.key, 1);
      this.updateSiblingKeys(this.key, -1);
    } else {
      _replacement._replaceWith.call(this, null);
    }
  }
  function _markRemoved() {
    this._traverseFlags |= _index.SHOULD_SKIP | _index.REMOVED;
    if (this.parent) {
      (0, _cache.getCachedPaths)(this.hub, this.parent).delete(this.node);
    }
    this.node = null;
  }
  function _assertUnremoved() {
    if (this.removed) {
      throw this.buildCodeFrameError("NodePath has been removed so is read-only.");
    }
  }
  return exports$2c;
}

var exports$2b = {},
  _dewExec$2a = false;
function dew$2a() {
  if (_dewExec$2a) return exports$2b;
  _dewExec$2a = true;
  Object.defineProperty(exports$2b, "__esModule", {
    value: true
  });
  exports$2b._containerInsert = _containerInsert;
  exports$2b._containerInsertAfter = _containerInsertAfter;
  exports$2b._containerInsertBefore = _containerInsertBefore;
  exports$2b._verifyNodeList = _verifyNodeList;
  exports$2b.hoist = hoist;
  exports$2b.insertAfter = insertAfter;
  exports$2b.insertBefore = insertBefore;
  exports$2b.pushContainer = pushContainer;
  exports$2b.unshiftContainer = unshiftContainer;
  exports$2b.updateSiblingKeys = updateSiblingKeys;
  var _cache = dew$2J();
  var _hoister = dew$2d();
  var _index = dew$23();
  var _context = dew$20();
  var _removal = dew$2b();
  var _t = dew$3i();
  const {
    arrowFunctionExpression,
    assertExpression,
    assignmentExpression,
    blockStatement,
    callExpression,
    cloneNode,
    expressionStatement,
    isAssignmentExpression,
    isCallExpression,
    isExportNamedDeclaration,
    isExpression,
    isIdentifier,
    isSequenceExpression,
    isSuper,
    thisExpression
  } = _t;
  function insertBefore(nodes_) {
    _removal._assertUnremoved.call(this);
    const nodes = _verifyNodeList.call(this, nodes_);
    const {
      parentPath,
      parent
    } = this;
    if (parentPath.isExpressionStatement() || parentPath.isLabeledStatement() || isExportNamedDeclaration(parent) || parentPath.isExportDefaultDeclaration() && this.isDeclaration()) {
      return parentPath.insertBefore(nodes);
    } else if (this.isNodeType("Expression") && !this.isJSXElement() || parentPath.isForStatement() && this.key === "init") {
      if (this.node) nodes.push(this.node);
      return this.replaceExpressionWithStatements(nodes);
    } else if (Array.isArray(this.container)) {
      return _containerInsertBefore.call(this, nodes);
    } else if (this.isStatementOrBlock()) {
      const node = this.node;
      const shouldInsertCurrentNode = node && (!this.isExpressionStatement() || node.expression != null);
      this.replaceWith(blockStatement(shouldInsertCurrentNode ? [node] : []));
      return this.unshiftContainer("body", nodes);
    } else {
      throw new Error("We don't know what to do with this node type. " + "We were previously a Statement but we can't fit in here?");
    }
  }
  function _containerInsert(from, nodes) {
    this.updateSiblingKeys(from, nodes.length);
    const paths = [];
    this.container.splice(from, 0, ...nodes);
    for (let i = 0; i < nodes.length; i++) {
      var _this$context;
      const to = from + i;
      const path = this.getSibling(to);
      paths.push(path);
      if ((_this$context = this.context) != null && _this$context.queue) {
        path.pushContext(this.context);
      }
    }
    const contexts = _context._getQueueContexts.call(this);
    for (const path of paths) {
      path.setScope();
      path.debug("Inserted.");
      for (const context of contexts) {
        context.maybeQueue(path, true);
      }
    }
    return paths;
  }
  function _containerInsertBefore(nodes) {
    return _containerInsert.call(this, this.key, nodes);
  }
  function _containerInsertAfter(nodes) {
    return _containerInsert.call(this, this.key + 1, nodes);
  }
  const last = arr => arr[arr.length - 1];
  function isHiddenInSequenceExpression(path) {
    return isSequenceExpression(path.parent) && (last(path.parent.expressions) !== path.node || isHiddenInSequenceExpression(path.parentPath));
  }
  function isAlmostConstantAssignment(node, scope) {
    if (!isAssignmentExpression(node) || !isIdentifier(node.left)) {
      return false;
    }
    const blockScope = scope.getBlockParent();
    return blockScope.hasOwnBinding(node.left.name) && blockScope.getOwnBinding(node.left.name).constantViolations.length <= 1;
  }
  function insertAfter(nodes_) {
    _removal._assertUnremoved.call(this);
    if (this.isSequenceExpression()) {
      return last(this.get("expressions")).insertAfter(nodes_);
    }
    const nodes = _verifyNodeList.call(this, nodes_);
    const {
      parentPath,
      parent
    } = this;
    if (parentPath.isExpressionStatement() || parentPath.isLabeledStatement() || isExportNamedDeclaration(parent) || parentPath.isExportDefaultDeclaration() && this.isDeclaration()) {
      return parentPath.insertAfter(nodes.map(node => {
        return isExpression(node) ? expressionStatement(node) : node;
      }));
    } else if (this.isNodeType("Expression") && !this.isJSXElement() && !parentPath.isJSXElement() || parentPath.isForStatement() && this.key === "init") {
      const self = this;
      if (self.node) {
        const node = self.node;
        let {
          scope
        } = this;
        if (scope.path.isPattern()) {
          assertExpression(node);
          self.replaceWith(callExpression(arrowFunctionExpression([], node), []));
          self.get("callee.body").insertAfter(nodes);
          return [self];
        }
        if (isHiddenInSequenceExpression(self)) {
          nodes.unshift(node);
        } else if (isCallExpression(node) && isSuper(node.callee)) {
          nodes.unshift(node);
          nodes.push(thisExpression());
        } else if (isAlmostConstantAssignment(node, scope)) {
          nodes.unshift(node);
          nodes.push(cloneNode(node.left));
        } else if (scope.isPure(node, true)) {
          nodes.push(node);
        } else {
          if (parentPath.isMethod({
            computed: true,
            key: node
          })) {
            scope = scope.parent;
          }
          const temp = scope.generateDeclaredUidIdentifier();
          nodes.unshift(expressionStatement(assignmentExpression("=", cloneNode(temp), node)));
          nodes.push(expressionStatement(cloneNode(temp)));
        }
      }
      return this.replaceExpressionWithStatements(nodes);
    } else if (Array.isArray(this.container)) {
      return _containerInsertAfter.call(this, nodes);
    } else if (this.isStatementOrBlock()) {
      const node = this.node;
      const shouldInsertCurrentNode = node && (!this.isExpressionStatement() || node.expression != null);
      this.replaceWith(blockStatement(shouldInsertCurrentNode ? [node] : []));
      return this.pushContainer("body", nodes);
    } else {
      throw new Error("We don't know what to do with this node type. " + "We were previously a Statement but we can't fit in here?");
    }
  }
  function updateSiblingKeys(fromIndex, incrementBy) {
    if (!this.parent) return;
    const paths = (0, _cache.getCachedPaths)(this.hub, this.parent) || [];
    for (const [, path] of paths) {
      if (typeof path.key === "number" && path.key >= fromIndex) {
        path.key += incrementBy;
      }
    }
  }
  function _verifyNodeList(nodes) {
    if (!nodes) {
      return [];
    }
    if (!Array.isArray(nodes)) {
      nodes = [nodes];
    }
    for (let i = 0; i < nodes.length; i++) {
      const node = nodes[i];
      let msg;
      if (!node) {
        msg = "has falsy node";
      } else if (typeof node !== "object") {
        msg = "contains a non-object node";
      } else if (!node.type) {
        msg = "without a type";
      } else if (node instanceof _index.default) {
        msg = "has a NodePath when it expected a raw object";
      }
      if (msg) {
        const type = Array.isArray(node) ? "array" : typeof node;
        throw new Error(`Node list ${msg} with the index of ${i} and type of ${type}`);
      }
    }
    return nodes;
  }
  function unshiftContainer(listKey, nodes) {
    _removal._assertUnremoved.call(this);
    nodes = _verifyNodeList.call(this, nodes);
    const path = _index.default.get({
      parentPath: this,
      parent: this.node,
      container: this.node[listKey],
      listKey,
      key: 0
    }).setContext(this.context);
    return _containerInsertBefore.call(path, nodes);
  }
  function pushContainer(listKey, nodes) {
    _removal._assertUnremoved.call(this);
    const verifiedNodes = _verifyNodeList.call(this, nodes);
    const container = this.node[listKey];
    const path = _index.default.get({
      parentPath: this,
      parent: this.node,
      container: container,
      listKey,
      key: container.length
    }).setContext(this.context);
    return path.replaceWithMultiple(verifiedNodes);
  }
  function hoist(scope = this.scope) {
    const hoister = new _hoister.default(this, scope);
    return hoister.run();
  }
  return exports$2b;
}

var exports$2a = {},
  _dewExec$29 = false;
function dew$29() {
  if (_dewExec$29) return exports$2a;
  _dewExec$29 = true;
  Object.defineProperty(exports$2a, "__esModule", {
    value: true
  });
  exports$2a._replaceWith = _replaceWith;
  exports$2a.replaceExpressionWithStatements = replaceExpressionWithStatements;
  exports$2a.replaceInline = replaceInline;
  exports$2a.replaceWith = replaceWith;
  exports$2a.replaceWithMultiple = replaceWithMultiple;
  exports$2a.replaceWithSourceString = replaceWithSourceString;
  var _codeFrame = dew$31();
  var _index = dew$1_();
  var _index2 = dew$23();
  var _cache = dew$2J();
  var _modification = dew$2a();
  var _parser = dew$3f();
  var _t = dew$3i();
  const {
    FUNCTION_TYPES,
    arrowFunctionExpression,
    assignmentExpression,
    awaitExpression,
    blockStatement,
    buildUndefinedNode,
    callExpression,
    cloneNode,
    conditionalExpression,
    expressionStatement,
    getBindingIdentifiers,
    identifier,
    inheritLeadingComments,
    inheritTrailingComments,
    inheritsComments,
    isBlockStatement,
    isEmptyStatement,
    isExpression,
    isExpressionStatement,
    isIfStatement,
    isProgram,
    isStatement,
    isVariableDeclaration,
    removeComments,
    returnStatement,
    sequenceExpression,
    validate,
    yieldExpression
  } = _t;
  function replaceWithMultiple(nodes) {
    var _getCachedPaths;
    this.resync();
    nodes = _modification._verifyNodeList.call(this, nodes);
    inheritLeadingComments(nodes[0], this.node);
    inheritTrailingComments(nodes[nodes.length - 1], this.node);
    (_getCachedPaths = (0, _cache.getCachedPaths)(this.hub, this.parent)) == null || _getCachedPaths.delete(this.node);
    this.node = this.container[this.key] = null;
    const paths = this.insertAfter(nodes);
    if (this.node) {
      this.requeue();
    } else {
      this.remove();
    }
    return paths;
  }
  function replaceWithSourceString(replacement) {
    this.resync();
    let ast;
    try {
      replacement = `(${replacement})`;
      ast = (0, _parser.parse)(replacement);
    } catch (err) {
      const loc = err.loc;
      if (loc) {
        err.message += " - make sure this is an expression.\n" + (0, _codeFrame.codeFrameColumns)(replacement, {
          start: {
            line: loc.line,
            column: loc.column + 1
          }
        });
        err.code = "BABEL_REPLACE_SOURCE_ERROR";
      }
      throw err;
    }
    const expressionAST = ast.program.body[0].expression;
    _index.default.removeProperties(expressionAST);
    return this.replaceWith(expressionAST);
  }
  function replaceWith(replacementPath) {
    this.resync();
    if (this.removed) {
      throw new Error("You can't replace this node, we've already removed it");
    }
    let replacement = replacementPath instanceof _index2.default ? replacementPath.node : replacementPath;
    if (!replacement) {
      throw new Error("You passed `path.replaceWith()` a falsy node, use `path.remove()` instead");
    }
    if (this.node === replacement) {
      return [this];
    }
    if (this.isProgram() && !isProgram(replacement)) {
      throw new Error("You can only replace a Program root node with another Program node");
    }
    if (Array.isArray(replacement)) {
      throw new Error("Don't use `path.replaceWith()` with an array of nodes, use `path.replaceWithMultiple()`");
    }
    if (typeof replacement === "string") {
      throw new Error("Don't use `path.replaceWith()` with a source string, use `path.replaceWithSourceString()`");
    }
    let nodePath = "";
    if (this.isNodeType("Statement") && isExpression(replacement)) {
      if (!this.canHaveVariableDeclarationOrExpression() && !this.canSwapBetweenExpressionAndStatement(replacement) && !this.parentPath.isExportDefaultDeclaration()) {
        replacement = expressionStatement(replacement);
        nodePath = "expression";
      }
    }
    if (this.isNodeType("Expression") && isStatement(replacement)) {
      if (!this.canHaveVariableDeclarationOrExpression() && !this.canSwapBetweenExpressionAndStatement(replacement)) {
        return this.replaceExpressionWithStatements([replacement]);
      }
    }
    const oldNode = this.node;
    if (oldNode) {
      inheritsComments(replacement, oldNode);
      removeComments(oldNode);
    }
    _replaceWith.call(this, replacement);
    this.type = replacement.type;
    this.setScope();
    this.requeue();
    return [nodePath ? this.get(nodePath) : this];
  }
  function _replaceWith(node) {
    var _getCachedPaths2;
    if (!this.container) {
      throw new ReferenceError("Container is falsy");
    }
    if (this.inList) {
      validate(this.parent, this.key, [node]);
    } else {
      validate(this.parent, this.key, node);
    }
    this.debug(`Replace with ${node == null ? void 0 : node.type}`);
    (_getCachedPaths2 = (0, _cache.getCachedPaths)(this.hub, this.parent)) == null || _getCachedPaths2.set(node, this).delete(this.node);
    this.node = this.container[this.key] = node;
  }
  function replaceExpressionWithStatements(nodes) {
    this.resync();
    const declars = [];
    const nodesAsSingleExpression = gatherSequenceExpressions(nodes, declars);
    if (nodesAsSingleExpression) {
      for (const id of declars) this.scope.push({
        id
      });
      return this.replaceWith(nodesAsSingleExpression)[0].get("expressions");
    }
    const functionParent = this.getFunctionParent();
    const isParentAsync = functionParent == null ? void 0 : functionParent.is("async");
    const isParentGenerator = functionParent == null ? void 0 : functionParent.is("generator");
    const container = arrowFunctionExpression([], blockStatement(nodes));
    this.replaceWith(callExpression(container, []));
    const callee = this.get("callee");
    callee.get("body").scope.hoistVariables(id => this.scope.push({
      id
    }));
    const completionRecords = callee.getCompletionRecords();
    for (const path of completionRecords) {
      if (!path.isExpressionStatement()) continue;
      const loop = path.findParent(path => path.isLoop());
      if (loop) {
        let uid = loop.getData("expressionReplacementReturnUid");
        if (!uid) {
          uid = callee.scope.generateDeclaredUidIdentifier("ret");
          callee.get("body").pushContainer("body", returnStatement(cloneNode(uid)));
          loop.setData("expressionReplacementReturnUid", uid);
        } else {
          uid = identifier(uid.name);
        }
        path.get("expression").replaceWith(assignmentExpression("=", cloneNode(uid), path.node.expression));
      } else {
        path.replaceWith(returnStatement(path.node.expression));
      }
    }
    callee.arrowFunctionToExpression();
    const newCallee = callee;
    const needToAwaitFunction = isParentAsync && _index.default.hasType(this.get("callee.body").node, "AwaitExpression", FUNCTION_TYPES);
    const needToYieldFunction = isParentGenerator && _index.default.hasType(this.get("callee.body").node, "YieldExpression", FUNCTION_TYPES);
    if (needToAwaitFunction) {
      newCallee.set("async", true);
      if (!needToYieldFunction) {
        this.replaceWith(awaitExpression(this.node));
      }
    }
    if (needToYieldFunction) {
      newCallee.set("generator", true);
      this.replaceWith(yieldExpression(this.node, true));
    }
    return newCallee.get("body.body");
  }
  function gatherSequenceExpressions(nodes, declars) {
    const exprs = [];
    let ensureLastUndefined = true;
    for (const node of nodes) {
      if (!isEmptyStatement(node)) {
        ensureLastUndefined = false;
      }
      if (isExpression(node)) {
        exprs.push(node);
      } else if (isExpressionStatement(node)) {
        exprs.push(node.expression);
      } else if (isVariableDeclaration(node)) {
        if (node.kind !== "var") return;
        for (const declar of node.declarations) {
          const bindings = getBindingIdentifiers(declar);
          for (const key of Object.keys(bindings)) {
            declars.push(cloneNode(bindings[key]));
          }
          if (declar.init) {
            exprs.push(assignmentExpression("=", declar.id, declar.init));
          }
        }
        ensureLastUndefined = true;
      } else if (isIfStatement(node)) {
        const consequent = node.consequent ? gatherSequenceExpressions([node.consequent], declars) : buildUndefinedNode();
        const alternate = node.alternate ? gatherSequenceExpressions([node.alternate], declars) : buildUndefinedNode();
        if (!consequent || !alternate) return;
        exprs.push(conditionalExpression(node.test, consequent, alternate));
      } else if (isBlockStatement(node)) {
        const body = gatherSequenceExpressions(node.body, declars);
        if (!body) return;
        exprs.push(body);
      } else if (isEmptyStatement(node)) {
        if (nodes.indexOf(node) === 0) {
          ensureLastUndefined = true;
        }
      } else {
        return;
      }
    }
    if (ensureLastUndefined) exprs.push(buildUndefinedNode());
    if (exprs.length === 1) {
      return exprs[0];
    } else {
      return sequenceExpression(exprs);
    }
  }
  function replaceInline(nodes) {
    this.resync();
    if (Array.isArray(nodes)) {
      if (Array.isArray(this.container)) {
        nodes = _modification._verifyNodeList.call(this, nodes);
        const paths = _modification._containerInsertAfter.call(this, nodes);
        this.remove();
        return paths;
      } else {
        return this.replaceWithMultiple(nodes);
      }
    } else {
      return this.replaceWith(nodes);
    }
  }
  return exports$2a;
}

var exports$29 = {},
  _dewExec$28 = false;
var _global$3 = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
function dew$28() {
  if (_dewExec$28) return exports$29;
  _dewExec$28 = true;
  Object.defineProperty(exports$29, "__esModule", {
    value: true
  });
  exports$29.evaluate = evaluate;
  exports$29.evaluateTruthy = evaluateTruthy;
  const VALID_OBJECT_CALLEES = ["Number", "String", "Math"];
  const VALID_IDENTIFIER_CALLEES = ["isFinite", "isNaN", "parseFloat", "parseInt", "decodeURI", "decodeURIComponent", "encodeURI", "encodeURIComponent", null, null];
  const INVALID_METHODS = ["random"];
  function isValidObjectCallee(val) {
    return VALID_OBJECT_CALLEES.includes(val);
  }
  function isValidIdentifierCallee(val) {
    return VALID_IDENTIFIER_CALLEES.includes(val);
  }
  function isInvalidMethod(val) {
    return INVALID_METHODS.includes(val);
  }
  function evaluateTruthy() {
    const res = this.evaluate();
    if (res.confident) return !!res.value;
  }
  function deopt(path, state) {
    if (!state.confident) return;
    state.deoptPath = path;
    state.confident = false;
  }
  const Globals = new Map([["undefined", undefined], ["Infinity", Infinity], ["NaN", NaN]]);
  function evaluateCached(path, state) {
    const {
      node
    } = path;
    const {
      seen
    } = state;
    if (seen.has(node)) {
      const existing = seen.get(node);
      if (existing.resolved) {
        return existing.value;
      } else {
        deopt(path, state);
        return;
      }
    } else {
      const item = {
        resolved: false
      };
      seen.set(node, item);
      const val = _evaluate(path, state);
      if (state.confident) {
        item.resolved = true;
        item.value = val;
      }
      return val;
    }
  }
  function _evaluate(path, state) {
    if (!state.confident) return;
    if (path.isSequenceExpression()) {
      const exprs = path.get("expressions");
      return evaluateCached(exprs[exprs.length - 1], state);
    }
    if (path.isStringLiteral() || path.isNumericLiteral() || path.isBooleanLiteral()) {
      return path.node.value;
    }
    if (path.isNullLiteral()) {
      return null;
    }
    if (path.isTemplateLiteral()) {
      return evaluateQuasis(path, path.node.quasis, state);
    }
    if (path.isTaggedTemplateExpression() && path.get("tag").isMemberExpression()) {
      const object = path.get("tag.object");
      const {
        node: {
          name
        }
      } = object;
      const property = path.get("tag.property");
      if (object.isIdentifier() && name === "String" && !path.scope.getBinding(name) && property.isIdentifier() && property.node.name === "raw") {
        return evaluateQuasis(path, path.node.quasi.quasis, state, true);
      }
    }
    if (path.isConditionalExpression()) {
      const testResult = evaluateCached(path.get("test"), state);
      if (!state.confident) return;
      if (testResult) {
        return evaluateCached(path.get("consequent"), state);
      } else {
        return evaluateCached(path.get("alternate"), state);
      }
    }
    if (path.isExpressionWrapper()) {
      return evaluateCached(path.get("expression"), state);
    }
    if (path.isMemberExpression() && !path.parentPath.isCallExpression({
      callee: path.node
    })) {
      const property = path.get("property");
      const object = path.get("object");
      if (object.isLiteral()) {
        const value = object.node.value;
        const type = typeof value;
        let key = null;
        if (path.node.computed) {
          key = evaluateCached(property, state);
          if (!state.confident) return;
        } else if (property.isIdentifier()) {
          key = property.node.name;
        }
        if ((type === "number" || type === "string") && key != null && (typeof key === "number" || typeof key === "string")) {
          return value[key];
        }
      }
    }
    if (path.isReferencedIdentifier()) {
      const binding = path.scope.getBinding(path.node.name);
      if (binding) {
        if (binding.constantViolations.length > 0 || path.node.start < binding.path.node.end) {
          deopt(binding.path, state);
          return;
        }
        if (binding.hasValue) {
          return binding.value;
        }
      }
      const name = path.node.name;
      if (Globals.has(name)) {
        if (!binding) {
          return Globals.get(name);
        }
        deopt(binding.path, state);
        return;
      }
      const resolved = path.resolve();
      if (resolved === path) {
        deopt(path, state);
        return;
      } else {
        return evaluateCached(resolved, state);
      }
    }
    if (path.isUnaryExpression({
      prefix: true
    })) {
      if (path.node.operator === "void") {
        return undefined;
      }
      const argument = path.get("argument");
      if (path.node.operator === "typeof" && (argument.isFunction() || argument.isClass())) {
        return "function";
      }
      const arg = evaluateCached(argument, state);
      if (!state.confident) return;
      switch (path.node.operator) {
        case "!":
          return !arg;
        case "+":
          return +arg;
        case "-":
          return -arg;
        case "~":
          return ~arg;
        case "typeof":
          return typeof arg;
      }
    }
    if (path.isArrayExpression()) {
      const arr = [];
      const elems = path.get("elements");
      for (const elem of elems) {
        const elemValue = elem.evaluate();
        if (elemValue.confident) {
          arr.push(elemValue.value);
        } else {
          deopt(elemValue.deopt, state);
          return;
        }
      }
      return arr;
    }
    if (path.isObjectExpression()) {
      const obj = {};
      const props = path.get("properties");
      for (const prop of props) {
        if (prop.isObjectMethod() || prop.isSpreadElement()) {
          deopt(prop, state);
          return;
        }
        const keyPath = prop.get("key");
        let key;
        if (prop.node.computed) {
          key = keyPath.evaluate();
          if (!key.confident) {
            deopt(key.deopt, state);
            return;
          }
          key = key.value;
        } else if (keyPath.isIdentifier()) {
          key = keyPath.node.name;
        } else {
          key = keyPath.node.value;
        }
        const valuePath = prop.get("value");
        let value = valuePath.evaluate();
        if (!value.confident) {
          deopt(value.deopt, state);
          return;
        }
        value = value.value;
        obj[key] = value;
      }
      return obj;
    }
    if (path.isLogicalExpression()) {
      const wasConfident = state.confident;
      const left = evaluateCached(path.get("left"), state);
      const leftConfident = state.confident;
      state.confident = wasConfident;
      const right = evaluateCached(path.get("right"), state);
      const rightConfident = state.confident;
      switch (path.node.operator) {
        case "||":
          state.confident = leftConfident && (!!left || rightConfident);
          if (!state.confident) return;
          return left || right;
        case "&&":
          state.confident = leftConfident && (!left || rightConfident);
          if (!state.confident) return;
          return left && right;
        case "??":
          state.confident = leftConfident && (left != null || rightConfident);
          if (!state.confident) return;
          return left != null ? left : right;
      }
    }
    if (path.isBinaryExpression()) {
      const left = evaluateCached(path.get("left"), state);
      if (!state.confident) return;
      const right = evaluateCached(path.get("right"), state);
      if (!state.confident) return;
      switch (path.node.operator) {
        case "-":
          return left - right;
        case "+":
          return left + right;
        case "/":
          return left / right;
        case "*":
          return left * right;
        case "%":
          return left % right;
        case "**":
          return Math.pow(left, right);
        case "<":
          return left < right;
        case ">":
          return left > right;
        case "<=":
          return left <= right;
        case ">=":
          return left >= right;
        case "==":
          return left == right;
        case "!=":
          return left != right;
        case "===":
          return left === right;
        case "!==":
          return left !== right;
        case "|":
          return left | right;
        case "&":
          return left & right;
        case "^":
          return left ^ right;
        case "<<":
          return left << right;
        case ">>":
          return left >> right;
        case ">>>":
          return left >>> right;
      }
    }
    if (path.isCallExpression()) {
      const callee = path.get("callee");
      let context;
      let func;
      if (callee.isIdentifier() && !path.scope.getBinding(callee.node.name) && (isValidObjectCallee(callee.node.name) || isValidIdentifierCallee(callee.node.name))) {
        func = _global$3[callee.node.name];
      }
      if (callee.isMemberExpression()) {
        const object = callee.get("object");
        const property = callee.get("property");
        if (object.isIdentifier() && property.isIdentifier() && isValidObjectCallee(object.node.name) && !isInvalidMethod(property.node.name)) {
          context = _global$3[object.node.name];
          const key = property.node.name;
          if (hasOwnProperty.call(context, key)) {
            func = context[key];
          }
        }
        if (object.isLiteral() && property.isIdentifier()) {
          const type = typeof object.node.value;
          if (type === "string" || type === "number") {
            context = object.node.value;
            func = context[property.node.name];
          }
        }
      }
      if (func) {
        const args = path.get("arguments").map(arg => evaluateCached(arg, state));
        if (!state.confident) return;
        return func.apply(context, args);
      }
    }
    deopt(path, state);
  }
  function evaluateQuasis(path, quasis, state, raw = false) {
    let str = "";
    let i = 0;
    const exprs = path.isTemplateLiteral() ? path.get("expressions") : path.get("quasi.expressions");
    for (const elem of quasis) {
      if (!state.confident) break;
      str += raw ? elem.value.raw : elem.value.cooked;
      const expr = exprs[i++];
      if (expr) str += String(evaluateCached(expr, state));
    }
    if (!state.confident) return;
    return str;
  }
  function evaluate() {
    const state = {
      confident: true,
      deoptPath: null,
      seen: new Map()
    };
    let value = evaluateCached(this, state);
    if (!state.confident) value = undefined;
    return {
      confident: state.confident,
      deopt: state.deoptPath,
      value: value
    };
  }
  return exports$29;
}

var exports$28 = {},
  _dewExec$27 = false;
function dew$27() {
  if (_dewExec$27) return exports$28;
  _dewExec$27 = true;
  Object.defineProperty(exports$28, "__esModule", {
    value: true
  });
  exports$28.arrowFunctionToExpression = arrowFunctionToExpression;
  exports$28.ensureBlock = ensureBlock;
  exports$28.ensureFunctionName = ensureFunctionName;
  exports$28.splitExportDeclaration = splitExportDeclaration;
  exports$28.toComputedKey = toComputedKey;
  exports$28.unwrapFunctionEnvironment = unwrapFunctionEnvironment;
  var _t = dew$3i();
  var _template = dew$2X();
  var _visitors = dew$2N();
  const {
    arrowFunctionExpression,
    assignmentExpression,
    binaryExpression,
    blockStatement,
    callExpression,
    conditionalExpression,
    expressionStatement,
    identifier,
    isIdentifier,
    jsxIdentifier,
    logicalExpression,
    LOGICAL_OPERATORS,
    memberExpression,
    metaProperty,
    numericLiteral,
    objectExpression,
    restElement,
    returnStatement,
    sequenceExpression,
    spreadElement,
    stringLiteral,
    super: _super,
    thisExpression,
    toExpression,
    unaryExpression,
    toBindingIdentifierName,
    isFunction,
    isAssignmentPattern,
    isRestElement,
    getFunctionName,
    cloneNode,
    variableDeclaration,
    variableDeclarator,
    exportNamedDeclaration,
    exportSpecifier,
    inherits
  } = _t;
  function toComputedKey() {
    let key;
    if (this.isMemberExpression()) {
      key = this.node.property;
    } else if (this.isProperty() || this.isMethod()) {
      key = this.node.key;
    } else {
      throw new ReferenceError("todo");
    }
    if (!this.node.computed) {
      if (isIdentifier(key)) key = stringLiteral(key.name);
    }
    return key;
  }
  function ensureBlock() {
    const body = this.get("body");
    const bodyNode = body.node;
    if (Array.isArray(body)) {
      throw new Error("Can't convert array path to a block statement");
    }
    if (!bodyNode) {
      throw new Error("Can't convert node without a body");
    }
    if (body.isBlockStatement()) {
      return bodyNode;
    }
    const statements = [];
    let stringPath = "body";
    let key;
    let listKey;
    if (body.isStatement()) {
      listKey = "body";
      key = 0;
      statements.push(body.node);
    } else {
      stringPath += ".body.0";
      if (this.isFunction()) {
        key = "argument";
        statements.push(returnStatement(body.node));
      } else {
        key = "expression";
        statements.push(expressionStatement(body.node));
      }
    }
    this.node.body = blockStatement(statements);
    const parentPath = this.get(stringPath);
    body.setup(parentPath, listKey ? parentPath.node[listKey] : parentPath.node, listKey, key);
    return this.node;
  }
  {
    exports$28.arrowFunctionToShadowed = function () {
      if (!this.isArrowFunctionExpression()) return;
      this.arrowFunctionToExpression();
    };
  }
  function unwrapFunctionEnvironment() {
    if (!this.isArrowFunctionExpression() && !this.isFunctionExpression() && !this.isFunctionDeclaration()) {
      throw this.buildCodeFrameError("Can only unwrap the environment of a function.");
    }
    hoistFunctionEnvironment(this);
  }
  function setType(path, type) {
    path.node.type = type;
  }
  function arrowFunctionToExpression({
    allowInsertArrow = true,
    allowInsertArrowWithRest = allowInsertArrow,
    noNewArrows = !(_arguments$ => (_arguments$ = arguments[0]) == null ? void 0 : _arguments$.specCompliant)()
  } = {}) {
    if (!this.isArrowFunctionExpression()) {
      throw this.buildCodeFrameError("Cannot convert non-arrow function to a function expression.");
    }
    let self = this;
    if (!noNewArrows) {
      var _self$ensureFunctionN;
      self = (_self$ensureFunctionN = self.ensureFunctionName(false)) != null ? _self$ensureFunctionN : self;
    }
    const {
      thisBinding,
      fnPath: fn
    } = hoistFunctionEnvironment(self, noNewArrows, allowInsertArrow, allowInsertArrowWithRest);
    fn.ensureBlock();
    setType(fn, "FunctionExpression");
    if (!noNewArrows) {
      const checkBinding = thisBinding ? null : fn.scope.generateUidIdentifier("arrowCheckId");
      if (checkBinding) {
        fn.parentPath.scope.push({
          id: checkBinding,
          init: objectExpression([])
        });
      }
      fn.get("body").unshiftContainer("body", expressionStatement(callExpression(this.hub.addHelper("newArrowCheck"), [thisExpression(), checkBinding ? identifier(checkBinding.name) : identifier(thisBinding)])));
      fn.replaceWith(callExpression(memberExpression(fn.node, identifier("bind")), [checkBinding ? identifier(checkBinding.name) : thisExpression()]));
      return fn.get("callee.object");
    }
    return fn;
  }
  const getSuperCallsVisitor = (0, _visitors.environmentVisitor)({
    CallExpression(child, {
      allSuperCalls
    }) {
      if (!child.get("callee").isSuper()) return;
      allSuperCalls.push(child);
    }
  });
  function hoistFunctionEnvironment(fnPath, noNewArrows = true, allowInsertArrow = true, allowInsertArrowWithRest = true) {
    let arrowParent;
    let thisEnvFn = fnPath.findParent(p => {
      if (p.isArrowFunctionExpression()) {
        var _arrowParent;
        (_arrowParent = arrowParent) != null ? _arrowParent : arrowParent = p;
        return false;
      }
      return p.isFunction() || p.isProgram() || p.isClassProperty({
        static: false
      }) || p.isClassPrivateProperty({
        static: false
      });
    });
    const inConstructor = thisEnvFn.isClassMethod({
      kind: "constructor"
    });
    if (thisEnvFn.isClassProperty() || thisEnvFn.isClassPrivateProperty()) {
      if (arrowParent) {
        thisEnvFn = arrowParent;
      } else if (allowInsertArrow) {
        fnPath.replaceWith(callExpression(arrowFunctionExpression([], toExpression(fnPath.node)), []));
        thisEnvFn = fnPath.get("callee");
        fnPath = thisEnvFn.get("body");
      } else {
        throw fnPath.buildCodeFrameError("Unable to transform arrow inside class property");
      }
    }
    const {
      thisPaths,
      argumentsPaths,
      newTargetPaths,
      superProps,
      superCalls
    } = getScopeInformation(fnPath);
    if (inConstructor && superCalls.length > 0) {
      if (!allowInsertArrow) {
        throw superCalls[0].buildCodeFrameError("When using '@babel/plugin-transform-arrow-functions', " + "it's not possible to compile `super()` in an arrow function without compiling classes.\n" + "Please add '@babel/plugin-transform-classes' to your Babel configuration.");
      }
      if (!allowInsertArrowWithRest) {
        throw superCalls[0].buildCodeFrameError("When using '@babel/plugin-transform-parameters', " + "it's not possible to compile `super()` in an arrow function with default or rest parameters without compiling classes.\n" + "Please add '@babel/plugin-transform-classes' to your Babel configuration.");
      }
      const allSuperCalls = [];
      thisEnvFn.traverse(getSuperCallsVisitor, {
        allSuperCalls
      });
      const superBinding = getSuperBinding(thisEnvFn);
      allSuperCalls.forEach(superCall => {
        const callee = identifier(superBinding);
        callee.loc = superCall.node.callee.loc;
        superCall.get("callee").replaceWith(callee);
      });
    }
    if (argumentsPaths.length > 0) {
      const argumentsBinding = getBinding(thisEnvFn, "arguments", () => {
        const args = () => identifier("arguments");
        if (thisEnvFn.scope.path.isProgram()) {
          return conditionalExpression(binaryExpression("===", unaryExpression("typeof", args()), stringLiteral("undefined")), thisEnvFn.scope.buildUndefinedNode(), args());
        } else {
          return args();
        }
      });
      argumentsPaths.forEach(argumentsChild => {
        const argsRef = identifier(argumentsBinding);
        argsRef.loc = argumentsChild.node.loc;
        argumentsChild.replaceWith(argsRef);
      });
    }
    if (newTargetPaths.length > 0) {
      const newTargetBinding = getBinding(thisEnvFn, "newtarget", () => metaProperty(identifier("new"), identifier("target")));
      newTargetPaths.forEach(targetChild => {
        const targetRef = identifier(newTargetBinding);
        targetRef.loc = targetChild.node.loc;
        targetChild.replaceWith(targetRef);
      });
    }
    if (superProps.length > 0) {
      if (!allowInsertArrow) {
        throw superProps[0].buildCodeFrameError("When using '@babel/plugin-transform-arrow-functions', " + "it's not possible to compile `super.prop` in an arrow function without compiling classes.\n" + "Please add '@babel/plugin-transform-classes' to your Babel configuration.");
      }
      const flatSuperProps = superProps.reduce((acc, superProp) => acc.concat(standardizeSuperProperty(superProp)), []);
      flatSuperProps.forEach(superProp => {
        const key = superProp.node.computed ? "" : superProp.get("property").node.name;
        const superParentPath = superProp.parentPath;
        const isAssignment = superParentPath.isAssignmentExpression({
          left: superProp.node
        });
        const isCall = superParentPath.isCallExpression({
          callee: superProp.node
        });
        const isTaggedTemplate = superParentPath.isTaggedTemplateExpression({
          tag: superProp.node
        });
        const superBinding = getSuperPropBinding(thisEnvFn, isAssignment, key);
        const args = [];
        if (superProp.node.computed) {
          args.push(superProp.get("property").node);
        }
        if (isAssignment) {
          const value = superParentPath.node.right;
          args.push(value);
        }
        const call = callExpression(identifier(superBinding), args);
        if (isCall) {
          superParentPath.unshiftContainer("arguments", thisExpression());
          superProp.replaceWith(memberExpression(call, identifier("call")));
          thisPaths.push(superParentPath.get("arguments.0"));
        } else if (isAssignment) {
          superParentPath.replaceWith(call);
        } else if (isTaggedTemplate) {
          superProp.replaceWith(callExpression(memberExpression(call, identifier("bind"), false), [thisExpression()]));
          thisPaths.push(superProp.get("arguments.0"));
        } else {
          superProp.replaceWith(call);
        }
      });
    }
    let thisBinding;
    if (thisPaths.length > 0 || !noNewArrows) {
      thisBinding = getThisBinding(thisEnvFn, inConstructor);
      if (noNewArrows || inConstructor && hasSuperClass(thisEnvFn)) {
        thisPaths.forEach(thisChild => {
          const thisRef = thisChild.isJSX() ? jsxIdentifier(thisBinding) : identifier(thisBinding);
          thisRef.loc = thisChild.node.loc;
          thisChild.replaceWith(thisRef);
        });
        if (!noNewArrows) thisBinding = null;
      }
    }
    return {
      thisBinding,
      fnPath
    };
  }
  function isLogicalOp(op) {
    return LOGICAL_OPERATORS.includes(op);
  }
  function standardizeSuperProperty(superProp) {
    if (superProp.parentPath.isAssignmentExpression() && superProp.parentPath.node.operator !== "=") {
      const assignmentPath = superProp.parentPath;
      const op = assignmentPath.node.operator.slice(0, -1);
      const value = assignmentPath.node.right;
      const isLogicalAssignment = isLogicalOp(op);
      if (superProp.node.computed) {
        const tmp = superProp.scope.generateDeclaredUidIdentifier("tmp");
        const object = superProp.node.object;
        const property = superProp.node.property;
        assignmentPath.get("left").replaceWith(memberExpression(object, assignmentExpression("=", tmp, property), true));
        assignmentPath.get("right").replaceWith(rightExpression(isLogicalAssignment ? "=" : op, memberExpression(object, identifier(tmp.name), true), value));
      } else {
        const object = superProp.node.object;
        const property = superProp.node.property;
        assignmentPath.get("left").replaceWith(memberExpression(object, property));
        assignmentPath.get("right").replaceWith(rightExpression(isLogicalAssignment ? "=" : op, memberExpression(object, identifier(property.name)), value));
      }
      if (isLogicalAssignment) {
        assignmentPath.replaceWith(logicalExpression(op, assignmentPath.node.left, assignmentPath.node.right));
      } else {
        assignmentPath.node.operator = "=";
      }
      return [assignmentPath.get("left"), assignmentPath.get("right").get("left")];
    } else if (superProp.parentPath.isUpdateExpression()) {
      const updateExpr = superProp.parentPath;
      const tmp = superProp.scope.generateDeclaredUidIdentifier("tmp");
      const computedKey = superProp.node.computed ? superProp.scope.generateDeclaredUidIdentifier("prop") : null;
      const parts = [assignmentExpression("=", tmp, memberExpression(superProp.node.object, computedKey ? assignmentExpression("=", computedKey, superProp.node.property) : superProp.node.property, superProp.node.computed)), assignmentExpression("=", memberExpression(superProp.node.object, computedKey ? identifier(computedKey.name) : superProp.node.property, superProp.node.computed), binaryExpression(superProp.parentPath.node.operator[0], identifier(tmp.name), numericLiteral(1)))];
      if (!superProp.parentPath.node.prefix) {
        parts.push(identifier(tmp.name));
      }
      updateExpr.replaceWith(sequenceExpression(parts));
      const left = updateExpr.get("expressions.0.right");
      const right = updateExpr.get("expressions.1.left");
      return [left, right];
    }
    return [superProp];
    function rightExpression(op, left, right) {
      if (op === "=") {
        return assignmentExpression("=", left, right);
      } else {
        return binaryExpression(op, left, right);
      }
    }
  }
  function hasSuperClass(thisEnvFn) {
    return thisEnvFn.isClassMethod() && !!thisEnvFn.parentPath.parentPath.node.superClass;
  }
  const assignSuperThisVisitor = (0, _visitors.environmentVisitor)({
    CallExpression(child, {
      supers,
      thisBinding
    }) {
      if (!child.get("callee").isSuper()) return;
      if (supers.has(child.node)) return;
      supers.add(child.node);
      child.replaceWithMultiple([child.node, assignmentExpression("=", identifier(thisBinding), identifier("this"))]);
    }
  });
  function getThisBinding(thisEnvFn, inConstructor) {
    return getBinding(thisEnvFn, "this", thisBinding => {
      if (!inConstructor || !hasSuperClass(thisEnvFn)) return thisExpression();
      thisEnvFn.traverse(assignSuperThisVisitor, {
        supers: new WeakSet(),
        thisBinding
      });
    });
  }
  function getSuperBinding(thisEnvFn) {
    return getBinding(thisEnvFn, "supercall", () => {
      const argsBinding = thisEnvFn.scope.generateUidIdentifier("args");
      return arrowFunctionExpression([restElement(argsBinding)], callExpression(_super(), [spreadElement(identifier(argsBinding.name))]));
    });
  }
  function getSuperPropBinding(thisEnvFn, isAssignment, propName) {
    const op = isAssignment ? "set" : "get";
    return getBinding(thisEnvFn, `superprop_${op}:${propName || ""}`, () => {
      const argsList = [];
      let fnBody;
      if (propName) {
        fnBody = memberExpression(_super(), identifier(propName));
      } else {
        const method = thisEnvFn.scope.generateUidIdentifier("prop");
        argsList.unshift(method);
        fnBody = memberExpression(_super(), identifier(method.name), true);
      }
      if (isAssignment) {
        const valueIdent = thisEnvFn.scope.generateUidIdentifier("value");
        argsList.push(valueIdent);
        fnBody = assignmentExpression("=", fnBody, identifier(valueIdent.name));
      }
      return arrowFunctionExpression(argsList, fnBody);
    });
  }
  function getBinding(thisEnvFn, key, init) {
    const cacheKey = "binding:" + key;
    let data = thisEnvFn.getData(cacheKey);
    if (!data) {
      const id = thisEnvFn.scope.generateUidIdentifier(key);
      data = id.name;
      thisEnvFn.setData(cacheKey, data);
      thisEnvFn.scope.push({
        id: id,
        init: init(data)
      });
    }
    return data;
  }
  const getScopeInformationVisitor = (0, _visitors.environmentVisitor)({
    ThisExpression(child, {
      thisPaths
    }) {
      thisPaths.push(child);
    },
    JSXIdentifier(child, {
      thisPaths
    }) {
      if (child.node.name !== "this") return;
      if (!child.parentPath.isJSXMemberExpression({
        object: child.node
      }) && !child.parentPath.isJSXOpeningElement({
        name: child.node
      })) {
        return;
      }
      thisPaths.push(child);
    },
    CallExpression(child, {
      superCalls
    }) {
      if (child.get("callee").isSuper()) superCalls.push(child);
    },
    MemberExpression(child, {
      superProps
    }) {
      if (child.get("object").isSuper()) superProps.push(child);
    },
    Identifier(child, {
      argumentsPaths
    }) {
      if (!child.isReferencedIdentifier({
        name: "arguments"
      })) return;
      let curr = child.scope;
      do {
        if (curr.hasOwnBinding("arguments")) {
          curr.rename("arguments");
          return;
        }
        if (curr.path.isFunction() && !curr.path.isArrowFunctionExpression()) {
          break;
        }
      } while (curr = curr.parent);
      argumentsPaths.push(child);
    },
    MetaProperty(child, {
      newTargetPaths
    }) {
      if (!child.get("meta").isIdentifier({
        name: "new"
      })) return;
      if (!child.get("property").isIdentifier({
        name: "target"
      })) return;
      newTargetPaths.push(child);
    }
  });
  function getScopeInformation(fnPath) {
    const thisPaths = [];
    const argumentsPaths = [];
    const newTargetPaths = [];
    const superProps = [];
    const superCalls = [];
    fnPath.traverse(getScopeInformationVisitor, {
      thisPaths,
      argumentsPaths,
      newTargetPaths,
      superProps,
      superCalls
    });
    return {
      thisPaths,
      argumentsPaths,
      newTargetPaths,
      superProps,
      superCalls
    };
  }
  function splitExportDeclaration() {
    if (!this.isExportDeclaration() || this.isExportAllDeclaration()) {
      throw new Error("Only default and named export declarations can be split.");
    }
    if (this.isExportNamedDeclaration() && this.get("specifiers").length > 0) {
      throw new Error("It doesn't make sense to split exported specifiers.");
    }
    const declaration = this.get("declaration");
    if (this.isExportDefaultDeclaration()) {
      const standaloneDeclaration = declaration.isFunctionDeclaration() || declaration.isClassDeclaration();
      const exportExpr = declaration.isFunctionExpression() || declaration.isClassExpression();
      const scope = declaration.isScope() ? declaration.scope.parent : declaration.scope;
      let id = declaration.node.id;
      let needBindingRegistration = false;
      if (!id) {
        needBindingRegistration = true;
        id = scope.generateUidIdentifier("default");
        if (standaloneDeclaration || exportExpr) {
          declaration.node.id = cloneNode(id);
        }
      } else if (exportExpr && scope.hasBinding(id.name)) {
        needBindingRegistration = true;
        id = scope.generateUidIdentifier(id.name);
      }
      const updatedDeclaration = standaloneDeclaration ? declaration.node : variableDeclaration("var", [variableDeclarator(cloneNode(id), declaration.node)]);
      const updatedExportDeclaration = exportNamedDeclaration(null, [exportSpecifier(cloneNode(id), identifier("default"))]);
      this.insertAfter(updatedExportDeclaration);
      this.replaceWith(updatedDeclaration);
      if (needBindingRegistration) {
        scope.registerDeclaration(this);
      }
      return this;
    } else if (this.get("specifiers").length > 0) {
      throw new Error("It doesn't make sense to split exported specifiers.");
    }
    const bindingIdentifiers = declaration.getOuterBindingIdentifiers();
    const specifiers = Object.keys(bindingIdentifiers).map(name => {
      return exportSpecifier(identifier(name), identifier(name));
    });
    const aliasDeclar = exportNamedDeclaration(null, specifiers);
    this.insertAfter(aliasDeclar);
    this.replaceWith(declaration.node);
    return this;
  }
  const refersOuterBindingVisitor = {
    "ReferencedIdentifier|BindingIdentifier"(path, state) {
      if (path.node.name !== state.name) return;
      state.needsRename = true;
      path.stop();
    },
    Scope(path, state) {
      if (path.scope.hasOwnBinding(state.name)) {
        path.skip();
      }
    }
  };
  function ensureFunctionName(supportUnicodeId) {
    if (this.node.id) return this;
    const res = getFunctionName(this.node, this.parent);
    if (res == null) return this;
    let {
      name
    } = res;
    if (!supportUnicodeId && /[\uD800-\uDFFF]/.test(name)) {
      return null;
    }
    if (name.startsWith("get ") || name.startsWith("set ")) {
      return null;
    }
    name = toBindingIdentifierName(name.replace(/[/ ]/g, "_"));
    const id = identifier(name);
    inherits(id, res.originalNode);
    const state = {
      needsRename: false,
      name
    };
    const {
      scope
    } = this;
    const binding = scope.getOwnBinding(name);
    if (binding) {
      if (binding.kind === "param") {
        state.needsRename = true;
      }
    } else if (scope.parent.hasBinding(name) || scope.hasGlobal(name)) {
      this.traverse(refersOuterBindingVisitor, state);
    }
    if (!state.needsRename) {
      this.node.id = id;
      scope.getProgramParent().references[id.name] = true;
      return this;
    }
    if (scope.hasBinding(id.name) && !scope.hasGlobal(id.name)) {
      scope.rename(id.name);
      this.node.id = id;
      scope.getProgramParent().references[id.name] = true;
      return this;
    }
    if (!isFunction(this.node)) return null;
    const key = scope.generateUidIdentifier(id.name);
    const params = [];
    for (let i = 0, len = getFunctionArity(this.node); i < len; i++) {
      params.push(scope.generateUidIdentifier("x"));
    }
    const call = _template.default.expression.ast`
    (function (${key}) {
      function ${id}(${params}) {
        return ${cloneNode(key)}.apply(this, arguments);
      }

      ${cloneNode(id)}.toString = function () {
        return ${cloneNode(key)}.toString();
      }

      return ${cloneNode(id)};
    })(${toExpression(this.node)})
  `;
    return this.replaceWith(call)[0].get("arguments.0");
  }
  function getFunctionArity(node) {
    const count = node.params.findIndex(param => isAssignmentPattern(param) || isRestElement(param));
    return count === -1 ? node.params.length : count;
  }
  return exports$28;
}

var exports$27 = {},
  _dewExec$26 = false;
function dew$26() {
  if (_dewExec$26) return exports$27;
  _dewExec$26 = true;
  Object.defineProperty(exports$27, "__esModule", {
    value: true
  });
  exports$27._guessExecutionStatusRelativeTo = _guessExecutionStatusRelativeTo;
  exports$27._resolve = _resolve;
  exports$27.canHaveVariableDeclarationOrExpression = canHaveVariableDeclarationOrExpression;
  exports$27.canSwapBetweenExpressionAndStatement = canSwapBetweenExpressionAndStatement;
  exports$27.equals = equals;
  exports$27.getSource = getSource;
  exports$27.has = has;
  exports$27.is = void 0;
  exports$27.isCompletionRecord = isCompletionRecord;
  exports$27.isConstantExpression = isConstantExpression;
  exports$27.isInStrictMode = isInStrictMode;
  exports$27.isNodeType = isNodeType;
  exports$27.isStatementOrBlock = isStatementOrBlock;
  exports$27.isStatic = isStatic;
  exports$27.isnt = isnt;
  exports$27.matchesPattern = matchesPattern;
  exports$27.referencesImport = referencesImport;
  exports$27.resolve = resolve;
  exports$27.willIMaybeExecuteBefore = willIMaybeExecuteBefore;
  var _t = dew$3i();
  const {
    STATEMENT_OR_BLOCK_KEYS,
    VISITOR_KEYS,
    isBlockStatement,
    isExpression,
    isIdentifier,
    isLiteral,
    isStringLiteral,
    isType,
    matchesPattern: _matchesPattern
  } = _t;
  function matchesPattern(pattern, allowPartial) {
    return _matchesPattern(this.node, pattern, allowPartial);
  }
  function has(key) {
    var _this$node;
    const val = (_this$node = this.node) == null ? void 0 : _this$node[key];
    if (val && Array.isArray(val)) {
      return !!val.length;
    } else {
      return !!val;
    }
  }
  function isStatic() {
    return this.scope.isStatic(this.node);
  }
  exports$27.is = has;
  function isnt(key) {
    return !this.has(key);
  }
  function equals(key, value) {
    return this.node[key] === value;
  }
  function isNodeType(type) {
    return isType(this.type, type);
  }
  function canHaveVariableDeclarationOrExpression() {
    return (this.key === "init" || this.key === "left") && this.parentPath.isFor();
  }
  function canSwapBetweenExpressionAndStatement(replacement) {
    if (this.key !== "body" || !this.parentPath.isArrowFunctionExpression()) {
      return false;
    }
    if (this.isExpression()) {
      return isBlockStatement(replacement);
    } else if (this.isBlockStatement()) {
      return isExpression(replacement);
    }
    return false;
  }
  function isCompletionRecord(allowInsideFunction) {
    let path = this;
    let first = true;
    do {
      const {
        type,
        container
      } = path;
      if (!first && (path.isFunction() || type === "StaticBlock")) {
        return !!allowInsideFunction;
      }
      first = false;
      if (Array.isArray(container) && path.key !== container.length - 1) {
        return false;
      }
    } while ((path = path.parentPath) && !path.isProgram() && !path.isDoExpression());
    return true;
  }
  function isStatementOrBlock() {
    if (this.parentPath.isLabeledStatement() || isBlockStatement(this.container)) {
      return false;
    } else {
      return STATEMENT_OR_BLOCK_KEYS.includes(this.key);
    }
  }
  function referencesImport(moduleSource, importName) {
    if (!this.isReferencedIdentifier()) {
      if (this.isJSXMemberExpression() && this.node.property.name === importName || (this.isMemberExpression() || this.isOptionalMemberExpression()) && (this.node.computed ? isStringLiteral(this.node.property, {
        value: importName
      }) : this.node.property.name === importName)) {
        const object = this.get("object");
        return object.isReferencedIdentifier() && object.referencesImport(moduleSource, "*");
      }
      return false;
    }
    const binding = this.scope.getBinding(this.node.name);
    if (!binding || binding.kind !== "module") return false;
    const path = binding.path;
    const parent = path.parentPath;
    if (!parent.isImportDeclaration()) return false;
    if (parent.node.source.value === moduleSource) {
      if (!importName) return true;
    } else {
      return false;
    }
    if (path.isImportDefaultSpecifier() && importName === "default") {
      return true;
    }
    if (path.isImportNamespaceSpecifier() && importName === "*") {
      return true;
    }
    if (path.isImportSpecifier() && isIdentifier(path.node.imported, {
      name: importName
    })) {
      return true;
    }
    return false;
  }
  function getSource() {
    const node = this.node;
    if (node.end) {
      const code = this.hub.getCode();
      if (code) return code.slice(node.start, node.end);
    }
    return "";
  }
  function willIMaybeExecuteBefore(target) {
    return this._guessExecutionStatusRelativeTo(target) !== "after";
  }
  function getOuterFunction(path) {
    return path.isProgram() ? path : (path.parentPath.scope.getFunctionParent() || path.parentPath.scope.getProgramParent()).path;
  }
  function isExecutionUncertain(type, key) {
    switch (type) {
      case "LogicalExpression":
        return key === "right";
      case "ConditionalExpression":
      case "IfStatement":
        return key === "consequent" || key === "alternate";
      case "WhileStatement":
      case "DoWhileStatement":
      case "ForInStatement":
      case "ForOfStatement":
        return key === "body";
      case "ForStatement":
        return key === "body" || key === "update";
      case "SwitchStatement":
        return key === "cases";
      case "TryStatement":
        return key === "handler";
      case "AssignmentPattern":
        return key === "right";
      case "OptionalMemberExpression":
        return key === "property";
      case "OptionalCallExpression":
        return key === "arguments";
      default:
        return false;
    }
  }
  function isExecutionUncertainInList(paths, maxIndex) {
    for (let i = 0; i < maxIndex; i++) {
      const path = paths[i];
      if (isExecutionUncertain(path.parent.type, path.parentKey)) {
        return true;
      }
    }
    return false;
  }
  const SYMBOL_CHECKING = Symbol();
  function _guessExecutionStatusRelativeTo(target) {
    return _guessExecutionStatusRelativeToCached(this, target, new Map());
  }
  function _guessExecutionStatusRelativeToCached(base, target, cache) {
    const funcParent = {
      this: getOuterFunction(base),
      target: getOuterFunction(target)
    };
    if (funcParent.target.node !== funcParent.this.node) {
      return _guessExecutionStatusRelativeToDifferentFunctionsCached(base, funcParent.target, cache);
    }
    const paths = {
      target: target.getAncestry(),
      this: base.getAncestry()
    };
    if (paths.target.includes(base)) return "after";
    if (paths.this.includes(target)) return "before";
    let commonPath;
    const commonIndex = {
      target: 0,
      this: 0
    };
    while (!commonPath && commonIndex.this < paths.this.length) {
      const path = paths.this[commonIndex.this];
      commonIndex.target = paths.target.indexOf(path);
      if (commonIndex.target >= 0) {
        commonPath = path;
      } else {
        commonIndex.this++;
      }
    }
    if (!commonPath) {
      throw new Error("Internal Babel error - The two compared nodes" + " don't appear to belong to the same program.");
    }
    if (isExecutionUncertainInList(paths.this, commonIndex.this - 1) || isExecutionUncertainInList(paths.target, commonIndex.target - 1)) {
      return "unknown";
    }
    const divergence = {
      this: paths.this[commonIndex.this - 1],
      target: paths.target[commonIndex.target - 1]
    };
    if (divergence.target.listKey && divergence.this.listKey && divergence.target.container === divergence.this.container) {
      return divergence.target.key > divergence.this.key ? "before" : "after";
    }
    const keys = VISITOR_KEYS[commonPath.type];
    const keyPosition = {
      this: keys.indexOf(divergence.this.parentKey),
      target: keys.indexOf(divergence.target.parentKey)
    };
    return keyPosition.target > keyPosition.this ? "before" : "after";
  }
  function _guessExecutionStatusRelativeToDifferentFunctionsInternal(base, target, cache) {
    if (!target.isFunctionDeclaration()) {
      if (_guessExecutionStatusRelativeToCached(base, target, cache) === "before") {
        return "before";
      }
      return "unknown";
    } else if (target.parentPath.isExportDeclaration()) {
      return "unknown";
    }
    const binding = target.scope.getBinding(target.node.id.name);
    if (!binding.references) return "before";
    const referencePaths = binding.referencePaths;
    let allStatus;
    for (const path of referencePaths) {
      const childOfFunction = !!path.find(path => path.node === target.node);
      if (childOfFunction) continue;
      if (path.key !== "callee" || !path.parentPath.isCallExpression()) {
        return "unknown";
      }
      const status = _guessExecutionStatusRelativeToCached(base, path, cache);
      if (allStatus && allStatus !== status) {
        return "unknown";
      } else {
        allStatus = status;
      }
    }
    return allStatus;
  }
  function _guessExecutionStatusRelativeToDifferentFunctionsCached(base, target, cache) {
    let nodeMap = cache.get(base.node);
    let cached;
    if (!nodeMap) {
      cache.set(base.node, nodeMap = new Map());
    } else if (cached = nodeMap.get(target.node)) {
      if (cached === SYMBOL_CHECKING) {
        return "unknown";
      }
      return cached;
    }
    nodeMap.set(target.node, SYMBOL_CHECKING);
    const result = _guessExecutionStatusRelativeToDifferentFunctionsInternal(base, target, cache);
    nodeMap.set(target.node, result);
    return result;
  }
  function resolve(dangerous, resolved) {
    return _resolve.call(this, dangerous, resolved) || this;
  }
  function _resolve(dangerous, resolved) {
    var _resolved;
    if ((_resolved = resolved) != null && _resolved.includes(this)) return;
    resolved = resolved || [];
    resolved.push(this);
    if (this.isVariableDeclarator()) {
      if (this.get("id").isIdentifier()) {
        return this.get("init").resolve(dangerous, resolved);
      }
    } else if (this.isReferencedIdentifier()) {
      const binding = this.scope.getBinding(this.node.name);
      if (!binding) return;
      if (!binding.constant) return;
      if (binding.kind === "module") return;
      if (binding.path !== this) {
        const ret = binding.path.resolve(dangerous, resolved);
        if (this.find(parent => parent.node === ret.node)) return;
        return ret;
      }
    } else if (this.isTypeCastExpression()) {
      return this.get("expression").resolve(dangerous, resolved);
    } else if (dangerous && this.isMemberExpression()) {
      const targetKey = this.toComputedKey();
      if (!isLiteral(targetKey)) return;
      const targetName = targetKey.value;
      const target = this.get("object").resolve(dangerous, resolved);
      if (target.isObjectExpression()) {
        const props = target.get("properties");
        for (const prop of props) {
          if (!prop.isProperty()) continue;
          const key = prop.get("key");
          let match = prop.isnt("computed") && key.isIdentifier({
            name: targetName
          });
          match = match || key.isLiteral({
            value: targetName
          });
          if (match) return prop.get("value").resolve(dangerous, resolved);
        }
      } else if (target.isArrayExpression() && !isNaN(+targetName)) {
        const elems = target.get("elements");
        const elem = elems[targetName];
        if (elem) return elem.resolve(dangerous, resolved);
      }
    }
  }
  function isConstantExpression() {
    if (this.isIdentifier()) {
      const binding = this.scope.getBinding(this.node.name);
      if (!binding) return false;
      return binding.constant;
    }
    if (this.isLiteral()) {
      if (this.isRegExpLiteral()) {
        return false;
      }
      if (this.isTemplateLiteral()) {
        return this.get("expressions").every(expression => expression.isConstantExpression());
      }
      return true;
    }
    if (this.isUnaryExpression()) {
      if (this.node.operator !== "void") {
        return false;
      }
      return this.get("argument").isConstantExpression();
    }
    if (this.isBinaryExpression()) {
      const {
        operator
      } = this.node;
      return operator !== "in" && operator !== "instanceof" && this.get("left").isConstantExpression() && this.get("right").isConstantExpression();
    }
    if (this.isMemberExpression()) {
      return !this.node.computed && this.get("object").isIdentifier({
        name: "Symbol"
      }) && !this.scope.hasBinding("Symbol", {
        noGlobals: true
      });
    }
    if (this.isCallExpression()) {
      return this.node.arguments.length === 1 && this.get("callee").matchesPattern("Symbol.for") && !this.scope.hasBinding("Symbol", {
        noGlobals: true
      }) && this.get("arguments")[0].isStringLiteral();
    }
    return false;
  }
  function isInStrictMode() {
    const start = this.isProgram() ? this : this.parentPath;
    const strictParent = start.find(path => {
      if (path.isProgram({
        sourceType: "module"
      })) return true;
      if (path.isClass()) return true;
      if (path.isArrowFunctionExpression() && !path.get("body").isBlockStatement()) {
        return false;
      }
      let body;
      if (path.isFunction()) {
        body = path.node.body;
      } else if (path.isProgram()) {
        body = path.node;
      } else {
        return false;
      }
      for (const directive of body.directives) {
        if (directive.value.value === "use strict") {
          return true;
        }
      }
    });
    return !!strictParent;
  }
  return exports$27;
}

var exports$26 = {},
  _dewExec$25 = false;
function dew$25() {
  if (_dewExec$25) return exports$26;
  _dewExec$25 = true;
  Object.defineProperty(exports$26, "__esModule", {
    value: true
  });
  exports$26._getKey = _getKey;
  exports$26._getPattern = _getPattern;
  exports$26.get = get;
  exports$26.getAllNextSiblings = getAllNextSiblings;
  exports$26.getAllPrevSiblings = getAllPrevSiblings;
  exports$26.getAssignmentIdentifiers = getAssignmentIdentifiers;
  exports$26.getBindingIdentifierPaths = getBindingIdentifierPaths;
  exports$26.getBindingIdentifiers = getBindingIdentifiers;
  exports$26.getCompletionRecords = getCompletionRecords;
  exports$26.getNextSibling = getNextSibling;
  exports$26.getOpposite = getOpposite;
  exports$26.getOuterBindingIdentifierPaths = getOuterBindingIdentifierPaths;
  exports$26.getOuterBindingIdentifiers = getOuterBindingIdentifiers;
  exports$26.getPrevSibling = getPrevSibling;
  exports$26.getSibling = getSibling;
  var _index = dew$23();
  var _t = dew$3i();
  const {
    getAssignmentIdentifiers: _getAssignmentIdentifiers,
    getBindingIdentifiers: _getBindingIdentifiers,
    getOuterBindingIdentifiers: _getOuterBindingIdentifiers,
    numericLiteral,
    unaryExpression
  } = _t;
  const NORMAL_COMPLETION = 0;
  const BREAK_COMPLETION = 1;
  function NormalCompletion(path) {
    return {
      type: NORMAL_COMPLETION,
      path
    };
  }
  function BreakCompletion(path) {
    return {
      type: BREAK_COMPLETION,
      path
    };
  }
  function getOpposite() {
    if (this.key === "left") {
      return this.getSibling("right");
    } else if (this.key === "right") {
      return this.getSibling("left");
    }
    return null;
  }
  function addCompletionRecords(path, records, context) {
    if (path) {
      records.push(..._getCompletionRecords(path, context));
    }
    return records;
  }
  function completionRecordForSwitch(cases, records, context) {
    let lastNormalCompletions = [];
    for (let i = 0; i < cases.length; i++) {
      const casePath = cases[i];
      const caseCompletions = _getCompletionRecords(casePath, context);
      const normalCompletions = [];
      const breakCompletions = [];
      for (const c of caseCompletions) {
        if (c.type === NORMAL_COMPLETION) {
          normalCompletions.push(c);
        }
        if (c.type === BREAK_COMPLETION) {
          breakCompletions.push(c);
        }
      }
      if (normalCompletions.length) {
        lastNormalCompletions = normalCompletions;
      }
      records.push(...breakCompletions);
    }
    records.push(...lastNormalCompletions);
    return records;
  }
  function normalCompletionToBreak(completions) {
    completions.forEach(c => {
      c.type = BREAK_COMPLETION;
    });
  }
  function replaceBreakStatementInBreakCompletion(completions, reachable) {
    completions.forEach(c => {
      if (c.path.isBreakStatement({
        label: null
      })) {
        if (reachable) {
          c.path.replaceWith(unaryExpression("void", numericLiteral(0)));
        } else {
          c.path.remove();
        }
      }
    });
  }
  function getStatementListCompletion(paths, context) {
    const completions = [];
    if (context.canHaveBreak) {
      let lastNormalCompletions = [];
      for (let i = 0; i < paths.length; i++) {
        const path = paths[i];
        const newContext = Object.assign({}, context, {
          inCaseClause: false
        });
        if (path.isBlockStatement() && (context.inCaseClause || context.shouldPopulateBreak)) {
          newContext.shouldPopulateBreak = true;
        } else {
          newContext.shouldPopulateBreak = false;
        }
        const statementCompletions = _getCompletionRecords(path, newContext);
        if (statementCompletions.length > 0 && statementCompletions.every(c => c.type === BREAK_COMPLETION)) {
          if (lastNormalCompletions.length > 0 && statementCompletions.every(c => c.path.isBreakStatement({
            label: null
          }))) {
            normalCompletionToBreak(lastNormalCompletions);
            completions.push(...lastNormalCompletions);
            if (lastNormalCompletions.some(c => c.path.isDeclaration())) {
              completions.push(...statementCompletions);
              replaceBreakStatementInBreakCompletion(statementCompletions, true);
            }
            replaceBreakStatementInBreakCompletion(statementCompletions, false);
          } else {
            completions.push(...statementCompletions);
            if (!context.shouldPopulateBreak) {
              replaceBreakStatementInBreakCompletion(statementCompletions, true);
            }
          }
          break;
        }
        if (i === paths.length - 1) {
          completions.push(...statementCompletions);
        } else {
          lastNormalCompletions = [];
          for (let i = 0; i < statementCompletions.length; i++) {
            const c = statementCompletions[i];
            if (c.type === BREAK_COMPLETION) {
              completions.push(c);
            }
            if (c.type === NORMAL_COMPLETION) {
              lastNormalCompletions.push(c);
            }
          }
        }
      }
    } else if (paths.length) {
      for (let i = paths.length - 1; i >= 0; i--) {
        const pathCompletions = _getCompletionRecords(paths[i], context);
        if (pathCompletions.length > 1 || pathCompletions.length === 1 && !pathCompletions[0].path.isVariableDeclaration()) {
          completions.push(...pathCompletions);
          break;
        }
      }
    }
    return completions;
  }
  function _getCompletionRecords(path, context) {
    let records = [];
    if (path.isIfStatement()) {
      records = addCompletionRecords(path.get("consequent"), records, context);
      records = addCompletionRecords(path.get("alternate"), records, context);
    } else if (path.isDoExpression() || path.isFor() || path.isWhile() || path.isLabeledStatement()) {
      return addCompletionRecords(path.get("body"), records, context);
    } else if (path.isProgram() || path.isBlockStatement()) {
      return getStatementListCompletion(path.get("body"), context);
    } else if (path.isFunction()) {
      return _getCompletionRecords(path.get("body"), context);
    } else if (path.isTryStatement()) {
      records = addCompletionRecords(path.get("block"), records, context);
      records = addCompletionRecords(path.get("handler"), records, context);
    } else if (path.isCatchClause()) {
      return addCompletionRecords(path.get("body"), records, context);
    } else if (path.isSwitchStatement()) {
      return completionRecordForSwitch(path.get("cases"), records, context);
    } else if (path.isSwitchCase()) {
      return getStatementListCompletion(path.get("consequent"), {
        canHaveBreak: true,
        shouldPopulateBreak: false,
        inCaseClause: true
      });
    } else if (path.isBreakStatement()) {
      records.push(BreakCompletion(path));
    } else {
      records.push(NormalCompletion(path));
    }
    return records;
  }
  function getCompletionRecords() {
    const records = _getCompletionRecords(this, {
      canHaveBreak: false,
      shouldPopulateBreak: false,
      inCaseClause: false
    });
    return records.map(r => r.path);
  }
  function getSibling(key) {
    return _index.default.get({
      parentPath: this.parentPath,
      parent: this.parent,
      container: this.container,
      listKey: this.listKey,
      key: key
    }).setContext(this.context);
  }
  function getPrevSibling() {
    return this.getSibling(this.key - 1);
  }
  function getNextSibling() {
    return this.getSibling(this.key + 1);
  }
  function getAllNextSiblings() {
    let _key = this.key;
    let sibling = this.getSibling(++_key);
    const siblings = [];
    while (sibling.node) {
      siblings.push(sibling);
      sibling = this.getSibling(++_key);
    }
    return siblings;
  }
  function getAllPrevSiblings() {
    let _key = this.key;
    let sibling = this.getSibling(--_key);
    const siblings = [];
    while (sibling.node) {
      siblings.push(sibling);
      sibling = this.getSibling(--_key);
    }
    return siblings;
  }
  function get(key, context = true) {
    if (context === true) context = this.context;
    const parts = key.split(".");
    if (parts.length === 1) {
      return _getKey.call(this, key, context);
    } else {
      return _getPattern.call(this, parts, context);
    }
  }
  function _getKey(key, context) {
    const node = this.node;
    const container = node[key];
    if (Array.isArray(container)) {
      return container.map((_, i) => {
        return _index.default.get({
          listKey: key,
          parentPath: this,
          parent: node,
          container: container,
          key: i
        }).setContext(context);
      });
    } else {
      return _index.default.get({
        parentPath: this,
        parent: node,
        container: node,
        key: key
      }).setContext(context);
    }
  }
  function _getPattern(parts, context) {
    let path = this;
    for (const part of parts) {
      if (part === ".") {
        path = path.parentPath;
      } else {
        if (Array.isArray(path)) {
          path = path[part];
        } else {
          path = path.get(part, context);
        }
      }
    }
    return path;
  }
  function getAssignmentIdentifiers() {
    return _getAssignmentIdentifiers(this.node);
  }
  function getBindingIdentifiers(duplicates) {
    return _getBindingIdentifiers(this.node, duplicates);
  }
  function getOuterBindingIdentifiers(duplicates) {
    return _getOuterBindingIdentifiers(this.node, duplicates);
  }
  function getBindingIdentifierPaths(duplicates = false, outerOnly = false) {
    const path = this;
    const search = [path];
    const ids = Object.create(null);
    while (search.length) {
      const id = search.shift();
      if (!id) continue;
      if (!id.node) continue;
      const keys = _getBindingIdentifiers.keys[id.node.type];
      if (id.isIdentifier()) {
        if (duplicates) {
          const _ids = ids[id.node.name] = ids[id.node.name] || [];
          _ids.push(id);
        } else {
          ids[id.node.name] = id;
        }
        continue;
      }
      if (id.isExportDeclaration()) {
        const declaration = id.get("declaration");
        if (declaration.isDeclaration()) {
          search.push(declaration);
        }
        continue;
      }
      if (outerOnly) {
        if (id.isFunctionDeclaration()) {
          search.push(id.get("id"));
          continue;
        }
        if (id.isFunctionExpression()) {
          continue;
        }
      }
      if (keys) {
        for (let i = 0; i < keys.length; i++) {
          const key = keys[i];
          const child = id.get(key);
          if (Array.isArray(child)) {
            search.push(...child);
          } else if (child.node) {
            search.push(child);
          }
        }
      }
    }
    return ids;
  }
  function getOuterBindingIdentifierPaths(duplicates = false) {
    return this.getBindingIdentifierPaths(duplicates, true);
  }
  return exports$26;
}

var exports$25 = {},
  _dewExec$24 = false;
function dew$24() {
  if (_dewExec$24) return exports$25;
  _dewExec$24 = true;
  Object.defineProperty(exports$25, "__esModule", {
    value: true
  });
  exports$25.addComment = addComment;
  exports$25.addComments = addComments;
  exports$25.shareCommentsWithSiblings = shareCommentsWithSiblings;
  var _t = dew$3i();
  const {
    addComment: _addComment,
    addComments: _addComments
  } = _t;
  function shareCommentsWithSiblings() {
    if (typeof this.key === "string") return;
    const node = this.node;
    if (!node) return;
    const trailing = node.trailingComments;
    const leading = node.leadingComments;
    if (!trailing && !leading) return;
    const prev = this.getSibling(this.key - 1);
    const next = this.getSibling(this.key + 1);
    const hasPrev = Boolean(prev.node);
    const hasNext = Boolean(next.node);
    if (hasPrev) {
      if (leading) {
        prev.addComments("trailing", removeIfExisting(leading, prev.node.trailingComments));
      }
      if (trailing && !hasNext) prev.addComments("trailing", trailing);
    }
    if (hasNext) {
      if (trailing) {
        next.addComments("leading", removeIfExisting(trailing, next.node.leadingComments));
      }
      if (leading && !hasPrev) next.addComments("leading", leading);
    }
  }
  function removeIfExisting(list, toRemove) {
    if (!(toRemove != null && toRemove.length)) return list;
    const set = new Set(toRemove);
    return list.filter(el => {
      return !set.has(el);
    });
  }
  function addComment(type, content, line) {
    _addComment(this.node, type, content, line);
  }
  function addComments(type, comments) {
    _addComments(this.node, type, comments);
  }
  return exports$25;
}

var exports$24 = {},
  _dewExec$23 = false;
function dew$23() {
  if (_dewExec$23) return exports$24;
  _dewExec$23 = true;
  Object.defineProperty(exports$24, "__esModule", {
    value: true
  });
  exports$24.default = exports$24.SHOULD_STOP = exports$24.SHOULD_SKIP = exports$24.REMOVED = void 0;
  var virtualTypes = dew$2U();
  var _debug = dew$2P();
  var _index = dew$1_();
  var _index2 = dew$2I();
  var _t = dew$3i();
  var t = _t;
  var cache = dew$2J();
  var _generator = dew$2j();
  var NodePath_ancestry = dew$2i();
  var NodePath_inference = dew$2e();
  var NodePath_replacement = dew$29();
  var NodePath_evaluation = dew$28();
  var NodePath_conversion = dew$27();
  var NodePath_introspection = dew$26();
  var NodePath_context = dew$20();
  var NodePath_removal = dew$2b();
  var NodePath_modification = dew$2a();
  var NodePath_family = dew$25();
  var NodePath_comments = dew$24();
  var NodePath_virtual_types_validator = dew$2O();
  const {
    validate
  } = _t;
  const debug = _debug("babel");
  exports$24.REMOVED = 1 << 0;
  exports$24.SHOULD_STOP = 1 << 1;
  exports$24.SHOULD_SKIP = 1 << 2;
  const NodePath_Final = exports$24.default = class NodePath {
    constructor(hub, parent) {
      this.contexts = [];
      this.state = null;
      this.opts = null;
      this._traverseFlags = 0;
      this.skipKeys = null;
      this.parentPath = null;
      this.container = null;
      this.listKey = null;
      this.key = null;
      this.node = null;
      this.type = null;
      this.parent = parent;
      this.hub = hub;
      this.data = null;
      this.context = null;
      this.scope = null;
    }
    get removed() {
      return (this._traverseFlags & 1) > 0;
    }
    set removed(v) {
      if (v) this._traverseFlags |= 1;else this._traverseFlags &= -2;
    }
    get shouldStop() {
      return (this._traverseFlags & 2) > 0;
    }
    set shouldStop(v) {
      if (v) this._traverseFlags |= 2;else this._traverseFlags &= -3;
    }
    get shouldSkip() {
      return (this._traverseFlags & 4) > 0;
    }
    set shouldSkip(v) {
      if (v) this._traverseFlags |= 4;else this._traverseFlags &= -5;
    }
    static get({
      hub,
      parentPath,
      parent,
      container,
      listKey,
      key
    }) {
      if (!hub && parentPath) {
        hub = parentPath.hub;
      }
      if (!parent) {
        throw new Error("To get a node path the parent needs to exist");
      }
      const targetNode = container[key];
      const paths = cache.getOrCreateCachedPaths(hub, parent);
      let path = paths.get(targetNode);
      if (!path) {
        path = new NodePath(hub, parent);
        if (targetNode) paths.set(targetNode, path);
      }
      path.setup(parentPath, container, listKey, key);
      return path;
    }
    getScope(scope) {
      return this.isScope() ? new _index2.default(this) : scope;
    }
    setData(key, val) {
      if (this.data == null) {
        this.data = Object.create(null);
      }
      return this.data[key] = val;
    }
    getData(key, def) {
      if (this.data == null) {
        this.data = Object.create(null);
      }
      let val = this.data[key];
      if (val === undefined && def !== undefined) val = this.data[key] = def;
      return val;
    }
    hasNode() {
      return this.node != null;
    }
    buildCodeFrameError(msg, Error = SyntaxError) {
      return this.hub.buildError(this.node, msg, Error);
    }
    traverse(visitor, state) {
      (0, _index.default)(this.node, visitor, this.scope, state, this);
    }
    set(key, node) {
      validate(this.node, key, node);
      this.node[key] = node;
    }
    getPathLocation() {
      const parts = [];
      let path = this;
      do {
        let key = path.key;
        if (path.inList) key = `${path.listKey}[${key}]`;
        parts.unshift(key);
      } while (path = path.parentPath);
      return parts.join(".");
    }
    debug(message) {
      if (!debug.enabled) return;
      debug(`${this.getPathLocation()} ${this.type}: ${message}`);
    }
    toString() {
      return (0, _generator.default)(this.node).code;
    }
    get inList() {
      return !!this.listKey;
    }
    set inList(inList) {
      if (!inList) {
        this.listKey = null;
      }
    }
    get parentKey() {
      return this.listKey || this.key;
    }
  };
  const methods = {
    findParent: NodePath_ancestry.findParent,
    find: NodePath_ancestry.find,
    getFunctionParent: NodePath_ancestry.getFunctionParent,
    getStatementParent: NodePath_ancestry.getStatementParent,
    getEarliestCommonAncestorFrom: NodePath_ancestry.getEarliestCommonAncestorFrom,
    getDeepestCommonAncestorFrom: NodePath_ancestry.getDeepestCommonAncestorFrom,
    getAncestry: NodePath_ancestry.getAncestry,
    isAncestor: NodePath_ancestry.isAncestor,
    isDescendant: NodePath_ancestry.isDescendant,
    inType: NodePath_ancestry.inType,
    getTypeAnnotation: NodePath_inference.getTypeAnnotation,
    isBaseType: NodePath_inference.isBaseType,
    couldBeBaseType: NodePath_inference.couldBeBaseType,
    baseTypeStrictlyMatches: NodePath_inference.baseTypeStrictlyMatches,
    isGenericType: NodePath_inference.isGenericType,
    replaceWithMultiple: NodePath_replacement.replaceWithMultiple,
    replaceWithSourceString: NodePath_replacement.replaceWithSourceString,
    replaceWith: NodePath_replacement.replaceWith,
    replaceExpressionWithStatements: NodePath_replacement.replaceExpressionWithStatements,
    replaceInline: NodePath_replacement.replaceInline,
    evaluateTruthy: NodePath_evaluation.evaluateTruthy,
    evaluate: NodePath_evaluation.evaluate,
    toComputedKey: NodePath_conversion.toComputedKey,
    ensureBlock: NodePath_conversion.ensureBlock,
    unwrapFunctionEnvironment: NodePath_conversion.unwrapFunctionEnvironment,
    arrowFunctionToExpression: NodePath_conversion.arrowFunctionToExpression,
    splitExportDeclaration: NodePath_conversion.splitExportDeclaration,
    ensureFunctionName: NodePath_conversion.ensureFunctionName,
    matchesPattern: NodePath_introspection.matchesPattern,
    has: NodePath_introspection.has,
    isStatic: NodePath_introspection.isStatic,
    is: NodePath_introspection.is,
    isnt: NodePath_introspection.isnt,
    equals: NodePath_introspection.equals,
    isNodeType: NodePath_introspection.isNodeType,
    canHaveVariableDeclarationOrExpression: NodePath_introspection.canHaveVariableDeclarationOrExpression,
    canSwapBetweenExpressionAndStatement: NodePath_introspection.canSwapBetweenExpressionAndStatement,
    isCompletionRecord: NodePath_introspection.isCompletionRecord,
    isStatementOrBlock: NodePath_introspection.isStatementOrBlock,
    referencesImport: NodePath_introspection.referencesImport,
    getSource: NodePath_introspection.getSource,
    willIMaybeExecuteBefore: NodePath_introspection.willIMaybeExecuteBefore,
    _guessExecutionStatusRelativeTo: NodePath_introspection._guessExecutionStatusRelativeTo,
    resolve: NodePath_introspection.resolve,
    isConstantExpression: NodePath_introspection.isConstantExpression,
    isInStrictMode: NodePath_introspection.isInStrictMode,
    call: NodePath_context.call,
    isDenylisted: NodePath_context.isDenylisted,
    isBlacklisted: NodePath_context.isBlacklisted,
    visit: NodePath_context.visit,
    skip: NodePath_context.skip,
    skipKey: NodePath_context.skipKey,
    stop: NodePath_context.stop,
    setScope: NodePath_context.setScope,
    setContext: NodePath_context.setContext,
    resync: NodePath_context.resync,
    popContext: NodePath_context.popContext,
    pushContext: NodePath_context.pushContext,
    setup: NodePath_context.setup,
    setKey: NodePath_context.setKey,
    requeue: NodePath_context.requeue,
    requeueComputedKeyAndDecorators: NodePath_context.requeueComputedKeyAndDecorators,
    remove: NodePath_removal.remove,
    insertBefore: NodePath_modification.insertBefore,
    insertAfter: NodePath_modification.insertAfter,
    updateSiblingKeys: NodePath_modification.updateSiblingKeys,
    unshiftContainer: NodePath_modification.unshiftContainer,
    pushContainer: NodePath_modification.pushContainer,
    hoist: NodePath_modification.hoist,
    getOpposite: NodePath_family.getOpposite,
    getCompletionRecords: NodePath_family.getCompletionRecords,
    getSibling: NodePath_family.getSibling,
    getPrevSibling: NodePath_family.getPrevSibling,
    getNextSibling: NodePath_family.getNextSibling,
    getAllNextSiblings: NodePath_family.getAllNextSiblings,
    getAllPrevSiblings: NodePath_family.getAllPrevSiblings,
    get: NodePath_family.get,
    getAssignmentIdentifiers: NodePath_family.getAssignmentIdentifiers,
    getBindingIdentifiers: NodePath_family.getBindingIdentifiers,
    getOuterBindingIdentifiers: NodePath_family.getOuterBindingIdentifiers,
    getBindingIdentifierPaths: NodePath_family.getBindingIdentifierPaths,
    getOuterBindingIdentifierPaths: NodePath_family.getOuterBindingIdentifierPaths,
    shareCommentsWithSiblings: NodePath_comments.shareCommentsWithSiblings,
    addComment: NodePath_comments.addComment,
    addComments: NodePath_comments.addComments
  };
  Object.assign(NodePath_Final.prototype, methods);
  {
    NodePath_Final.prototype.arrowFunctionToShadowed = NodePath_conversion[String("arrowFunctionToShadowed")];
  }
  {
    NodePath_Final.prototype._guessExecutionStatusRelativeToDifferentFunctions = NodePath_introspection._guessExecutionStatusRelativeTo;
  }
  {
    NodePath_Final.prototype._guessExecutionStatusRelativeToDifferentFunctions = NodePath_introspection._guessExecutionStatusRelativeTo;
    Object.assign(NodePath_Final.prototype, {
      _getTypeAnnotation: NodePath_inference._getTypeAnnotation,
      _replaceWith: NodePath_replacement._replaceWith,
      _resolve: NodePath_introspection._resolve,
      _call: NodePath_context._call,
      _resyncParent: NodePath_context._resyncParent,
      _resyncKey: NodePath_context._resyncKey,
      _resyncList: NodePath_context._resyncList,
      _resyncRemoved: NodePath_context._resyncRemoved,
      _getQueueContexts: NodePath_context._getQueueContexts,
      _removeFromScope: NodePath_removal._removeFromScope,
      _callRemovalHooks: NodePath_removal._callRemovalHooks,
      _remove: NodePath_removal._remove,
      _markRemoved: NodePath_removal._markRemoved,
      _assertUnremoved: NodePath_removal._assertUnremoved,
      _containerInsert: NodePath_modification._containerInsert,
      _containerInsertBefore: NodePath_modification._containerInsertBefore,
      _containerInsertAfter: NodePath_modification._containerInsertAfter,
      _verifyNodeList: NodePath_modification._verifyNodeList,
      _getKey: NodePath_family._getKey,
      _getPattern: NodePath_family._getPattern
    });
  }
  for (const type of t.TYPES) {
    const typeKey = `is${type}`;
    const fn = t[typeKey];
    NodePath_Final.prototype[typeKey] = function (opts) {
      return fn(this.node, opts);
    };
    NodePath_Final.prototype[`assert${type}`] = function (opts) {
      if (!fn(this.node, opts)) {
        throw new TypeError(`Expected node path of type ${type}`);
      }
    };
  }
  Object.assign(NodePath_Final.prototype, NodePath_virtual_types_validator);
  for (const type of Object.keys(virtualTypes)) {
    if (type[0] === "_") continue;
    if (!t.TYPES.includes(type)) t.TYPES.push(type);
  }
  return exports$24;
}

var exports$23 = {},
  _dewExec$22 = false;
function dew$22() {
  if (_dewExec$22) return exports$23;
  _dewExec$22 = true;
  Object.defineProperty(exports$23, "__esModule", {
    value: true
  });
  exports$23.default = void 0;
  var _index = dew$23();
  var _t = dew$3i();
  const {
    VISITOR_KEYS
  } = _t;
  class TraversalContext {
    constructor(scope, opts, state, parentPath) {
      this.queue = null;
      this.priorityQueue = null;
      this.parentPath = parentPath;
      this.scope = scope;
      this.state = state;
      this.opts = opts;
    }
    shouldVisit(node) {
      const opts = this.opts;
      if (opts.enter || opts.exit) return true;
      if (opts[node.type]) return true;
      const keys = VISITOR_KEYS[node.type];
      if (!(keys != null && keys.length)) return false;
      for (const key of keys) {
        if (node[key]) {
          return true;
        }
      }
      return false;
    }
    create(node, container, key, listKey) {
      return _index.default.get({
        parentPath: this.parentPath,
        parent: node,
        container,
        key: key,
        listKey
      });
    }
    maybeQueue(path, notPriority) {
      if (this.queue) {
        if (notPriority) {
          this.queue.push(path);
        } else {
          this.priorityQueue.push(path);
        }
      }
    }
    visitMultiple(container, parent, listKey) {
      if (container.length === 0) return false;
      const queue = [];
      for (let key = 0; key < container.length; key++) {
        const node = container[key];
        if (node && this.shouldVisit(node)) {
          queue.push(this.create(parent, container, key, listKey));
        }
      }
      return this.visitQueue(queue);
    }
    visitSingle(node, key) {
      if (this.shouldVisit(node[key])) {
        return this.visitQueue([this.create(node, node, key)]);
      } else {
        return false;
      }
    }
    visitQueue(queue) {
      this.queue = queue;
      this.priorityQueue = [];
      const visited = new WeakSet();
      let stop = false;
      let visitIndex = 0;
      for (; visitIndex < queue.length;) {
        const path = queue[visitIndex];
        visitIndex++;
        path.resync();
        if (path.contexts.length === 0 || path.contexts[path.contexts.length - 1] !== this) {
          path.pushContext(this);
        }
        if (path.key === null) continue;
        const {
          node
        } = path;
        if (visited.has(node)) continue;
        if (node) visited.add(node);
        if (path.visit()) {
          stop = true;
          break;
        }
        if (this.priorityQueue.length) {
          stop = this.visitQueue(this.priorityQueue);
          this.priorityQueue = [];
          this.queue = queue;
          if (stop) break;
        }
      }
      for (let i = 0; i < visitIndex; i++) {
        queue[i].popContext();
      }
      this.queue = null;
      return stop;
    }
    visit(node, key) {
      const nodes = node[key];
      if (!nodes) return false;
      if (Array.isArray(nodes)) {
        return this.visitMultiple(nodes, node, key);
      } else {
        return this.visitSingle(node, key);
      }
    }
  }
  exports$23.default = TraversalContext;
  return exports$23;
}

var exports$22 = {},
  _dewExec$21 = false;
function dew$21() {
  if (_dewExec$21) return exports$22;
  _dewExec$21 = true;
  Object.defineProperty(exports$22, "__esModule", {
    value: true
  });
  exports$22.traverseNode = traverseNode;
  var _context = dew$22();
  var _t = dew$3i();
  const {
    VISITOR_KEYS
  } = _t;
  function traverseNode(node, opts, scope, state, path, skipKeys, visitSelf) {
    const keys = VISITOR_KEYS[node.type];
    if (!keys) return false;
    const context = new _context.default(scope, opts, state, path);
    if (visitSelf) {
      if (skipKeys != null && skipKeys[path.parentKey]) return false;
      return context.visitQueue([path]);
    }
    for (const key of keys) {
      if (skipKeys != null && skipKeys[key]) continue;
      if (context.visit(node, key)) {
        return true;
      }
    }
    return false;
  }
  return exports$22;
}

var exports$21 = {},
  _dewExec$20 = false;
function dew$20() {
  if (_dewExec$20) return exports$21;
  _dewExec$20 = true;
  Object.defineProperty(exports$21, "__esModule", {
    value: true
  });
  exports$21._call = _call;
  exports$21._getQueueContexts = _getQueueContexts;
  exports$21._resyncKey = _resyncKey;
  exports$21._resyncList = _resyncList;
  exports$21._resyncParent = _resyncParent;
  exports$21._resyncRemoved = _resyncRemoved;
  exports$21.call = call;
  exports$21.isBlacklisted = exports$21.isDenylisted = isDenylisted;
  exports$21.popContext = popContext;
  exports$21.pushContext = pushContext;
  exports$21.requeue = requeue;
  exports$21.requeueComputedKeyAndDecorators = requeueComputedKeyAndDecorators;
  exports$21.resync = resync;
  exports$21.setContext = setContext;
  exports$21.setKey = setKey;
  exports$21.setScope = setScope;
  exports$21.setup = setup;
  exports$21.skip = skip;
  exports$21.skipKey = skipKey;
  exports$21.stop = stop;
  exports$21.visit = visit;
  var _traverseNode = dew$21();
  var _index = dew$23();
  var _removal = dew$2b();
  var t = dew$3i();
  function call(key) {
    const opts = this.opts;
    this.debug(key);
    if (this.node) {
      if (_call.call(this, opts[key])) return true;
    }
    if (this.node) {
      var _opts$this$node$type;
      return _call.call(this, (_opts$this$node$type = opts[this.node.type]) == null ? void 0 : _opts$this$node$type[key]);
    }
    return false;
  }
  function _call(fns) {
    if (!fns) return false;
    for (const fn of fns) {
      if (!fn) continue;
      const node = this.node;
      if (!node) return true;
      const ret = fn.call(this.state, this, this.state);
      if (ret && typeof ret === "object" && typeof ret.then === "function") {
        throw new Error(`You appear to be using a plugin with an async traversal visitor, ` + `which your current version of Babel does not support. ` + `If you're using a published plugin, you may need to upgrade ` + `your @babel/core version.`);
      }
      if (ret) {
        throw new Error(`Unexpected return value from visitor method ${fn}`);
      }
      if (this.node !== node) return true;
      if (this._traverseFlags > 0) return true;
    }
    return false;
  }
  function isDenylisted() {
    var _this$opts$denylist;
    const denylist = (_this$opts$denylist = this.opts.denylist) != null ? _this$opts$denylist : this.opts.blacklist;
    return denylist && denylist.indexOf(this.node.type) > -1;
  }
  function restoreContext(path, context) {
    if (path.context !== context) {
      path.context = context;
      path.state = context.state;
      path.opts = context.opts;
    }
  }
  function visit() {
    var _this$opts$shouldSkip, _this$opts;
    if (!this.node) {
      return false;
    }
    if (this.isDenylisted()) {
      return false;
    }
    if ((_this$opts$shouldSkip = (_this$opts = this.opts).shouldSkip) != null && _this$opts$shouldSkip.call(_this$opts, this)) {
      return false;
    }
    const currentContext = this.context;
    if (this.shouldSkip || this.call("enter")) {
      this.debug("Skip...");
      return this.shouldStop;
    }
    restoreContext(this, currentContext);
    this.debug("Recursing into...");
    this.shouldStop = (0, _traverseNode.traverseNode)(this.node, this.opts, this.scope, this.state, this, this.skipKeys);
    restoreContext(this, currentContext);
    this.call("exit");
    return this.shouldStop;
  }
  function skip() {
    this.shouldSkip = true;
  }
  function skipKey(key) {
    if (this.skipKeys == null) {
      this.skipKeys = {};
    }
    this.skipKeys[key] = true;
  }
  function stop() {
    this._traverseFlags |= _index.SHOULD_SKIP | _index.SHOULD_STOP;
  }
  function setScope() {
    var _this$opts2, _this$scope;
    if ((_this$opts2 = this.opts) != null && _this$opts2.noScope) return;
    let path = this.parentPath;
    if ((this.key === "key" || this.listKey === "decorators") && path.isMethod() || this.key === "discriminant" && path.isSwitchStatement()) {
      path = path.parentPath;
    }
    let target;
    while (path && !target) {
      var _path$opts;
      if ((_path$opts = path.opts) != null && _path$opts.noScope) return;
      target = path.scope;
      path = path.parentPath;
    }
    this.scope = this.getScope(target);
    (_this$scope = this.scope) == null || _this$scope.init();
  }
  function setContext(context) {
    if (this.skipKeys != null) {
      this.skipKeys = {};
    }
    this._traverseFlags = 0;
    if (context) {
      this.context = context;
      this.state = context.state;
      this.opts = context.opts;
    }
    this.setScope();
    return this;
  }
  function resync() {
    if (this.removed) return;
    _resyncParent.call(this);
    _resyncList.call(this);
    _resyncKey.call(this);
  }
  function _resyncParent() {
    if (this.parentPath) {
      this.parent = this.parentPath.node;
    }
  }
  function _resyncKey() {
    if (!this.container) return;
    if (this.node === this.container[this.key]) {
      return;
    }
    if (Array.isArray(this.container)) {
      for (let i = 0; i < this.container.length; i++) {
        if (this.container[i] === this.node) {
          this.setKey(i);
          return;
        }
      }
    } else {
      for (const key of Object.keys(this.container)) {
        if (this.container[key] === this.node) {
          this.setKey(key);
          return;
        }
      }
    }
    this.key = null;
  }
  function _resyncList() {
    if (!this.parent || !this.inList) return;
    const newContainer = this.parent[this.listKey];
    if (this.container === newContainer) return;
    this.container = newContainer || null;
  }
  function _resyncRemoved() {
    if (this.key == null || !this.container || this.container[this.key] !== this.node) {
      _removal._markRemoved.call(this);
    }
  }
  function popContext() {
    this.contexts.pop();
    if (this.contexts.length > 0) {
      this.setContext(this.contexts[this.contexts.length - 1]);
    } else {
      this.setContext(undefined);
    }
  }
  function pushContext(context) {
    this.contexts.push(context);
    this.setContext(context);
  }
  function setup(parentPath, container, listKey, key) {
    this.listKey = listKey;
    this.container = container;
    this.parentPath = parentPath || this.parentPath;
    this.setKey(key);
  }
  function setKey(key) {
    var _this$node;
    this.key = key;
    this.node = this.container[this.key];
    this.type = (_this$node = this.node) == null ? void 0 : _this$node.type;
  }
  function requeue(pathToQueue = this) {
    if (pathToQueue.removed) return;
    const contexts = this.contexts;
    for (const context of contexts) {
      context.maybeQueue(pathToQueue);
    }
  }
  function requeueComputedKeyAndDecorators() {
    const {
      context,
      node
    } = this;
    if (!t.isPrivate(node) && node.computed) {
      context.maybeQueue(this.get("key"));
    }
    if (node.decorators) {
      for (const decorator of this.get("decorators")) {
        context.maybeQueue(decorator);
      }
    }
  }
  function _getQueueContexts() {
    let path = this;
    let contexts = this.contexts;
    while (!contexts.length) {
      path = path.parentPath;
      if (!path) break;
      contexts = path.contexts;
    }
    return contexts;
  }
  return exports$21;
}

var exports$20 = {},
  _dewExec$1$ = false;
function dew$1$() {
  if (_dewExec$1$) return exports$20;
  _dewExec$1$ = true;
  Object.defineProperty(exports$20, "__esModule", {
    value: true
  });
  exports$20.default = void 0;
  class Hub {
    getCode() {}
    getScope() {}
    addHelper() {
      throw new Error("Helpers are not supported by the default hub.");
    }
    buildError(node, msg, Error = TypeError) {
      return new Error(msg);
    }
  }
  exports$20.default = Hub;
  return exports$20;
}

var exports$1$ = {},
  _dewExec$1_ = false;
function dew$1_() {
  if (_dewExec$1_) return exports$1$;
  _dewExec$1_ = true;
  Object.defineProperty(exports$1$, "__esModule", {
    value: true
  });
  Object.defineProperty(exports$1$, "Hub", {
    enumerable: true,
    get: function () {
      return _hub.default;
    }
  });
  Object.defineProperty(exports$1$, "NodePath", {
    enumerable: true,
    get: function () {
      return _index.default;
    }
  });
  Object.defineProperty(exports$1$, "Scope", {
    enumerable: true,
    get: function () {
      return _index2.default;
    }
  });
  exports$1$.visitors = exports$1$.default = void 0;
  dew$20();
  var visitors = dew$2N();
  exports$1$.visitors = visitors;
  var _t = dew$3i();
  var cache = dew$2J();
  var _traverseNode = dew$21();
  var _index = dew$23();
  var _index2 = dew$2I();
  var _hub = dew$1$();
  const {
    VISITOR_KEYS,
    removeProperties,
    traverseFast
  } = _t;
  function traverse(parent, opts = {}, scope, state, parentPath, visitSelf) {
    if (!parent) return;
    if (!opts.noScope && !scope) {
      if (parent.type !== "Program" && parent.type !== "File") {
        throw new Error("You must pass a scope and parentPath unless traversing a Program/File. " + `Instead of that you tried to traverse a ${parent.type} node without ` + "passing scope and parentPath.");
      }
    }
    if (!parentPath && visitSelf) {
      throw new Error("visitSelf can only be used when providing a NodePath.");
    }
    if (!VISITOR_KEYS[parent.type]) {
      return;
    }
    visitors.explode(opts);
    (0, _traverseNode.traverseNode)(parent, opts, scope, state, parentPath, null, visitSelf);
  }
  exports$1$.default = traverse;
  traverse.visitors = visitors;
  traverse.verify = visitors.verify;
  traverse.explode = visitors.explode;
  traverse.cheap = function (node, enter) {
    traverseFast(node, enter);
    return;
  };
  traverse.node = function (node, opts, scope, state, path, skipKeys) {
    (0, _traverseNode.traverseNode)(node, opts, scope, state, path, skipKeys);
  };
  traverse.clearNode = function (node, opts) {
    removeProperties(node, opts);
  };
  traverse.removeProperties = function (tree, opts) {
    traverseFast(tree, traverse.clearNode, opts);
    return tree;
  };
  function hasDenylistedType(path, state) {
    if (path.node.type === state.type) {
      state.has = true;
      path.stop();
    }
  }
  traverse.hasType = function (tree, type, denylistTypes) {
    if (denylistTypes != null && denylistTypes.includes(tree.type)) return false;
    if (tree.type === type) return true;
    const state = {
      has: false,
      type: type
    };
    traverse(tree, {
      noScope: true,
      denylist: denylistTypes,
      enter: hasDenylistedType
    }, null, state);
    return state.has;
  };
  traverse.cache = cache;
  return exports$1$;
}

var exports$1_ = {},
  _dewExec$1Z = false;
var _global$2 = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
function dew$1Z() {
  if (_dewExec$1Z) return exports$1_;
  _dewExec$1Z = true;
  var process = _nodeProcess;
  exports$1_ = exports$1_ = SemVer;
  var debug;
  /* istanbul ignore next */
  if (typeof process === "object" && process.env && process.env.NODE_DEBUG && /\bsemver\b/i.test(process.env.NODE_DEBUG)) {
    debug = function () {
      var args = Array.prototype.slice.call(arguments, 0);
      args.unshift("SEMVER");
      console.log.apply(console, args);
    };
  } else {
    debug = function () {};
  }

  // Note: this is the semver.org version of the spec that it implements
  // Not necessarily the package version of this code.
  exports$1_.SEMVER_SPEC_VERSION = "2.0.0";
  var MAX_LENGTH = 256;
  var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || /* istanbul ignore next */9007199254740991;

  // Max safe segment length for coercion.
  var MAX_SAFE_COMPONENT_LENGTH = 16;
  var MAX_SAFE_BUILD_LENGTH = MAX_LENGTH - 6;

  // The actual regexps go on exports.re
  var re = exports$1_.re = [];
  var safeRe = exports$1_.safeRe = [];
  var src = exports$1_.src = [];
  var t = exports$1_.tokens = {};
  var R = 0;
  function tok(n) {
    t[n] = R++;
  }
  var LETTERDASHNUMBER = "[a-zA-Z0-9-]";

  // Replace some greedy regex tokens to prevent regex dos issues. These regex are
  // used internally via the safeRe object since all inputs in this library get
  // normalized first to trim and collapse all extra whitespace. The original
  // regexes are exported for userland consumption and lower level usage. A
  // future breaking change could export the safer regex only with a note that
  // all input should have extra whitespace removed.
  var safeRegexReplacements = [["\\s", 1], ["\\d", MAX_LENGTH], [LETTERDASHNUMBER, MAX_SAFE_BUILD_LENGTH]];
  function makeSafeRe(value) {
    for (var i = 0; i < safeRegexReplacements.length; i++) {
      var token = safeRegexReplacements[i][0];
      var max = safeRegexReplacements[i][1];
      value = value.split(token + "*").join(token + "{0," + max + "}").split(token + "+").join(token + "{1," + max + "}");
    }
    return value;
  }

  // The following Regular Expressions can be used for tokenizing,
  // validating, and parsing SemVer version strings.

  // ## Numeric Identifier
  // A single `0`, or a non-zero digit followed by zero or more digits.

  tok("NUMERICIDENTIFIER");
  src[t.NUMERICIDENTIFIER] = "0|[1-9]\\d*";
  tok("NUMERICIDENTIFIERLOOSE");
  src[t.NUMERICIDENTIFIERLOOSE] = "\\d+";

  // ## Non-numeric Identifier
  // Zero or more digits, followed by a letter or hyphen, and then zero or
  // more letters, digits, or hyphens.

  tok("NONNUMERICIDENTIFIER");
  src[t.NONNUMERICIDENTIFIER] = "\\d*[a-zA-Z-]" + LETTERDASHNUMBER + "*";

  // ## Main Version
  // Three dot-separated numeric identifiers.

  tok("MAINVERSION");
  src[t.MAINVERSION] = "(" + src[t.NUMERICIDENTIFIER] + ")\\." + "(" + src[t.NUMERICIDENTIFIER] + ")\\." + "(" + src[t.NUMERICIDENTIFIER] + ")";
  tok("MAINVERSIONLOOSE");
  src[t.MAINVERSIONLOOSE] = "(" + src[t.NUMERICIDENTIFIERLOOSE] + ")\\." + "(" + src[t.NUMERICIDENTIFIERLOOSE] + ")\\." + "(" + src[t.NUMERICIDENTIFIERLOOSE] + ")";

  // ## Pre-release Version Identifier
  // A numeric identifier, or a non-numeric identifier.

  tok("PRERELEASEIDENTIFIER");
  src[t.PRERELEASEIDENTIFIER] = "(?:" + src[t.NUMERICIDENTIFIER] + "|" + src[t.NONNUMERICIDENTIFIER] + ")";
  tok("PRERELEASEIDENTIFIERLOOSE");
  src[t.PRERELEASEIDENTIFIERLOOSE] = "(?:" + src[t.NUMERICIDENTIFIERLOOSE] + "|" + src[t.NONNUMERICIDENTIFIER] + ")";

  // ## Pre-release Version
  // Hyphen, followed by one or more dot-separated pre-release version
  // identifiers.

  tok("PRERELEASE");
  src[t.PRERELEASE] = "(?:-(" + src[t.PRERELEASEIDENTIFIER] + "(?:\\." + src[t.PRERELEASEIDENTIFIER] + ")*))";
  tok("PRERELEASELOOSE");
  src[t.PRERELEASELOOSE] = "(?:-?(" + src[t.PRERELEASEIDENTIFIERLOOSE] + "(?:\\." + src[t.PRERELEASEIDENTIFIERLOOSE] + ")*))";

  // ## Build Metadata Identifier
  // Any combination of digits, letters, or hyphens.

  tok("BUILDIDENTIFIER");
  src[t.BUILDIDENTIFIER] = LETTERDASHNUMBER + "+";

  // ## Build Metadata
  // Plus sign, followed by one or more period-separated build metadata
  // identifiers.

  tok("BUILD");
  src[t.BUILD] = "(?:\\+(" + src[t.BUILDIDENTIFIER] + "(?:\\." + src[t.BUILDIDENTIFIER] + ")*))";

  // ## Full Version String
  // A main version, followed optionally by a pre-release version and
  // build metadata.

  // Note that the only major, minor, patch, and pre-release sections of
  // the version string are capturing groups.  The build metadata is not a
  // capturing group, because it should not ever be used in version
  // comparison.

  tok("FULL");
  tok("FULLPLAIN");
  src[t.FULLPLAIN] = "v?" + src[t.MAINVERSION] + src[t.PRERELEASE] + "?" + src[t.BUILD] + "?";
  src[t.FULL] = "^" + src[t.FULLPLAIN] + "$";

  // like full, but allows v1.2.3 and =1.2.3, which people do sometimes.
  // also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty
  // common in the npm registry.
  tok("LOOSEPLAIN");
  src[t.LOOSEPLAIN] = "[v=\\s]*" + src[t.MAINVERSIONLOOSE] + src[t.PRERELEASELOOSE] + "?" + src[t.BUILD] + "?";
  tok("LOOSE");
  src[t.LOOSE] = "^" + src[t.LOOSEPLAIN] + "$";
  tok("GTLT");
  src[t.GTLT] = "((?:<|>)?=?)";

  // Something like "2.*" or "1.2.x".
  // Note that "x.x" is a valid xRange identifer, meaning "any version"
  // Only the first item is strictly required.
  tok("XRANGEIDENTIFIERLOOSE");
  src[t.XRANGEIDENTIFIERLOOSE] = src[t.NUMERICIDENTIFIERLOOSE] + "|x|X|\\*";
  tok("XRANGEIDENTIFIER");
  src[t.XRANGEIDENTIFIER] = src[t.NUMERICIDENTIFIER] + "|x|X|\\*";
  tok("XRANGEPLAIN");
  src[t.XRANGEPLAIN] = "[v=\\s]*(" + src[t.XRANGEIDENTIFIER] + ")" + "(?:\\.(" + src[t.XRANGEIDENTIFIER] + ")" + "(?:\\.(" + src[t.XRANGEIDENTIFIER] + ")" + "(?:" + src[t.PRERELEASE] + ")?" + src[t.BUILD] + "?" + ")?)?";
  tok("XRANGEPLAINLOOSE");
  src[t.XRANGEPLAINLOOSE] = "[v=\\s]*(" + src[t.XRANGEIDENTIFIERLOOSE] + ")" + "(?:\\.(" + src[t.XRANGEIDENTIFIERLOOSE] + ")" + "(?:\\.(" + src[t.XRANGEIDENTIFIERLOOSE] + ")" + "(?:" + src[t.PRERELEASELOOSE] + ")?" + src[t.BUILD] + "?" + ")?)?";
  tok("XRANGE");
  src[t.XRANGE] = "^" + src[t.GTLT] + "\\s*" + src[t.XRANGEPLAIN] + "$";
  tok("XRANGELOOSE");
  src[t.XRANGELOOSE] = "^" + src[t.GTLT] + "\\s*" + src[t.XRANGEPLAINLOOSE] + "$";

  // Coercion.
  // Extract anything that could conceivably be a part of a valid semver
  tok("COERCE");
  src[t.COERCE] = "(^|[^\\d])" + "(\\d{1," + MAX_SAFE_COMPONENT_LENGTH + "})" + "(?:\\.(\\d{1," + MAX_SAFE_COMPONENT_LENGTH + "}))?" + "(?:\\.(\\d{1," + MAX_SAFE_COMPONENT_LENGTH + "}))?" + "(?:$|[^\\d])";
  tok("COERCERTL");
  re[t.COERCERTL] = new RegExp(src[t.COERCE], "g");
  safeRe[t.COERCERTL] = new RegExp(makeSafeRe(src[t.COERCE]), "g");

  // Tilde ranges.
  // Meaning is "reasonably at or greater than"
  tok("LONETILDE");
  src[t.LONETILDE] = "(?:~>?)";
  tok("TILDETRIM");
  src[t.TILDETRIM] = "(\\s*)" + src[t.LONETILDE] + "\\s+";
  re[t.TILDETRIM] = new RegExp(src[t.TILDETRIM], "g");
  safeRe[t.TILDETRIM] = new RegExp(makeSafeRe(src[t.TILDETRIM]), "g");
  var tildeTrimReplace = "$1~";
  tok("TILDE");
  src[t.TILDE] = "^" + src[t.LONETILDE] + src[t.XRANGEPLAIN] + "$";
  tok("TILDELOOSE");
  src[t.TILDELOOSE] = "^" + src[t.LONETILDE] + src[t.XRANGEPLAINLOOSE] + "$";

  // Caret ranges.
  // Meaning is "at least and backwards compatible with"
  tok("LONECARET");
  src[t.LONECARET] = "(?:\\^)";
  tok("CARETTRIM");
  src[t.CARETTRIM] = "(\\s*)" + src[t.LONECARET] + "\\s+";
  re[t.CARETTRIM] = new RegExp(src[t.CARETTRIM], "g");
  safeRe[t.CARETTRIM] = new RegExp(makeSafeRe(src[t.CARETTRIM]), "g");
  var caretTrimReplace = "$1^";
  tok("CARET");
  src[t.CARET] = "^" + src[t.LONECARET] + src[t.XRANGEPLAIN] + "$";
  tok("CARETLOOSE");
  src[t.CARETLOOSE] = "^" + src[t.LONECARET] + src[t.XRANGEPLAINLOOSE] + "$";

  // A simple gt/lt/eq thing, or just "" to indicate "any version"
  tok("COMPARATORLOOSE");
  src[t.COMPARATORLOOSE] = "^" + src[t.GTLT] + "\\s*(" + src[t.LOOSEPLAIN] + ")$|^$";
  tok("COMPARATOR");
  src[t.COMPARATOR] = "^" + src[t.GTLT] + "\\s*(" + src[t.FULLPLAIN] + ")$|^$";

  // An expression to strip any whitespace between the gtlt and the thing
  // it modifies, so that `> 1.2.3` ==> `>1.2.3`
  tok("COMPARATORTRIM");
  src[t.COMPARATORTRIM] = "(\\s*)" + src[t.GTLT] + "\\s*(" + src[t.LOOSEPLAIN] + "|" + src[t.XRANGEPLAIN] + ")";

  // this one has to use the /g flag
  re[t.COMPARATORTRIM] = new RegExp(src[t.COMPARATORTRIM], "g");
  safeRe[t.COMPARATORTRIM] = new RegExp(makeSafeRe(src[t.COMPARATORTRIM]), "g");
  var comparatorTrimReplace = "$1$2$3";

  // Something like `1.2.3 - 1.2.4`
  // Note that these all use the loose form, because they'll be
  // checked against either the strict or loose comparator form
  // later.
  tok("HYPHENRANGE");
  src[t.HYPHENRANGE] = "^\\s*(" + src[t.XRANGEPLAIN] + ")" + "\\s+-\\s+" + "(" + src[t.XRANGEPLAIN] + ")" + "\\s*$";
  tok("HYPHENRANGELOOSE");
  src[t.HYPHENRANGELOOSE] = "^\\s*(" + src[t.XRANGEPLAINLOOSE] + ")" + "\\s+-\\s+" + "(" + src[t.XRANGEPLAINLOOSE] + ")" + "\\s*$";

  // Star ranges basically just allow anything at all.
  tok("STAR");
  src[t.STAR] = "(<|>)?=?\\s*\\*";

  // Compile to actual regexp objects.
  // All are flag-free, unless they were created above with a flag.
  for (var i = 0; i < R; i++) {
    debug(i, src[i]);
    if (!re[i]) {
      re[i] = new RegExp(src[i]);

      // Replace all greedy whitespace to prevent regex dos issues. These regex are
      // used internally via the safeRe object since all inputs in this library get
      // normalized first to trim and collapse all extra whitespace. The original
      // regexes are exported for userland consumption and lower level usage. A
      // future breaking change could export the safer regex only with a note that
      // all input should have extra whitespace removed.
      safeRe[i] = new RegExp(makeSafeRe(src[i]));
    }
  }
  exports$1_.parse = parse;
  function parse(version, options) {
    if (!options || typeof options !== "object") {
      options = {
        loose: !!options,
        includePrerelease: false
      };
    }
    if (version instanceof SemVer) {
      return version;
    }
    if (typeof version !== "string") {
      return null;
    }
    if (version.length > MAX_LENGTH) {
      return null;
    }
    var r = options.loose ? safeRe[t.LOOSE] : safeRe[t.FULL];
    if (!r.test(version)) {
      return null;
    }
    try {
      return new SemVer(version, options);
    } catch (er) {
      return null;
    }
  }
  exports$1_.valid = valid;
  function valid(version, options) {
    var v = parse(version, options);
    return v ? v.version : null;
  }
  exports$1_.clean = clean;
  function clean(version, options) {
    var s = parse(version.trim().replace(/^[=v]+/, ""), options);
    return s ? s.version : null;
  }
  exports$1_.SemVer = SemVer;
  function SemVer(version, options) {
    if (!options || typeof options !== "object") {
      options = {
        loose: !!options,
        includePrerelease: false
      };
    }
    if (version instanceof SemVer) {
      if (version.loose === options.loose) {
        return version;
      } else {
        version = version.version;
      }
    } else if (typeof version !== "string") {
      throw new TypeError("Invalid Version: " + version);
    }
    if (version.length > MAX_LENGTH) {
      throw new TypeError("version is longer than " + MAX_LENGTH + " characters");
    }
    if (!((this || _global$2) instanceof SemVer)) {
      return new SemVer(version, options);
    }
    debug("SemVer", version, options);
    (this || _global$2).options = options;
    (this || _global$2).loose = !!options.loose;
    var m = version.trim().match(options.loose ? safeRe[t.LOOSE] : safeRe[t.FULL]);
    if (!m) {
      throw new TypeError("Invalid Version: " + version);
    }
    (this || _global$2).raw = version;

    // these are actually numbers
    (this || _global$2).major = +m[1];
    (this || _global$2).minor = +m[2];
    (this || _global$2).patch = +m[3];
    if ((this || _global$2).major > MAX_SAFE_INTEGER || (this || _global$2).major < 0) {
      throw new TypeError("Invalid major version");
    }
    if ((this || _global$2).minor > MAX_SAFE_INTEGER || (this || _global$2).minor < 0) {
      throw new TypeError("Invalid minor version");
    }
    if ((this || _global$2).patch > MAX_SAFE_INTEGER || (this || _global$2).patch < 0) {
      throw new TypeError("Invalid patch version");
    }

    // numberify any prerelease numeric ids
    if (!m[4]) {
      (this || _global$2).prerelease = [];
    } else {
      (this || _global$2).prerelease = m[4].split(".").map(function (id) {
        if (/^[0-9]+$/.test(id)) {
          var num = +id;
          if (num >= 0 && num < MAX_SAFE_INTEGER) {
            return num;
          }
        }
        return id;
      });
    }
    (this || _global$2).build = m[5] ? m[5].split(".") : [];
    this.format();
  }
  SemVer.prototype.format = function () {
    (this || _global$2).version = (this || _global$2).major + "." + (this || _global$2).minor + "." + (this || _global$2).patch;
    if ((this || _global$2).prerelease.length) {
      (this || _global$2).version += "-" + (this || _global$2).prerelease.join(".");
    }
    return (this || _global$2).version;
  };
  SemVer.prototype.toString = function () {
    return (this || _global$2).version;
  };
  SemVer.prototype.compare = function (other) {
    debug("SemVer.compare", (this || _global$2).version, (this || _global$2).options, other);
    if (!(other instanceof SemVer)) {
      other = new SemVer(other, (this || _global$2).options);
    }
    return this.compareMain(other) || this.comparePre(other);
  };
  SemVer.prototype.compareMain = function (other) {
    if (!(other instanceof SemVer)) {
      other = new SemVer(other, (this || _global$2).options);
    }
    return compareIdentifiers((this || _global$2).major, other.major) || compareIdentifiers((this || _global$2).minor, other.minor) || compareIdentifiers((this || _global$2).patch, other.patch);
  };
  SemVer.prototype.comparePre = function (other) {
    if (!(other instanceof SemVer)) {
      other = new SemVer(other, (this || _global$2).options);
    }

    // NOT having a prerelease is > having one
    if ((this || _global$2).prerelease.length && !other.prerelease.length) {
      return -1;
    } else if (!(this || _global$2).prerelease.length && other.prerelease.length) {
      return 1;
    } else if (!(this || _global$2).prerelease.length && !other.prerelease.length) {
      return 0;
    }
    var i = 0;
    do {
      var a = (this || _global$2).prerelease[i];
      var b = other.prerelease[i];
      debug("prerelease compare", i, a, b);
      if (a === undefined && b === undefined) {
        return 0;
      } else if (b === undefined) {
        return 1;
      } else if (a === undefined) {
        return -1;
      } else if (a === b) {
        continue;
      } else {
        return compareIdentifiers(a, b);
      }
    } while (++i);
  };
  SemVer.prototype.compareBuild = function (other) {
    if (!(other instanceof SemVer)) {
      other = new SemVer(other, (this || _global$2).options);
    }
    var i = 0;
    do {
      var a = (this || _global$2).build[i];
      var b = other.build[i];
      debug("prerelease compare", i, a, b);
      if (a === undefined && b === undefined) {
        return 0;
      } else if (b === undefined) {
        return 1;
      } else if (a === undefined) {
        return -1;
      } else if (a === b) {
        continue;
      } else {
        return compareIdentifiers(a, b);
      }
    } while (++i);
  };

  // preminor will bump the version up to the next minor release, and immediately
  // down to pre-release. premajor and prepatch work the same way.
  SemVer.prototype.inc = function (release, identifier) {
    switch (release) {
      case "premajor":
        (this || _global$2).prerelease.length = 0;
        (this || _global$2).patch = 0;
        (this || _global$2).minor = 0;
        (this || _global$2).major++;
        this.inc("pre", identifier);
        break;
      case "preminor":
        (this || _global$2).prerelease.length = 0;
        (this || _global$2).patch = 0;
        (this || _global$2).minor++;
        this.inc("pre", identifier);
        break;
      case "prepatch":
        // If this is already a prerelease, it will bump to the next version
        // drop any prereleases that might already exist, since they are not
        // relevant at this point.
        (this || _global$2).prerelease.length = 0;
        this.inc("patch", identifier);
        this.inc("pre", identifier);
        break;
      // If the input is a non-prerelease version, this acts the same as
      // prepatch.
      case "prerelease":
        if ((this || _global$2).prerelease.length === 0) {
          this.inc("patch", identifier);
        }
        this.inc("pre", identifier);
        break;
      case "major":
        // If this is a pre-major version, bump up to the same major version.
        // Otherwise increment major.
        // 1.0.0-5 bumps to 1.0.0
        // 1.1.0 bumps to 2.0.0
        if ((this || _global$2).minor !== 0 || (this || _global$2).patch !== 0 || (this || _global$2).prerelease.length === 0) {
          (this || _global$2).major++;
        }
        (this || _global$2).minor = 0;
        (this || _global$2).patch = 0;
        (this || _global$2).prerelease = [];
        break;
      case "minor":
        // If this is a pre-minor version, bump up to the same minor version.
        // Otherwise increment minor.
        // 1.2.0-5 bumps to 1.2.0
        // 1.2.1 bumps to 1.3.0
        if ((this || _global$2).patch !== 0 || (this || _global$2).prerelease.length === 0) {
          (this || _global$2).minor++;
        }
        (this || _global$2).patch = 0;
        (this || _global$2).prerelease = [];
        break;
      case "patch":
        // If this is not a pre-release version, it will increment the patch.
        // If it is a pre-release it will bump up to the same patch version.
        // 1.2.0-5 patches to 1.2.0
        // 1.2.0 patches to 1.2.1
        if ((this || _global$2).prerelease.length === 0) {
          (this || _global$2).patch++;
        }
        (this || _global$2).prerelease = [];
        break;
      // This probably shouldn't be used publicly.
      // 1.0.0 "pre" would become 1.0.0-0 which is the wrong direction.
      case "pre":
        if ((this || _global$2).prerelease.length === 0) {
          (this || _global$2).prerelease = [0];
        } else {
          var i = (this || _global$2).prerelease.length;
          while (--i >= 0) {
            if (typeof (this || _global$2).prerelease[i] === "number") {
              (this || _global$2).prerelease[i]++;
              i = -2;
            }
          }
          if (i === -1) {
            // didn't increment anything
            (this || _global$2).prerelease.push(0);
          }
        }
        if (identifier) {
          // 1.2.0-beta.1 bumps to 1.2.0-beta.2,
          // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0
          if ((this || _global$2).prerelease[0] === identifier) {
            if (isNaN((this || _global$2).prerelease[1])) {
              (this || _global$2).prerelease = [identifier, 0];
            }
          } else {
            (this || _global$2).prerelease = [identifier, 0];
          }
        }
        break;
      default:
        throw new Error("invalid increment argument: " + release);
    }
    this.format();
    (this || _global$2).raw = (this || _global$2).version;
    return this || _global$2;
  };
  exports$1_.inc = inc;
  function inc(version, release, loose, identifier) {
    if (typeof loose === "string") {
      identifier = loose;
      loose = undefined;
    }
    try {
      return new SemVer(version, loose).inc(release, identifier).version;
    } catch (er) {
      return null;
    }
  }
  exports$1_.diff = diff;
  function diff(version1, version2) {
    if (eq(version1, version2)) {
      return null;
    } else {
      var v1 = parse(version1);
      var v2 = parse(version2);
      var prefix = "";
      if (v1.prerelease.length || v2.prerelease.length) {
        prefix = "pre";
        var defaultResult = "prerelease";
      }
      for (var key in v1) {
        if (key === "major" || key === "minor" || key === "patch") {
          if (v1[key] !== v2[key]) {
            return prefix + key;
          }
        }
      }
      return defaultResult; // may be undefined
    }
  }
  exports$1_.compareIdentifiers = compareIdentifiers;
  var numeric = /^[0-9]+$/;
  function compareIdentifiers(a, b) {
    var anum = numeric.test(a);
    var bnum = numeric.test(b);
    if (anum && bnum) {
      a = +a;
      b = +b;
    }
    return a === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : 1;
  }
  exports$1_.rcompareIdentifiers = rcompareIdentifiers;
  function rcompareIdentifiers(a, b) {
    return compareIdentifiers(b, a);
  }
  exports$1_.major = major;
  function major(a, loose) {
    return new SemVer(a, loose).major;
  }
  exports$1_.minor = minor;
  function minor(a, loose) {
    return new SemVer(a, loose).minor;
  }
  exports$1_.patch = patch;
  function patch(a, loose) {
    return new SemVer(a, loose).patch;
  }
  exports$1_.compare = compare;
  function compare(a, b, loose) {
    return new SemVer(a, loose).compare(new SemVer(b, loose));
  }
  exports$1_.compareLoose = compareLoose;
  function compareLoose(a, b) {
    return compare(a, b, true);
  }
  exports$1_.compareBuild = compareBuild;
  function compareBuild(a, b, loose) {
    var versionA = new SemVer(a, loose);
    var versionB = new SemVer(b, loose);
    return versionA.compare(versionB) || versionA.compareBuild(versionB);
  }
  exports$1_.rcompare = rcompare;
  function rcompare(a, b, loose) {
    return compare(b, a, loose);
  }
  exports$1_.sort = sort;
  function sort(list, loose) {
    return list.sort(function (a, b) {
      return exports$1_.compareBuild(a, b, loose);
    });
  }
  exports$1_.rsort = rsort;
  function rsort(list, loose) {
    return list.sort(function (a, b) {
      return exports$1_.compareBuild(b, a, loose);
    });
  }
  exports$1_.gt = gt;
  function gt(a, b, loose) {
    return compare(a, b, loose) > 0;
  }
  exports$1_.lt = lt;
  function lt(a, b, loose) {
    return compare(a, b, loose) < 0;
  }
  exports$1_.eq = eq;
  function eq(a, b, loose) {
    return compare(a, b, loose) === 0;
  }
  exports$1_.neq = neq;
  function neq(a, b, loose) {
    return compare(a, b, loose) !== 0;
  }
  exports$1_.gte = gte;
  function gte(a, b, loose) {
    return compare(a, b, loose) >= 0;
  }
  exports$1_.lte = lte;
  function lte(a, b, loose) {
    return compare(a, b, loose) <= 0;
  }
  exports$1_.cmp = cmp;
  function cmp(a, op, b, loose) {
    switch (op) {
      case "===":
        if (typeof a === "object") a = a.version;
        if (typeof b === "object") b = b.version;
        return a === b;
      case "!==":
        if (typeof a === "object") a = a.version;
        if (typeof b === "object") b = b.version;
        return a !== b;
      case "":
      case "=":
      case "==":
        return eq(a, b, loose);
      case "!=":
        return neq(a, b, loose);
      case ">":
        return gt(a, b, loose);
      case ">=":
        return gte(a, b, loose);
      case "<":
        return lt(a, b, loose);
      case "<=":
        return lte(a, b, loose);
      default:
        throw new TypeError("Invalid operator: " + op);
    }
  }
  exports$1_.Comparator = Comparator;
  function Comparator(comp, options) {
    if (!options || typeof options !== "object") {
      options = {
        loose: !!options,
        includePrerelease: false
      };
    }
    if (comp instanceof Comparator) {
      if (comp.loose === !!options.loose) {
        return comp;
      } else {
        comp = comp.value;
      }
    }
    if (!((this || _global$2) instanceof Comparator)) {
      return new Comparator(comp, options);
    }
    comp = comp.trim().split(/\s+/).join(" ");
    debug("comparator", comp, options);
    (this || _global$2).options = options;
    (this || _global$2).loose = !!options.loose;
    this.parse(comp);
    if ((this || _global$2).semver === ANY) {
      (this || _global$2).value = "";
    } else {
      (this || _global$2).value = (this || _global$2).operator + (this || _global$2).semver.version;
    }
    debug("comp", this || _global$2);
  }
  var ANY = {};
  Comparator.prototype.parse = function (comp) {
    var r = (this || _global$2).options.loose ? safeRe[t.COMPARATORLOOSE] : safeRe[t.COMPARATOR];
    var m = comp.match(r);
    if (!m) {
      throw new TypeError("Invalid comparator: " + comp);
    }
    (this || _global$2).operator = m[1] !== undefined ? m[1] : "";
    if ((this || _global$2).operator === "=") {
      (this || _global$2).operator = "";
    }

    // if it literally is just '>' or '' then allow anything.
    if (!m[2]) {
      (this || _global$2).semver = ANY;
    } else {
      (this || _global$2).semver = new SemVer(m[2], (this || _global$2).options.loose);
    }
  };
  Comparator.prototype.toString = function () {
    return (this || _global$2).value;
  };
  Comparator.prototype.test = function (version) {
    debug("Comparator.test", version, (this || _global$2).options.loose);
    if ((this || _global$2).semver === ANY || version === ANY) {
      return true;
    }
    if (typeof version === "string") {
      try {
        version = new SemVer(version, (this || _global$2).options);
      } catch (er) {
        return false;
      }
    }
    return cmp(version, (this || _global$2).operator, (this || _global$2).semver, (this || _global$2).options);
  };
  Comparator.prototype.intersects = function (comp, options) {
    if (!(comp instanceof Comparator)) {
      throw new TypeError("a Comparator is required");
    }
    if (!options || typeof options !== "object") {
      options = {
        loose: !!options,
        includePrerelease: false
      };
    }
    var rangeTmp;
    if ((this || _global$2).operator === "") {
      if ((this || _global$2).value === "") {
        return true;
      }
      rangeTmp = new Range(comp.value, options);
      return satisfies((this || _global$2).value, rangeTmp, options);
    } else if (comp.operator === "") {
      if (comp.value === "") {
        return true;
      }
      rangeTmp = new Range((this || _global$2).value, options);
      return satisfies(comp.semver, rangeTmp, options);
    }
    var sameDirectionIncreasing = ((this || _global$2).operator === ">=" || (this || _global$2).operator === ">") && (comp.operator === ">=" || comp.operator === ">");
    var sameDirectionDecreasing = ((this || _global$2).operator === "<=" || (this || _global$2).operator === "<") && (comp.operator === "<=" || comp.operator === "<");
    var sameSemVer = (this || _global$2).semver.version === comp.semver.version;
    var differentDirectionsInclusive = ((this || _global$2).operator === ">=" || (this || _global$2).operator === "<=") && (comp.operator === ">=" || comp.operator === "<=");
    var oppositeDirectionsLessThan = cmp((this || _global$2).semver, "<", comp.semver, options) && ((this || _global$2).operator === ">=" || (this || _global$2).operator === ">") && (comp.operator === "<=" || comp.operator === "<");
    var oppositeDirectionsGreaterThan = cmp((this || _global$2).semver, ">", comp.semver, options) && ((this || _global$2).operator === "<=" || (this || _global$2).operator === "<") && (comp.operator === ">=" || comp.operator === ">");
    return sameDirectionIncreasing || sameDirectionDecreasing || sameSemVer && differentDirectionsInclusive || oppositeDirectionsLessThan || oppositeDirectionsGreaterThan;
  };
  exports$1_.Range = Range;
  function Range(range, options) {
    if (!options || typeof options !== "object") {
      options = {
        loose: !!options,
        includePrerelease: false
      };
    }
    if (range instanceof Range) {
      if (range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease) {
        return range;
      } else {
        return new Range(range.raw, options);
      }
    }
    if (range instanceof Comparator) {
      return new Range(range.value, options);
    }
    if (!((this || _global$2) instanceof Range)) {
      return new Range(range, options);
    }
    (this || _global$2).options = options;
    (this || _global$2).loose = !!options.loose;
    (this || _global$2).includePrerelease = !!options.includePrerelease;

    // First reduce all whitespace as much as possible so we do not have to rely
    // on potentially slow regexes like \s*. This is then stored and used for
    // future error messages as well.
    (this || _global$2).raw = range.trim().split(/\s+/).join(" ");

    // First, split based on boolean or ||
    (this || _global$2).set = (this || _global$2).raw.split("||").map(function (range) {
      return this.parseRange(range.trim());
    }, this || _global$2).filter(function (c) {
      // throw out any that are not relevant for whatever reason
      return c.length;
    });
    if (!(this || _global$2).set.length) {
      throw new TypeError("Invalid SemVer Range: " + (this || _global$2).raw);
    }
    this.format();
  }
  Range.prototype.format = function () {
    (this || _global$2).range = (this || _global$2).set.map(function (comps) {
      return comps.join(" ").trim();
    }).join("||").trim();
    return (this || _global$2).range;
  };
  Range.prototype.toString = function () {
    return (this || _global$2).range;
  };
  Range.prototype.parseRange = function (range) {
    var loose = (this || _global$2).options.loose;
    // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`
    var hr = loose ? safeRe[t.HYPHENRANGELOOSE] : safeRe[t.HYPHENRANGE];
    range = range.replace(hr, hyphenReplace);
    debug("hyphen replace", range);
    // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`
    range = range.replace(safeRe[t.COMPARATORTRIM], comparatorTrimReplace);
    debug("comparator trim", range, safeRe[t.COMPARATORTRIM]);

    // `~ 1.2.3` => `~1.2.3`
    range = range.replace(safeRe[t.TILDETRIM], tildeTrimReplace);

    // `^ 1.2.3` => `^1.2.3`
    range = range.replace(safeRe[t.CARETTRIM], caretTrimReplace);

    // normalize spaces
    range = range.split(/\s+/).join(" ");

    // At this point, the range is completely trimmed and
    // ready to be split into comparators.

    var compRe = loose ? safeRe[t.COMPARATORLOOSE] : safeRe[t.COMPARATOR];
    var set = range.split(" ").map(function (comp) {
      return parseComparator(comp, (this || _global$2).options);
    }, this || _global$2).join(" ").split(/\s+/);
    if ((this || _global$2).options.loose) {
      // in loose mode, throw out any that are not valid comparators
      set = set.filter(function (comp) {
        return !!comp.match(compRe);
      });
    }
    set = set.map(function (comp) {
      return new Comparator(comp, (this || _global$2).options);
    }, this || _global$2);
    return set;
  };
  Range.prototype.intersects = function (range, options) {
    if (!(range instanceof Range)) {
      throw new TypeError("a Range is required");
    }
    return (this || _global$2).set.some(function (thisComparators) {
      return isSatisfiable(thisComparators, options) && range.set.some(function (rangeComparators) {
        return isSatisfiable(rangeComparators, options) && thisComparators.every(function (thisComparator) {
          return rangeComparators.every(function (rangeComparator) {
            return thisComparator.intersects(rangeComparator, options);
          });
        });
      });
    });
  };

  // take a set of comparators and determine whether there
  // exists a version which can satisfy it
  function isSatisfiable(comparators, options) {
    var result = true;
    var remainingComparators = comparators.slice();
    var testComparator = remainingComparators.pop();
    while (result && remainingComparators.length) {
      result = remainingComparators.every(function (otherComparator) {
        return testComparator.intersects(otherComparator, options);
      });
      testComparator = remainingComparators.pop();
    }
    return result;
  }

  // Mostly just for testing and legacy API reasons
  exports$1_.toComparators = toComparators;
  function toComparators(range, options) {
    return new Range(range, options).set.map(function (comp) {
      return comp.map(function (c) {
        return c.value;
      }).join(" ").trim().split(" ");
    });
  }

  // comprised of xranges, tildes, stars, and gtlt's at this point.
  // already replaced the hyphen ranges
  // turn into a set of JUST comparators.
  function parseComparator(comp, options) {
    debug("comp", comp, options);
    comp = replaceCarets(comp, options);
    debug("caret", comp);
    comp = replaceTildes(comp, options);
    debug("tildes", comp);
    comp = replaceXRanges(comp, options);
    debug("xrange", comp);
    comp = replaceStars(comp, options);
    debug("stars", comp);
    return comp;
  }
  function isX(id) {
    return !id || id.toLowerCase() === "x" || id === "*";
  }

  // ~, ~> --> * (any, kinda silly)
  // ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0
  // ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0
  // ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0
  // ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0
  // ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0
  function replaceTildes(comp, options) {
    return comp.trim().split(/\s+/).map(function (comp) {
      return replaceTilde(comp, options);
    }).join(" ");
  }
  function replaceTilde(comp, options) {
    var r = options.loose ? safeRe[t.TILDELOOSE] : safeRe[t.TILDE];
    return comp.replace(r, function (_, M, m, p, pr) {
      debug("tilde", comp, _, M, m, p, pr);
      var ret;
      if (isX(M)) {
        ret = "";
      } else if (isX(m)) {
        ret = ">=" + M + ".0.0 <" + (+M + 1) + ".0.0";
      } else if (isX(p)) {
        // ~1.2 == >=1.2.0 <1.3.0
        ret = ">=" + M + "." + m + ".0 <" + M + "." + (+m + 1) + ".0";
      } else if (pr) {
        debug("replaceTilde pr", pr);
        ret = ">=" + M + "." + m + "." + p + "-" + pr + " <" + M + "." + (+m + 1) + ".0";
      } else {
        // ~1.2.3 == >=1.2.3 <1.3.0
        ret = ">=" + M + "." + m + "." + p + " <" + M + "." + (+m + 1) + ".0";
      }
      debug("tilde return", ret);
      return ret;
    });
  }

  // ^ --> * (any, kinda silly)
  // ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0
  // ^2.0, ^2.0.x --> >=2.0.0 <3.0.0
  // ^1.2, ^1.2.x --> >=1.2.0 <2.0.0
  // ^1.2.3 --> >=1.2.3 <2.0.0
  // ^1.2.0 --> >=1.2.0 <2.0.0
  function replaceCarets(comp, options) {
    return comp.trim().split(/\s+/).map(function (comp) {
      return replaceCaret(comp, options);
    }).join(" ");
  }
  function replaceCaret(comp, options) {
    debug("caret", comp, options);
    var r = options.loose ? safeRe[t.CARETLOOSE] : safeRe[t.CARET];
    return comp.replace(r, function (_, M, m, p, pr) {
      debug("caret", comp, _, M, m, p, pr);
      var ret;
      if (isX(M)) {
        ret = "";
      } else if (isX(m)) {
        ret = ">=" + M + ".0.0 <" + (+M + 1) + ".0.0";
      } else if (isX(p)) {
        if (M === "0") {
          ret = ">=" + M + "." + m + ".0 <" + M + "." + (+m + 1) + ".0";
        } else {
          ret = ">=" + M + "." + m + ".0 <" + (+M + 1) + ".0.0";
        }
      } else if (pr) {
        debug("replaceCaret pr", pr);
        if (M === "0") {
          if (m === "0") {
            ret = ">=" + M + "." + m + "." + p + "-" + pr + " <" + M + "." + m + "." + (+p + 1);
          } else {
            ret = ">=" + M + "." + m + "." + p + "-" + pr + " <" + M + "." + (+m + 1) + ".0";
          }
        } else {
          ret = ">=" + M + "." + m + "." + p + "-" + pr + " <" + (+M + 1) + ".0.0";
        }
      } else {
        debug("no pr");
        if (M === "0") {
          if (m === "0") {
            ret = ">=" + M + "." + m + "." + p + " <" + M + "." + m + "." + (+p + 1);
          } else {
            ret = ">=" + M + "." + m + "." + p + " <" + M + "." + (+m + 1) + ".0";
          }
        } else {
          ret = ">=" + M + "." + m + "." + p + " <" + (+M + 1) + ".0.0";
        }
      }
      debug("caret return", ret);
      return ret;
    });
  }
  function replaceXRanges(comp, options) {
    debug("replaceXRanges", comp, options);
    return comp.split(/\s+/).map(function (comp) {
      return replaceXRange(comp, options);
    }).join(" ");
  }
  function replaceXRange(comp, options) {
    comp = comp.trim();
    var r = options.loose ? safeRe[t.XRANGELOOSE] : safeRe[t.XRANGE];
    return comp.replace(r, function (ret, gtlt, M, m, p, pr) {
      debug("xRange", comp, ret, gtlt, M, m, p, pr);
      var xM = isX(M);
      var xm = xM || isX(m);
      var xp = xm || isX(p);
      var anyX = xp;
      if (gtlt === "=" && anyX) {
        gtlt = "";
      }

      // if we're including prereleases in the match, then we need
      // to fix this to -0, the lowest possible prerelease value
      pr = options.includePrerelease ? "-0" : "";
      if (xM) {
        if (gtlt === ">" || gtlt === "<") {
          // nothing is allowed
          ret = "<0.0.0-0";
        } else {
          // nothing is forbidden
          ret = "*";
        }
      } else if (gtlt && anyX) {
        // we know patch is an x, because we have any x at all.
        // replace X with 0
        if (xm) {
          m = 0;
        }
        p = 0;
        if (gtlt === ">") {
          // >1 => >=2.0.0
          // >1.2 => >=1.3.0
          // >1.2.3 => >= 1.2.4
          gtlt = ">=";
          if (xm) {
            M = +M + 1;
            m = 0;
            p = 0;
          } else {
            m = +m + 1;
            p = 0;
          }
        } else if (gtlt === "<=") {
          // <=0.7.x is actually <0.8.0, since any 0.7.x should
          // pass.  Similarly, <=7.x is actually <8.0.0, etc.
          gtlt = "<";
          if (xm) {
            M = +M + 1;
          } else {
            m = +m + 1;
          }
        }
        ret = gtlt + M + "." + m + "." + p + pr;
      } else if (xm) {
        ret = ">=" + M + ".0.0" + pr + " <" + (+M + 1) + ".0.0" + pr;
      } else if (xp) {
        ret = ">=" + M + "." + m + ".0" + pr + " <" + M + "." + (+m + 1) + ".0" + pr;
      }
      debug("xRange return", ret);
      return ret;
    });
  }

  // Because * is AND-ed with everything else in the comparator,
  // and '' means "any version", just remove the *s entirely.
  function replaceStars(comp, options) {
    debug("replaceStars", comp, options);
    // Looseness is ignored here.  star is always as loose as it gets!
    return comp.trim().replace(safeRe[t.STAR], "");
  }

  // This function is passed to string.replace(re[t.HYPHENRANGE])
  // M, m, patch, prerelease, build
  // 1.2 - 3.4.5 => >=1.2.0 <=3.4.5
  // 1.2.3 - 3.4 => >=1.2.0 <3.5.0 Any 3.4.x will do
  // 1.2 - 3.4 => >=1.2.0 <3.5.0
  function hyphenReplace($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr, tb) {
    if (isX(fM)) {
      from = "";
    } else if (isX(fm)) {
      from = ">=" + fM + ".0.0";
    } else if (isX(fp)) {
      from = ">=" + fM + "." + fm + ".0";
    } else {
      from = ">=" + from;
    }
    if (isX(tM)) {
      to = "";
    } else if (isX(tm)) {
      to = "<" + (+tM + 1) + ".0.0";
    } else if (isX(tp)) {
      to = "<" + tM + "." + (+tm + 1) + ".0";
    } else if (tpr) {
      to = "<=" + tM + "." + tm + "." + tp + "-" + tpr;
    } else {
      to = "<=" + to;
    }
    return (from + " " + to).trim();
  }

  // if ANY of the sets match ALL of its comparators, then pass
  Range.prototype.test = function (version) {
    if (!version) {
      return false;
    }
    if (typeof version === "string") {
      try {
        version = new SemVer(version, (this || _global$2).options);
      } catch (er) {
        return false;
      }
    }
    for (var i = 0; i < (this || _global$2).set.length; i++) {
      if (testSet((this || _global$2).set[i], version, (this || _global$2).options)) {
        return true;
      }
    }
    return false;
  };
  function testSet(set, version, options) {
    for (var i = 0; i < set.length; i++) {
      if (!set[i].test(version)) {
        return false;
      }
    }
    if (version.prerelease.length && !options.includePrerelease) {
      // Find the set of versions that are allowed to have prereleases
      // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0
      // That should allow `1.2.3-pr.2` to pass.
      // However, `1.2.4-alpha.notready` should NOT be allowed,
      // even though it's within the range set by the comparators.
      for (i = 0; i < set.length; i++) {
        debug(set[i].semver);
        if (set[i].semver === ANY) {
          continue;
        }
        if (set[i].semver.prerelease.length > 0) {
          var allowed = set[i].semver;
          if (allowed.major === version.major && allowed.minor === version.minor && allowed.patch === version.patch) {
            return true;
          }
        }
      }

      // Version has a -pre, but it's not one of the ones we like.
      return false;
    }
    return true;
  }
  exports$1_.satisfies = satisfies;
  function satisfies(version, range, options) {
    try {
      range = new Range(range, options);
    } catch (er) {
      return false;
    }
    return range.test(version);
  }
  exports$1_.maxSatisfying = maxSatisfying;
  function maxSatisfying(versions, range, options) {
    var max = null;
    var maxSV = null;
    try {
      var rangeObj = new Range(range, options);
    } catch (er) {
      return null;
    }
    versions.forEach(function (v) {
      if (rangeObj.test(v)) {
        // satisfies(v, range, options)
        if (!max || maxSV.compare(v) === -1) {
          // compare(max, v, true)
          max = v;
          maxSV = new SemVer(max, options);
        }
      }
    });
    return max;
  }
  exports$1_.minSatisfying = minSatisfying;
  function minSatisfying(versions, range, options) {
    var min = null;
    var minSV = null;
    try {
      var rangeObj = new Range(range, options);
    } catch (er) {
      return null;
    }
    versions.forEach(function (v) {
      if (rangeObj.test(v)) {
        // satisfies(v, range, options)
        if (!min || minSV.compare(v) === 1) {
          // compare(min, v, true)
          min = v;
          minSV = new SemVer(min, options);
        }
      }
    });
    return min;
  }
  exports$1_.minVersion = minVersion;
  function minVersion(range, loose) {
    range = new Range(range, loose);
    var minver = new SemVer("0.0.0");
    if (range.test(minver)) {
      return minver;
    }
    minver = new SemVer("0.0.0-0");
    if (range.test(minver)) {
      return minver;
    }
    minver = null;
    for (var i = 0; i < range.set.length; ++i) {
      var comparators = range.set[i];
      comparators.forEach(function (comparator) {
        // Clone to avoid manipulating the comparator's semver object.
        var compver = new SemVer(comparator.semver.version);
        switch (comparator.operator) {
          case ">":
            if (compver.prerelease.length === 0) {
              compver.patch++;
            } else {
              compver.prerelease.push(0);
            }
            compver.raw = compver.format();
          /* fallthrough */
          case "":
          case ">=":
            if (!minver || gt(minver, compver)) {
              minver = compver;
            }
            break;
          case "<":
          case "<=":
            /* Ignore maximum versions */
            break;
          /* istanbul ignore next */
          default:
            throw new Error("Unexpected operation: " + comparator.operator);
        }
      });
    }
    if (minver && range.test(minver)) {
      return minver;
    }
    return null;
  }
  exports$1_.validRange = validRange;
  function validRange(range, options) {
    try {
      // Return '*' instead of '' so that truthiness works.
      // This will throw if it's invalid anyway
      return new Range(range, options).range || "*";
    } catch (er) {
      return null;
    }
  }

  // Determine if version is less than all the versions possible in the range
  exports$1_.ltr = ltr;
  function ltr(version, range, options) {
    return outside(version, range, "<", options);
  }

  // Determine if version is greater than all the versions possible in the range.
  exports$1_.gtr = gtr;
  function gtr(version, range, options) {
    return outside(version, range, ">", options);
  }
  exports$1_.outside = outside;
  function outside(version, range, hilo, options) {
    version = new SemVer(version, options);
    range = new Range(range, options);
    var gtfn, ltefn, ltfn, comp, ecomp;
    switch (hilo) {
      case ">":
        gtfn = gt;
        ltefn = lte;
        ltfn = lt;
        comp = ">";
        ecomp = ">=";
        break;
      case "<":
        gtfn = lt;
        ltefn = gte;
        ltfn = gt;
        comp = "<";
        ecomp = "<=";
        break;
      default:
        throw new TypeError("Must provide a hilo val of \"<\" or \">\"");
    }

    // If it satisifes the range it is not outside
    if (satisfies(version, range, options)) {
      return false;
    }

    // From now on, variable terms are as if we're in "gtr" mode.
    // but note that everything is flipped for the "ltr" function.

    for (var i = 0; i < range.set.length; ++i) {
      var comparators = range.set[i];
      var high = null;
      var low = null;
      comparators.forEach(function (comparator) {
        if (comparator.semver === ANY) {
          comparator = new Comparator(">=0.0.0");
        }
        high = high || comparator;
        low = low || comparator;
        if (gtfn(comparator.semver, high.semver, options)) {
          high = comparator;
        } else if (ltfn(comparator.semver, low.semver, options)) {
          low = comparator;
        }
      });

      // If the edge version comparator has a operator then our version
      // isn't outside it
      if (high.operator === comp || high.operator === ecomp) {
        return false;
      }

      // If the lowest version comparator has an operator and our version
      // is less than it then it isn't higher than the range
      if ((!low.operator || low.operator === comp) && ltefn(version, low.semver)) {
        return false;
      } else if (low.operator === ecomp && ltfn(version, low.semver)) {
        return false;
      }
    }
    return true;
  }
  exports$1_.prerelease = prerelease;
  function prerelease(version, options) {
    var parsed = parse(version, options);
    return parsed && parsed.prerelease.length ? parsed.prerelease : null;
  }
  exports$1_.intersects = intersects;
  function intersects(r1, r2, options) {
    r1 = new Range(r1, options);
    r2 = new Range(r2, options);
    return r1.intersects(r2);
  }
  exports$1_.coerce = coerce;
  function coerce(version, options) {
    if (version instanceof SemVer) {
      return version;
    }
    if (typeof version === "number") {
      version = String(version);
    }
    if (typeof version !== "string") {
      return null;
    }
    options = options || {};
    var match = null;
    if (!options.rtl) {
      match = version.match(safeRe[t.COERCE]);
    } else {
      // Find the right-most coercible string that does not share
      // a terminus with a more left-ward coercible string.
      // Eg, '1.2.3.4' wants to coerce '2.3.4', not '3.4' or '4'
      //
      // Walk through the string checking with a /g regexp
      // Manually set the index so as to pick up overlapping matches.
      // Stop when we get a match that ends at the string end, since no
      // coercible string can be more right-ward without the same terminus.
      var next;
      while ((next = safeRe[t.COERCERTL].exec(version)) && (!match || match.index + match[0].length !== version.length)) {
        if (!match || next.index + next[0].length !== match.index + match[0].length) {
          match = next;
        }
        safeRe[t.COERCERTL].lastIndex = next.index + next[1].length + next[2].length;
      }
      // leave it in a clean state
      safeRe[t.COERCERTL].lastIndex = -1;
    }
    if (match === null) {
      return null;
    }
    return parse(match[2] + "." + (match[3] || "0") + "." + (match[4] || "0"), options);
  }
  return exports$1_;
}

var exports$1Z = {},
  _dewExec$1Y = false;
function dew$1Y() {
  if (_dewExec$1Y) return exports$1Z;
  _dewExec$1Y = true;
  Object.defineProperty(exports$1Z, "__esModule", {
    value: true
  });
  exports$1Z.default = void 0;
  var _assert = _assert2;
  var _t = dew$3i();
  const {
    callExpression,
    cloneNode,
    expressionStatement,
    identifier,
    importDeclaration,
    importDefaultSpecifier,
    importNamespaceSpecifier,
    importSpecifier,
    memberExpression,
    stringLiteral,
    variableDeclaration,
    variableDeclarator
  } = _t;
  class ImportBuilder {
    constructor(importedSource, scope, hub) {
      this._statements = [];
      this._resultName = null;
      this._importedSource = void 0;
      this._scope = scope;
      this._hub = hub;
      this._importedSource = importedSource;
    }
    done() {
      return {
        statements: this._statements,
        resultName: this._resultName
      };
    }
    import() {
      this._statements.push(importDeclaration([], stringLiteral(this._importedSource)));
      return this;
    }
    require() {
      this._statements.push(expressionStatement(callExpression(identifier("require"), [stringLiteral(this._importedSource)])));
      return this;
    }
    namespace(name = "namespace") {
      const local = this._scope.generateUidIdentifier(name);
      const statement = this._statements[this._statements.length - 1];
      _assert(statement.type === "ImportDeclaration");
      _assert(statement.specifiers.length === 0);
      statement.specifiers = [importNamespaceSpecifier(local)];
      this._resultName = cloneNode(local);
      return this;
    }
    default(name) {
      const id = this._scope.generateUidIdentifier(name);
      const statement = this._statements[this._statements.length - 1];
      _assert(statement.type === "ImportDeclaration");
      _assert(statement.specifiers.length === 0);
      statement.specifiers = [importDefaultSpecifier(id)];
      this._resultName = cloneNode(id);
      return this;
    }
    named(name, importName) {
      if (importName === "default") return this.default(name);
      const id = this._scope.generateUidIdentifier(name);
      const statement = this._statements[this._statements.length - 1];
      _assert(statement.type === "ImportDeclaration");
      _assert(statement.specifiers.length === 0);
      statement.specifiers = [importSpecifier(id, identifier(importName))];
      this._resultName = cloneNode(id);
      return this;
    }
    var(name) {
      const id = this._scope.generateUidIdentifier(name);
      let statement = this._statements[this._statements.length - 1];
      if (statement.type !== "ExpressionStatement") {
        _assert(this._resultName);
        statement = expressionStatement(this._resultName);
        this._statements.push(statement);
      }
      this._statements[this._statements.length - 1] = variableDeclaration("var", [variableDeclarator(id, statement.expression)]);
      this._resultName = cloneNode(id);
      return this;
    }
    defaultInterop() {
      return this._interop(this._hub.addHelper("interopRequireDefault"));
    }
    wildcardInterop() {
      return this._interop(this._hub.addHelper("interopRequireWildcard"));
    }
    _interop(callee) {
      const statement = this._statements[this._statements.length - 1];
      if (statement.type === "ExpressionStatement") {
        statement.expression = callExpression(callee, [statement.expression]);
      } else if (statement.type === "VariableDeclaration") {
        _assert(statement.declarations.length === 1);
        statement.declarations[0].init = callExpression(callee, [statement.declarations[0].init]);
      } else {
        _assert.fail("Unexpected type.");
      }
      return this;
    }
    prop(name) {
      const statement = this._statements[this._statements.length - 1];
      if (statement.type === "ExpressionStatement") {
        statement.expression = memberExpression(statement.expression, identifier(name));
      } else if (statement.type === "VariableDeclaration") {
        _assert(statement.declarations.length === 1);
        statement.declarations[0].init = memberExpression(statement.declarations[0].init, identifier(name));
      } else {
        _assert.fail("Unexpected type:" + statement.type);
      }
      return this;
    }
    read(name) {
      this._resultName = memberExpression(this._resultName, identifier(name));
    }
  }
  exports$1Z.default = ImportBuilder;
  return exports$1Z;
}

var exports$1Y = {},
  _dewExec$1X = false;
function dew$1X() {
  if (_dewExec$1X) return exports$1Y;
  _dewExec$1X = true;
  Object.defineProperty(exports$1Y, "__esModule", {
    value: true
  });
  exports$1Y.default = isModule;
  function isModule(path) {
    return path.node.sourceType === "module";
  }
  return exports$1Y;
}

var exports$1X = {},
  _dewExec$1W = false;
function dew$1W() {
  if (_dewExec$1W) return exports$1X;
  _dewExec$1W = true;
  Object.defineProperty(exports$1X, "__esModule", {
    value: true
  });
  exports$1X.default = void 0;
  var _assert = _assert2;
  var _t = dew$3i();
  var _importBuilder = dew$1Y();
  var _isModule = dew$1X();
  const {
    identifier,
    importSpecifier,
    numericLiteral,
    sequenceExpression,
    isImportDeclaration
  } = _t;
  class ImportInjector {
    constructor(path, importedSource, opts) {
      this._defaultOpts = {
        importedSource: null,
        importedType: "commonjs",
        importedInterop: "babel",
        importingInterop: "babel",
        ensureLiveReference: false,
        ensureNoContext: false,
        importPosition: "before"
      };
      const programPath = path.find(p => p.isProgram());
      this._programPath = programPath;
      this._programScope = programPath.scope;
      this._hub = programPath.hub;
      this._defaultOpts = this._applyDefaults(importedSource, opts, true);
    }
    addDefault(importedSourceIn, opts) {
      return this.addNamed("default", importedSourceIn, opts);
    }
    addNamed(importName, importedSourceIn, opts) {
      _assert(typeof importName === "string");
      return this._generateImport(this._applyDefaults(importedSourceIn, opts), importName);
    }
    addNamespace(importedSourceIn, opts) {
      return this._generateImport(this._applyDefaults(importedSourceIn, opts), null);
    }
    addSideEffect(importedSourceIn, opts) {
      return this._generateImport(this._applyDefaults(importedSourceIn, opts), void 0);
    }
    _applyDefaults(importedSource, opts, isInit = false) {
      let newOpts;
      if (typeof importedSource === "string") {
        newOpts = Object.assign({}, this._defaultOpts, {
          importedSource
        }, opts);
      } else {
        _assert(!opts, "Unexpected secondary arguments.");
        newOpts = Object.assign({}, this._defaultOpts, importedSource);
      }
      if (!isInit && opts) {
        if (opts.nameHint !== undefined) newOpts.nameHint = opts.nameHint;
        if (opts.blockHoist !== undefined) newOpts.blockHoist = opts.blockHoist;
      }
      return newOpts;
    }
    _generateImport(opts, importName) {
      const isDefault = importName === "default";
      const isNamed = !!importName && !isDefault;
      const isNamespace = importName === null;
      const {
        importedSource,
        importedType,
        importedInterop,
        importingInterop,
        ensureLiveReference,
        ensureNoContext,
        nameHint,
        importPosition,
        blockHoist
      } = opts;
      let name = nameHint || importName;
      const isMod = (0, _isModule.default)(this._programPath);
      const isModuleForNode = isMod && importingInterop === "node";
      const isModuleForBabel = isMod && importingInterop === "babel";
      if (importPosition === "after" && !isMod) {
        throw new Error(`"importPosition": "after" is only supported in modules`);
      }
      const builder = new _importBuilder.default(importedSource, this._programScope, this._hub);
      if (importedType === "es6") {
        if (!isModuleForNode && !isModuleForBabel) {
          throw new Error("Cannot import an ES6 module from CommonJS");
        }
        builder.import();
        if (isNamespace) {
          builder.namespace(nameHint || importedSource);
        } else if (isDefault || isNamed) {
          builder.named(name, importName);
        }
      } else if (importedType !== "commonjs") {
        throw new Error(`Unexpected interopType "${importedType}"`);
      } else if (importedInterop === "babel") {
        if (isModuleForNode) {
          name = name !== "default" ? name : importedSource;
          const es6Default = `${importedSource}$es6Default`;
          builder.import();
          if (isNamespace) {
            builder.default(es6Default).var(name || importedSource).wildcardInterop();
          } else if (isDefault) {
            if (ensureLiveReference) {
              builder.default(es6Default).var(name || importedSource).defaultInterop().read("default");
            } else {
              builder.default(es6Default).var(name).defaultInterop().prop(importName);
            }
          } else if (isNamed) {
            builder.default(es6Default).read(importName);
          }
        } else if (isModuleForBabel) {
          builder.import();
          if (isNamespace) {
            builder.namespace(name || importedSource);
          } else if (isDefault || isNamed) {
            builder.named(name, importName);
          }
        } else {
          builder.require();
          if (isNamespace) {
            builder.var(name || importedSource).wildcardInterop();
          } else if ((isDefault || isNamed) && ensureLiveReference) {
            if (isDefault) {
              name = name !== "default" ? name : importedSource;
              builder.var(name).read(importName);
              builder.defaultInterop();
            } else {
              builder.var(importedSource).read(importName);
            }
          } else if (isDefault) {
            builder.var(name).defaultInterop().prop(importName);
          } else if (isNamed) {
            builder.var(name).prop(importName);
          }
        }
      } else if (importedInterop === "compiled") {
        if (isModuleForNode) {
          builder.import();
          if (isNamespace) {
            builder.default(name || importedSource);
          } else if (isDefault || isNamed) {
            builder.default(importedSource).read(name);
          }
        } else if (isModuleForBabel) {
          builder.import();
          if (isNamespace) {
            builder.namespace(name || importedSource);
          } else if (isDefault || isNamed) {
            builder.named(name, importName);
          }
        } else {
          builder.require();
          if (isNamespace) {
            builder.var(name || importedSource);
          } else if (isDefault || isNamed) {
            if (ensureLiveReference) {
              builder.var(importedSource).read(name);
            } else {
              builder.prop(importName).var(name);
            }
          }
        }
      } else if (importedInterop === "uncompiled") {
        if (isDefault && ensureLiveReference) {
          throw new Error("No live reference for commonjs default");
        }
        if (isModuleForNode) {
          builder.import();
          if (isNamespace) {
            builder.default(name || importedSource);
          } else if (isDefault) {
            builder.default(name);
          } else if (isNamed) {
            builder.default(importedSource).read(name);
          }
        } else if (isModuleForBabel) {
          builder.import();
          if (isNamespace) {
            builder.default(name || importedSource);
          } else if (isDefault) {
            builder.default(name);
          } else if (isNamed) {
            builder.named(name, importName);
          }
        } else {
          builder.require();
          if (isNamespace) {
            builder.var(name || importedSource);
          } else if (isDefault) {
            builder.var(name);
          } else if (isNamed) {
            if (ensureLiveReference) {
              builder.var(importedSource).read(name);
            } else {
              builder.var(name).prop(importName);
            }
          }
        }
      } else {
        throw new Error(`Unknown importedInterop "${importedInterop}".`);
      }
      const {
        statements,
        resultName
      } = builder.done();
      this._insertStatements(statements, importPosition, blockHoist);
      if ((isDefault || isNamed) && ensureNoContext && resultName.type !== "Identifier") {
        return sequenceExpression([numericLiteral(0), resultName]);
      }
      return resultName;
    }
    _insertStatements(statements, importPosition = "before", blockHoist = 3) {
      if (importPosition === "after") {
        if (this._insertStatementsAfter(statements)) return;
      } else {
        if (this._insertStatementsBefore(statements, blockHoist)) return;
      }
      this._programPath.unshiftContainer("body", statements);
    }
    _insertStatementsBefore(statements, blockHoist) {
      if (statements.length === 1 && isImportDeclaration(statements[0]) && isValueImport(statements[0])) {
        const firstImportDecl = this._programPath.get("body").find(p => {
          return p.isImportDeclaration() && isValueImport(p.node);
        });
        if ((firstImportDecl == null ? void 0 : firstImportDecl.node.source.value) === statements[0].source.value && maybeAppendImportSpecifiers(firstImportDecl.node, statements[0])) {
          return true;
        }
      }
      statements.forEach(node => {
        node._blockHoist = blockHoist;
      });
      const targetPath = this._programPath.get("body").find(p => {
        const val = p.node._blockHoist;
        return Number.isFinite(val) && val < 4;
      });
      if (targetPath) {
        targetPath.insertBefore(statements);
        return true;
      }
      return false;
    }
    _insertStatementsAfter(statements) {
      const statementsSet = new Set(statements);
      const importDeclarations = new Map();
      for (const statement of statements) {
        if (isImportDeclaration(statement) && isValueImport(statement)) {
          const source = statement.source.value;
          if (!importDeclarations.has(source)) importDeclarations.set(source, []);
          importDeclarations.get(source).push(statement);
        }
      }
      let lastImportPath = null;
      for (const bodyStmt of this._programPath.get("body")) {
        if (bodyStmt.isImportDeclaration() && isValueImport(bodyStmt.node)) {
          lastImportPath = bodyStmt;
          const source = bodyStmt.node.source.value;
          const newImports = importDeclarations.get(source);
          if (!newImports) continue;
          for (const decl of newImports) {
            if (!statementsSet.has(decl)) continue;
            if (maybeAppendImportSpecifiers(bodyStmt.node, decl)) {
              statementsSet.delete(decl);
            }
          }
        }
      }
      if (statementsSet.size === 0) return true;
      if (lastImportPath) lastImportPath.insertAfter(Array.from(statementsSet));
      return !!lastImportPath;
    }
  }
  exports$1X.default = ImportInjector;
  function isValueImport(node) {
    return node.importKind !== "type" && node.importKind !== "typeof";
  }
  function hasNamespaceImport(node) {
    return node.specifiers.length === 1 && node.specifiers[0].type === "ImportNamespaceSpecifier" || node.specifiers.length === 2 && node.specifiers[1].type === "ImportNamespaceSpecifier";
  }
  function hasDefaultImport(node) {
    return node.specifiers.length > 0 && node.specifiers[0].type === "ImportDefaultSpecifier";
  }
  function maybeAppendImportSpecifiers(target, source) {
    if (!target.specifiers.length) {
      target.specifiers = source.specifiers;
      return true;
    }
    if (!source.specifiers.length) return true;
    if (hasNamespaceImport(target) || hasNamespaceImport(source)) return false;
    if (hasDefaultImport(source)) {
      if (hasDefaultImport(target)) {
        source.specifiers[0] = importSpecifier(source.specifiers[0].local, identifier("default"));
      } else {
        target.specifiers.unshift(source.specifiers.shift());
      }
    }
    target.specifiers.push(...source.specifiers);
    return true;
  }
  return exports$1X;
}

var exports$1W = {},
  _dewExec$1V = false;
function dew$1V() {
  if (_dewExec$1V) return exports$1W;
  _dewExec$1V = true;
  Object.defineProperty(exports$1W, "__esModule", {
    value: true
  });
  Object.defineProperty(exports$1W, "ImportInjector", {
    enumerable: true,
    get: function () {
      return _importInjector.default;
    }
  });
  exports$1W.addDefault = addDefault;
  exports$1W.addNamed = addNamed;
  exports$1W.addNamespace = addNamespace;
  exports$1W.addSideEffect = addSideEffect;
  Object.defineProperty(exports$1W, "isModule", {
    enumerable: true,
    get: function () {
      return _isModule.default;
    }
  });
  var _importInjector = dew$1W();
  var _isModule = dew$1X();
  function addDefault(path, importedSource, opts) {
    return new _importInjector.default(path).addDefault(importedSource, opts);
  }
  function addNamed(path, name, importedSource, opts) {
    return new _importInjector.default(path).addNamed(name, importedSource, opts);
  }
  function addNamespace(path, importedSource, opts) {
    return new _importInjector.default(path).addNamespace(importedSource, opts);
  }
  function addSideEffect(path, importedSource, opts) {
    return new _importInjector.default(path).addSideEffect(importedSource, opts);
  }
  return exports$1W;
}

var exports$1V = {},
  _dewExec$1U = false;
function dew$1U() {
  if (_dewExec$1U) return exports$1V;
  _dewExec$1U = true;
  Object.defineProperty(exports$1V, "__esModule", {
    value: true
  });
  exports$1V.default = rewriteThis;
  var _core = dew();
  var _traverse = dew$1_();
  let rewriteThisVisitor;
  function rewriteThis(programPath) {
    if (!rewriteThisVisitor) {
      rewriteThisVisitor = _traverse.visitors.environmentVisitor({
        ThisExpression(path) {
          path.replaceWith(_core.types.unaryExpression("void", _core.types.numericLiteral(0), true));
        }
      });
      rewriteThisVisitor.noScope = true;
    }
    (0, _traverse.default)(programPath.node, rewriteThisVisitor);
  }
  return exports$1V;
}

var exports$1U = {},
  _dewExec$1T = false;
function dew$1T() {
  if (_dewExec$1T) return exports$1U;
  _dewExec$1T = true;
  Object.defineProperty(exports$1U, "__esModule", {
    value: true
  });
  exports$1U.default = simplifyAccess;
  var _t = dew$3i();
  const {
    LOGICAL_OPERATORS,
    assignmentExpression,
    binaryExpression,
    cloneNode,
    identifier,
    logicalExpression,
    numericLiteral,
    sequenceExpression,
    unaryExpression
  } = _t;
  const simpleAssignmentVisitor = {
    AssignmentExpression: {
      exit(path) {
        const {
          scope,
          seen,
          bindingNames
        } = this;
        if (path.node.operator === "=") return;
        if (seen.has(path.node)) return;
        seen.add(path.node);
        const left = path.get("left");
        if (!left.isIdentifier()) return;
        const localName = left.node.name;
        if (!bindingNames.has(localName)) return;
        if (scope.getBinding(localName) !== path.scope.getBinding(localName)) {
          return;
        }
        const operator = path.node.operator.slice(0, -1);
        if (LOGICAL_OPERATORS.includes(operator)) {
          path.replaceWith(logicalExpression(operator, path.node.left, assignmentExpression("=", cloneNode(path.node.left), path.node.right)));
        } else {
          path.node.right = binaryExpression(operator, cloneNode(path.node.left), path.node.right);
          path.node.operator = "=";
        }
      }
    }
  };
  {
    simpleAssignmentVisitor.UpdateExpression = {
      exit(path) {
        if (!this.includeUpdateExpression) return;
        const {
          scope,
          bindingNames
        } = this;
        const arg = path.get("argument");
        if (!arg.isIdentifier()) return;
        const localName = arg.node.name;
        if (!bindingNames.has(localName)) return;
        if (scope.getBinding(localName) !== path.scope.getBinding(localName)) {
          return;
        }
        if (path.parentPath.isExpressionStatement() && !path.isCompletionRecord()) {
          const operator = path.node.operator === "++" ? "+=" : "-=";
          path.replaceWith(assignmentExpression(operator, arg.node, numericLiteral(1)));
        } else if (path.node.prefix) {
          path.replaceWith(assignmentExpression("=", identifier(localName), binaryExpression(path.node.operator[0], unaryExpression("+", arg.node), numericLiteral(1))));
        } else {
          const old = path.scope.generateUidIdentifierBasedOnNode(arg.node, "old");
          const varName = old.name;
          path.scope.push({
            id: old
          });
          const binary = binaryExpression(path.node.operator[0], identifier(varName), numericLiteral(1));
          path.replaceWith(sequenceExpression([assignmentExpression("=", identifier(varName), unaryExpression("+", arg.node)), assignmentExpression("=", cloneNode(arg.node), binary), identifier(varName)]));
        }
      }
    };
  }
  function simplifyAccess(path, bindingNames) {
    {
      var _arguments$;
      path.traverse(simpleAssignmentVisitor, {
        scope: path.scope,
        bindingNames,
        seen: new WeakSet(),
        includeUpdateExpression: (_arguments$ = arguments[2]) != null ? _arguments$ : true
      });
    }
  }
  return exports$1U;
}

var exports$1T = {},
  _dewExec$1S = false;
function dew$1S() {
  if (_dewExec$1S) return exports$1T;
  _dewExec$1S = true;
  Object.defineProperty(exports$1T, "__esModule", {
    value: true
  });
  exports$1T.default = rewriteLiveReferences;
  var _assert = _assert2;
  var _core = dew();
  var _helperSimpleAccess = dew$1T();
  function isInType(path) {
    do {
      switch (path.parent.type) {
        case "TSTypeAnnotation":
        case "TSTypeAliasDeclaration":
        case "TSTypeReference":
        case "TypeAnnotation":
        case "TypeAlias":
          return true;
        case "ExportSpecifier":
          return path.parentPath.parent.exportKind === "type";
        default:
          if (path.parentPath.isStatement() || path.parentPath.isExpression()) {
            return false;
          }
      }
    } while (path = path.parentPath);
  }
  function rewriteLiveReferences(programPath, metadata, wrapReference) {
    const imported = new Map();
    const exported = new Map();
    const requeueInParent = path => {
      programPath.requeue(path);
    };
    for (const [source, data] of metadata.source) {
      for (const [localName, importName] of data.imports) {
        imported.set(localName, [source, importName, null]);
      }
      for (const localName of data.importsNamespace) {
        imported.set(localName, [source, null, localName]);
      }
    }
    for (const [local, data] of metadata.local) {
      let exportMeta = exported.get(local);
      if (!exportMeta) {
        exportMeta = [];
        exported.set(local, exportMeta);
      }
      exportMeta.push(...data.names);
    }
    const rewriteBindingInitVisitorState = {
      metadata,
      requeueInParent,
      scope: programPath.scope,
      exported
    };
    programPath.traverse(rewriteBindingInitVisitor, rewriteBindingInitVisitorState);
    const bindingNames = new Set([...Array.from(imported.keys()), ...Array.from(exported.keys())]);
    {
      (0, _helperSimpleAccess.default)(programPath, bindingNames, false);
    }
    const rewriteReferencesVisitorState = {
      seen: new WeakSet(),
      metadata,
      requeueInParent,
      scope: programPath.scope,
      imported,
      exported,
      buildImportReference([source, importName, localName], identNode) {
        const meta = metadata.source.get(source);
        meta.referenced = true;
        if (localName) {
          if (meta.wrap) {
            var _wrapReference;
            identNode = (_wrapReference = wrapReference(identNode, meta.wrap)) != null ? _wrapReference : identNode;
          }
          return identNode;
        }
        let namespace = _core.types.identifier(meta.name);
        if (meta.wrap) {
          var _wrapReference2;
          namespace = (_wrapReference2 = wrapReference(namespace, meta.wrap)) != null ? _wrapReference2 : namespace;
        }
        if (importName === "default" && meta.interop === "node-default") {
          return namespace;
        }
        const computed = metadata.stringSpecifiers.has(importName);
        return _core.types.memberExpression(namespace, computed ? _core.types.stringLiteral(importName) : _core.types.identifier(importName), computed);
      }
    };
    programPath.traverse(rewriteReferencesVisitor, rewriteReferencesVisitorState);
  }
  const rewriteBindingInitVisitor = {
    Scope(path) {
      path.skip();
    },
    ClassDeclaration(path) {
      const {
        requeueInParent,
        exported,
        metadata
      } = this;
      const {
        id
      } = path.node;
      if (!id) throw new Error("Expected class to have a name");
      const localName = id.name;
      const exportNames = exported.get(localName) || [];
      if (exportNames.length > 0) {
        const statement = _core.types.expressionStatement(buildBindingExportAssignmentExpression(metadata, exportNames, _core.types.identifier(localName), path.scope));
        statement._blockHoist = path.node._blockHoist;
        requeueInParent(path.insertAfter(statement)[0]);
      }
    },
    VariableDeclaration(path) {
      const {
        requeueInParent,
        exported,
        metadata
      } = this;
      const isVar = path.node.kind === "var";
      for (const decl of path.get("declarations")) {
        const {
          id
        } = decl.node;
        let {
          init
        } = decl.node;
        if (_core.types.isIdentifier(id) && exported.has(id.name) && !_core.types.isArrowFunctionExpression(init) && (!_core.types.isFunctionExpression(init) || init.id) && (!_core.types.isClassExpression(init) || init.id)) {
          if (!init) {
            if (isVar) {
              continue;
            } else {
              init = path.scope.buildUndefinedNode();
            }
          }
          decl.node.init = buildBindingExportAssignmentExpression(metadata, exported.get(id.name), init, path.scope);
          requeueInParent(decl.get("init"));
        } else {
          for (const localName of Object.keys(decl.getOuterBindingIdentifiers())) {
            if (exported.has(localName)) {
              const statement = _core.types.expressionStatement(buildBindingExportAssignmentExpression(metadata, exported.get(localName), _core.types.identifier(localName), path.scope));
              statement._blockHoist = path.node._blockHoist;
              requeueInParent(path.insertAfter(statement)[0]);
            }
          }
        }
      }
    }
  };
  const buildBindingExportAssignmentExpression = (metadata, exportNames, localExpr, scope) => {
    const exportsObjectName = metadata.exportName;
    for (let currentScope = scope; currentScope != null; currentScope = currentScope.parent) {
      if (currentScope.hasOwnBinding(exportsObjectName)) {
        currentScope.rename(exportsObjectName);
      }
    }
    return (exportNames || []).reduce((expr, exportName) => {
      const {
        stringSpecifiers
      } = metadata;
      const computed = stringSpecifiers.has(exportName);
      return _core.types.assignmentExpression("=", _core.types.memberExpression(_core.types.identifier(exportsObjectName), computed ? _core.types.stringLiteral(exportName) : _core.types.identifier(exportName), computed), expr);
    }, localExpr);
  };
  const buildImportThrow = localName => {
    return _core.template.expression.ast`
    (function() {
      throw new Error('"' + '${localName}' + '" is read-only.');
    })()
  `;
  };
  const rewriteReferencesVisitor = {
    ReferencedIdentifier(path) {
      const {
        seen,
        buildImportReference,
        scope,
        imported,
        requeueInParent
      } = this;
      if (seen.has(path.node)) return;
      seen.add(path.node);
      const localName = path.node.name;
      const importData = imported.get(localName);
      if (importData) {
        if (isInType(path)) {
          throw path.buildCodeFrameError(`Cannot transform the imported binding "${localName}" since it's also used in a type annotation. ` + `Please strip type annotations using @babel/preset-typescript or @babel/preset-flow.`);
        }
        const localBinding = path.scope.getBinding(localName);
        const rootBinding = scope.getBinding(localName);
        if (rootBinding !== localBinding) return;
        const ref = buildImportReference(importData, path.node);
        ref.loc = path.node.loc;
        if ((path.parentPath.isCallExpression({
          callee: path.node
        }) || path.parentPath.isOptionalCallExpression({
          callee: path.node
        }) || path.parentPath.isTaggedTemplateExpression({
          tag: path.node
        })) && _core.types.isMemberExpression(ref)) {
          path.replaceWith(_core.types.sequenceExpression([_core.types.numericLiteral(0), ref]));
        } else if (path.isJSXIdentifier() && _core.types.isMemberExpression(ref)) {
          const {
            object,
            property
          } = ref;
          path.replaceWith(_core.types.jsxMemberExpression(_core.types.jsxIdentifier(object.name), _core.types.jsxIdentifier(property.name)));
        } else {
          path.replaceWith(ref);
        }
        requeueInParent(path);
        path.skip();
      }
    },
    UpdateExpression(path) {
      const {
        scope,
        seen,
        imported,
        exported,
        requeueInParent,
        buildImportReference
      } = this;
      if (seen.has(path.node)) return;
      seen.add(path.node);
      const arg = path.get("argument");
      if (arg.isMemberExpression()) return;
      const update = path.node;
      if (arg.isIdentifier()) {
        const localName = arg.node.name;
        if (scope.getBinding(localName) !== path.scope.getBinding(localName)) {
          return;
        }
        const exportedNames = exported.get(localName);
        const importData = imported.get(localName);
        if ((exportedNames == null ? void 0 : exportedNames.length) > 0 || importData) {
          if (importData) {
            path.replaceWith(_core.types.assignmentExpression(update.operator[0] + "=", buildImportReference(importData, arg.node), buildImportThrow(localName)));
          } else if (update.prefix) {
            path.replaceWith(buildBindingExportAssignmentExpression(this.metadata, exportedNames, _core.types.cloneNode(update), path.scope));
          } else {
            const ref = scope.generateDeclaredUidIdentifier(localName);
            path.replaceWith(_core.types.sequenceExpression([_core.types.assignmentExpression("=", _core.types.cloneNode(ref), _core.types.cloneNode(update)), buildBindingExportAssignmentExpression(this.metadata, exportedNames, _core.types.identifier(localName), path.scope), _core.types.cloneNode(ref)]));
          }
        }
      }
      requeueInParent(path);
      path.skip();
    },
    AssignmentExpression: {
      exit(path) {
        const {
          scope,
          seen,
          imported,
          exported,
          requeueInParent,
          buildImportReference
        } = this;
        if (seen.has(path.node)) return;
        seen.add(path.node);
        const left = path.get("left");
        if (left.isMemberExpression()) return;
        if (left.isIdentifier()) {
          const localName = left.node.name;
          if (scope.getBinding(localName) !== path.scope.getBinding(localName)) {
            return;
          }
          const exportedNames = exported.get(localName);
          const importData = imported.get(localName);
          if ((exportedNames == null ? void 0 : exportedNames.length) > 0 || importData) {
            _assert(path.node.operator === "=", "Path was not simplified");
            const assignment = path.node;
            if (importData) {
              assignment.left = buildImportReference(importData, left.node);
              assignment.right = _core.types.sequenceExpression([assignment.right, buildImportThrow(localName)]);
            }
            path.replaceWith(buildBindingExportAssignmentExpression(this.metadata, exportedNames, assignment, path.scope));
            requeueInParent(path);
          }
        } else {
          const ids = left.getOuterBindingIdentifiers();
          const programScopeIds = Object.keys(ids).filter(localName => scope.getBinding(localName) === path.scope.getBinding(localName));
          const id = programScopeIds.find(localName => imported.has(localName));
          if (id) {
            path.node.right = _core.types.sequenceExpression([path.node.right, buildImportThrow(id)]);
          }
          const items = [];
          programScopeIds.forEach(localName => {
            const exportedNames = exported.get(localName) || [];
            if (exportedNames.length > 0) {
              items.push(buildBindingExportAssignmentExpression(this.metadata, exportedNames, _core.types.identifier(localName), path.scope));
            }
          });
          if (items.length > 0) {
            let node = _core.types.sequenceExpression(items);
            if (path.parentPath.isExpressionStatement()) {
              node = _core.types.expressionStatement(node);
              node._blockHoist = path.parentPath.node._blockHoist;
            }
            const statement = path.insertAfter(node)[0];
            requeueInParent(statement);
          }
        }
      }
    },
    "ForOfStatement|ForInStatement"(path) {
      const {
        scope,
        node
      } = path;
      const {
        left
      } = node;
      const {
        exported,
        imported,
        scope: programScope
      } = this;
      if (!_core.types.isVariableDeclaration(left)) {
        let didTransformExport = false,
          importConstViolationName;
        const loopBodyScope = path.get("body").scope;
        for (const name of Object.keys(_core.types.getOuterBindingIdentifiers(left))) {
          if (programScope.getBinding(name) === scope.getBinding(name)) {
            if (exported.has(name)) {
              didTransformExport = true;
              if (loopBodyScope.hasOwnBinding(name)) {
                loopBodyScope.rename(name);
              }
            }
            if (imported.has(name) && !importConstViolationName) {
              importConstViolationName = name;
            }
          }
        }
        if (!didTransformExport && !importConstViolationName) {
          return;
        }
        path.ensureBlock();
        const bodyPath = path.get("body");
        const newLoopId = scope.generateUidIdentifierBasedOnNode(left);
        path.get("left").replaceWith(_core.types.variableDeclaration("let", [_core.types.variableDeclarator(_core.types.cloneNode(newLoopId))]));
        scope.registerDeclaration(path.get("left"));
        if (didTransformExport) {
          bodyPath.unshiftContainer("body", _core.types.expressionStatement(_core.types.assignmentExpression("=", left, newLoopId)));
        }
        if (importConstViolationName) {
          bodyPath.unshiftContainer("body", _core.types.expressionStatement(buildImportThrow(importConstViolationName)));
        }
      }
    }
  };
  return exports$1T;
}

var exports$1S = {},
  _dewExec$1R = false;
function dew$1R() {
  if (_dewExec$1R) return exports$1S;
  _dewExec$1R = true;
  Object.defineProperty(exports$1S, "__esModule", {
    value: true
  });
  exports$1S.default = normalizeModuleAndLoadMetadata;
  exports$1S.hasExports = hasExports;
  exports$1S.isSideEffectImport = isSideEffectImport;
  exports$1S.validateImportInteropOption = validateImportInteropOption;
  var _path = _path2;
  var _helperValidatorIdentifier = dew$4t();
  function hasExports(metadata) {
    return metadata.hasExports;
  }
  function isSideEffectImport(source) {
    return source.imports.size === 0 && source.importsNamespace.size === 0 && source.reexports.size === 0 && source.reexportNamespace.size === 0 && !source.reexportAll;
  }
  function validateImportInteropOption(importInterop) {
    if (typeof importInterop !== "function" && importInterop !== "none" && importInterop !== "babel" && importInterop !== "node") {
      throw new Error(`.importInterop must be one of "none", "babel", "node", or a function returning one of those values (received ${importInterop}).`);
    }
    return importInterop;
  }
  function resolveImportInterop(importInterop, source, filename) {
    if (typeof importInterop === "function") {
      return validateImportInteropOption(importInterop(source, filename));
    }
    return importInterop;
  }
  function normalizeModuleAndLoadMetadata(programPath, exportName, {
    importInterop,
    initializeReexports = false,
    getWrapperPayload,
    esNamespaceOnly = false,
    filename
  }) {
    if (!exportName) {
      exportName = programPath.scope.generateUidIdentifier("exports").name;
    }
    const stringSpecifiers = new Set();
    nameAnonymousExports(programPath);
    const {
      local,
      sources,
      hasExports
    } = getModuleMetadata(programPath, {
      initializeReexports,
      getWrapperPayload
    }, stringSpecifiers);
    removeImportExportDeclarations(programPath);
    for (const [source, metadata] of sources) {
      const {
        importsNamespace,
        imports
      } = metadata;
      if (importsNamespace.size > 0 && imports.size === 0) {
        const [nameOfnamespace] = importsNamespace;
        metadata.name = nameOfnamespace;
      }
      const resolvedInterop = resolveImportInterop(importInterop, source, filename);
      if (resolvedInterop === "none") {
        metadata.interop = "none";
      } else if (resolvedInterop === "node" && metadata.interop === "namespace") {
        metadata.interop = "node-namespace";
      } else if (resolvedInterop === "node" && metadata.interop === "default") {
        metadata.interop = "node-default";
      } else if (esNamespaceOnly && metadata.interop === "namespace") {
        metadata.interop = "default";
      }
    }
    return {
      exportName,
      exportNameListName: null,
      hasExports,
      local,
      source: sources,
      stringSpecifiers
    };
  }
  function getExportSpecifierName(path, stringSpecifiers) {
    if (path.isIdentifier()) {
      return path.node.name;
    } else if (path.isStringLiteral()) {
      const stringValue = path.node.value;
      if (!(0, _helperValidatorIdentifier.isIdentifierName)(stringValue)) {
        stringSpecifiers.add(stringValue);
      }
      return stringValue;
    } else {
      throw new Error(`Expected export specifier to be either Identifier or StringLiteral, got ${path.node.type}`);
    }
  }
  function assertExportSpecifier(path) {
    if (path.isExportSpecifier()) {
      return;
    } else if (path.isExportNamespaceSpecifier()) {
      throw path.buildCodeFrameError("Export namespace should be first transformed by `@babel/plugin-transform-export-namespace-from`.");
    } else {
      throw path.buildCodeFrameError("Unexpected export specifier type");
    }
  }
  function getModuleMetadata(programPath, {
    getWrapperPayload,
    initializeReexports
  }, stringSpecifiers) {
    const localData = getLocalExportMetadata(programPath, initializeReexports, stringSpecifiers);
    const importNodes = new Map();
    const sourceData = new Map();
    const getData = (sourceNode, node) => {
      const source = sourceNode.value;
      let data = sourceData.get(source);
      if (!data) {
        data = {
          name: programPath.scope.generateUidIdentifier((0, _path.basename)(source, (0, _path.extname)(source))).name,
          interop: "none",
          loc: null,
          imports: new Map(),
          importsNamespace: new Set(),
          reexports: new Map(),
          reexportNamespace: new Set(),
          reexportAll: null,
          wrap: null,
          get lazy() {
            return this.wrap === "lazy";
          },
          referenced: false
        };
        sourceData.set(source, data);
        importNodes.set(source, [node]);
      } else {
        importNodes.get(source).push(node);
      }
      return data;
    };
    let hasExports = false;
    programPath.get("body").forEach(child => {
      if (child.isImportDeclaration()) {
        const data = getData(child.node.source, child.node);
        if (!data.loc) data.loc = child.node.loc;
        child.get("specifiers").forEach(spec => {
          if (spec.isImportDefaultSpecifier()) {
            const localName = spec.get("local").node.name;
            data.imports.set(localName, "default");
            const reexport = localData.get(localName);
            if (reexport) {
              localData.delete(localName);
              reexport.names.forEach(name => {
                data.reexports.set(name, "default");
              });
              data.referenced = true;
            }
          } else if (spec.isImportNamespaceSpecifier()) {
            const localName = spec.get("local").node.name;
            data.importsNamespace.add(localName);
            const reexport = localData.get(localName);
            if (reexport) {
              localData.delete(localName);
              reexport.names.forEach(name => {
                data.reexportNamespace.add(name);
              });
              data.referenced = true;
            }
          } else if (spec.isImportSpecifier()) {
            const importName = getExportSpecifierName(spec.get("imported"), stringSpecifiers);
            const localName = spec.get("local").node.name;
            data.imports.set(localName, importName);
            const reexport = localData.get(localName);
            if (reexport) {
              localData.delete(localName);
              reexport.names.forEach(name => {
                data.reexports.set(name, importName);
              });
              data.referenced = true;
            }
          }
        });
      } else if (child.isExportAllDeclaration()) {
        hasExports = true;
        const data = getData(child.node.source, child.node);
        if (!data.loc) data.loc = child.node.loc;
        data.reexportAll = {
          loc: child.node.loc
        };
        data.referenced = true;
      } else if (child.isExportNamedDeclaration() && child.node.source) {
        hasExports = true;
        const data = getData(child.node.source, child.node);
        if (!data.loc) data.loc = child.node.loc;
        child.get("specifiers").forEach(spec => {
          assertExportSpecifier(spec);
          const importName = getExportSpecifierName(spec.get("local"), stringSpecifiers);
          const exportName = getExportSpecifierName(spec.get("exported"), stringSpecifiers);
          data.reexports.set(exportName, importName);
          data.referenced = true;
          if (exportName === "__esModule") {
            throw spec.get("exported").buildCodeFrameError("Illegal export \"__esModule\".");
          }
        });
      } else if (child.isExportNamedDeclaration() || child.isExportDefaultDeclaration()) {
        hasExports = true;
      }
    });
    for (const metadata of sourceData.values()) {
      let needsDefault = false;
      let needsNamed = false;
      if (metadata.importsNamespace.size > 0) {
        needsDefault = true;
        needsNamed = true;
      }
      if (metadata.reexportAll) {
        needsNamed = true;
      }
      for (const importName of metadata.imports.values()) {
        if (importName === "default") needsDefault = true;else needsNamed = true;
      }
      for (const importName of metadata.reexports.values()) {
        if (importName === "default") needsDefault = true;else needsNamed = true;
      }
      if (needsDefault && needsNamed) {
        metadata.interop = "namespace";
      } else if (needsDefault) {
        metadata.interop = "default";
      }
    }
    if (getWrapperPayload) {
      for (const [source, metadata] of sourceData) {
        metadata.wrap = getWrapperPayload(source, metadata, importNodes.get(source));
      }
    }
    return {
      hasExports,
      local: localData,
      sources: sourceData
    };
  }
  function getLocalExportMetadata(programPath, initializeReexports, stringSpecifiers) {
    const bindingKindLookup = new Map();
    programPath.get("body").forEach(child => {
      let kind;
      if (child.isImportDeclaration()) {
        kind = "import";
      } else {
        if (child.isExportDefaultDeclaration()) {
          child = child.get("declaration");
        }
        if (child.isExportNamedDeclaration()) {
          if (child.node.declaration) {
            child = child.get("declaration");
          } else if (initializeReexports && child.node.source && child.get("source").isStringLiteral()) {
            child.get("specifiers").forEach(spec => {
              assertExportSpecifier(spec);
              bindingKindLookup.set(spec.get("local").node.name, "block");
            });
            return;
          }
        }
        if (child.isFunctionDeclaration()) {
          kind = "hoisted";
        } else if (child.isClassDeclaration()) {
          kind = "block";
        } else if (child.isVariableDeclaration({
          kind: "var"
        })) {
          kind = "var";
        } else if (child.isVariableDeclaration()) {
          kind = "block";
        } else {
          return;
        }
      }
      Object.keys(child.getOuterBindingIdentifiers()).forEach(name => {
        bindingKindLookup.set(name, kind);
      });
    });
    const localMetadata = new Map();
    const getLocalMetadata = idPath => {
      const localName = idPath.node.name;
      let metadata = localMetadata.get(localName);
      if (!metadata) {
        const kind = bindingKindLookup.get(localName);
        if (kind === undefined) {
          throw idPath.buildCodeFrameError(`Exporting local "${localName}", which is not declared.`);
        }
        metadata = {
          names: [],
          kind
        };
        localMetadata.set(localName, metadata);
      }
      return metadata;
    };
    programPath.get("body").forEach(child => {
      if (child.isExportNamedDeclaration() && (initializeReexports || !child.node.source)) {
        if (child.node.declaration) {
          const declaration = child.get("declaration");
          const ids = declaration.getOuterBindingIdentifierPaths();
          Object.keys(ids).forEach(name => {
            if (name === "__esModule") {
              throw declaration.buildCodeFrameError("Illegal export \"__esModule\".");
            }
            getLocalMetadata(ids[name]).names.push(name);
          });
        } else {
          child.get("specifiers").forEach(spec => {
            const local = spec.get("local");
            const exported = spec.get("exported");
            const localMetadata = getLocalMetadata(local);
            const exportName = getExportSpecifierName(exported, stringSpecifiers);
            if (exportName === "__esModule") {
              throw exported.buildCodeFrameError("Illegal export \"__esModule\".");
            }
            localMetadata.names.push(exportName);
          });
        }
      } else if (child.isExportDefaultDeclaration()) {
        const declaration = child.get("declaration");
        if (declaration.isFunctionDeclaration() || declaration.isClassDeclaration()) {
          getLocalMetadata(declaration.get("id")).names.push("default");
        } else {
          throw declaration.buildCodeFrameError("Unexpected default expression export.");
        }
      }
    });
    return localMetadata;
  }
  function nameAnonymousExports(programPath) {
    programPath.get("body").forEach(child => {
      if (!child.isExportDefaultDeclaration()) return;
      {
        var _child$splitExportDec;
        (_child$splitExportDec = child.splitExportDeclaration) != null ? _child$splitExportDec : child.splitExportDeclaration = dew$1_().NodePath.prototype.splitExportDeclaration;
      }
      child.splitExportDeclaration();
    });
  }
  function removeImportExportDeclarations(programPath) {
    programPath.get("body").forEach(child => {
      if (child.isImportDeclaration()) {
        child.remove();
      } else if (child.isExportNamedDeclaration()) {
        if (child.node.declaration) {
          child.node.declaration._blockHoist = child.node._blockHoist;
          child.replaceWith(child.node.declaration);
        } else {
          child.remove();
        }
      } else if (child.isExportDefaultDeclaration()) {
        const declaration = child.get("declaration");
        if (declaration.isFunctionDeclaration() || declaration.isClassDeclaration()) {
          declaration._blockHoist = child.node._blockHoist;
          child.replaceWith(declaration);
        } else {
          throw declaration.buildCodeFrameError("Unexpected default expression export.");
        }
      } else if (child.isExportAllDeclaration()) {
        child.remove();
      }
    });
  }
  return exports$1S;
}

var exports$1R = {},
  _dewExec$1Q = false;
function dew$1Q() {
  if (_dewExec$1Q) return exports$1R;
  _dewExec$1Q = true;
  Object.defineProperty(exports$1R, "__esModule", {
    value: true
  });
  exports$1R.toGetWrapperPayload = toGetWrapperPayload;
  exports$1R.wrapReference = wrapReference;
  var _core = dew();
  var _normalizeAndLoadMetadata = dew$1R();
  function toGetWrapperPayload(lazy) {
    return (source, metadata) => {
      if (lazy === false) return null;
      if ((0, _normalizeAndLoadMetadata.isSideEffectImport)(metadata) || metadata.reexportAll) return null;
      if (lazy === true) {
        return source.includes(".") ? null : "lazy";
      }
      if (Array.isArray(lazy)) {
        return !lazy.includes(source) ? null : "lazy";
      }
      if (typeof lazy === "function") {
        return lazy(source) ? "lazy" : null;
      }
      throw new Error(`.lazy must be a boolean, string array, or function`);
    };
  }
  function wrapReference(ref, payload) {
    if (payload === "lazy") return _core.types.callExpression(ref, []);
    return null;
  }
  return exports$1R;
}

var exports$1Q = {},
  _dewExec$1P = false;
function dew$1P() {
  if (_dewExec$1P) return exports$1Q;
  _dewExec$1P = true;
  Object.defineProperty(exports$1Q, "__esModule", {
    value: true
  });
  exports$1Q.buildDynamicImport = buildDynamicImport;
  var _core = dew();
  {
    exports$1Q.getDynamicImportSource = function getDynamicImportSource(node) {
      const [source] = node.arguments;
      return _core.types.isStringLiteral(source) || _core.types.isTemplateLiteral(source) ? source : _core.template.expression.ast`\`\${${source}}\``;
    };
  }
  function buildDynamicImport(node, deferToThen, wrapWithPromise, builder) {
    const specifier = _core.types.isCallExpression(node) ? node.arguments[0] : node.source;
    if (_core.types.isStringLiteral(specifier) || _core.types.isTemplateLiteral(specifier) && specifier.quasis.length === 0) {
      if (deferToThen) {
        return _core.template.expression.ast`
        Promise.resolve().then(() => ${builder(specifier)})
      `;
      } else return builder(specifier);
    }
    const specifierToString = _core.types.isTemplateLiteral(specifier) ? _core.types.identifier("specifier") : _core.types.templateLiteral([_core.types.templateElement({
      raw: ""
    }), _core.types.templateElement({
      raw: ""
    })], [_core.types.identifier("specifier")]);
    if (deferToThen) {
      return _core.template.expression.ast`
      (specifier =>
        new Promise(r => r(${specifierToString}))
          .then(s => ${builder(_core.types.identifier("s"))})
      )(${specifier})
    `;
    } else if (wrapWithPromise) {
      return _core.template.expression.ast`
      (specifier =>
        new Promise(r => r(${builder(specifierToString)}))
      )(${specifier})
    `;
    } else {
      return _core.template.expression.ast`
      (specifier => ${builder(specifierToString)})(${specifier})
    `;
    }
  }
  return exports$1Q;
}

var exports$1P = {},
  _dewExec$1O = false;
function dew$1O() {
  if (_dewExec$1O) return exports$1P;
  _dewExec$1O = true;
  Object.defineProperty(exports$1P, "__esModule", {
    value: true
  });
  exports$1P.default = getModuleName;
  {
    const originalGetModuleName = getModuleName;
    exports$1P.default = getModuleName = function getModuleName(rootOpts, pluginOpts) {
      var _pluginOpts$moduleId, _pluginOpts$moduleIds, _pluginOpts$getModule, _pluginOpts$moduleRoo;
      return originalGetModuleName(rootOpts, {
        moduleId: (_pluginOpts$moduleId = pluginOpts.moduleId) != null ? _pluginOpts$moduleId : rootOpts.moduleId,
        moduleIds: (_pluginOpts$moduleIds = pluginOpts.moduleIds) != null ? _pluginOpts$moduleIds : rootOpts.moduleIds,
        getModuleId: (_pluginOpts$getModule = pluginOpts.getModuleId) != null ? _pluginOpts$getModule : rootOpts.getModuleId,
        moduleRoot: (_pluginOpts$moduleRoo = pluginOpts.moduleRoot) != null ? _pluginOpts$moduleRoo : rootOpts.moduleRoot
      });
    };
  }
  function getModuleName(rootOpts, pluginOpts) {
    const {
      filename,
      filenameRelative = filename,
      sourceRoot = pluginOpts.moduleRoot
    } = rootOpts;
    const {
      moduleId,
      moduleIds = !!moduleId,
      getModuleId,
      moduleRoot = sourceRoot
    } = pluginOpts;
    if (!moduleIds) return null;
    if (moduleId != null && !getModuleId) {
      return moduleId;
    }
    let moduleName = moduleRoot != null ? moduleRoot + "/" : "";
    if (filenameRelative) {
      const sourceRootReplacer = sourceRoot != null ? new RegExp("^" + sourceRoot + "/?") : "";
      moduleName += filenameRelative.replace(sourceRootReplacer, "").replace(/\.\w*$/, "");
    }
    moduleName = moduleName.replace(/\\/g, "/");
    if (getModuleId) {
      return getModuleId(moduleName) || moduleName;
    } else {
      return moduleName;
    }
  }
  return exports$1P;
}

var exports$1O = {},
  _dewExec$1N = false;
function dew$1N() {
  if (_dewExec$1N) return exports$1O;
  _dewExec$1N = true;
  Object.defineProperty(exports$1O, "__esModule", {
    value: true
  });
  Object.defineProperty(exports$1O, "buildDynamicImport", {
    enumerable: true,
    get: function () {
      return _dynamicImport.buildDynamicImport;
    }
  });
  exports$1O.buildNamespaceInitStatements = buildNamespaceInitStatements;
  exports$1O.ensureStatementsHoisted = ensureStatementsHoisted;
  Object.defineProperty(exports$1O, "getModuleName", {
    enumerable: true,
    get: function () {
      return _getModuleName.default;
    }
  });
  Object.defineProperty(exports$1O, "hasExports", {
    enumerable: true,
    get: function () {
      return _normalizeAndLoadMetadata.hasExports;
    }
  });
  Object.defineProperty(exports$1O, "isModule", {
    enumerable: true,
    get: function () {
      return _helperModuleImports.isModule;
    }
  });
  Object.defineProperty(exports$1O, "isSideEffectImport", {
    enumerable: true,
    get: function () {
      return _normalizeAndLoadMetadata.isSideEffectImport;
    }
  });
  exports$1O.rewriteModuleStatementsAndPrepareHeader = rewriteModuleStatementsAndPrepareHeader;
  Object.defineProperty(exports$1O, "rewriteThis", {
    enumerable: true,
    get: function () {
      return _rewriteThis.default;
    }
  });
  exports$1O.wrapInterop = wrapInterop;
  var _assert = _assert2;
  var _core = dew();
  var _helperModuleImports = dew$1V();
  var _rewriteThis = dew$1U();
  var _rewriteLiveReferences = dew$1S();
  var _normalizeAndLoadMetadata = dew$1R();
  var Lazy = dew$1Q();
  var _dynamicImport = dew$1P();
  var _getModuleName = dew$1O();
  {
    exports$1O.getDynamicImportSource = dew$1P().getDynamicImportSource;
  }
  function rewriteModuleStatementsAndPrepareHeader(path, {
    exportName,
    strict,
    allowTopLevelThis,
    strictMode,
    noInterop,
    importInterop = noInterop ? "none" : "babel",
    lazy,
    getWrapperPayload = Lazy.toGetWrapperPayload(lazy != null ? lazy : false),
    wrapReference = Lazy.wrapReference,
    esNamespaceOnly,
    filename,
    constantReexports = arguments[1].loose,
    enumerableModuleMeta = arguments[1].loose,
    noIncompleteNsImportDetection
  }) {
    (0, _normalizeAndLoadMetadata.validateImportInteropOption)(importInterop);
    _assert((0, _helperModuleImports.isModule)(path), "Cannot process module statements in a script");
    path.node.sourceType = "script";
    const meta = (0, _normalizeAndLoadMetadata.default)(path, exportName, {
      importInterop,
      initializeReexports: constantReexports,
      getWrapperPayload,
      esNamespaceOnly,
      filename
    });
    if (!allowTopLevelThis) {
      (0, _rewriteThis.default)(path);
    }
    (0, _rewriteLiveReferences.default)(path, meta, wrapReference);
    if (strictMode !== false) {
      const hasStrict = path.node.directives.some(directive => {
        return directive.value.value === "use strict";
      });
      if (!hasStrict) {
        path.unshiftContainer("directives", _core.types.directive(_core.types.directiveLiteral("use strict")));
      }
    }
    const headers = [];
    if ((0, _normalizeAndLoadMetadata.hasExports)(meta) && !strict) {
      headers.push(buildESModuleHeader(meta, enumerableModuleMeta));
    }
    const nameList = buildExportNameListDeclaration(path, meta);
    if (nameList) {
      meta.exportNameListName = nameList.name;
      headers.push(nameList.statement);
    }
    headers.push(...buildExportInitializationStatements(path, meta, wrapReference, constantReexports, noIncompleteNsImportDetection));
    return {
      meta,
      headers
    };
  }
  function ensureStatementsHoisted(statements) {
    statements.forEach(header => {
      header._blockHoist = 3;
    });
  }
  function wrapInterop(programPath, expr, type) {
    if (type === "none") {
      return null;
    }
    if (type === "node-namespace") {
      return _core.types.callExpression(programPath.hub.addHelper("interopRequireWildcard"), [expr, _core.types.booleanLiteral(true)]);
    } else if (type === "node-default") {
      return null;
    }
    let helper;
    if (type === "default") {
      helper = "interopRequireDefault";
    } else if (type === "namespace") {
      helper = "interopRequireWildcard";
    } else {
      throw new Error(`Unknown interop: ${type}`);
    }
    return _core.types.callExpression(programPath.hub.addHelper(helper), [expr]);
  }
  function buildNamespaceInitStatements(metadata, sourceMetadata, constantReexports = false, wrapReference = Lazy.wrapReference) {
    var _wrapReference;
    const statements = [];
    const srcNamespaceId = _core.types.identifier(sourceMetadata.name);
    for (const localName of sourceMetadata.importsNamespace) {
      if (localName === sourceMetadata.name) continue;
      statements.push(_core.template.statement`var NAME = SOURCE;`({
        NAME: localName,
        SOURCE: _core.types.cloneNode(srcNamespaceId)
      }));
    }
    const srcNamespace = (_wrapReference = wrapReference(srcNamespaceId, sourceMetadata.wrap)) != null ? _wrapReference : srcNamespaceId;
    if (constantReexports) {
      statements.push(...buildReexportsFromMeta(metadata, sourceMetadata, true, wrapReference));
    }
    for (const exportName of sourceMetadata.reexportNamespace) {
      statements.push((!_core.types.isIdentifier(srcNamespace) ? _core.template.statement`
            Object.defineProperty(EXPORTS, "NAME", {
              enumerable: true,
              get: function() {
                return NAMESPACE;
              }
            });
          ` : _core.template.statement`EXPORTS.NAME = NAMESPACE;`)({
        EXPORTS: metadata.exportName,
        NAME: exportName,
        NAMESPACE: _core.types.cloneNode(srcNamespace)
      }));
    }
    if (sourceMetadata.reexportAll) {
      const statement = buildNamespaceReexport(metadata, _core.types.cloneNode(srcNamespace), constantReexports);
      statement.loc = sourceMetadata.reexportAll.loc;
      statements.push(statement);
    }
    return statements;
  }
  const ReexportTemplate = {
    constant: ({
      exports,
      exportName,
      namespaceImport
    }) => _core.template.statement.ast`
      ${exports}.${exportName} = ${namespaceImport};
    `,
    constantComputed: ({
      exports,
      exportName,
      namespaceImport
    }) => _core.template.statement.ast`
      ${exports}["${exportName}"] = ${namespaceImport};
    `,
    spec: ({
      exports,
      exportName,
      namespaceImport
    }) => _core.template.statement.ast`
      Object.defineProperty(${exports}, "${exportName}", {
        enumerable: true,
        get: function() {
          return ${namespaceImport};
        },
      });
    `
  };
  function buildReexportsFromMeta(meta, metadata, constantReexports, wrapReference) {
    var _wrapReference2;
    let namespace = _core.types.identifier(metadata.name);
    namespace = (_wrapReference2 = wrapReference(namespace, metadata.wrap)) != null ? _wrapReference2 : namespace;
    const {
      stringSpecifiers
    } = meta;
    return Array.from(metadata.reexports, ([exportName, importName]) => {
      let namespaceImport = _core.types.cloneNode(namespace);
      if (importName === "default" && metadata.interop === "node-default") ; else if (stringSpecifiers.has(importName)) {
        namespaceImport = _core.types.memberExpression(namespaceImport, _core.types.stringLiteral(importName), true);
      } else {
        namespaceImport = _core.types.memberExpression(namespaceImport, _core.types.identifier(importName));
      }
      const astNodes = {
        exports: meta.exportName,
        exportName,
        namespaceImport
      };
      if (constantReexports || _core.types.isIdentifier(namespaceImport)) {
        if (stringSpecifiers.has(exportName)) {
          return ReexportTemplate.constantComputed(astNodes);
        } else {
          return ReexportTemplate.constant(astNodes);
        }
      } else {
        return ReexportTemplate.spec(astNodes);
      }
    });
  }
  function buildESModuleHeader(metadata, enumerableModuleMeta = false) {
    return (enumerableModuleMeta ? _core.template.statement`
        EXPORTS.__esModule = true;
      ` : _core.template.statement`
        Object.defineProperty(EXPORTS, "__esModule", {
          value: true,
        });
      `)({
      EXPORTS: metadata.exportName
    });
  }
  function buildNamespaceReexport(metadata, namespace, constantReexports) {
    return (constantReexports ? _core.template.statement`
        Object.keys(NAMESPACE).forEach(function(key) {
          if (key === "default" || key === "__esModule") return;
          VERIFY_NAME_LIST;
          if (key in EXPORTS && EXPORTS[key] === NAMESPACE[key]) return;

          EXPORTS[key] = NAMESPACE[key];
        });
      ` : _core.template.statement`
        Object.keys(NAMESPACE).forEach(function(key) {
          if (key === "default" || key === "__esModule") return;
          VERIFY_NAME_LIST;
          if (key in EXPORTS && EXPORTS[key] === NAMESPACE[key]) return;

          Object.defineProperty(EXPORTS, key, {
            enumerable: true,
            get: function() {
              return NAMESPACE[key];
            },
          });
        });
    `)({
      NAMESPACE: namespace,
      EXPORTS: metadata.exportName,
      VERIFY_NAME_LIST: metadata.exportNameListName ? (0, _core.template)`
            if (Object.prototype.hasOwnProperty.call(EXPORTS_LIST, key)) return;
          `({
        EXPORTS_LIST: metadata.exportNameListName
      }) : null
    });
  }
  function buildExportNameListDeclaration(programPath, metadata) {
    const exportedVars = Object.create(null);
    for (const data of metadata.local.values()) {
      for (const name of data.names) {
        exportedVars[name] = true;
      }
    }
    let hasReexport = false;
    for (const data of metadata.source.values()) {
      for (const exportName of data.reexports.keys()) {
        exportedVars[exportName] = true;
      }
      for (const exportName of data.reexportNamespace) {
        exportedVars[exportName] = true;
      }
      hasReexport = hasReexport || !!data.reexportAll;
    }
    if (!hasReexport || Object.keys(exportedVars).length === 0) return null;
    const name = programPath.scope.generateUidIdentifier("exportNames");
    delete exportedVars.default;
    return {
      name: name.name,
      statement: _core.types.variableDeclaration("var", [_core.types.variableDeclarator(name, _core.types.valueToNode(exportedVars))])
    };
  }
  function buildExportInitializationStatements(programPath, metadata, wrapReference, constantReexports = false, noIncompleteNsImportDetection = false) {
    const initStatements = [];
    for (const [localName, data] of metadata.local) {
      if (data.kind === "import") ; else if (data.kind === "hoisted") {
        initStatements.push([data.names[0], buildInitStatement(metadata, data.names, _core.types.identifier(localName))]);
      } else if (!noIncompleteNsImportDetection) {
        for (const exportName of data.names) {
          initStatements.push([exportName, null]);
        }
      }
    }
    for (const data of metadata.source.values()) {
      if (!constantReexports) {
        const reexportsStatements = buildReexportsFromMeta(metadata, data, false, wrapReference);
        const reexports = [...data.reexports.keys()];
        for (let i = 0; i < reexportsStatements.length; i++) {
          initStatements.push([reexports[i], reexportsStatements[i]]);
        }
      }
      if (!noIncompleteNsImportDetection) {
        for (const exportName of data.reexportNamespace) {
          initStatements.push([exportName, null]);
        }
      }
    }
    initStatements.sort(([a], [b]) => {
      if (a < b) return -1;
      if (b < a) return 1;
      return 0;
    });
    const results = [];
    if (noIncompleteNsImportDetection) {
      for (const [, initStatement] of initStatements) {
        results.push(initStatement);
      }
    } else {
      const chunkSize = 100;
      for (let i = 0; i < initStatements.length; i += chunkSize) {
        let uninitializedExportNames = [];
        for (let j = 0; j < chunkSize && i + j < initStatements.length; j++) {
          const [exportName, initStatement] = initStatements[i + j];
          if (initStatement !== null) {
            if (uninitializedExportNames.length > 0) {
              results.push(buildInitStatement(metadata, uninitializedExportNames, programPath.scope.buildUndefinedNode()));
              uninitializedExportNames = [];
            }
            results.push(initStatement);
          } else {
            uninitializedExportNames.push(exportName);
          }
        }
        if (uninitializedExportNames.length > 0) {
          results.push(buildInitStatement(metadata, uninitializedExportNames, programPath.scope.buildUndefinedNode()));
        }
      }
    }
    return results;
  }
  const InitTemplate = {
    computed: ({
      exports,
      name,
      value
    }) => _core.template.expression.ast`${exports}["${name}"] = ${value}`,
    default: ({
      exports,
      name,
      value
    }) => _core.template.expression.ast`${exports}.${name} = ${value}`,
    define: ({
      exports,
      name,
      value
    }) => _core.template.expression.ast`
      Object.defineProperty(${exports}, "${name}", {
        enumerable: true,
        value: void 0,
        writable: true
      })["${name}"] = ${value}`
  };
  function buildInitStatement(metadata, exportNames, initExpr) {
    const {
      stringSpecifiers,
      exportName: exports
    } = metadata;
    return _core.types.expressionStatement(exportNames.reduce((value, name) => {
      const params = {
        exports,
        name,
        value
      };
      if (name === "__proto__") {
        return InitTemplate.define(params);
      }
      if (stringSpecifiers.has(name)) {
        return InitTemplate.computed(params);
      }
      return InitTemplate.default(params);
    }, initExpr));
  }
  return exports$1O;
}

var exports$1N = {},
  _dewExec$1M = false;
function dew$1M() {
  if (_dewExec$1M) return exports$1N;
  _dewExec$1M = true;
  exports$1N.getModuleName = () => dew$1N().getModuleName;
  return exports$1N;
}

var exports$1M = {},
  _dewExec$1L = false;
function dew$1L() {
  if (_dewExec$1L) return exports$1M;
  _dewExec$1L = true;
  Object.defineProperty(exports$1M, "__esModule", {
    value: true
  });
  exports$1M.default = void 0;
  function helpers() {
    const data = dew$2V();
    helpers = function () {
      return data;
    };
    return data;
  }
  function _traverse() {
    const data = dew$1_();
    _traverse = function () {
      return data;
    };
    return data;
  }
  function _codeFrame() {
    const data = dew$31();
    _codeFrame = function () {
      return data;
    };
    return data;
  }
  function _t() {
    const data = dew$3i();
    _t = function () {
      return data;
    };
    return data;
  }
  function _semver() {
    const data = dew$1Z();
    _semver = function () {
      return data;
    };
    return data;
  }
  var babel7 = _interopRequireWildcard(dew$1M(), true);
  function _getRequireWildcardCache(e) {
    if ("function" != typeof WeakMap) return null;
    var r = new WeakMap(),
      t = new WeakMap();
    return (_getRequireWildcardCache = function (e) {
      return e ? t : r;
    })(e);
  }
  function _interopRequireWildcard(e, r) {
    if (null === e || "object" != typeof e && "function" != typeof e) return {
      default: e
    };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e)) return t.get(e);
    var n = {
        __proto__: null
      },
      a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) {
      var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
      i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
    }
    return n.default = e, t && t.set(e, n), n;
  }
  const {
    cloneNode,
    interpreterDirective
  } = _t();
  const errorVisitor = {
    enter(path, state) {
      const loc = path.node.loc;
      if (loc) {
        state.loc = loc;
        path.stop();
      }
    }
  };
  class File {
    constructor(options, {
      code,
      ast,
      inputMap
    }) {
      this._map = new Map();
      this.opts = void 0;
      this.declarations = {};
      this.path = void 0;
      this.ast = void 0;
      this.scope = void 0;
      this.metadata = {};
      this.code = "";
      this.inputMap = void 0;
      this.hub = {
        file: this,
        getCode: () => this.code,
        getScope: () => this.scope,
        addHelper: this.addHelper.bind(this),
        buildError: this.buildCodeFrameError.bind(this)
      };
      this.opts = options;
      this.code = code;
      this.ast = ast;
      this.inputMap = inputMap;
      this.path = _traverse().NodePath.get({
        hub: this.hub,
        parentPath: null,
        parent: this.ast,
        container: this.ast,
        key: "program"
      }).setContext();
      this.scope = this.path.scope;
    }
    get shebang() {
      const {
        interpreter
      } = this.path.node;
      return interpreter ? interpreter.value : "";
    }
    set shebang(value) {
      if (value) {
        this.path.get("interpreter").replaceWith(interpreterDirective(value));
      } else {
        this.path.get("interpreter").remove();
      }
    }
    set(key, val) {
      {
        if (key === "helpersNamespace") {
          throw new Error("Babel 7.0.0-beta.56 has dropped support for the 'helpersNamespace' utility." + "If you are using @babel/plugin-external-helpers you will need to use a newer " + "version than the one you currently have installed. " + "If you have your own implementation, you'll want to explore using 'helperGenerator' " + "alongside 'file.availableHelper()'.");
        }
      }
      this._map.set(key, val);
    }
    get(key) {
      return this._map.get(key);
    }
    has(key) {
      return this._map.has(key);
    }
    availableHelper(name, versionRange) {
      let minVersion;
      try {
        minVersion = helpers().minVersion(name);
      } catch (err) {
        if (err.code !== "BABEL_HELPER_UNKNOWN") throw err;
        return false;
      }
      if (typeof versionRange !== "string") return true;
      if (_semver().valid(versionRange)) versionRange = `^${versionRange}`;
      {
        return !_semver().intersects(`<${minVersion}`, versionRange) && !_semver().intersects(`>=8.0.0`, versionRange);
      }
    }
    addHelper(name) {
      const declar = this.declarations[name];
      if (declar) return cloneNode(declar);
      const generator = this.get("helperGenerator");
      if (generator) {
        const res = generator(name);
        if (res) return res;
      }
      helpers().minVersion(name);
      const uid = this.declarations[name] = this.scope.generateUidIdentifier(name);
      const dependencies = {};
      for (const dep of helpers().getDependencies(name)) {
        dependencies[dep] = this.addHelper(dep);
      }
      const {
        nodes,
        globals
      } = helpers().get(name, dep => dependencies[dep], uid.name, Object.keys(this.scope.getAllBindings()));
      globals.forEach(name => {
        if (this.path.scope.hasBinding(name, true)) {
          this.path.scope.rename(name);
        }
      });
      nodes.forEach(node => {
        node._compact = true;
      });
      const added = this.path.unshiftContainer("body", nodes);
      for (const path of added) {
        if (path.isVariableDeclaration()) this.scope.registerDeclaration(path);
      }
      return uid;
    }
    buildCodeFrameError(node, msg, _Error = SyntaxError) {
      let loc = node == null ? void 0 : node.loc;
      if (!loc && node) {
        const state = {
          loc: null
        };
        (0, _traverse().default)(node, errorVisitor, this.scope, state);
        loc = state.loc;
        let txt = "This is an error on an internal node. Probably an internal error.";
        if (loc) txt += " Location has been estimated.";
        msg += ` (${txt})`;
      }
      if (loc) {
        const {
          highlightCode = true
        } = this.opts;
        msg += "\n" + (0, _codeFrame().codeFrameColumns)(this.code, {
          start: {
            line: loc.start.line,
            column: loc.start.column + 1
          },
          end: loc.end && loc.start.line === loc.end.line ? {
            line: loc.end.line,
            column: loc.end.column + 1
          } : undefined
        }, {
          highlightCode
        });
      }
      return new _Error(msg);
    }
  }
  exports$1M.default = File;
  {
    File.prototype.addImport = function addImport() {
      throw new Error("This API has been removed. If you're looking for this " + "functionality in Babel 7, you should import the " + "'@babel/helper-module-imports' module and use the functions exposed " + " from that module, such as 'addNamed' or 'addDefault'.");
    };
    File.prototype.addTemplateObject = function addTemplateObject() {
      throw new Error("This function has been moved into the template literal transform itself.");
    };
    {
      File.prototype.getModuleName = function getModuleName() {
        return babel7.getModuleName()(this.opts, this.opts);
      };
    }
  }
  return exports$1M;
}

var exports$1L = {},
  _dewExec$1K = false;
function dew$1K() {
  if (_dewExec$1K) return exports$1L;
  _dewExec$1K = true;
  Object.defineProperty(exports$1L, "__esModule", {
    value: true
  });
  exports$1L.default = _default;
  function helpers() {
    const data = dew$2V();
    helpers = function () {
      return data;
    };
    return data;
  }
  function _generator() {
    const data = dew$2j();
    _generator = function () {
      return data;
    };
    return data;
  }
  function _template() {
    const data = dew$2X();
    _template = function () {
      return data;
    };
    return data;
  }
  function _t() {
    const data = dew$3i();
    _t = function () {
      return data;
    };
    return data;
  }
  const {
    arrayExpression,
    assignmentExpression,
    binaryExpression,
    blockStatement,
    callExpression,
    cloneNode,
    conditionalExpression,
    exportNamedDeclaration,
    exportSpecifier,
    expressionStatement,
    functionExpression,
    identifier,
    memberExpression,
    objectExpression,
    program,
    stringLiteral,
    unaryExpression,
    variableDeclaration,
    variableDeclarator
  } = _t();
  const buildUmdWrapper = replacements => _template().default.statement`
    (function (root, factory) {
      if (typeof define === "function" && define.amd) {
        define(AMD_ARGUMENTS, factory);
      } else if (typeof exports === "object") {
        factory(COMMON_ARGUMENTS);
      } else {
        factory(BROWSER_ARGUMENTS);
      }
    })(UMD_ROOT, function (FACTORY_PARAMETERS) {
      FACTORY_BODY
    });
  `(replacements);
  function buildGlobal(allowlist) {
    const namespace = identifier("babelHelpers");
    const body = [];
    const container = functionExpression(null, [identifier("global")], blockStatement(body));
    const tree = program([expressionStatement(callExpression(container, [conditionalExpression(binaryExpression("===", unaryExpression("typeof", identifier("global")), stringLiteral("undefined")), identifier("self"), identifier("global"))]))]);
    body.push(variableDeclaration("var", [variableDeclarator(namespace, assignmentExpression("=", memberExpression(identifier("global"), namespace), objectExpression([])))]));
    buildHelpers(body, namespace, allowlist);
    return tree;
  }
  function buildModule(allowlist) {
    const body = [];
    const refs = buildHelpers(body, null, allowlist);
    body.unshift(exportNamedDeclaration(null, Object.keys(refs).map(name => {
      return exportSpecifier(cloneNode(refs[name]), identifier(name));
    })));
    return program(body, [], "module");
  }
  function buildUmd(allowlist) {
    const namespace = identifier("babelHelpers");
    const body = [];
    body.push(variableDeclaration("var", [variableDeclarator(namespace, identifier("global"))]));
    buildHelpers(body, namespace, allowlist);
    return program([buildUmdWrapper({
      FACTORY_PARAMETERS: identifier("global"),
      BROWSER_ARGUMENTS: assignmentExpression("=", memberExpression(identifier("root"), namespace), objectExpression([])),
      COMMON_ARGUMENTS: identifier("exports"),
      AMD_ARGUMENTS: arrayExpression([stringLiteral("exports")]),
      FACTORY_BODY: body,
      UMD_ROOT: identifier("this")
    })]);
  }
  function buildVar(allowlist) {
    const namespace = identifier("babelHelpers");
    const body = [];
    body.push(variableDeclaration("var", [variableDeclarator(namespace, objectExpression([]))]));
    const tree = program(body);
    buildHelpers(body, namespace, allowlist);
    body.push(expressionStatement(namespace));
    return tree;
  }
  function buildHelpers(body, namespace, allowlist) {
    const getHelperReference = name => {
      return namespace ? memberExpression(namespace, identifier(name)) : identifier(`_${name}`);
    };
    const refs = {};
    helpers().list.forEach(function (name) {
      if (allowlist && !allowlist.includes(name)) return;
      const ref = refs[name] = getHelperReference(name);
      const {
        nodes
      } = helpers().get(name, getHelperReference, namespace ? null : `_${name}`, [], namespace ? (ast, exportName, mapExportBindingAssignments) => {
        mapExportBindingAssignments(node => assignmentExpression("=", ref, node));
        ast.body.push(expressionStatement(assignmentExpression("=", ref, identifier(exportName))));
      } : null);
      body.push(...nodes);
    });
    return refs;
  }
  function _default(allowlist, outputType = "global") {
    let tree;
    const build = {
      global: buildGlobal,
      module: buildModule,
      umd: buildUmd,
      var: buildVar
    }[outputType];
    if (build) {
      tree = build(allowlist);
    } else {
      throw new Error(`Unsupported output type ${outputType}`);
    }
    return (0, _generator().default)(tree).code;
  }
  return exports$1L;
}

var exports$1K = {},
  _dewExec$1J = false;
function dew$1J() {
  if (_dewExec$1J) return exports$1K;
  _dewExec$1J = true;
  // These use the global symbol registry so that multiple copies of this
  // library can work together in case they are not deduped.
  const GENSYNC_START = Symbol.for("gensync:v1:start");
  const GENSYNC_SUSPEND = Symbol.for("gensync:v1:suspend");
  const GENSYNC_EXPECTED_START = "GENSYNC_EXPECTED_START";
  const GENSYNC_EXPECTED_SUSPEND = "GENSYNC_EXPECTED_SUSPEND";
  const GENSYNC_OPTIONS_ERROR = "GENSYNC_OPTIONS_ERROR";
  const GENSYNC_RACE_NONEMPTY = "GENSYNC_RACE_NONEMPTY";
  const GENSYNC_ERRBACK_NO_CALLBACK = "GENSYNC_ERRBACK_NO_CALLBACK";
  exports$1K = Object.assign(function gensync(optsOrFn) {
    let genFn = optsOrFn;
    if (typeof optsOrFn !== "function") {
      genFn = newGenerator(optsOrFn);
    } else {
      genFn = wrapGenerator(optsOrFn);
    }
    return Object.assign(genFn, makeFunctionAPI(genFn));
  }, {
    all: buildOperation({
      name: "all",
      arity: 1,
      sync: function (args) {
        const items = Array.from(args[0]);
        return items.map(item => evaluateSync(item));
      },
      async: function (args, resolve, reject) {
        const items = Array.from(args[0]);
        if (items.length === 0) {
          Promise.resolve().then(() => resolve([]));
          return;
        }
        let count = 0;
        const results = items.map(() => undefined);
        items.forEach((item, i) => {
          evaluateAsync(item, val => {
            results[i] = val;
            count += 1;
            if (count === results.length) resolve(results);
          }, reject);
        });
      }
    }),
    race: buildOperation({
      name: "race",
      arity: 1,
      sync: function (args) {
        const items = Array.from(args[0]);
        if (items.length === 0) {
          throw makeError("Must race at least 1 item", GENSYNC_RACE_NONEMPTY);
        }
        return evaluateSync(items[0]);
      },
      async: function (args, resolve, reject) {
        const items = Array.from(args[0]);
        if (items.length === 0) {
          throw makeError("Must race at least 1 item", GENSYNC_RACE_NONEMPTY);
        }
        for (const item of items) {
          evaluateAsync(item, resolve, reject);
        }
      }
    })
  });

  /**
   * Given a generator function, return the standard API object that executes
   * the generator and calls the callbacks.
   */
  function makeFunctionAPI(genFn) {
    const fns = {
      sync: function (...args) {
        return evaluateSync(genFn.apply(this, args));
      },
      async: function (...args) {
        return new Promise((resolve, reject) => {
          evaluateAsync(genFn.apply(this, args), resolve, reject);
        });
      },
      errback: function (...args) {
        const cb = args.pop();
        if (typeof cb !== "function") {
          throw makeError("Asynchronous function called without callback", GENSYNC_ERRBACK_NO_CALLBACK);
        }
        let gen;
        try {
          gen = genFn.apply(this, args);
        } catch (err) {
          cb(err);
          return;
        }
        evaluateAsync(gen, val => cb(undefined, val), err => cb(err));
      }
    };
    return fns;
  }
  function assertTypeof(type, name, value, allowUndefined) {
    if (typeof value === type || allowUndefined && typeof value === "undefined") {
      return;
    }
    let msg;
    if (allowUndefined) {
      msg = `Expected opts.${name} to be either a ${type}, or undefined.`;
    } else {
      msg = `Expected opts.${name} to be a ${type}.`;
    }
    throw makeError(msg, GENSYNC_OPTIONS_ERROR);
  }
  function makeError(msg, code) {
    return Object.assign(new Error(msg), {
      code
    });
  }

  /**
   * Given an options object, return a new generator that dispatches the
   * correct handler based on sync or async execution.
   */
  function newGenerator({
    name,
    arity,
    sync,
    async,
    errback
  }) {
    assertTypeof("string", "name", name, true /* allowUndefined */);
    assertTypeof("number", "arity", arity, true /* allowUndefined */);
    assertTypeof("function", "sync", sync);
    assertTypeof("function", "async", async, true /* allowUndefined */);
    assertTypeof("function", "errback", errback, true /* allowUndefined */);
    if (async && errback) {
      throw makeError("Expected one of either opts.async or opts.errback, but got _both_.", GENSYNC_OPTIONS_ERROR);
    }
    if (typeof name !== "string") {
      let fnName;
      if (errback && errback.name && errback.name !== "errback") {
        fnName = errback.name;
      }
      if (async && async.name && async.name !== "async") {
        fnName = async.name.replace(/Async$/, "");
      }
      if (sync && sync.name && sync.name !== "sync") {
        fnName = sync.name.replace(/Sync$/, "");
      }
      if (typeof fnName === "string") {
        name = fnName;
      }
    }
    if (typeof arity !== "number") {
      arity = sync.length;
    }
    return buildOperation({
      name,
      arity,
      sync: function (args) {
        return sync.apply(this, args);
      },
      async: function (args, resolve, reject) {
        if (async) {
          async.apply(this, args).then(resolve, reject);
        } else if (errback) {
          errback.call(this, ...args, (err, value) => {
            if (err == null) resolve(value);else reject(err);
          });
        } else {
          resolve(sync.apply(this, args));
        }
      }
    });
  }
  function wrapGenerator(genFn) {
    return setFunctionMetadata(genFn.name, genFn.length, function (...args) {
      return genFn.apply(this, args);
    });
  }
  function buildOperation({
    name,
    arity,
    sync,
    async
  }) {
    return setFunctionMetadata(name, arity, function* (...args) {
      const resume = yield GENSYNC_START;
      if (!resume) {
        // Break the tail call to avoid a bug in V8 v6.X with --harmony enabled.
        const res = sync.call(this, args);
        return res;
      }
      let result;
      try {
        async.call(this, args, value => {
          if (result) return;
          result = {
            value
          };
          resume();
        }, err => {
          if (result) return;
          result = {
            err
          };
          resume();
        });
      } catch (err) {
        result = {
          err
        };
        resume();
      }

      // Suspend until the callbacks run. Will resume synchronously if the
      // callback was already called.
      yield GENSYNC_SUSPEND;
      if (result.hasOwnProperty("err")) {
        throw result.err;
      }
      return result.value;
    });
  }
  function evaluateSync(gen) {
    let value;
    while (!({
      value
    } = gen.next()).done) {
      assertStart(value, gen);
    }
    return value;
  }
  function evaluateAsync(gen, resolve, reject) {
    (function step() {
      try {
        let value;
        while (!({
          value
        } = gen.next()).done) {
          assertStart(value, gen);

          // If this throws, it is considered to have broken the contract
          // established for async handlers. If these handlers are called
          // synchronously, it is also considered bad behavior.
          let sync = true;
          let didSyncResume = false;
          const out = gen.next(() => {
            if (sync) {
              didSyncResume = true;
            } else {
              step();
            }
          });
          sync = false;
          assertSuspend(out, gen);
          if (!didSyncResume) {
            // Callback wasn't called synchronously, so break out of the loop
            // and let it call 'step' later.
            return;
          }
        }
        return resolve(value);
      } catch (err) {
        return reject(err);
      }
    })();
  }
  function assertStart(value, gen) {
    if (value === GENSYNC_START) return;
    throwError(gen, makeError(`Got unexpected yielded value in gensync generator: ${JSON.stringify(value)}. Did you perhaps mean to use 'yield*' instead of 'yield'?`, GENSYNC_EXPECTED_START));
  }
  function assertSuspend({
    value,
    done
  }, gen) {
    if (!done && value === GENSYNC_SUSPEND) return;
    throwError(gen, makeError(done ? "Unexpected generator completion. If you get this, it is probably a gensync bug." : `Expected GENSYNC_SUSPEND, got ${JSON.stringify(value)}. If you get this, it is probably a gensync bug.`, GENSYNC_EXPECTED_SUSPEND));
  }
  function throwError(gen, err) {
    // Call `.throw` so that users can step in a debugger to easily see which
    // 'yield' passed an unexpected value. If the `.throw` call didn't throw
    // back to the generator, we explicitly do it to stop the error
    // from being swallowed by user code try/catches.
    if (gen.throw) gen.throw(err);
    throw err;
  }
  function setFunctionMetadata(name, arity, fn) {
    if (typeof name === "string") {
      // This should always work on the supported Node versions, but for the
      // sake of users that are compiling to older versions, we check for
      // configurability so we don't throw.
      const nameDesc = Object.getOwnPropertyDescriptor(fn, "name");
      if (!nameDesc || nameDesc.configurable) {
        Object.defineProperty(fn, "name", Object.assign(nameDesc || {}, {
          configurable: true,
          value: name
        }));
      }
    }
    if (typeof arity === "number") {
      const lengthDesc = Object.getOwnPropertyDescriptor(fn, "length");
      if (!lengthDesc || lengthDesc.configurable) {
        Object.defineProperty(fn, "length", Object.assign(lengthDesc || {}, {
          configurable: true,
          value: arity
        }));
      }
    }
    return fn;
  }
  return exports$1K;
}

var exports$1J = {},
  _dewExec$1I = false;
function dew$1I() {
  if (_dewExec$1I) return exports$1J;
  _dewExec$1I = true;
  Object.defineProperty(exports$1J, "__esModule", {
    value: true
  });
  exports$1J.forwardAsync = forwardAsync;
  exports$1J.isAsync = void 0;
  exports$1J.isThenable = isThenable;
  exports$1J.maybeAsync = maybeAsync;
  exports$1J.waitFor = exports$1J.onFirstPause = void 0;
  function _gensync() {
    const data = dew$1J();
    _gensync = function () {
      return data;
    };
    return data;
  }
  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
      var info = gen[key](arg);
      var value = info.value;
    } catch (error) {
      reject(error);
      return;
    }
    if (info.done) {
      resolve(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }
  function _asyncToGenerator(fn) {
    return function () {
      var self = this,
        args = arguments;
      return new Promise(function (resolve, reject) {
        var gen = fn.apply(self, args);
        function _next(value) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
        }
        function _throw(err) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
        }
        _next(undefined);
      });
    };
  }
  const runGenerator = _gensync()(function* (item) {
    return yield* item;
  });
  exports$1J.isAsync = _gensync()({
    sync: () => false,
    errback: cb => cb(null, true)
  });
  function maybeAsync(fn, message) {
    return _gensync()({
      sync(...args) {
        const result = fn.apply(this, args);
        if (isThenable(result)) throw new Error(message);
        return result;
      },
      async(...args) {
        return Promise.resolve(fn.apply(this, args));
      }
    });
  }
  const withKind = _gensync()({
    sync: cb => cb("sync"),
    async: function () {
      var _ref = _asyncToGenerator(function* (cb) {
        return cb("async");
      });
      return function async(_x) {
        return _ref.apply(this, arguments);
      };
    }()
  });
  function forwardAsync(action, cb) {
    const g = _gensync()(action);
    return withKind(kind => {
      const adapted = g[kind];
      return cb(adapted);
    });
  }
  exports$1J.onFirstPause = _gensync()({
    name: "onFirstPause",
    arity: 2,
    sync: function (item) {
      return runGenerator.sync(item);
    },
    errback: function (item, firstPause, cb) {
      let completed = false;
      runGenerator.errback(item, (err, value) => {
        completed = true;
        cb(err, value);
      });
      if (!completed) {
        firstPause();
      }
    }
  });
  exports$1J.waitFor = _gensync()({
    sync: x => x,
    async: function () {
      var _ref2 = _asyncToGenerator(function* (x) {
        return x;
      });
      return function async(_x2) {
        return _ref2.apply(this, arguments);
      };
    }()
  });
  function isThenable(val) {
    return !!val && (typeof val === "object" || typeof val === "function") && !!val.then && typeof val.then === "function";
  }
  return exports$1J;
}

var exports$1I = {},
  _dewExec$1H = false;
function dew$1H() {
  if (_dewExec$1H) return exports$1I;
  _dewExec$1H = true;
  Object.defineProperty(exports$1I, "__esModule", {
    value: true
  });
  exports$1I.isIterableIterator = isIterableIterator;
  exports$1I.mergeOptions = mergeOptions;
  function mergeOptions(target, source) {
    for (const k of Object.keys(source)) {
      if ((k === "parserOpts" || k === "generatorOpts" || k === "assumptions") && source[k]) {
        const parserOpts = source[k];
        const targetObj = target[k] || (target[k] = {});
        mergeDefaultFields(targetObj, parserOpts);
      } else {
        const val = source[k];
        if (val !== undefined) target[k] = val;
      }
    }
  }
  function mergeDefaultFields(target, source) {
    for (const k of Object.keys(source)) {
      const val = source[k];
      if (val !== undefined) target[k] = val;
    }
  }
  function isIterableIterator(value) {
    return !!value && typeof value.next === "function" && typeof value[Symbol.iterator] === "function";
  }
  return exports$1I;
}

var exports$1H = {},
  _dewExec$1G = false;
function dew$1G() {
  if (_dewExec$1G) return exports$1H;
  _dewExec$1G = true;
  Object.defineProperty(exports$1H, "__esModule", {
    value: true
  });
  exports$1H.assertSimpleType = assertSimpleType;
  exports$1H.makeStrongCache = makeStrongCache;
  exports$1H.makeStrongCacheSync = makeStrongCacheSync;
  exports$1H.makeWeakCache = makeWeakCache;
  exports$1H.makeWeakCacheSync = makeWeakCacheSync;
  function _gensync() {
    const data = dew$1J();
    _gensync = function () {
      return data;
    };
    return data;
  }
  var _async = dew$1I();
  var _util = dew$1H();
  const synchronize = gen => {
    return _gensync()(gen).sync;
  };
  function* genTrue() {
    return true;
  }
  function makeWeakCache(handler) {
    return makeCachedFunction(WeakMap, handler);
  }
  function makeWeakCacheSync(handler) {
    return synchronize(makeWeakCache(handler));
  }
  function makeStrongCache(handler) {
    return makeCachedFunction(Map, handler);
  }
  function makeStrongCacheSync(handler) {
    return synchronize(makeStrongCache(handler));
  }
  function makeCachedFunction(CallCache, handler) {
    const callCacheSync = new CallCache();
    const callCacheAsync = new CallCache();
    const futureCache = new CallCache();
    return function* cachedFunction(arg, data) {
      const asyncContext = yield* (0, _async.isAsync)();
      const callCache = asyncContext ? callCacheAsync : callCacheSync;
      const cached = yield* getCachedValueOrWait(asyncContext, callCache, futureCache, arg, data);
      if (cached.valid) return cached.value;
      const cache = new CacheConfigurator(data);
      const handlerResult = handler(arg, cache);
      let finishLock;
      let value;
      if ((0, _util.isIterableIterator)(handlerResult)) {
        value = yield* (0, _async.onFirstPause)(handlerResult, () => {
          finishLock = setupAsyncLocks(cache, futureCache, arg);
        });
      } else {
        value = handlerResult;
      }
      updateFunctionCache(callCache, cache, arg, value);
      if (finishLock) {
        futureCache.delete(arg);
        finishLock.release(value);
      }
      return value;
    };
  }
  function* getCachedValue(cache, arg, data) {
    const cachedValue = cache.get(arg);
    if (cachedValue) {
      for (const {
        value,
        valid
      } of cachedValue) {
        if (yield* valid(data)) return {
          valid: true,
          value
        };
      }
    }
    return {
      valid: false,
      value: null
    };
  }
  function* getCachedValueOrWait(asyncContext, callCache, futureCache, arg, data) {
    const cached = yield* getCachedValue(callCache, arg, data);
    if (cached.valid) {
      return cached;
    }
    if (asyncContext) {
      const cached = yield* getCachedValue(futureCache, arg, data);
      if (cached.valid) {
        const value = yield* (0, _async.waitFor)(cached.value.promise);
        return {
          valid: true,
          value
        };
      }
    }
    return {
      valid: false,
      value: null
    };
  }
  function setupAsyncLocks(config, futureCache, arg) {
    const finishLock = new Lock();
    updateFunctionCache(futureCache, config, arg, finishLock);
    return finishLock;
  }
  function updateFunctionCache(cache, config, arg, value) {
    if (!config.configured()) config.forever();
    let cachedValue = cache.get(arg);
    config.deactivate();
    switch (config.mode()) {
      case "forever":
        cachedValue = [{
          value,
          valid: genTrue
        }];
        cache.set(arg, cachedValue);
        break;
      case "invalidate":
        cachedValue = [{
          value,
          valid: config.validator()
        }];
        cache.set(arg, cachedValue);
        break;
      case "valid":
        if (cachedValue) {
          cachedValue.push({
            value,
            valid: config.validator()
          });
        } else {
          cachedValue = [{
            value,
            valid: config.validator()
          }];
          cache.set(arg, cachedValue);
        }
    }
  }
  class CacheConfigurator {
    constructor(data) {
      this._active = true;
      this._never = false;
      this._forever = false;
      this._invalidate = false;
      this._configured = false;
      this._pairs = [];
      this._data = void 0;
      this._data = data;
    }
    simple() {
      return makeSimpleConfigurator(this);
    }
    mode() {
      if (this._never) return "never";
      if (this._forever) return "forever";
      if (this._invalidate) return "invalidate";
      return "valid";
    }
    forever() {
      if (!this._active) {
        throw new Error("Cannot change caching after evaluation has completed.");
      }
      if (this._never) {
        throw new Error("Caching has already been configured with .never()");
      }
      this._forever = true;
      this._configured = true;
    }
    never() {
      if (!this._active) {
        throw new Error("Cannot change caching after evaluation has completed.");
      }
      if (this._forever) {
        throw new Error("Caching has already been configured with .forever()");
      }
      this._never = true;
      this._configured = true;
    }
    using(handler) {
      if (!this._active) {
        throw new Error("Cannot change caching after evaluation has completed.");
      }
      if (this._never || this._forever) {
        throw new Error("Caching has already been configured with .never or .forever()");
      }
      this._configured = true;
      const key = handler(this._data);
      const fn = (0, _async.maybeAsync)(handler, `You appear to be using an async cache handler, but Babel has been called synchronously`);
      if ((0, _async.isThenable)(key)) {
        return key.then(key => {
          this._pairs.push([key, fn]);
          return key;
        });
      }
      this._pairs.push([key, fn]);
      return key;
    }
    invalidate(handler) {
      this._invalidate = true;
      return this.using(handler);
    }
    validator() {
      const pairs = this._pairs;
      return function* (data) {
        for (const [key, fn] of pairs) {
          if (key !== (yield* fn(data))) return false;
        }
        return true;
      };
    }
    deactivate() {
      this._active = false;
    }
    configured() {
      return this._configured;
    }
  }
  function makeSimpleConfigurator(cache) {
    function cacheFn(val) {
      if (typeof val === "boolean") {
        if (val) cache.forever();else cache.never();
        return;
      }
      return cache.using(() => assertSimpleType(val()));
    }
    cacheFn.forever = () => cache.forever();
    cacheFn.never = () => cache.never();
    cacheFn.using = cb => cache.using(() => assertSimpleType(cb()));
    cacheFn.invalidate = cb => cache.invalidate(() => assertSimpleType(cb()));
    return cacheFn;
  }
  function assertSimpleType(value) {
    if ((0, _async.isThenable)(value)) {
      throw new Error(`You appear to be using an async cache handler, ` + `which your current version of Babel does not support. ` + `We may add support for this in the future, ` + `but if you're on the most recent version of @babel/core and still ` + `seeing this error, then you'll need to synchronously handle your caching logic.`);
    }
    if (value != null && typeof value !== "string" && typeof value !== "boolean" && typeof value !== "number") {
      throw new Error("Cache keys must be either string, boolean, number, null, or undefined.");
    }
    return value;
  }
  class Lock {
    constructor() {
      this.released = false;
      this.promise = void 0;
      this._resolve = void 0;
      this.promise = new Promise(resolve => {
        this._resolve = resolve;
      });
    }
    release(value) {
      this.released = true;
      this._resolve(value);
    }
  }
  return exports$1H;
}

var exports$1G = {},
  _dewExec$1F = false;
function dew$1F() {
  if (_dewExec$1F) return exports$1G;
  _dewExec$1F = true;
  Object.defineProperty(exports$1G, "__esModule", {
    value: true
  });
  exports$1G.stat = exports$1G.readFile = void 0;
  function _fs() {
    const data = _fs2;
    _fs = function () {
      return data;
    };
    return data;
  }
  function _gensync() {
    const data = dew$1J();
    _gensync = function () {
      return data;
    };
    return data;
  }
  exports$1G.readFile = _gensync()({
    sync: _fs().readFileSync,
    errback: _fs().readFile
  });
  exports$1G.stat = _gensync()({
    sync: _fs().statSync,
    errback: _fs().stat
  });
  return exports$1G;
}

var exports$1F = {},
  _dewExec$1E = false;
function dew$1E() {
  if (_dewExec$1E) return exports$1F;
  _dewExec$1E = true;
  Object.defineProperty(exports$1F, "__esModule", {
    value: true
  });
  exports$1F.makeStaticFileCache = makeStaticFileCache;
  var _caching = dew$1G();
  var fs = dew$1F();
  function _fs2$1() {
    const data = _fs2;
    _fs2$1 = function () {
      return data;
    };
    return data;
  }
  function makeStaticFileCache(fn) {
    return (0, _caching.makeStrongCache)(function* (filepath, cache) {
      const cached = cache.invalidate(() => fileMtime(filepath));
      if (cached === null) {
        return null;
      }
      return fn(filepath, yield* fs.readFile(filepath, "utf8"));
    });
  }
  function fileMtime(filepath) {
    if (!_fs2$1().existsSync(filepath)) return null;
    try {
      return +_fs2$1().statSync(filepath).mtime;
    } catch (e) {
      if (e.code !== "ENOENT" && e.code !== "ENOTDIR") throw e;
    }
    return null;
  }
  return exports$1F;
}

var exports$1E = {},
  _dewExec$1D = false;
function dew$1D() {
  if (_dewExec$1D) return exports$1E;
  _dewExec$1D = true;
  Object.defineProperty(exports$1E, "__esModule", {
    value: true
  });
  exports$1E.beginHiddenCallStack = beginHiddenCallStack;
  exports$1E.endHiddenCallStack = endHiddenCallStack;
  exports$1E.expectedError = expectedError;
  exports$1E.injectVirtualStackFrame = injectVirtualStackFrame;
  var _Object$getOwnPropert;
  const ErrorToString = Function.call.bind(Error.prototype.toString);
  const SUPPORTED = !!Error.captureStackTrace && ((_Object$getOwnPropert = Object.getOwnPropertyDescriptor(Error, "stackTraceLimit")) == null ? void 0 : _Object$getOwnPropert.writable) === true;
  const START_HIDING = "startHiding - secret - don't use this - v1";
  const STOP_HIDING = "stopHiding - secret - don't use this - v1";
  const expectedErrors = new WeakSet();
  const virtualFrames = new WeakMap();
  function CallSite(filename) {
    return Object.create({
      isNative: () => false,
      isConstructor: () => false,
      isToplevel: () => true,
      getFileName: () => filename,
      getLineNumber: () => undefined,
      getColumnNumber: () => undefined,
      getFunctionName: () => undefined,
      getMethodName: () => undefined,
      getTypeName: () => undefined,
      toString: () => filename
    });
  }
  function injectVirtualStackFrame(error, filename) {
    if (!SUPPORTED) return;
    let frames = virtualFrames.get(error);
    if (!frames) virtualFrames.set(error, frames = []);
    frames.push(CallSite(filename));
    return error;
  }
  function expectedError(error) {
    if (!SUPPORTED) return;
    expectedErrors.add(error);
    return error;
  }
  function beginHiddenCallStack(fn) {
    if (!SUPPORTED) return fn;
    return Object.defineProperty(function (...args) {
      setupPrepareStackTrace();
      return fn(...args);
    }, "name", {
      value: STOP_HIDING
    });
  }
  function endHiddenCallStack(fn) {
    if (!SUPPORTED) return fn;
    return Object.defineProperty(function (...args) {
      return fn(...args);
    }, "name", {
      value: START_HIDING
    });
  }
  function setupPrepareStackTrace() {
    setupPrepareStackTrace = () => {};
    const {
      prepareStackTrace = defaultPrepareStackTrace
    } = Error;
    const MIN_STACK_TRACE_LIMIT = 50;
    Error.stackTraceLimit && (Error.stackTraceLimit = Math.max(Error.stackTraceLimit, MIN_STACK_TRACE_LIMIT));
    Error.prepareStackTrace = function stackTraceRewriter(err, trace) {
      let newTrace = [];
      const isExpected = expectedErrors.has(err);
      let status = isExpected ? "hiding" : "unknown";
      for (let i = 0; i < trace.length; i++) {
        const name = trace[i].getFunctionName();
        if (name === START_HIDING) {
          status = "hiding";
        } else if (name === STOP_HIDING) {
          if (status === "hiding") {
            status = "showing";
            if (virtualFrames.has(err)) {
              newTrace.unshift(...virtualFrames.get(err));
            }
          } else if (status === "unknown") {
            newTrace = trace;
            break;
          }
        } else if (status !== "hiding") {
          newTrace.push(trace[i]);
        }
      }
      return prepareStackTrace(err, newTrace);
    };
  }
  function defaultPrepareStackTrace(err, trace) {
    if (trace.length === 0) return ErrorToString(err);
    return `${ErrorToString(err)}\n    at ${trace.join("\n    at ")}`;
  }
  return exports$1E;
}

var exports$1D = {},
  _dewExec$1C = false;
function dew$1C() {
  if (_dewExec$1C) return exports$1D;
  _dewExec$1C = true;
  Object.defineProperty(exports$1D, "__esModule", {
    value: true
  });
  exports$1D.default = void 0;
  var _rewriteStackTrace = dew$1D();
  class ConfigError extends Error {
    constructor(message, filename) {
      super(message);
      (0, _rewriteStackTrace.expectedError)(this);
      if (filename) (0, _rewriteStackTrace.injectVirtualStackFrame)(this, filename);
    }
  }
  exports$1D.default = ConfigError;
  return exports$1D;
}

var exports$1C = {},
  _dewExec$1B = false;
function dew$1B() {
  if (_dewExec$1B) return exports$1C;
  _dewExec$1B = true;
  Object.defineProperty(exports$1C, "__esModule", {
    value: true
  });
  exports$1C.findPackageData = findPackageData;
  function _path() {
    const data = _path2;
    _path = function () {
      return data;
    };
    return data;
  }
  var _utils = dew$1E();
  var _configError = dew$1C();
  const PACKAGE_FILENAME = "package.json";
  const readConfigPackage = (0, _utils.makeStaticFileCache)((filepath, content) => {
    let options;
    try {
      options = JSON.parse(content);
    } catch (err) {
      throw new _configError.default(`Error while parsing JSON - ${err.message}`, filepath);
    }
    if (!options) throw new Error(`${filepath}: No config detected`);
    if (typeof options !== "object") {
      throw new _configError.default(`Config returned typeof ${typeof options}`, filepath);
    }
    if (Array.isArray(options)) {
      throw new _configError.default(`Expected config object but found array`, filepath);
    }
    return {
      filepath,
      dirname: _path().dirname(filepath),
      options
    };
  });
  function* findPackageData(filepath) {
    let pkg = null;
    const directories = [];
    let isPackage = true;
    let dirname = _path().dirname(filepath);
    while (!pkg && _path().basename(dirname) !== "node_modules") {
      directories.push(dirname);
      pkg = yield* readConfigPackage(_path().join(dirname, PACKAGE_FILENAME));
      const nextLoc = _path().dirname(dirname);
      if (dirname === nextLoc) {
        isPackage = false;
        break;
      }
      dirname = nextLoc;
    }
    return {
      filepath,
      directories,
      pkg,
      isPackage
    };
  }
  return exports$1C;
}

var exports$1B = {},
  _dewExec$1A = false;
function dew$1A() {
  if (_dewExec$1A) return exports$1B;
  _dewExec$1A = true;
  // This is a generated file. Do not edit.
  exports$1B.Space_Separator = /[\u1680\u2000-\u200A\u202F\u205F\u3000]/;
  exports$1B.ID_Start = /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312E\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEA\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE83\uDE86-\uDE89\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F\uDFE0\uDFE1]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]/;
  exports$1B.ID_Continue = /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u08D4-\u08E1\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u09FC\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9-\u0AFF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D00-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D54-\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1CD0-\u1CD2\u1CD4-\u1CF9\u1D00-\u1DF9\u1DFB-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312E\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEA\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF2D-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDCA-\uDDCC\uDDD0-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE3E\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC00-\uDC4A\uDC50-\uDC59\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDCFF\uDE00-\uDE3E\uDE47\uDE50-\uDE83\uDE86-\uDE99\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC36\uDC38-\uDC40\uDC50-\uDC59\uDC72-\uDC8F\uDC92-\uDCA7\uDCA9-\uDCB6\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD47\uDD50-\uDD59]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F\uDFE0\uDFE1]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6\uDD00-\uDD4A\uDD50-\uDD59]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/;
  return exports$1B;
}

var exports$1A = {},
  _dewExec$1z = false;
function dew$1z() {
  if (_dewExec$1z) return exports$1A;
  _dewExec$1z = true;
  const unicode = dew$1A();
  exports$1A = {
    isSpaceSeparator(c) {
      return typeof c === "string" && unicode.Space_Separator.test(c);
    },
    isIdStartChar(c) {
      return typeof c === "string" && (c >= "a" && c <= "z" || c >= "A" && c <= "Z" || c === "$" || c === "_" || unicode.ID_Start.test(c));
    },
    isIdContinueChar(c) {
      return typeof c === "string" && (c >= "a" && c <= "z" || c >= "A" && c <= "Z" || c >= "0" && c <= "9" || c === "$" || c === "_" || c === "\u200C" || c === "\u200D" || unicode.ID_Continue.test(c));
    },
    isDigit(c) {
      return typeof c === "string" && /[0-9]/.test(c);
    },
    isHexDigit(c) {
      return typeof c === "string" && /[0-9A-Fa-f]/.test(c);
    }
  };
  return exports$1A;
}

var exports$1z = {},
  _dewExec$1y = false;
function dew$1y() {
  if (_dewExec$1y) return exports$1z;
  _dewExec$1y = true;
  const util = dew$1z();
  let source;
  let parseState;
  let stack;
  let pos;
  let line;
  let column;
  let token;
  let key;
  let root;
  exports$1z = function parse(text, reviver) {
    source = String(text);
    parseState = "start";
    stack = [];
    pos = 0;
    line = 1;
    column = 0;
    token = undefined;
    key = undefined;
    root = undefined;
    do {
      token = lex();

      // This code is unreachable.
      // if (!parseStates[parseState]) {
      //     throw invalidParseState()
      // }

      parseStates[parseState]();
    } while (token.type !== "eof");
    if (typeof reviver === "function") {
      return internalize({
        "": root
      }, "", reviver);
    }
    return root;
  };
  function internalize(holder, name, reviver) {
    const value = holder[name];
    if (value != null && typeof value === "object") {
      if (Array.isArray(value)) {
        for (let i = 0; i < value.length; i++) {
          const key = String(i);
          const replacement = internalize(value, key, reviver);
          if (replacement === undefined) {
            delete value[key];
          } else {
            Object.defineProperty(value, key, {
              value: replacement,
              writable: true,
              enumerable: true,
              configurable: true
            });
          }
        }
      } else {
        for (const key in value) {
          const replacement = internalize(value, key, reviver);
          if (replacement === undefined) {
            delete value[key];
          } else {
            Object.defineProperty(value, key, {
              value: replacement,
              writable: true,
              enumerable: true,
              configurable: true
            });
          }
        }
      }
    }
    return reviver.call(holder, name, value);
  }
  let lexState;
  let buffer;
  let doubleQuote;
  let sign;
  let c;
  function lex() {
    lexState = "default";
    buffer = "";
    doubleQuote = false;
    sign = 1;
    for (;;) {
      c = peek();

      // This code is unreachable.
      // if (!lexStates[lexState]) {
      //     throw invalidLexState(lexState)
      // }

      const token = lexStates[lexState]();
      if (token) {
        return token;
      }
    }
  }
  function peek() {
    if (source[pos]) {
      return String.fromCodePoint(source.codePointAt(pos));
    }
  }
  function read() {
    const c = peek();
    if (c === "\n") {
      line++;
      column = 0;
    } else if (c) {
      column += c.length;
    } else {
      column++;
    }
    if (c) {
      pos += c.length;
    }
    return c;
  }
  const lexStates = {
    default() {
      switch (c) {
        case "\t":
        case "\x0B":
        case "\f":
        case " ":
        case "\xA0":
        case "\uFEFF":
        case "\n":
        case "\r":
        case "\u2028":
        case "\u2029":
          read();
          return;
        case "/":
          read();
          lexState = "comment";
          return;
        case undefined:
          read();
          return newToken("eof");
      }
      if (util.isSpaceSeparator(c)) {
        read();
        return;
      }

      // This code is unreachable.
      // if (!lexStates[parseState]) {
      //     throw invalidLexState(parseState)
      // }

      return lexStates[parseState]();
    },
    comment() {
      switch (c) {
        case "*":
          read();
          lexState = "multiLineComment";
          return;
        case "/":
          read();
          lexState = "singleLineComment";
          return;
      }
      throw invalidChar(read());
    },
    multiLineComment() {
      switch (c) {
        case "*":
          read();
          lexState = "multiLineCommentAsterisk";
          return;
        case undefined:
          throw invalidChar(read());
      }
      read();
    },
    multiLineCommentAsterisk() {
      switch (c) {
        case "*":
          read();
          return;
        case "/":
          read();
          lexState = "default";
          return;
        case undefined:
          throw invalidChar(read());
      }
      read();
      lexState = "multiLineComment";
    },
    singleLineComment() {
      switch (c) {
        case "\n":
        case "\r":
        case "\u2028":
        case "\u2029":
          read();
          lexState = "default";
          return;
        case undefined:
          read();
          return newToken("eof");
      }
      read();
    },
    value() {
      switch (c) {
        case "{":
        case "[":
          return newToken("punctuator", read());
        case "n":
          read();
          literal("ull");
          return newToken("null", null);
        case "t":
          read();
          literal("rue");
          return newToken("boolean", true);
        case "f":
          read();
          literal("alse");
          return newToken("boolean", false);
        case "-":
        case "+":
          if (read() === "-") {
            sign = -1;
          }
          lexState = "sign";
          return;
        case ".":
          buffer = read();
          lexState = "decimalPointLeading";
          return;
        case "0":
          buffer = read();
          lexState = "zero";
          return;
        case "1":
        case "2":
        case "3":
        case "4":
        case "5":
        case "6":
        case "7":
        case "8":
        case "9":
          buffer = read();
          lexState = "decimalInteger";
          return;
        case "I":
          read();
          literal("nfinity");
          return newToken("numeric", Infinity);
        case "N":
          read();
          literal("aN");
          return newToken("numeric", NaN);
        case "\"":
        case "'":
          doubleQuote = read() === "\"";
          buffer = "";
          lexState = "string";
          return;
      }
      throw invalidChar(read());
    },
    identifierNameStartEscape() {
      if (c !== "u") {
        throw invalidChar(read());
      }
      read();
      const u = unicodeEscape();
      switch (u) {
        case "$":
        case "_":
          break;
        default:
          if (!util.isIdStartChar(u)) {
            throw invalidIdentifier();
          }
          break;
      }
      buffer += u;
      lexState = "identifierName";
    },
    identifierName() {
      switch (c) {
        case "$":
        case "_":
        case "\u200C":
        case "\u200D":
          buffer += read();
          return;
        case "\\":
          read();
          lexState = "identifierNameEscape";
          return;
      }
      if (util.isIdContinueChar(c)) {
        buffer += read();
        return;
      }
      return newToken("identifier", buffer);
    },
    identifierNameEscape() {
      if (c !== "u") {
        throw invalidChar(read());
      }
      read();
      const u = unicodeEscape();
      switch (u) {
        case "$":
        case "_":
        case "\u200C":
        case "\u200D":
          break;
        default:
          if (!util.isIdContinueChar(u)) {
            throw invalidIdentifier();
          }
          break;
      }
      buffer += u;
      lexState = "identifierName";
    },
    sign() {
      switch (c) {
        case ".":
          buffer = read();
          lexState = "decimalPointLeading";
          return;
        case "0":
          buffer = read();
          lexState = "zero";
          return;
        case "1":
        case "2":
        case "3":
        case "4":
        case "5":
        case "6":
        case "7":
        case "8":
        case "9":
          buffer = read();
          lexState = "decimalInteger";
          return;
        case "I":
          read();
          literal("nfinity");
          return newToken("numeric", sign * Infinity);
        case "N":
          read();
          literal("aN");
          return newToken("numeric", NaN);
      }
      throw invalidChar(read());
    },
    zero() {
      switch (c) {
        case ".":
          buffer += read();
          lexState = "decimalPoint";
          return;
        case "e":
        case "E":
          buffer += read();
          lexState = "decimalExponent";
          return;
        case "x":
        case "X":
          buffer += read();
          lexState = "hexadecimal";
          return;
      }
      return newToken("numeric", sign * 0);
    },
    decimalInteger() {
      switch (c) {
        case ".":
          buffer += read();
          lexState = "decimalPoint";
          return;
        case "e":
        case "E":
          buffer += read();
          lexState = "decimalExponent";
          return;
      }
      if (util.isDigit(c)) {
        buffer += read();
        return;
      }
      return newToken("numeric", sign * Number(buffer));
    },
    decimalPointLeading() {
      if (util.isDigit(c)) {
        buffer += read();
        lexState = "decimalFraction";
        return;
      }
      throw invalidChar(read());
    },
    decimalPoint() {
      switch (c) {
        case "e":
        case "E":
          buffer += read();
          lexState = "decimalExponent";
          return;
      }
      if (util.isDigit(c)) {
        buffer += read();
        lexState = "decimalFraction";
        return;
      }
      return newToken("numeric", sign * Number(buffer));
    },
    decimalFraction() {
      switch (c) {
        case "e":
        case "E":
          buffer += read();
          lexState = "decimalExponent";
          return;
      }
      if (util.isDigit(c)) {
        buffer += read();
        return;
      }
      return newToken("numeric", sign * Number(buffer));
    },
    decimalExponent() {
      switch (c) {
        case "+":
        case "-":
          buffer += read();
          lexState = "decimalExponentSign";
          return;
      }
      if (util.isDigit(c)) {
        buffer += read();
        lexState = "decimalExponentInteger";
        return;
      }
      throw invalidChar(read());
    },
    decimalExponentSign() {
      if (util.isDigit(c)) {
        buffer += read();
        lexState = "decimalExponentInteger";
        return;
      }
      throw invalidChar(read());
    },
    decimalExponentInteger() {
      if (util.isDigit(c)) {
        buffer += read();
        return;
      }
      return newToken("numeric", sign * Number(buffer));
    },
    hexadecimal() {
      if (util.isHexDigit(c)) {
        buffer += read();
        lexState = "hexadecimalInteger";
        return;
      }
      throw invalidChar(read());
    },
    hexadecimalInteger() {
      if (util.isHexDigit(c)) {
        buffer += read();
        return;
      }
      return newToken("numeric", sign * Number(buffer));
    },
    string() {
      switch (c) {
        case "\\":
          read();
          buffer += escape();
          return;
        case "\"":
          if (doubleQuote) {
            read();
            return newToken("string", buffer);
          }
          buffer += read();
          return;
        case "'":
          if (!doubleQuote) {
            read();
            return newToken("string", buffer);
          }
          buffer += read();
          return;
        case "\n":
        case "\r":
          throw invalidChar(read());
        case "\u2028":
        case "\u2029":
          separatorChar(c);
          break;
        case undefined:
          throw invalidChar(read());
      }
      buffer += read();
    },
    start() {
      switch (c) {
        case "{":
        case "[":
          return newToken("punctuator", read());

        // This code is unreachable since the default lexState handles eof.
        // case undefined:
        //     return newToken('eof')
      }
      lexState = "value";
    },
    beforePropertyName() {
      switch (c) {
        case "$":
        case "_":
          buffer = read();
          lexState = "identifierName";
          return;
        case "\\":
          read();
          lexState = "identifierNameStartEscape";
          return;
        case "}":
          return newToken("punctuator", read());
        case "\"":
        case "'":
          doubleQuote = read() === "\"";
          lexState = "string";
          return;
      }
      if (util.isIdStartChar(c)) {
        buffer += read();
        lexState = "identifierName";
        return;
      }
      throw invalidChar(read());
    },
    afterPropertyName() {
      if (c === ":") {
        return newToken("punctuator", read());
      }
      throw invalidChar(read());
    },
    beforePropertyValue() {
      lexState = "value";
    },
    afterPropertyValue() {
      switch (c) {
        case ",":
        case "}":
          return newToken("punctuator", read());
      }
      throw invalidChar(read());
    },
    beforeArrayValue() {
      if (c === "]") {
        return newToken("punctuator", read());
      }
      lexState = "value";
    },
    afterArrayValue() {
      switch (c) {
        case ",":
        case "]":
          return newToken("punctuator", read());
      }
      throw invalidChar(read());
    },
    end() {
      // This code is unreachable since it's handled by the default lexState.
      // if (c === undefined) {
      //     read()
      //     return newToken('eof')
      // }

      throw invalidChar(read());
    }
  };
  function newToken(type, value) {
    return {
      type,
      value,
      line,
      column
    };
  }
  function literal(s) {
    for (const c of s) {
      const p = peek();
      if (p !== c) {
        throw invalidChar(read());
      }
      read();
    }
  }
  function escape() {
    const c = peek();
    switch (c) {
      case "b":
        read();
        return "\b";
      case "f":
        read();
        return "\f";
      case "n":
        read();
        return "\n";
      case "r":
        read();
        return "\r";
      case "t":
        read();
        return "\t";
      case "v":
        read();
        return "\x0B";
      case "0":
        read();
        if (util.isDigit(peek())) {
          throw invalidChar(read());
        }
        return "\0";
      case "x":
        read();
        return hexEscape();
      case "u":
        read();
        return unicodeEscape();
      case "\n":
      case "\u2028":
      case "\u2029":
        read();
        return "";
      case "\r":
        read();
        if (peek() === "\n") {
          read();
        }
        return "";
      case "1":
      case "2":
      case "3":
      case "4":
      case "5":
      case "6":
      case "7":
      case "8":
      case "9":
        throw invalidChar(read());
      case undefined:
        throw invalidChar(read());
    }
    return read();
  }
  function hexEscape() {
    let buffer = "";
    let c = peek();
    if (!util.isHexDigit(c)) {
      throw invalidChar(read());
    }
    buffer += read();
    c = peek();
    if (!util.isHexDigit(c)) {
      throw invalidChar(read());
    }
    buffer += read();
    return String.fromCodePoint(parseInt(buffer, 16));
  }
  function unicodeEscape() {
    let buffer = "";
    let count = 4;
    while (count-- > 0) {
      const c = peek();
      if (!util.isHexDigit(c)) {
        throw invalidChar(read());
      }
      buffer += read();
    }
    return String.fromCodePoint(parseInt(buffer, 16));
  }
  const parseStates = {
    start() {
      if (token.type === "eof") {
        throw invalidEOF();
      }
      push();
    },
    beforePropertyName() {
      switch (token.type) {
        case "identifier":
        case "string":
          key = token.value;
          parseState = "afterPropertyName";
          return;
        case "punctuator":
          // This code is unreachable since it's handled by the lexState.
          // if (token.value !== '}') {
          //     throw invalidToken()
          // }

          pop();
          return;
        case "eof":
          throw invalidEOF();
      }

      // This code is unreachable since it's handled by the lexState.
      // throw invalidToken()
    },
    afterPropertyName() {
      // This code is unreachable since it's handled by the lexState.
      // if (token.type !== 'punctuator' || token.value !== ':') {
      //     throw invalidToken()
      // }

      if (token.type === "eof") {
        throw invalidEOF();
      }
      parseState = "beforePropertyValue";
    },
    beforePropertyValue() {
      if (token.type === "eof") {
        throw invalidEOF();
      }
      push();
    },
    beforeArrayValue() {
      if (token.type === "eof") {
        throw invalidEOF();
      }
      if (token.type === "punctuator" && token.value === "]") {
        pop();
        return;
      }
      push();
    },
    afterPropertyValue() {
      // This code is unreachable since it's handled by the lexState.
      // if (token.type !== 'punctuator') {
      //     throw invalidToken()
      // }

      if (token.type === "eof") {
        throw invalidEOF();
      }
      switch (token.value) {
        case ",":
          parseState = "beforePropertyName";
          return;
        case "}":
          pop();
      }

      // This code is unreachable since it's handled by the lexState.
      // throw invalidToken()
    },
    afterArrayValue() {
      // This code is unreachable since it's handled by the lexState.
      // if (token.type !== 'punctuator') {
      //     throw invalidToken()
      // }

      if (token.type === "eof") {
        throw invalidEOF();
      }
      switch (token.value) {
        case ",":
          parseState = "beforeArrayValue";
          return;
        case "]":
          pop();
      }

      // This code is unreachable since it's handled by the lexState.
      // throw invalidToken()
    },
    end() {
      // This code is unreachable since it's handled by the lexState.
      // if (token.type !== 'eof') {
      //     throw invalidToken()
      // }
    }
  };
  function push() {
    let value;
    switch (token.type) {
      case "punctuator":
        switch (token.value) {
          case "{":
            value = {};
            break;
          case "[":
            value = [];
            break;
        }
        break;
      case "null":
      case "boolean":
      case "numeric":
      case "string":
        value = token.value;
        break;

      // This code is unreachable.
      // default:
      //     throw invalidToken()
    }
    if (root === undefined) {
      root = value;
    } else {
      const parent = stack[stack.length - 1];
      if (Array.isArray(parent)) {
        parent.push(value);
      } else {
        Object.defineProperty(parent, key, {
          value,
          writable: true,
          enumerable: true,
          configurable: true
        });
      }
    }
    if (value !== null && typeof value === "object") {
      stack.push(value);
      if (Array.isArray(value)) {
        parseState = "beforeArrayValue";
      } else {
        parseState = "beforePropertyName";
      }
    } else {
      const current = stack[stack.length - 1];
      if (current == null) {
        parseState = "end";
      } else if (Array.isArray(current)) {
        parseState = "afterArrayValue";
      } else {
        parseState = "afterPropertyValue";
      }
    }
  }
  function pop() {
    stack.pop();
    const current = stack[stack.length - 1];
    if (current == null) {
      parseState = "end";
    } else if (Array.isArray(current)) {
      parseState = "afterArrayValue";
    } else {
      parseState = "afterPropertyValue";
    }
  }

  // This code is unreachable.
  // function invalidParseState () {
  //     return new Error(`JSON5: invalid parse state '${parseState}'`)
  // }

  // This code is unreachable.
  // function invalidLexState (state) {
  //     return new Error(`JSON5: invalid lex state '${state}'`)
  // }

  function invalidChar(c) {
    if (c === undefined) {
      return syntaxError(`JSON5: invalid end of input at ${line}:${column}`);
    }
    return syntaxError(`JSON5: invalid character '${formatChar(c)}' at ${line}:${column}`);
  }
  function invalidEOF() {
    return syntaxError(`JSON5: invalid end of input at ${line}:${column}`);
  }

  // This code is unreachable.
  // function invalidToken () {
  //     if (token.type === 'eof') {
  //         return syntaxError(`JSON5: invalid end of input at ${line}:${column}`)
  //     }

  //     const c = String.fromCodePoint(token.value.codePointAt(0))
  //     return syntaxError(`JSON5: invalid character '${formatChar(c)}' at ${line}:${column}`)
  // }

  function invalidIdentifier() {
    column -= 5;
    return syntaxError(`JSON5: invalid identifier character at ${line}:${column}`);
  }
  function separatorChar(c) {
    console.warn(`JSON5: '${formatChar(c)}' in strings is not valid ECMAScript; consider escaping`);
  }
  function formatChar(c) {
    const replacements = {
      "'": "\\'",
      "\"": "\\\"",
      "\\": "\\\\",
      "\b": "\\b",
      "\f": "\\f",
      "\n": "\\n",
      "\r": "\\r",
      "\t": "\\t",
      "\x0B": "\\v",
      "\0": "\\0",
      "\u2028": "\\u2028",
      "\u2029": "\\u2029"
    };
    if (replacements[c]) {
      return replacements[c];
    }
    if (c < " ") {
      const hexString = c.charCodeAt(0).toString(16);
      return "\\x" + ("00" + hexString).substring(hexString.length);
    }
    return c;
  }
  function syntaxError(message) {
    const err = new SyntaxError(message);
    err.lineNumber = line;
    err.columnNumber = column;
    return err;
  }
  return exports$1z;
}

var exports$1y = {},
  _dewExec$1x = false;
function dew$1x() {
  if (_dewExec$1x) return exports$1y;
  _dewExec$1x = true;
  const util = dew$1z();
  exports$1y = function stringify(value, replacer, space) {
    const stack = [];
    let indent = "";
    let propertyList;
    let replacerFunc;
    let gap = "";
    let quote;
    if (replacer != null && typeof replacer === "object" && !Array.isArray(replacer)) {
      space = replacer.space;
      quote = replacer.quote;
      replacer = replacer.replacer;
    }
    if (typeof replacer === "function") {
      replacerFunc = replacer;
    } else if (Array.isArray(replacer)) {
      propertyList = [];
      for (const v of replacer) {
        let item;
        if (typeof v === "string") {
          item = v;
        } else if (typeof v === "number" || v instanceof String || v instanceof Number) {
          item = String(v);
        }
        if (item !== undefined && propertyList.indexOf(item) < 0) {
          propertyList.push(item);
        }
      }
    }
    if (space instanceof Number) {
      space = Number(space);
    } else if (space instanceof String) {
      space = String(space);
    }
    if (typeof space === "number") {
      if (space > 0) {
        space = Math.min(10, Math.floor(space));
        gap = "          ".substr(0, space);
      }
    } else if (typeof space === "string") {
      gap = space.substr(0, 10);
    }
    return serializeProperty("", {
      "": value
    });
    function serializeProperty(key, holder) {
      let value = holder[key];
      if (value != null) {
        if (typeof value.toJSON5 === "function") {
          value = value.toJSON5(key);
        } else if (typeof value.toJSON === "function") {
          value = value.toJSON(key);
        }
      }
      if (replacerFunc) {
        value = replacerFunc.call(holder, key, value);
      }
      if (value instanceof Number) {
        value = Number(value);
      } else if (value instanceof String) {
        value = String(value);
      } else if (value instanceof Boolean) {
        value = value.valueOf();
      }
      switch (value) {
        case null:
          return "null";
        case true:
          return "true";
        case false:
          return "false";
      }
      if (typeof value === "string") {
        return quoteString(value);
      }
      if (typeof value === "number") {
        return String(value);
      }
      if (typeof value === "object") {
        return Array.isArray(value) ? serializeArray(value) : serializeObject(value);
      }
      return undefined;
    }
    function quoteString(value) {
      const quotes = {
        "'": 0.1,
        "\"": 0.2
      };
      const replacements = {
        "'": "\\'",
        "\"": "\\\"",
        "\\": "\\\\",
        "\b": "\\b",
        "\f": "\\f",
        "\n": "\\n",
        "\r": "\\r",
        "\t": "\\t",
        "\x0B": "\\v",
        "\0": "\\0",
        "\u2028": "\\u2028",
        "\u2029": "\\u2029"
      };
      let product = "";
      for (let i = 0; i < value.length; i++) {
        const c = value[i];
        switch (c) {
          case "'":
          case "\"":
            quotes[c]++;
            product += c;
            continue;
          case "\0":
            if (util.isDigit(value[i + 1])) {
              product += "\\x00";
              continue;
            }
        }
        if (replacements[c]) {
          product += replacements[c];
          continue;
        }
        if (c < " ") {
          let hexString = c.charCodeAt(0).toString(16);
          product += "\\x" + ("00" + hexString).substring(hexString.length);
          continue;
        }
        product += c;
      }
      const quoteChar = quote || Object.keys(quotes).reduce((a, b) => quotes[a] < quotes[b] ? a : b);
      product = product.replace(new RegExp(quoteChar, "g"), replacements[quoteChar]);
      return quoteChar + product + quoteChar;
    }
    function serializeObject(value) {
      if (stack.indexOf(value) >= 0) {
        throw TypeError("Converting circular structure to JSON5");
      }
      stack.push(value);
      let stepback = indent;
      indent = indent + gap;
      let keys = propertyList || Object.keys(value);
      let partial = [];
      for (const key of keys) {
        const propertyString = serializeProperty(key, value);
        if (propertyString !== undefined) {
          let member = serializeKey(key) + ":";
          if (gap !== "") {
            member += " ";
          }
          member += propertyString;
          partial.push(member);
        }
      }
      let final;
      if (partial.length === 0) {
        final = "{}";
      } else {
        let properties;
        if (gap === "") {
          properties = partial.join(",");
          final = "{" + properties + "}";
        } else {
          let separator = ",\n" + indent;
          properties = partial.join(separator);
          final = "{\n" + indent + properties + ",\n" + stepback + "}";
        }
      }
      stack.pop();
      indent = stepback;
      return final;
    }
    function serializeKey(key) {
      if (key.length === 0) {
        return quoteString(key);
      }
      const firstChar = String.fromCodePoint(key.codePointAt(0));
      if (!util.isIdStartChar(firstChar)) {
        return quoteString(key);
      }
      for (let i = firstChar.length; i < key.length; i++) {
        if (!util.isIdContinueChar(String.fromCodePoint(key.codePointAt(i)))) {
          return quoteString(key);
        }
      }
      return key;
    }
    function serializeArray(value) {
      if (stack.indexOf(value) >= 0) {
        throw TypeError("Converting circular structure to JSON5");
      }
      stack.push(value);
      let stepback = indent;
      indent = indent + gap;
      let partial = [];
      for (let i = 0; i < value.length; i++) {
        const propertyString = serializeProperty(String(i), value);
        partial.push(propertyString !== undefined ? propertyString : "null");
      }
      let final;
      if (partial.length === 0) {
        final = "[]";
      } else {
        if (gap === "") {
          let properties = partial.join(",");
          final = "[" + properties + "]";
        } else {
          let separator = ",\n" + indent;
          let properties = partial.join(separator);
          final = "[\n" + indent + properties + ",\n" + stepback + "]";
        }
      }
      stack.pop();
      indent = stepback;
      return final;
    }
  };
  return exports$1y;
}

var exports$1x = {},
  _dewExec$1w = false;
function dew$1w() {
  if (_dewExec$1w) return exports$1x;
  _dewExec$1w = true;
  const parse = dew$1y();
  const stringify = dew$1x();
  const JSON5 = {
    parse,
    stringify
  };
  exports$1x = JSON5;
  return exports$1x;
}

var exports$1w = {},
  _dewExec$1v = false;
function dew$1v() {
  if (_dewExec$1v) return exports$1w;
  _dewExec$1v = true;
  Object.defineProperty(exports$1w, "__esModule", {
    value: true
  });
  exports$1w.makeConfigAPI = makeConfigAPI;
  exports$1w.makePluginAPI = makePluginAPI;
  exports$1w.makePresetAPI = makePresetAPI;
  function _semver() {
    const data = dew$1Z();
    _semver = function () {
      return data;
    };
    return data;
  }
  var _index = dew();
  var _caching = dew$1G();
  function makeConfigAPI(cache) {
    const env = value => cache.using(data => {
      if (typeof value === "undefined") return data.envName;
      if (typeof value === "function") {
        return (0, _caching.assertSimpleType)(value(data.envName));
      }
      return (Array.isArray(value) ? value : [value]).some(entry => {
        if (typeof entry !== "string") {
          throw new Error("Unexpected non-string value");
        }
        return entry === data.envName;
      });
    });
    const caller = cb => cache.using(data => (0, _caching.assertSimpleType)(cb(data.caller)));
    return {
      version: _index.version,
      cache: cache.simple(),
      env,
      async: () => false,
      caller,
      assertVersion
    };
  }
  function makePresetAPI(cache, externalDependencies) {
    const targets = () => JSON.parse(cache.using(data => JSON.stringify(data.targets)));
    const addExternalDependency = ref => {
      externalDependencies.push(ref);
    };
    return Object.assign({}, makeConfigAPI(cache), {
      targets,
      addExternalDependency
    });
  }
  function makePluginAPI(cache, externalDependencies) {
    const assumption = name => cache.using(data => data.assumptions[name]);
    return Object.assign({}, makePresetAPI(cache, externalDependencies), {
      assumption
    });
  }
  function assertVersion(range) {
    if (typeof range === "number") {
      if (!Number.isInteger(range)) {
        throw new Error("Expected string or integer value.");
      }
      range = `^${range}.0.0-0`;
    }
    if (typeof range !== "string") {
      throw new Error("Expected string or integer value.");
    }
    if (range === "*" || _semver().satisfies(_index.version, range)) return;
    const limit = Error.stackTraceLimit;
    if (typeof limit === "number" && limit < 25) {
      Error.stackTraceLimit = 25;
    }
    const err = new Error(`Requires Babel "${range}", but was loaded with "${_index.version}". ` + `If you are sure you have a compatible version of @babel/core, ` + `it is likely that something in your build process is loading the ` + `wrong version. Inspect the stack trace of this error to look for ` + `the first entry that doesn't mention "@babel/core" or "babel-core" ` + `to see what is calling Babel.`);
    if (typeof limit === "number") {
      Error.stackTraceLimit = limit;
    }
    throw Object.assign(err, {
      code: "BABEL_VERSION_UNSUPPORTED",
      version: _index.version,
      range
    });
  }
  return exports$1w;
}

var exports$1v = {},
  _dewExec$1u = false;
function dew$1u() {
  if (_dewExec$1u) return exports$1v;
  _dewExec$1u = true;
  Object.defineProperty(exports$1v, "__esModule", {
    value: true
  });
  exports$1v.finalize = finalize;
  exports$1v.flattenToSet = flattenToSet;
  function finalize(deepArr) {
    return Object.freeze(deepArr);
  }
  function flattenToSet(arr) {
    const result = new Set();
    const stack = [arr];
    while (stack.length > 0) {
      for (const el of stack.pop()) {
        if (Array.isArray(el)) stack.push(el);else result.add(el);
      }
    }
    return result;
  }
  return exports$1v;
}

var exports$1u = {},
  _dewExec$1t = false;
function dew$1t() {
  if (_dewExec$1t) return exports$1u;
  _dewExec$1t = true;
  Object.defineProperty(exports$1u, "__esModule", {
    value: true
  });
  exports$1u.default = void 0;
  var _deepArray = dew$1u();
  class Plugin {
    constructor(plugin, options, key, externalDependencies = (0, _deepArray.finalize)([])) {
      this.key = void 0;
      this.manipulateOptions = void 0;
      this.post = void 0;
      this.pre = void 0;
      this.visitor = void 0;
      this.parserOverride = void 0;
      this.generatorOverride = void 0;
      this.options = void 0;
      this.externalDependencies = void 0;
      this.key = plugin.name || key;
      this.manipulateOptions = plugin.manipulateOptions;
      this.post = plugin.post;
      this.pre = plugin.pre;
      this.visitor = plugin.visitor || {};
      this.parserOverride = plugin.parserOverride;
      this.generatorOverride = plugin.generatorOverride;
      this.options = options;
      this.externalDependencies = externalDependencies;
    }
  }
  exports$1u.default = Plugin;
  return exports$1u;
}

var exports$1t = {},
  _dewExec$1s = false;
function dew$1s() {
  if (_dewExec$1s) return exports$1t;
  _dewExec$1s = true;
  Object.defineProperty(exports$1t, "__esModule", {
    value: true
  });
  exports$1t.once = once;
  var _async = dew$1I();
  function once(fn) {
    let result;
    let resultP;
    let promiseReferenced = false;
    return function* () {
      if (!result) {
        if (resultP) {
          promiseReferenced = true;
          return yield* (0, _async.waitFor)(resultP);
        }
        if (!(yield* (0, _async.isAsync)())) {
          try {
            result = {
              ok: true,
              value: yield* fn()
            };
          } catch (error) {
            result = {
              ok: false,
              value: error
            };
          }
        } else {
          let resolve, reject;
          resultP = new Promise((res, rej) => {
            resolve = res;
            reject = rej;
          });
          try {
            result = {
              ok: true,
              value: yield* fn()
            };
            resultP = null;
            if (promiseReferenced) resolve(result.value);
          } catch (error) {
            result = {
              ok: false,
              value: error
            };
            resultP = null;
            if (promiseReferenced) reject(error);
          }
        }
      }
      if (result.ok) return result.value;else throw result.value;
    };
  }
  return exports$1t;
}

var _envs = [{"name":"nodejs","version":"0.2.0","date":"2011-08-26","lts":false,"security":false,"v8":"2.3.8.0"},{"name":"nodejs","version":"0.3.0","date":"2011-08-26","lts":false,"security":false,"v8":"2.5.1.0"},{"name":"nodejs","version":"0.4.0","date":"2011-08-26","lts":false,"security":false,"v8":"3.1.2.0"},{"name":"nodejs","version":"0.5.0","date":"2011-08-26","lts":false,"security":false,"v8":"3.1.8.25"},{"name":"nodejs","version":"0.6.0","date":"2011-11-04","lts":false,"security":false,"v8":"3.6.6.6"},{"name":"nodejs","version":"0.7.0","date":"2012-01-17","lts":false,"security":false,"v8":"3.8.6.0"},{"name":"nodejs","version":"0.8.0","date":"2012-06-22","lts":false,"security":false,"v8":"3.11.10.10"},{"name":"nodejs","version":"0.9.0","date":"2012-07-20","lts":false,"security":false,"v8":"3.11.10.15"},{"name":"nodejs","version":"0.10.0","date":"2013-03-11","lts":false,"security":false,"v8":"3.14.5.8"},{"name":"nodejs","version":"0.11.0","date":"2013-03-28","lts":false,"security":false,"v8":"3.17.13.0"},{"name":"nodejs","version":"0.12.0","date":"2015-02-06","lts":false,"security":false,"v8":"3.28.73.0"},{"name":"nodejs","version":"4.0.0","date":"2015-09-08","lts":false,"security":false,"v8":"4.5.103.30"},{"name":"nodejs","version":"4.1.0","date":"2015-09-17","lts":false,"security":false,"v8":"4.5.103.33"},{"name":"nodejs","version":"4.2.0","date":"2015-10-12","lts":"Argon","security":false,"v8":"4.5.103.35"},{"name":"nodejs","version":"4.3.0","date":"2016-02-09","lts":"Argon","security":false,"v8":"4.5.103.35"},{"name":"nodejs","version":"4.4.0","date":"2016-03-08","lts":"Argon","security":false,"v8":"4.5.103.35"},{"name":"nodejs","version":"4.5.0","date":"2016-08-16","lts":"Argon","security":false,"v8":"4.5.103.37"},{"name":"nodejs","version":"4.6.0","date":"2016-09-27","lts":"Argon","security":true,"v8":"4.5.103.37"},{"name":"nodejs","version":"4.7.0","date":"2016-12-06","lts":"Argon","security":false,"v8":"4.5.103.43"},{"name":"nodejs","version":"4.8.0","date":"2017-02-21","lts":"Argon","security":false,"v8":"4.5.103.45"},{"name":"nodejs","version":"4.9.0","date":"2018-03-28","lts":"Argon","security":true,"v8":"4.5.103.53"},{"name":"nodejs","version":"5.0.0","date":"2015-10-29","lts":false,"security":false,"v8":"4.6.85.28"},{"name":"nodejs","version":"5.1.0","date":"2015-11-17","lts":false,"security":false,"v8":"4.6.85.31"},{"name":"nodejs","version":"5.2.0","date":"2015-12-09","lts":false,"security":false,"v8":"4.6.85.31"},{"name":"nodejs","version":"5.3.0","date":"2015-12-15","lts":false,"security":false,"v8":"4.6.85.31"},{"name":"nodejs","version":"5.4.0","date":"2016-01-06","lts":false,"security":false,"v8":"4.6.85.31"},{"name":"nodejs","version":"5.5.0","date":"2016-01-21","lts":false,"security":false,"v8":"4.6.85.31"},{"name":"nodejs","version":"5.6.0","date":"2016-02-09","lts":false,"security":false,"v8":"4.6.85.31"},{"name":"nodejs","version":"5.7.0","date":"2016-02-23","lts":false,"security":false,"v8":"4.6.85.31"},{"name":"nodejs","version":"5.8.0","date":"2016-03-09","lts":false,"security":false,"v8":"4.6.85.31"},{"name":"nodejs","version":"5.9.0","date":"2016-03-16","lts":false,"security":false,"v8":"4.6.85.31"},{"name":"nodejs","version":"5.10.0","date":"2016-04-01","lts":false,"security":false,"v8":"4.6.85.31"},{"name":"nodejs","version":"5.11.0","date":"2016-04-21","lts":false,"security":false,"v8":"4.6.85.31"},{"name":"nodejs","version":"5.12.0","date":"2016-06-23","lts":false,"security":false,"v8":"4.6.85.32"},{"name":"nodejs","version":"6.0.0","date":"2016-04-26","lts":false,"security":false,"v8":"5.0.71.35"},{"name":"nodejs","version":"6.1.0","date":"2016-05-05","lts":false,"security":false,"v8":"5.0.71.35"},{"name":"nodejs","version":"6.2.0","date":"2016-05-17","lts":false,"security":false,"v8":"5.0.71.47"},{"name":"nodejs","version":"6.3.0","date":"2016-07-06","lts":false,"security":false,"v8":"5.0.71.52"},{"name":"nodejs","version":"6.4.0","date":"2016-08-12","lts":false,"security":false,"v8":"5.0.71.60"},{"name":"nodejs","version":"6.5.0","date":"2016-08-26","lts":false,"security":false,"v8":"5.1.281.81"},{"name":"nodejs","version":"6.6.0","date":"2016-09-14","lts":false,"security":false,"v8":"5.1.281.83"},{"name":"nodejs","version":"6.7.0","date":"2016-09-27","lts":false,"security":true,"v8":"5.1.281.83"},{"name":"nodejs","version":"6.8.0","date":"2016-10-12","lts":false,"security":false,"v8":"5.1.281.84"},{"name":"nodejs","version":"6.9.0","date":"2016-10-18","lts":"Boron","security":false,"v8":"5.1.281.84"},{"name":"nodejs","version":"6.10.0","date":"2017-02-21","lts":"Boron","security":false,"v8":"5.1.281.93"},{"name":"nodejs","version":"6.11.0","date":"2017-06-06","lts":"Boron","security":false,"v8":"5.1.281.102"},{"name":"nodejs","version":"6.12.0","date":"2017-11-06","lts":"Boron","security":false,"v8":"5.1.281.108"},{"name":"nodejs","version":"6.13.0","date":"2018-02-10","lts":"Boron","security":false,"v8":"5.1.281.111"},{"name":"nodejs","version":"6.14.0","date":"2018-03-28","lts":"Boron","security":true,"v8":"5.1.281.111"},{"name":"nodejs","version":"6.15.0","date":"2018-11-27","lts":"Boron","security":true,"v8":"5.1.281.111"},{"name":"nodejs","version":"6.16.0","date":"2018-12-26","lts":"Boron","security":false,"v8":"5.1.281.111"},{"name":"nodejs","version":"6.17.0","date":"2019-02-28","lts":"Boron","security":true,"v8":"5.1.281.111"},{"name":"nodejs","version":"7.0.0","date":"2016-10-25","lts":false,"security":false,"v8":"5.4.500.36"},{"name":"nodejs","version":"7.1.0","date":"2016-11-08","lts":false,"security":false,"v8":"5.4.500.36"},{"name":"nodejs","version":"7.2.0","date":"2016-11-22","lts":false,"security":false,"v8":"5.4.500.43"},{"name":"nodejs","version":"7.3.0","date":"2016-12-20","lts":false,"security":false,"v8":"5.4.500.45"},{"name":"nodejs","version":"7.4.0","date":"2017-01-04","lts":false,"security":false,"v8":"5.4.500.45"},{"name":"nodejs","version":"7.5.0","date":"2017-01-31","lts":false,"security":false,"v8":"5.4.500.48"},{"name":"nodejs","version":"7.6.0","date":"2017-02-21","lts":false,"security":false,"v8":"5.5.372.40"},{"name":"nodejs","version":"7.7.0","date":"2017-02-28","lts":false,"security":false,"v8":"5.5.372.41"},{"name":"nodejs","version":"7.8.0","date":"2017-03-29","lts":false,"security":false,"v8":"5.5.372.43"},{"name":"nodejs","version":"7.9.0","date":"2017-04-11","lts":false,"security":false,"v8":"5.5.372.43"},{"name":"nodejs","version":"7.10.0","date":"2017-05-02","lts":false,"security":false,"v8":"5.5.372.43"},{"name":"nodejs","version":"8.0.0","date":"2017-05-30","lts":false,"security":false,"v8":"5.8.283.41"},{"name":"nodejs","version":"8.1.0","date":"2017-06-08","lts":false,"security":false,"v8":"5.8.283.41"},{"name":"nodejs","version":"8.2.0","date":"2017-07-19","lts":false,"security":false,"v8":"5.8.283.41"},{"name":"nodejs","version":"8.3.0","date":"2017-08-08","lts":false,"security":false,"v8":"6.0.286.52"},{"name":"nodejs","version":"8.4.0","date":"2017-08-15","lts":false,"security":false,"v8":"6.0.286.52"},{"name":"nodejs","version":"8.5.0","date":"2017-09-12","lts":false,"security":false,"v8":"6.0.287.53"},{"name":"nodejs","version":"8.6.0","date":"2017-09-26","lts":false,"security":false,"v8":"6.0.287.53"},{"name":"nodejs","version":"8.7.0","date":"2017-10-11","lts":false,"security":false,"v8":"6.1.534.42"},{"name":"nodejs","version":"8.8.0","date":"2017-10-24","lts":false,"security":false,"v8":"6.1.534.42"},{"name":"nodejs","version":"8.9.0","date":"2017-10-31","lts":"Carbon","security":false,"v8":"6.1.534.46"},{"name":"nodejs","version":"8.10.0","date":"2018-03-06","lts":"Carbon","security":false,"v8":"6.2.414.50"},{"name":"nodejs","version":"8.11.0","date":"2018-03-28","lts":"Carbon","security":true,"v8":"6.2.414.50"},{"name":"nodejs","version":"8.12.0","date":"2018-09-10","lts":"Carbon","security":false,"v8":"6.2.414.66"},{"name":"nodejs","version":"8.13.0","date":"2018-11-20","lts":"Carbon","security":false,"v8":"6.2.414.72"},{"name":"nodejs","version":"8.14.0","date":"2018-11-27","lts":"Carbon","security":true,"v8":"6.2.414.72"},{"name":"nodejs","version":"8.15.0","date":"2018-12-26","lts":"Carbon","security":false,"v8":"6.2.414.75"},{"name":"nodejs","version":"8.16.0","date":"2019-04-16","lts":"Carbon","security":false,"v8":"6.2.414.77"},{"name":"nodejs","version":"8.17.0","date":"2019-12-17","lts":"Carbon","security":true,"v8":"6.2.414.78"},{"name":"nodejs","version":"9.0.0","date":"2017-10-31","lts":false,"security":false,"v8":"6.2.414.32"},{"name":"nodejs","version":"9.1.0","date":"2017-11-07","lts":false,"security":false,"v8":"6.2.414.32"},{"name":"nodejs","version":"9.2.0","date":"2017-11-14","lts":false,"security":false,"v8":"6.2.414.44"},{"name":"nodejs","version":"9.3.0","date":"2017-12-12","lts":false,"security":false,"v8":"6.2.414.46"},{"name":"nodejs","version":"9.4.0","date":"2018-01-10","lts":false,"security":false,"v8":"6.2.414.46"},{"name":"nodejs","version":"9.5.0","date":"2018-01-31","lts":false,"security":false,"v8":"6.2.414.46"},{"name":"nodejs","version":"9.6.0","date":"2018-02-21","lts":false,"security":false,"v8":"6.2.414.46"},{"name":"nodejs","version":"9.7.0","date":"2018-03-01","lts":false,"security":false,"v8":"6.2.414.46"},{"name":"nodejs","version":"9.8.0","date":"2018-03-07","lts":false,"security":false,"v8":"6.2.414.46"},{"name":"nodejs","version":"9.9.0","date":"2018-03-21","lts":false,"security":false,"v8":"6.2.414.46"},{"name":"nodejs","version":"9.10.0","date":"2018-03-28","lts":false,"security":true,"v8":"6.2.414.46"},{"name":"nodejs","version":"9.11.0","date":"2018-04-04","lts":false,"security":false,"v8":"6.2.414.46"},{"name":"nodejs","version":"10.0.0","date":"2018-04-24","lts":false,"security":false,"v8":"6.6.346.24"},{"name":"nodejs","version":"10.1.0","date":"2018-05-08","lts":false,"security":false,"v8":"6.6.346.27"},{"name":"nodejs","version":"10.2.0","date":"2018-05-23","lts":false,"security":false,"v8":"6.6.346.32"},{"name":"nodejs","version":"10.3.0","date":"2018-05-29","lts":false,"security":false,"v8":"6.6.346.32"},{"name":"nodejs","version":"10.4.0","date":"2018-06-06","lts":false,"security":false,"v8":"6.7.288.43"},{"name":"nodejs","version":"10.5.0","date":"2018-06-20","lts":false,"security":false,"v8":"6.7.288.46"},{"name":"nodejs","version":"10.6.0","date":"2018-07-04","lts":false,"security":false,"v8":"6.7.288.46"},{"name":"nodejs","version":"10.7.0","date":"2018-07-18","lts":false,"security":false,"v8":"6.7.288.49"},{"name":"nodejs","version":"10.8.0","date":"2018-08-01","lts":false,"security":false,"v8":"6.7.288.49"},{"name":"nodejs","version":"10.9.0","date":"2018-08-15","lts":false,"security":false,"v8":"6.8.275.24"},{"name":"nodejs","version":"10.10.0","date":"2018-09-06","lts":false,"security":false,"v8":"6.8.275.30"},{"name":"nodejs","version":"10.11.0","date":"2018-09-19","lts":false,"security":false,"v8":"6.8.275.32"},{"name":"nodejs","version":"10.12.0","date":"2018-10-10","lts":false,"security":false,"v8":"6.8.275.32"},{"name":"nodejs","version":"10.13.0","date":"2018-10-30","lts":"Dubnium","security":false,"v8":"6.8.275.32"},{"name":"nodejs","version":"10.14.0","date":"2018-11-27","lts":"Dubnium","security":true,"v8":"6.8.275.32"},{"name":"nodejs","version":"10.15.0","date":"2018-12-26","lts":"Dubnium","security":false,"v8":"6.8.275.32"},{"name":"nodejs","version":"10.16.0","date":"2019-05-28","lts":"Dubnium","security":false,"v8":"6.8.275.32"},{"name":"nodejs","version":"10.17.0","date":"2019-10-22","lts":"Dubnium","security":false,"v8":"6.8.275.32"},{"name":"nodejs","version":"10.18.0","date":"2019-12-17","lts":"Dubnium","security":true,"v8":"6.8.275.32"},{"name":"nodejs","version":"10.19.0","date":"2020-02-05","lts":"Dubnium","security":true,"v8":"6.8.275.32"},{"name":"nodejs","version":"10.20.0","date":"2020-03-26","lts":"Dubnium","security":false,"v8":"6.8.275.32"},{"name":"nodejs","version":"10.21.0","date":"2020-06-02","lts":"Dubnium","security":true,"v8":"6.8.275.32"},{"name":"nodejs","version":"10.22.0","date":"2020-07-21","lts":"Dubnium","security":false,"v8":"6.8.275.32"},{"name":"nodejs","version":"10.23.0","date":"2020-10-27","lts":"Dubnium","security":false,"v8":"6.8.275.32"},{"name":"nodejs","version":"10.24.0","date":"2021-02-23","lts":"Dubnium","security":true,"v8":"6.8.275.32"},{"name":"nodejs","version":"11.0.0","date":"2018-10-23","lts":false,"security":false,"v8":"7.0.276.28"},{"name":"nodejs","version":"11.1.0","date":"2018-10-30","lts":false,"security":false,"v8":"7.0.276.32"},{"name":"nodejs","version":"11.2.0","date":"2018-11-15","lts":false,"security":false,"v8":"7.0.276.38"},{"name":"nodejs","version":"11.3.0","date":"2018-11-27","lts":false,"security":true,"v8":"7.0.276.38"},{"name":"nodejs","version":"11.4.0","date":"2018-12-07","lts":false,"security":false,"v8":"7.0.276.38"},{"name":"nodejs","version":"11.5.0","date":"2018-12-18","lts":false,"security":false,"v8":"7.0.276.38"},{"name":"nodejs","version":"11.6.0","date":"2018-12-26","lts":false,"security":false,"v8":"7.0.276.38"},{"name":"nodejs","version":"11.7.0","date":"2019-01-17","lts":false,"security":false,"v8":"7.0.276.38"},{"name":"nodejs","version":"11.8.0","date":"2019-01-24","lts":false,"security":false,"v8":"7.0.276.38"},{"name":"nodejs","version":"11.9.0","date":"2019-01-30","lts":false,"security":false,"v8":"7.0.276.38"},{"name":"nodejs","version":"11.10.0","date":"2019-02-14","lts":false,"security":false,"v8":"7.0.276.38"},{"name":"nodejs","version":"11.11.0","date":"2019-03-05","lts":false,"security":false,"v8":"7.0.276.38"},{"name":"nodejs","version":"11.12.0","date":"2019-03-14","lts":false,"security":false,"v8":"7.0.276.38"},{"name":"nodejs","version":"11.13.0","date":"2019-03-28","lts":false,"security":false,"v8":"7.0.276.38"},{"name":"nodejs","version":"11.14.0","date":"2019-04-10","lts":false,"security":false,"v8":"7.0.276.38"},{"name":"nodejs","version":"11.15.0","date":"2019-04-30","lts":false,"security":false,"v8":"7.0.276.38"},{"name":"nodejs","version":"12.0.0","date":"2019-04-23","lts":false,"security":false,"v8":"7.4.288.21"},{"name":"nodejs","version":"12.1.0","date":"2019-04-29","lts":false,"security":false,"v8":"7.4.288.21"},{"name":"nodejs","version":"12.2.0","date":"2019-05-07","lts":false,"security":false,"v8":"7.4.288.21"},{"name":"nodejs","version":"12.3.0","date":"2019-05-21","lts":false,"security":false,"v8":"7.4.288.27"},{"name":"nodejs","version":"12.4.0","date":"2019-06-04","lts":false,"security":false,"v8":"7.4.288.27"},{"name":"nodejs","version":"12.5.0","date":"2019-06-26","lts":false,"security":false,"v8":"7.5.288.22"},{"name":"nodejs","version":"12.6.0","date":"2019-07-03","lts":false,"security":false,"v8":"7.5.288.22"},{"name":"nodejs","version":"12.7.0","date":"2019-07-23","lts":false,"security":false,"v8":"7.5.288.22"},{"name":"nodejs","version":"12.8.0","date":"2019-08-06","lts":false,"security":false,"v8":"7.5.288.22"},{"name":"nodejs","version":"12.9.0","date":"2019-08-20","lts":false,"security":false,"v8":"7.6.303.29"},{"name":"nodejs","version":"12.10.0","date":"2019-09-04","lts":false,"security":false,"v8":"7.6.303.29"},{"name":"nodejs","version":"12.11.0","date":"2019-09-25","lts":false,"security":false,"v8":"7.7.299.11"},{"name":"nodejs","version":"12.12.0","date":"2019-10-11","lts":false,"security":false,"v8":"7.7.299.13"},{"name":"nodejs","version":"12.13.0","date":"2019-10-21","lts":"Erbium","security":false,"v8":"7.7.299.13"},{"name":"nodejs","version":"12.14.0","date":"2019-12-17","lts":"Erbium","security":true,"v8":"7.7.299.13"},{"name":"nodejs","version":"12.15.0","date":"2020-02-05","lts":"Erbium","security":true,"v8":"7.7.299.13"},{"name":"nodejs","version":"12.16.0","date":"2020-02-11","lts":"Erbium","security":false,"v8":"7.8.279.23"},{"name":"nodejs","version":"12.17.0","date":"2020-05-26","lts":"Erbium","security":false,"v8":"7.8.279.23"},{"name":"nodejs","version":"12.18.0","date":"2020-06-02","lts":"Erbium","security":true,"v8":"7.8.279.23"},{"name":"nodejs","version":"12.19.0","date":"2020-10-06","lts":"Erbium","security":false,"v8":"7.8.279.23"},{"name":"nodejs","version":"12.20.0","date":"2020-11-24","lts":"Erbium","security":false,"v8":"7.8.279.23"},{"name":"nodejs","version":"12.21.0","date":"2021-02-23","lts":"Erbium","security":true,"v8":"7.8.279.23"},{"name":"nodejs","version":"12.22.0","date":"2021-03-30","lts":"Erbium","security":false,"v8":"7.8.279.23"},{"name":"nodejs","version":"13.0.0","date":"2019-10-22","lts":false,"security":false,"v8":"7.8.279.17"},{"name":"nodejs","version":"13.1.0","date":"2019-11-05","lts":false,"security":false,"v8":"7.8.279.17"},{"name":"nodejs","version":"13.2.0","date":"2019-11-21","lts":false,"security":false,"v8":"7.9.317.23"},{"name":"nodejs","version":"13.3.0","date":"2019-12-03","lts":false,"security":false,"v8":"7.9.317.25"},{"name":"nodejs","version":"13.4.0","date":"2019-12-17","lts":false,"security":true,"v8":"7.9.317.25"},{"name":"nodejs","version":"13.5.0","date":"2019-12-18","lts":false,"security":false,"v8":"7.9.317.25"},{"name":"nodejs","version":"13.6.0","date":"2020-01-07","lts":false,"security":false,"v8":"7.9.317.25"},{"name":"nodejs","version":"13.7.0","date":"2020-01-21","lts":false,"security":false,"v8":"7.9.317.25"},{"name":"nodejs","version":"13.8.0","date":"2020-02-05","lts":false,"security":true,"v8":"7.9.317.25"},{"name":"nodejs","version":"13.9.0","date":"2020-02-18","lts":false,"security":false,"v8":"7.9.317.25"},{"name":"nodejs","version":"13.10.0","date":"2020-03-04","lts":false,"security":false,"v8":"7.9.317.25"},{"name":"nodejs","version":"13.11.0","date":"2020-03-12","lts":false,"security":false,"v8":"7.9.317.25"},{"name":"nodejs","version":"13.12.0","date":"2020-03-26","lts":false,"security":false,"v8":"7.9.317.25"},{"name":"nodejs","version":"13.13.0","date":"2020-04-14","lts":false,"security":false,"v8":"7.9.317.25"},{"name":"nodejs","version":"13.14.0","date":"2020-04-29","lts":false,"security":false,"v8":"7.9.317.25"},{"name":"nodejs","version":"14.0.0","date":"2020-04-21","lts":false,"security":false,"v8":"8.1.307.30"},{"name":"nodejs","version":"14.1.0","date":"2020-04-29","lts":false,"security":false,"v8":"8.1.307.31"},{"name":"nodejs","version":"14.2.0","date":"2020-05-05","lts":false,"security":false,"v8":"8.1.307.31"},{"name":"nodejs","version":"14.3.0","date":"2020-05-19","lts":false,"security":false,"v8":"8.1.307.31"},{"name":"nodejs","version":"14.4.0","date":"2020-06-02","lts":false,"security":true,"v8":"8.1.307.31"},{"name":"nodejs","version":"14.5.0","date":"2020-06-30","lts":false,"security":false,"v8":"8.3.110.9"},{"name":"nodejs","version":"14.6.0","date":"2020-07-20","lts":false,"security":false,"v8":"8.4.371.19"},{"name":"nodejs","version":"14.7.0","date":"2020-07-29","lts":false,"security":false,"v8":"8.4.371.19"},{"name":"nodejs","version":"14.8.0","date":"2020-08-11","lts":false,"security":false,"v8":"8.4.371.19"},{"name":"nodejs","version":"14.9.0","date":"2020-08-27","lts":false,"security":false,"v8":"8.4.371.19"},{"name":"nodejs","version":"14.10.0","date":"2020-09-08","lts":false,"security":false,"v8":"8.4.371.19"},{"name":"nodejs","version":"14.11.0","date":"2020-09-15","lts":false,"security":true,"v8":"8.4.371.19"},{"name":"nodejs","version":"14.12.0","date":"2020-09-22","lts":false,"security":false,"v8":"8.4.371.19"},{"name":"nodejs","version":"14.13.0","date":"2020-09-29","lts":false,"security":false,"v8":"8.4.371.19"},{"name":"nodejs","version":"14.14.0","date":"2020-10-15","lts":false,"security":false,"v8":"8.4.371.19"},{"name":"nodejs","version":"14.15.0","date":"2020-10-27","lts":"Fermium","security":false,"v8":"8.4.371.19"},{"name":"nodejs","version":"14.16.0","date":"2021-02-23","lts":"Fermium","security":true,"v8":"8.4.371.19"},{"name":"nodejs","version":"14.17.0","date":"2021-05-11","lts":"Fermium","security":false,"v8":"8.4.371.23"},{"name":"nodejs","version":"14.18.0","date":"2021-09-28","lts":"Fermium","security":false,"v8":"8.4.371.23"},{"name":"nodejs","version":"14.19.0","date":"2022-02-01","lts":"Fermium","security":false,"v8":"8.4.371.23"},{"name":"nodejs","version":"14.20.0","date":"2022-07-07","lts":"Fermium","security":true,"v8":"8.4.371.23"},{"name":"nodejs","version":"14.21.0","date":"2022-11-01","lts":"Fermium","security":false,"v8":"8.4.371.23"},{"name":"nodejs","version":"15.0.0","date":"2020-10-20","lts":false,"security":false,"v8":"8.6.395.16"},{"name":"nodejs","version":"15.1.0","date":"2020-11-04","lts":false,"security":false,"v8":"8.6.395.17"},{"name":"nodejs","version":"15.2.0","date":"2020-11-10","lts":false,"security":false,"v8":"8.6.395.17"},{"name":"nodejs","version":"15.3.0","date":"2020-11-24","lts":false,"security":false,"v8":"8.6.395.17"},{"name":"nodejs","version":"15.4.0","date":"2020-12-09","lts":false,"security":false,"v8":"8.6.395.17"},{"name":"nodejs","version":"15.5.0","date":"2020-12-22","lts":false,"security":false,"v8":"8.6.395.17"},{"name":"nodejs","version":"15.6.0","date":"2021-01-14","lts":false,"security":false,"v8":"8.6.395.17"},{"name":"nodejs","version":"15.7.0","date":"2021-01-25","lts":false,"security":false,"v8":"8.6.395.17"},{"name":"nodejs","version":"15.8.0","date":"2021-02-02","lts":false,"security":false,"v8":"8.6.395.17"},{"name":"nodejs","version":"15.9.0","date":"2021-02-18","lts":false,"security":false,"v8":"8.6.395.17"},{"name":"nodejs","version":"15.10.0","date":"2021-02-23","lts":false,"security":true,"v8":"8.6.395.17"},{"name":"nodejs","version":"15.11.0","date":"2021-03-03","lts":false,"security":false,"v8":"8.6.395.17"},{"name":"nodejs","version":"15.12.0","date":"2021-03-17","lts":false,"security":false,"v8":"8.6.395.17"},{"name":"nodejs","version":"15.13.0","date":"2021-03-31","lts":false,"security":false,"v8":"8.6.395.17"},{"name":"nodejs","version":"15.14.0","date":"2021-04-06","lts":false,"security":false,"v8":"8.6.395.17"},{"name":"nodejs","version":"16.0.0","date":"2021-04-20","lts":false,"security":false,"v8":"9.0.257.17"},{"name":"nodejs","version":"16.1.0","date":"2021-05-04","lts":false,"security":false,"v8":"9.0.257.24"},{"name":"nodejs","version":"16.2.0","date":"2021-05-19","lts":false,"security":false,"v8":"9.0.257.25"},{"name":"nodejs","version":"16.3.0","date":"2021-06-03","lts":false,"security":false,"v8":"9.0.257.25"},{"name":"nodejs","version":"16.4.0","date":"2021-06-23","lts":false,"security":false,"v8":"9.1.269.36"},{"name":"nodejs","version":"16.5.0","date":"2021-07-14","lts":false,"security":false,"v8":"9.1.269.38"},{"name":"nodejs","version":"16.6.0","date":"2021-07-29","lts":false,"security":true,"v8":"9.2.230.21"},{"name":"nodejs","version":"16.7.0","date":"2021-08-18","lts":false,"security":false,"v8":"9.2.230.21"},{"name":"nodejs","version":"16.8.0","date":"2021-08-25","lts":false,"security":false,"v8":"9.2.230.21"},{"name":"nodejs","version":"16.9.0","date":"2021-09-07","lts":false,"security":false,"v8":"9.3.345.16"},{"name":"nodejs","version":"16.10.0","date":"2021-09-22","lts":false,"security":false,"v8":"9.3.345.19"},{"name":"nodejs","version":"16.11.0","date":"2021-10-08","lts":false,"security":false,"v8":"9.4.146.19"},{"name":"nodejs","version":"16.12.0","date":"2021-10-20","lts":false,"security":false,"v8":"9.4.146.19"},{"name":"nodejs","version":"16.13.0","date":"2021-10-26","lts":"Gallium","security":false,"v8":"9.4.146.19"},{"name":"nodejs","version":"16.14.0","date":"2022-02-08","lts":"Gallium","security":false,"v8":"9.4.146.24"},{"name":"nodejs","version":"16.15.0","date":"2022-04-26","lts":"Gallium","security":false,"v8":"9.4.146.24"},{"name":"nodejs","version":"16.16.0","date":"2022-07-07","lts":"Gallium","security":true,"v8":"9.4.146.24"},{"name":"nodejs","version":"16.17.0","date":"2022-08-16","lts":"Gallium","security":false,"v8":"9.4.146.26"},{"name":"nodejs","version":"16.18.0","date":"2022-10-12","lts":"Gallium","security":false,"v8":"9.4.146.26"},{"name":"nodejs","version":"16.19.0","date":"2022-12-13","lts":"Gallium","security":false,"v8":"9.4.146.26"},{"name":"nodejs","version":"16.20.0","date":"2023-03-28","lts":"Gallium","security":false,"v8":"9.4.146.26"},{"name":"nodejs","version":"17.0.0","date":"2021-10-19","lts":false,"security":false,"v8":"9.5.172.21"},{"name":"nodejs","version":"17.1.0","date":"2021-11-09","lts":false,"security":false,"v8":"9.5.172.25"},{"name":"nodejs","version":"17.2.0","date":"2021-11-30","lts":false,"security":false,"v8":"9.6.180.14"},{"name":"nodejs","version":"17.3.0","date":"2021-12-17","lts":false,"security":false,"v8":"9.6.180.15"},{"name":"nodejs","version":"17.4.0","date":"2022-01-18","lts":false,"security":false,"v8":"9.6.180.15"},{"name":"nodejs","version":"17.5.0","date":"2022-02-10","lts":false,"security":false,"v8":"9.6.180.15"},{"name":"nodejs","version":"17.6.0","date":"2022-02-22","lts":false,"security":false,"v8":"9.6.180.15"},{"name":"nodejs","version":"17.7.0","date":"2022-03-09","lts":false,"security":false,"v8":"9.6.180.15"},{"name":"nodejs","version":"17.8.0","date":"2022-03-22","lts":false,"security":false,"v8":"9.6.180.15"},{"name":"nodejs","version":"17.9.0","date":"2022-04-07","lts":false,"security":false,"v8":"9.6.180.15"},{"name":"nodejs","version":"18.0.0","date":"2022-04-18","lts":false,"security":false,"v8":"10.1.124.8"},{"name":"nodejs","version":"18.1.0","date":"2022-05-03","lts":false,"security":false,"v8":"10.1.124.8"},{"name":"nodejs","version":"18.2.0","date":"2022-05-17","lts":false,"security":false,"v8":"10.1.124.8"},{"name":"nodejs","version":"18.3.0","date":"2022-06-02","lts":false,"security":false,"v8":"10.2.154.4"},{"name":"nodejs","version":"18.4.0","date":"2022-06-16","lts":false,"security":false,"v8":"10.2.154.4"},{"name":"nodejs","version":"18.5.0","date":"2022-07-06","lts":false,"security":true,"v8":"10.2.154.4"},{"name":"nodejs","version":"18.6.0","date":"2022-07-13","lts":false,"security":false,"v8":"10.2.154.13"},{"name":"nodejs","version":"18.7.0","date":"2022-07-26","lts":false,"security":false,"v8":"10.2.154.13"},{"name":"nodejs","version":"18.8.0","date":"2022-08-24","lts":false,"security":false,"v8":"10.2.154.13"},{"name":"nodejs","version":"18.9.0","date":"2022-09-07","lts":false,"security":false,"v8":"10.2.154.15"},{"name":"nodejs","version":"18.10.0","date":"2022-09-28","lts":false,"security":false,"v8":"10.2.154.15"},{"name":"nodejs","version":"18.11.0","date":"2022-10-13","lts":false,"security":false,"v8":"10.2.154.15"},{"name":"nodejs","version":"18.12.0","date":"2022-10-25","lts":"Hydrogen","security":false,"v8":"10.2.154.15"},{"name":"nodejs","version":"18.13.0","date":"2023-01-05","lts":"Hydrogen","security":false,"v8":"10.2.154.23"},{"name":"nodejs","version":"18.14.0","date":"2023-02-01","lts":"Hydrogen","security":false,"v8":"10.2.154.23"},{"name":"nodejs","version":"18.15.0","date":"2023-03-05","lts":"Hydrogen","security":false,"v8":"10.2.154.26"},{"name":"nodejs","version":"18.16.0","date":"2023-04-12","lts":"Hydrogen","security":false,"v8":"10.2.154.26"},{"name":"nodejs","version":"18.17.0","date":"2023-07-18","lts":"Hydrogen","security":false,"v8":"10.2.154.26"},{"name":"nodejs","version":"18.18.0","date":"2023-09-18","lts":"Hydrogen","security":false,"v8":"10.2.154.26"},{"name":"nodejs","version":"18.19.0","date":"2023-11-29","lts":"Hydrogen","security":false,"v8":"10.2.154.26"},{"name":"nodejs","version":"18.20.0","date":"2024-03-26","lts":"Hydrogen","security":false,"v8":"10.2.154.26"},{"name":"nodejs","version":"19.0.0","date":"2022-10-17","lts":false,"security":false,"v8":"10.7.193.13"},{"name":"nodejs","version":"19.1.0","date":"2022-11-14","lts":false,"security":false,"v8":"10.7.193.20"},{"name":"nodejs","version":"19.2.0","date":"2022-11-29","lts":false,"security":false,"v8":"10.8.168.20"},{"name":"nodejs","version":"19.3.0","date":"2022-12-14","lts":false,"security":false,"v8":"10.8.168.21"},{"name":"nodejs","version":"19.4.0","date":"2023-01-05","lts":false,"security":false,"v8":"10.8.168.25"},{"name":"nodejs","version":"19.5.0","date":"2023-01-24","lts":false,"security":false,"v8":"10.8.168.25"},{"name":"nodejs","version":"19.6.0","date":"2023-02-01","lts":false,"security":false,"v8":"10.8.168.25"},{"name":"nodejs","version":"19.7.0","date":"2023-02-21","lts":false,"security":false,"v8":"10.8.168.25"},{"name":"nodejs","version":"19.8.0","date":"2023-03-14","lts":false,"security":false,"v8":"10.8.168.25"},{"name":"nodejs","version":"19.9.0","date":"2023-04-10","lts":false,"security":false,"v8":"10.8.168.25"},{"name":"nodejs","version":"20.0.0","date":"2023-04-17","lts":false,"security":false,"v8":"11.3.244.4"},{"name":"nodejs","version":"20.1.0","date":"2023-05-03","lts":false,"security":false,"v8":"11.3.244.8"},{"name":"nodejs","version":"20.2.0","date":"2023-05-16","lts":false,"security":false,"v8":"11.3.244.8"},{"name":"nodejs","version":"20.3.0","date":"2023-06-08","lts":false,"security":false,"v8":"11.3.244.8"},{"name":"nodejs","version":"20.4.0","date":"2023-07-04","lts":false,"security":false,"v8":"11.3.244.8"},{"name":"nodejs","version":"20.5.0","date":"2023-07-19","lts":false,"security":false,"v8":"11.3.244.8"},{"name":"nodejs","version":"20.6.0","date":"2023-08-23","lts":false,"security":false,"v8":"11.3.244.8"},{"name":"nodejs","version":"20.7.0","date":"2023-09-18","lts":false,"security":false,"v8":"11.3.244.8"},{"name":"nodejs","version":"20.8.0","date":"2023-09-28","lts":false,"security":false,"v8":"11.3.244.8"},{"name":"nodejs","version":"20.9.0","date":"2023-10-24","lts":"Iron","security":false,"v8":"11.3.244.8"},{"name":"nodejs","version":"20.10.0","date":"2023-11-22","lts":"Iron","security":false,"v8":"11.3.244.8"},{"name":"nodejs","version":"20.11.0","date":"2024-01-09","lts":"Iron","security":false,"v8":"11.3.244.8"},{"name":"nodejs","version":"20.12.0","date":"2024-03-26","lts":"Iron","security":false,"v8":"11.3.244.8"},{"name":"nodejs","version":"20.13.0","date":"2024-05-07","lts":"Iron","security":false,"v8":"11.3.244.8"},{"name":"nodejs","version":"20.14.0","date":"2024-05-28","lts":"Iron","security":false,"v8":"11.3.244.8"},{"name":"nodejs","version":"20.15.0","date":"2024-06-20","lts":"Iron","security":false,"v8":"11.3.244.8"},{"name":"nodejs","version":"21.0.0","date":"2023-10-17","lts":false,"security":false,"v8":"11.8.172.13"},{"name":"nodejs","version":"21.1.0","date":"2023-10-24","lts":false,"security":false,"v8":"11.8.172.15"},{"name":"nodejs","version":"21.2.0","date":"2023-11-14","lts":false,"security":false,"v8":"11.8.172.17"},{"name":"nodejs","version":"21.3.0","date":"2023-11-30","lts":false,"security":false,"v8":"11.8.172.17"},{"name":"nodejs","version":"21.4.0","date":"2023-12-05","lts":false,"security":false,"v8":"11.8.172.17"},{"name":"nodejs","version":"21.5.0","date":"2023-12-19","lts":false,"security":false,"v8":"11.8.172.17"},{"name":"nodejs","version":"21.6.0","date":"2024-01-14","lts":false,"security":false,"v8":"11.8.172.17"},{"name":"nodejs","version":"21.7.0","date":"2024-03-06","lts":false,"security":false,"v8":"11.8.172.17"},{"name":"nodejs","version":"22.0.0","date":"2024-04-24","lts":false,"security":false,"v8":"12.4.254.14"},{"name":"nodejs","version":"22.1.0","date":"2024-05-02","lts":false,"security":false,"v8":"12.4.254.14"},{"name":"nodejs","version":"22.2.0","date":"2024-05-15","lts":false,"security":false,"v8":"12.4.254.14"},{"name":"nodejs","version":"22.3.0","date":"2024-06-11","lts":false,"security":false,"v8":"12.4.254.20"},{"name":"nodejs","version":"22.4.0","date":"2024-07-02","lts":false,"security":false,"v8":"12.4.254.21"},{"name":"nodejs","version":"22.5.0","date":"2024-07-17","lts":false,"security":false,"v8":"12.4.254.21"}];

var exports$1s = {},
  _dewExec$1r = false;
function dew$1r() {
  if (_dewExec$1r) return exports$1s;
  _dewExec$1r = true;
  exports$1s = {
    A: "ie",
    B: "edge",
    C: "firefox",
    D: "chrome",
    E: "safari",
    F: "opera",
    G: "ios_saf",
    H: "op_mini",
    I: "android",
    J: "bb",
    K: "op_mob",
    L: "and_chr",
    M: "and_ff",
    N: "ie_mob",
    O: "and_uc",
    P: "samsung",
    Q: "and_qq",
    R: "baidu",
    S: "kaios"
  };
  return exports$1s;
}

var exports$1r = {},
  _dewExec$1q = false;
function dew$1q() {
  if (_dewExec$1q) return exports$1r;
  _dewExec$1q = true;
  exports$1r.browsers = dew$1r();
  return exports$1r;
}

var exports$1q = {},
  _dewExec$1p = false;
function dew$1p() {
  if (_dewExec$1p) return exports$1q;
  _dewExec$1p = true;
  exports$1q = {
    "0": "25",
    "1": "112",
    "2": "113",
    "3": "114",
    "4": "115",
    "5": "116",
    "6": "117",
    "7": "118",
    "8": "119",
    "9": "120",
    A: "10",
    B: "11",
    C: "12",
    D: "127",
    E: "7",
    F: "8",
    G: "9",
    H: "15",
    I: "80",
    J: "4",
    K: "6",
    L: "13",
    M: "14",
    N: "16",
    O: "17",
    P: "18",
    Q: "79",
    R: "81",
    S: "83",
    T: "84",
    U: "85",
    V: "86",
    W: "87",
    X: "88",
    Y: "89",
    Z: "90",
    a: "91",
    b: "92",
    c: "93",
    d: "94",
    e: "95",
    f: "96",
    g: "97",
    h: "98",
    i: "99",
    j: "100",
    k: "101",
    l: "102",
    m: "103",
    n: "104",
    o: "105",
    p: "106",
    q: "107",
    r: "108",
    s: "109",
    t: "110",
    u: "111",
    v: "20",
    w: "21",
    x: "22",
    y: "23",
    z: "24",
    AB: "121",
    BB: "122",
    CB: "123",
    DB: "124",
    EB: "125",
    FB: "126",
    GB: "5",
    HB: "19",
    IB: "26",
    JB: "27",
    KB: "28",
    LB: "29",
    MB: "30",
    NB: "31",
    OB: "32",
    PB: "33",
    QB: "34",
    RB: "35",
    SB: "36",
    TB: "37",
    UB: "38",
    VB: "39",
    WB: "40",
    XB: "41",
    YB: "42",
    ZB: "43",
    aB: "44",
    bB: "45",
    cB: "46",
    dB: "47",
    eB: "48",
    fB: "49",
    gB: "50",
    hB: "51",
    iB: "52",
    jB: "53",
    kB: "54",
    lB: "55",
    mB: "56",
    nB: "57",
    oB: "58",
    pB: "60",
    qB: "62",
    rB: "63",
    sB: "64",
    tB: "65",
    uB: "66",
    vB: "67",
    wB: "68",
    xB: "69",
    yB: "70",
    zB: "71",
    "0B": "72",
    "1B": "73",
    "2B": "74",
    "3B": "75",
    "4B": "76",
    "5B": "77",
    "6B": "78",
    "7B": "11.1",
    "8B": "12.1",
    "9B": "15.5",
    AC: "16.0",
    BC: "17.0",
    CC: "18.0",
    DC: "3",
    EC: "59",
    FC: "61",
    GC: "82",
    HC: "128",
    IC: "129",
    JC: "130",
    KC: "3.2",
    LC: "10.1",
    MC: "15.2-15.3",
    NC: "15.4",
    OC: "16.1",
    PC: "16.2",
    QC: "16.3",
    RC: "16.4",
    SC: "16.5",
    TC: "17.1",
    UC: "17.2",
    VC: "17.3",
    WC: "17.4",
    XC: "17.5",
    YC: "17.6",
    ZC: "11.5",
    aC: "4.2-4.3",
    bC: "5.5",
    cC: "2",
    dC: "131",
    eC: "132",
    fC: "3.5",
    gC: "3.6",
    hC: "3.1",
    iC: "5.1",
    jC: "6.1",
    kC: "7.1",
    lC: "9.1",
    mC: "13.1",
    nC: "14.1",
    oC: "15.1",
    pC: "15.6",
    qC: "16.6",
    rC: "TP",
    sC: "9.5-9.6",
    tC: "10.0-10.1",
    uC: "10.5",
    vC: "10.6",
    wC: "11.6",
    xC: "4.0-4.1",
    yC: "5.0-5.1",
    zC: "6.0-6.1",
    "0C": "7.0-7.1",
    "1C": "8.1-8.4",
    "2C": "9.0-9.2",
    "3C": "9.3",
    "4C": "10.0-10.2",
    "5C": "10.3",
    "6C": "11.0-11.2",
    "7C": "11.3-11.4",
    "8C": "12.0-12.1",
    "9C": "12.2-12.5",
    AD: "13.0-13.1",
    BD: "13.2",
    CD: "13.3",
    DD: "13.4-13.7",
    ED: "14.0-14.4",
    FD: "14.5-14.8",
    GD: "15.0-15.1",
    HD: "15.6-15.8",
    ID: "16.6-16.7",
    JD: "all",
    KD: "2.1",
    LD: "2.2",
    MD: "2.3",
    ND: "4.1",
    OD: "4.4",
    PD: "4.4.3-4.4.4",
    QD: "5.0-5.4",
    RD: "6.2-6.4",
    SD: "7.2-7.4",
    TD: "8.2",
    UD: "9.2",
    VD: "11.1-11.2",
    WD: "12.0",
    XD: "13.0",
    YD: "14.0",
    ZD: "15.0",
    aD: "19.0",
    bD: "14.9",
    cD: "13.52",
    dD: "2.5",
    eD: "3.0-3.1"
  };
  return exports$1q;
}

var exports$1p = {},
  _dewExec$1o = false;
function dew$1o() {
  if (_dewExec$1o) return exports$1p;
  _dewExec$1o = true;
  exports$1p.browserVersions = dew$1p();
  return exports$1p;
}

var exports$1o = {},
  _dewExec$1n = false;
function dew$1n() {
  if (_dewExec$1n) return exports$1o;
  _dewExec$1n = true;
  exports$1o = {
    A: {
      A: {
        K: 0,
        E: 0,
        F: 0.046943,
        G: 0.0625907,
        A: 0,
        B: 0.500725,
        bC: 0
      },
      B: "ms",
bC", "K", "E", "F", "G", "A", "B", "", "", ""],
      E: "IE",
      F: {
        bC: 962323200,
        K: 998870400,
        E: 1161129600,
        F: 1237420800,
        G: 1300060800,
        A: 1346716800,
        B: 1381968000
      }
    },
    B: {
      A: {
        "1": 0.007222,
        "2": 0.014444,
        "3": 0.010833,
        "4": 0.007222,
        "5": 0.007222,
        "6": 0.010833,
        "7": 0.007222,
        "8": 0.014444,
        "9": 0.03611,
        C: 0,
        L: 0,
        M: 0,
        H: 0,
        N: 0,
        O: 0.003611,
        P: 0.043332,
        Q: 0,
        I: 0,
        R: 0,
        S: 0,
        T: 0,
        U: 0,
        V: 0,
        W: 0,
        X: 0,
        Y: 0,
        Z: 0,
        a: 0,
        b: 0.014444,
        c: 0,
        d: 0,
        e: 0,
        f: 0,
        g: 0,
        h: 0,
        i: 0,
        j: 0,
        k: 0,
        l: 0,
        m: 0,
        n: 0,
        o: 0,
        p: 0,
        q: 0.007222,
        r: 0.007222,
        s: 0.064998,
        t: 0.007222,
        u: 0.007222,
        AB: 0.021666,
        BB: 0.032499,
        CB: 0.021666,
        DB: 0.039721,
        EB: 0.122774,
        FB: 3.94682,
        D: 0.512762
      },
      B: "webkit",
      C: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "C", "L", "M", "H", "N", "O", "P", "Q", "I", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "1", "2", "3", "4", "5", "6", "7", "8", "9", "AB", "BB", "CB", "DB", "EB", "FB", "D", "", "", ""],
      E: "Edge",
      F: {
        "1": 1680825600,
        "2": 1683158400,
        "3": 1685664000,
        "4": 1689897600,
        "5": 1692576000,
        "6": 1694649600,
        "7": 1697155200,
        "8": 1698969600,
        "9": 1701993600,
        C: 1438128000,
        L: 1447286400,
        M: 1470096000,
        H: 1491868800,
        N: 1508198400,
        O: 1525046400,
        P: 1542067200,
        Q: 1579046400,
        I: 1581033600,
        R: 1586736000,
        S: 1590019200,
        T: 1594857600,
        U: 1598486400,
        V: 1602201600,
        W: 1605830400,
        X: 1611360000,
        Y: 1614816000,
        Z: 1618358400,
        a: 1622073600,
        b: 1626912000,
        c: 1630627200,
        d: 1632441600,
        e: 1634774400,
        f: 1637539200,
        g: 1641427200,
        h: 1643932800,
        i: 1646265600,
        j: 1649635200,
        k: 1651190400,
        l: 1653955200,
        m: 1655942400,
        n: 1659657600,
        o: 1661990400,
        p: 1664755200,
        q: 1666915200,
        r: 1670198400,
        s: 1673481600,
        t: 1675900800,
        u: 1678665600,
        AB: 1706227200,
        BB: 1708732800,
        CB: 1711152000,
        DB: 1713398400,
        EB: 1715990400,
        FB: 1718841600,
        D: 1721865600
      },
      D: {
        C: "ms",
        L: "ms",
        M: "ms",
        H: "ms",
        N: "ms",
        O: "ms",
        P: "ms"
      }
    },
    C: {
      A: {
        "0": 0,
        "1": 0,
        "2": 0.007222,
        "3": 0,
        "4": 0.346656,
        "5": 0,
        "6": 0.007222,
        "7": 0.07222,
        "8": 0,
        "9": 0.007222,
        cC: 0,
        DC: 0,
        J: 0,
        GB: 0,
        K: 0,
        E: 0,
        F: 0,
        G: 0,
        A: 0,
        B: 0.018055,
        C: 0,
        L: 0,
        M: 0,
        H: 0,
        N: 0,
        O: 0,
        P: 0,
        HB: 0,
        v: 0,
        w: 0,
        x: 0,
        y: 0,
        z: 0,
        IB: 0,
        JB: 0,
        KB: 0,
        LB: 0,
        MB: 0,
        NB: 0,
        OB: 0,
        PB: 0,
        QB: 0,
        RB: 0,
        SB: 0,
        TB: 0,
        UB: 0,
        VB: 0,
        WB: 0,
        XB: 0,
        YB: 0,
        ZB: 0.007222,
        aB: 0.007222,
        bB: 0.007222,
        cB: 0,
        dB: 0,
        eB: 0,
        fB: 0,
        gB: 0.003611,
        hB: 0,
        iB: 0.043332,
        jB: 0.003611,
        kB: 0.007222,
        lB: 0,
        mB: 0.018055,
        nB: 0,
        oB: 0,
        EC: 0.003611,
        pB: 0,
        FC: 0,
        qB: 0,
        rB: 0,
        sB: 0,
        tB: 0,
        uB: 0,
        vB: 0,
        wB: 0,
        xB: 0,
        yB: 0,
        zB: 0,
        "0B": 0.003611,
        "1B": 0,
        "2B": 0,
        "3B": 0,
        "4B": 0,
        "5B": 0,
        "6B": 0.014444,
        Q: 0,
        I: 0,
        R: 0,
        GC: 0,
        S: 0,
        T: 0,
        U: 0,
        V: 0,
        W: 0,
        X: 0.007222,
        Y: 0,
        Z: 0,
        a: 0,
        b: 0,
        c: 0,
        d: 0.003611,
        e: 0,
        f: 0,
        g: 0,
        h: 0,
        i: 0,
        j: 0,
        k: 0,
        l: 0.007222,
        m: 0.007222,
        n: 0,
        o: 0.003611,
        p: 0,
        q: 0.003611,
        r: 0.003611,
        s: 0.010833,
        t: 0,
        u: 0,
        AB: 0.010833,
        BB: 0.007222,
        CB: 0.028888,
        DB: 0.010833,
        EB: 0.018055,
        FB: 0.046943,
        D: 0.592204,
        HC: 0.953304,
        IC: 0.007222,
        JC: 0,
        dC: 0,
        eC: 0,
        fC: 0,
        gC: 0
      },
      B: "moz",
      C: ["cC", "DC", "fC", "gC", "J", "GB", "K", "E", "F", "G", "A", "B", "C", "L", "M", "H", "N", "O", "P", "HB", "v", "w", "x", "y", "z", "0", "IB", "JB", "KB", "LB", "MB", "NB", "OB", "PB", "QB", "RB", "SB", "TB", "UB", "VB", "WB", "XB", "YB", "ZB", "aB", "bB", "cB", "dB", "eB", "fB", "gB", "hB", "iB", "jB", "kB", "lB", "mB", "nB", "oB", "EC", "pB", "FC", "qB", "rB", "sB", "tB", "uB", "vB", "wB", "xB", "yB", "zB", "0B", "1B", "2B", "3B", "4B", "5B", "6B", "Q", "I", "R", "GC", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "1", "2", "3", "4", "5", "6", "7", "8", "9", "AB", "BB", "CB", "DB", "EB", "FB", "D", "HC", "IC", "JC", "dC", "eC"],
      E: "Firefox",
      F: {
        "0": 1379376000,
        "1": 1681171200,
        "2": 1683590400,
        "3": 1686009600,
        "4": 1688428800,
        "5": 1690848000,
        "6": 1693267200,
        "7": 1695686400,
        "8": 1698105600,
        "9": 1700524800,
        cC: 1161648000,
        DC: 1213660800,
        fC: 1246320000,
        gC: 1264032000,
        J: 1300752000,
        GB: 1308614400,
        K: 1313452800,
        E: 1317081600,
        F: 1317081600,
        G: 1320710400,
        A: 1324339200,
        B: 1327968000,
        C: 1331596800,
        L: 1335225600,
        M: 1338854400,
        H: 1342483200,
        N: 1346112000,
        O: 1349740800,
        P: 1353628800,
        HB: 1357603200,
        v: 1361232000,
        w: 1364860800,
        x: 1368489600,
        y: 1372118400,
        z: 1375747200,
        IB: 1386633600,
        JB: 1391472000,
        KB: 1395100800,
        LB: 1398729600,
        MB: 1402358400,
        NB: 1405987200,
        OB: 1409616000,
        PB: 1413244800,
        QB: 1417392000,
        RB: 1421107200,
        SB: 1424736000,
        TB: 1428278400,
        UB: 1431475200,
        VB: 1435881600,
        WB: 1439251200,
        XB: 1442880000,
        YB: 1446508800,
        ZB: 1450137600,
        aB: 1453852800,
        bB: 1457395200,
        cB: 1461628800,
        dB: 1465257600,
        eB: 1470096000,
        fB: 1474329600,
        gB: 1479168000,
        hB: 1485216000,
        iB: 1488844800,
        jB: 1492560000,
        kB: 1497312000,
        lB: 1502150400,
        mB: 1506556800,
        nB: 1510617600,
        oB: 1516665600,
        EC: 1520985600,
        pB: 1525824000,
        FC: 1529971200,
        qB: 1536105600,
        rB: 1540252800,
        sB: 1544486400,
        tB: 1548720000,
        uB: 1552953600,
        vB: 1558396800,
        wB: 1562630400,
        xB: 1567468800,
        yB: 1571788800,
        zB: 1575331200,
        "0B": 1578355200,
        "1B": 1581379200,
        "2B": 1583798400,
        "3B": 1586304000,
        "4B": 1588636800,
        "5B": 1591056000,
        "6B": 1593475200,
        Q: 1595894400,
        I: 1598313600,
        R: 1600732800,
        GC: 1603152000,
        S: 1605571200,
        T: 1607990400,
        U: 1611619200,
        V: 1614038400,
        W: 1616457600,
        X: 1618790400,
        Y: 1622505600,
        Z: 1626134400,
        a: 1628553600,
        b: 1630972800,
        c: 1633392000,
        d: 1635811200,
        e: 1638835200,
        f: 1641859200,
        g: 1644364800,
        h: 1646697600,
        i: 1649116800,
        j: 1651536000,
        k: 1653955200,
        l: 1656374400,
        m: 1658793600,
        n: 1661212800,
        o: 1663632000,
        p: 1666051200,
        q: 1668470400,
        r: 1670889600,
        s: 1673913600,
        t: 1676332800,
        u: 1678752000,
        AB: 1702944000,
        BB: 1705968000,
        CB: 1708387200,
        DB: 1710806400,
        EB: 1713225600,
        FB: 1715644800,
        D: 1718064000,
        HC: 1720483200,
        IC: 1722902400,
        JC: null,
        dC: null,
        eC: null
      }
    },
    D: {
      A: {
        "0": 0,
        "1": 0.050554,
        "2": 0.093886,
        "3": 0.090275,
        "4": 0.03611,
        "5": 0.158884,
        "6": 0.104719,
        "7": 0.075831,
        "8": 0.064998,
        "9": 0.111941,
        J: 0,
        GB: 0,
        K: 0,
        E: 0,
        F: 0,
        G: 0,
        A: 0,
        B: 0,
        C: 0,
        L: 0,
        M: 0,
        H: 0,
        N: 0,
        O: 0,
        P: 0,
        HB: 0,
        v: 0,
        w: 0,
        x: 0,
        y: 0,
        z: 0,
        IB: 0,
        JB: 0,
        KB: 0,
        LB: 0,
        MB: 0,
        NB: 0,
        OB: 0,
        PB: 0,
        QB: 0,
        RB: 0,
        SB: 0,
        TB: 0,
        UB: 0.010833,
        VB: 0,
        WB: 0,
        XB: 0,
        YB: 0,
        ZB: 0,
        aB: 0,
        bB: 0.003611,
        cB: 0,
        dB: 0.003611,
        eB: 0.021666,
        fB: 0.021666,
        gB: 0.018055,
        hB: 0,
        iB: 0.003611,
        jB: 0.007222,
        kB: 0,
        lB: 0,
        mB: 0.010833,
        nB: 0,
        oB: 0.007222,
        EC: 0,
        pB: 0,
        FC: 0.003611,
        qB: 0,
        rB: 0,
        sB: 0,
        tB: 0,
        uB: 0.025277,
        vB: 0.007222,
        wB: 0,
        xB: 0.014444,
        yB: 0.097497,
        zB: 0.003611,
        "0B": 0,
        "1B": 0.014444,
        "2B": 0.010833,
        "3B": 0.010833,
        "4B": 0.007222,
        "5B": 0.010833,
        "6B": 0.018055,
        Q: 0.10833,
        I: 0.014444,
        R: 0.021666,
        S: 0.03611,
        T: 0.007222,
        U: 0.014444,
        V: 0.028888,
        W: 0.075831,
        X: 0.014444,
        Y: 0.010833,
        Z: 0.014444,
        a: 0.050554,
        b: 0.025277,
        c: 0.021666,
        d: 0.050554,
        e: 0.014444,
        f: 0.014444,
        g: 0.021666,
        h: 0.054165,
        i: 0.032499,
        j: 0.021666,
        k: 0.021666,
        l: 0.014444,
        m: 0.126385,
        n: 0.064998,
        o: 0.018055,
        p: 0.032499,
        q: 0.03611,
        r: 0.054165,
        s: 1.46607,
        t: 0.028888,
        u: 0.043332,
        AB: 0.148051,
        BB: 0.184161,
        CB: 0.176939,
        DB: 0.278047,
        EB: 0.769143,
        FB: 14.4007,
        D: 1.68273,
        HC: 0.018055,
        IC: 0,
        JC: 0
      },
      B: "webkit",
      C: ["", "", "", "", "", "", "", "J", "GB", "K", "E", "F", "G", "A", "B", "C", "L", "M", "H", "N", "O", "P", "HB", "v", "w", "x", "y", "z", "0", "IB", "JB", "KB", "LB", "MB", "NB", "OB", "PB", "QB", "RB", "SB", "TB", "UB", "VB", "WB", "XB", "YB", "ZB", "aB", "bB", "cB", "dB", "eB", "fB", "gB", "hB", "iB", "jB", "kB", "lB", "mB", "nB", "oB", "EC", "pB", "FC", "qB", "rB", "sB", "tB", "uB", "vB", "wB", "xB", "yB", "zB", "0B", "1B", "2B", "3B", "4B", "5B", "6B", "Q", "I", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "1", "2", "3", "4", "5", "6", "7", "8", "9", "AB", "BB", "CB", "DB", "EB", "FB", "D", "HC", "IC", "JC"],
      E: "Chrome",
      F: {
        "0": 1357862400,
        "1": 1680566400,
        "2": 1682985600,
        "3": 1685404800,
        "4": 1689724800,
        "5": 1692057600,
        "6": 1694476800,
        "7": 1696896000,
        "8": 1698710400,
        "9": 1701993600,
        J: 1264377600,
        GB: 1274745600,
        K: 1283385600,
        E: 1287619200,
        F: 1291248000,
        G: 1296777600,
        A: 1299542400,
        B: 1303862400,
        C: 1307404800,
        L: 1312243200,
        M: 1316131200,
        H: 1316131200,
        N: 1319500800,
        O: 1323734400,
        P: 1328659200,
        HB: 1332892800,
        v: 1337040000,
        w: 1340668800,
        x: 1343692800,
        y: 1348531200,
        z: 1352246400,
        IB: 1361404800,
        JB: 1364428800,
        KB: 1369094400,
        LB: 1374105600,
        MB: 1376956800,
        NB: 1384214400,
        OB: 1389657600,
        PB: 1392940800,
        QB: 1397001600,
        RB: 1400544000,
        SB: 1405468800,
        TB: 1409011200,
        UB: 1412640000,
        VB: 1416268800,
        WB: 1421798400,
        XB: 1425513600,
        YB: 1429401600,
        ZB: 1432080000,
        aB: 1437523200,
        bB: 1441152000,
        cB: 1444780800,
        dB: 1449014400,
        eB: 1453248000,
        fB: 1456963200,
        gB: 1460592000,
        hB: 1464134400,
        iB: 1469059200,
        jB: 1472601600,
        kB: 1476230400,
        lB: 1480550400,
        mB: 1485302400,
        nB: 1489017600,
        oB: 1492560000,
        EC: 1496707200,
        pB: 1500940800,
        FC: 1504569600,
        qB: 1508198400,
        rB: 1512518400,
        sB: 1516752000,
        tB: 1520294400,
        uB: 1523923200,
        vB: 1527552000,
        wB: 1532390400,
        xB: 1536019200,
        yB: 1539648000,
        zB: 1543968000,
        "0B": 1548720000,
        "1B": 1552348800,
        "2B": 1555977600,
        "3B": 1559606400,
        "4B": 1564444800,
        "5B": 1568073600,
        "6B": 1571702400,
        Q: 1575936000,
        I: 1580860800,
        R: 1586304000,
        S: 1589846400,
        T: 1594684800,
        U: 1598313600,
        V: 1601942400,
        W: 1605571200,
        X: 1611014400,
        Y: 1614556800,
        Z: 1618272000,
        a: 1621987200,
        b: 1626739200,
        c: 1630368000,
        d: 1632268800,
        e: 1634601600,
        f: 1637020800,
        g: 1641340800,
        h: 1643673600,
        i: 1646092800,
        j: 1648512000,
        k: 1650931200,
        l: 1653350400,
        m: 1655769600,
        n: 1659398400,
        o: 1661817600,
        p: 1664236800,
        q: 1666656000,
        r: 1669680000,
        s: 1673308800,
        t: 1675728000,
        u: 1678147200,
        AB: 1705968000,
        BB: 1708387200,
        CB: 1710806400,
        DB: 1713225600,
        EB: 1715644800,
        FB: 1718064000,
        D: 1721174400,
        HC: null,
        IC: null,
        JC: null
      }
    },
    E: {
      A: {
        J: 0,
        GB: 0,
        K: 0,
        E: 0,
        F: 0,
        G: 0.003611,
        A: 0,
        B: 0,
        C: 0,
        L: 0.007222,
        M: 0.032499,
        H: 0.007222,
        hC: 0,
        KC: 0,
        iC: 0,
        jC: 0,
        kC: 0,
        lC: 0,
        LC: 0,
        "7B": 0.007222,
        "8B": 0.010833,
        mC: 0.061387,
        nC: 0.086664,
        oC: 0.025277,
        MC: 0.010833,
        NC: 0.021666,
        "9B": 0.032499,
        pC: 0.227493,
        AC: 0.028888,
        OC: 0.043332,
        PC: 0.03611,
        QC: 0.10833,
        RC: 0.025277,
        SC: 0.043332,
        qC: 0.299713,
        BC: 0.021666,
        TC: 0.043332,
        UC: 0.043332,
        VC: 0.050554,
        WC: 0.133607,
        XC: 1.76578,
        YC: 0.010833,
        CC: 0.010833,
        rC: 0
      },
      B: "webkit",
      C: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "hC", "KC", "J", "GB", "iC", "K", "jC", "E", "kC", "F", "G", "lC", "A", "LC", "B", "7B", "C", "8B", "L", "mC", "M", "nC", "H", "oC", "MC", "NC", "9B", "pC", "AC", "OC", "PC", "QC", "RC", "SC", "qC", "BC", "TC", "UC", "VC", "WC", "XC", "YC", "CC", "rC"],
      E: "Safari",
      F: {
        hC: 1205798400,
        KC: 1226534400,
        J: 1244419200,
        GB: 1275868800,
        iC: 1311120000,
        K: 1343174400,
        jC: 1382400000,
        E: 1382400000,
        kC: 1410998400,
        F: 1413417600,
        G: 1443657600,
        lC: 1458518400,
        A: 1474329600,
        LC: 1490572800,
        B: 1505779200,
        "7B": 1522281600,
        C: 1537142400,
        "8B": 1553472000,
        L: 1568851200,
        mC: 1585008000,
        M: 1600214400,
        nC: 1619395200,
        H: 1632096000,
        oC: 1635292800,
        MC: 1639353600,
        NC: 1647216000,
        "9B": 1652745600,
        pC: 1658275200,
        AC: 1662940800,
        OC: 1666569600,
        PC: 1670889600,
        QC: 1674432000,
        RC: 1679875200,
        SC: 1684368000,
        qC: 1690156800,
        BC: 1695686400,
        TC: 1698192000,
        UC: 1702252800,
        VC: 1705881600,
        WC: 1709596800,
        XC: 1715558400,
        YC: null,
        CC: null,
        rC: null
      }
    },
    F: {
      A: {
        "0": 0,
        G: 0,
        B: 0,
        C: 0,
        H: 0,
        N: 0,
        O: 0,
        P: 0,
        HB: 0,
        v: 0,
        w: 0,
        x: 0,
        y: 0,
        z: 0,
        IB: 0,
        JB: 0,
        KB: 0,
        LB: 0,
        MB: 0,
        NB: 0,
        OB: 0,
        PB: 0,
        QB: 0,
        RB: 0,
        SB: 0.003611,
        TB: 0,
        UB: 0,
        VB: 0,
        WB: 0.003611,
        XB: 0,
        YB: 0,
        ZB: 0,
        aB: 0,
        bB: 0,
        cB: 0.018055,
        dB: 0,
        eB: 0,
        fB: 0,
        gB: 0,
        hB: 0,
        iB: 0,
        jB: 0,
        kB: 0,
        lB: 0,
        mB: 0,
        nB: 0,
        oB: 0,
        pB: 0,
        qB: 0,
        rB: 0,
        sB: 0,
        tB: 0,
        uB: 0,
        vB: 0,
        wB: 0,
        xB: 0,
        yB: 0,
        zB: 0,
        "0B": 0,
        "1B": 0,
        "2B": 0,
        "3B": 0,
        "4B": 0,
        "5B": 0,
        "6B": 0,
        Q: 0,
        I: 0,
        R: 0,
        GC: 0,
        S: 0.028888,
        T: 0,
        U: 0,
        V: 0,
        W: 0,
        X: 0,
        Y: 0,
        Z: 0,
        a: 0,
        b: 0,
        c: 0,
        d: 0,
        e: 0.039721,
        f: 0,
        g: 0,
        h: 0,
        i: 0,
        j: 0,
        k: 0,
        l: 0.028888,
        m: 0,
        n: 0,
        o: 0,
        p: 0,
        q: 0,
        r: 0,
        s: 0.285269,
        t: 0.010833,
        u: 0.310546,
        sC: 0,
        tC: 0,
        uC: 0,
        vC: 0,
        "7B": 0,
        ZC: 0,
        wC: 0,
        "8B": 0
      },
      B: "webkit",
      C: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "G", "sC", "tC", "uC", "vC", "B", "7B", "ZC", "wC", "C", "8B", "H", "N", "O", "P", "HB", "v", "w", "x", "y", "z", "0", "IB", "JB", "KB", "LB", "MB", "NB", "OB", "PB", "QB", "RB", "SB", "TB", "UB", "VB", "WB", "XB", "YB", "ZB", "aB", "bB", "cB", "dB", "eB", "fB", "gB", "hB", "iB", "jB", "kB", "lB", "mB", "nB", "oB", "pB", "qB", "rB", "sB", "tB", "uB", "vB", "wB", "xB", "yB", "zB", "0B", "1B", "2B", "3B", "4B", "5B", "6B", "Q", "I", "R", "GC", "S", "T", "U", "V", "W", "X", "Y", "Z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "", "", ""],
      E: "Opera",
      F: {
        "0": 1413331200,
        G: 1150761600,
        sC: 1223424000,
        tC: 1251763200,
        uC: 1267488000,
        vC: 1277942400,
        B: 1292457600,
        "7B": 1302566400,
        ZC: 1309219200,
        wC: 1323129600,
        C: 1323129600,
        "8B": 1352073600,
        H: 1372723200,
        N: 1377561600,
        O: 1381104000,
        P: 1386288000,
        HB: 1390867200,
        v: 1393891200,
        w: 1399334400,
        x: 1401753600,
        y: 1405987200,
        z: 1409616000,
        IB: 1417132800,
        JB: 1422316800,
        KB: 1425945600,
        LB: 1430179200,
        MB: 1433808000,
        NB: 1438646400,
        OB: 1442448000,
        PB: 1445904000,
        QB: 1449100800,
        RB: 1454371200,
        SB: 1457308800,
        TB: 1462320000,
        UB: 1465344000,
        VB: 1470096000,
        WB: 1474329600,
        XB: 1477267200,
        YB: 1481587200,
        ZB: 1486425600,
        aB: 1490054400,
        bB: 1494374400,
        cB: 1498003200,
        dB: 1502236800,
        eB: 1506470400,
        fB: 1510099200,
        gB: 1515024000,
        hB: 1517961600,
        iB: 1521676800,
        jB: 1525910400,
        kB: 1530144000,
        lB: 1534982400,
        mB: 1537833600,
        nB: 1543363200,
        oB: 1548201600,
        pB: 1554768000,
        qB: 1561593600,
        rB: 1566259200,
        sB: 1570406400,
        tB: 1573689600,
        uB: 1578441600,
        vB: 1583971200,
        wB: 1587513600,
        xB: 1592956800,
        yB: 1595894400,
        zB: 1600128000,
        "0B": 1603238400,
        "1B": 1613520000,
        "2B": 1612224000,
        "3B": 1616544000,
        "4B": 1619568000,
        "5B": 1623715200,
        "6B": 1627948800,
        Q: 1631577600,
        I: 1633392000,
        R: 1635984000,
        GC: 1638403200,
        S: 1642550400,
        T: 1644969600,
        U: 1647993600,
        V: 1650412800,
        W: 1652745600,
        X: 1654646400,
        Y: 1657152000,
        Z: 1660780800,
        a: 1663113600,
        b: 1668816000,
        c: 1668643200,
        d: 1671062400,
        e: 1675209600,
        f: 1677024000,
        g: 1679529600,
        h: 1681948800,
        i: 1684195200,
        j: 1687219200,
        k: 1690329600,
        l: 1692748800,
        m: 1696204800,
        n: 1699920000,
        o: 1699920000,
        p: 1702944000,
        q: 1707264000,
        r: 1710115200,
        s: 1711497600,
        t: 1716336000,
        u: 1719273600
      },
      D: {
        G: "o",
        B: "o",
        C: "o",
        sC: "o",
        tC: "o",
        uC: "o",
        vC: "o",
        "7B": "o",
        ZC: "o",
        wC: "o",
        "8B": "o"
      }
    },
    G: {
      A: {
        F: 0,
        KC: 0,
        xC: 0,
        aC: 0.00441539,
        yC: 0.0014718,
        zC: 0.00883077,
        "0C": 0.00883077,
        "1C": 0,
        "2C": 0.00735898,
        "3C": 0.0294359,
        "4C": 0.00588718,
        "5C": 0.0515128,
        "6C": 0.135405,
        "7C": 0.014718,
        "8C": 0.0103026,
        "9C": 0.189862,
        AD: 0.00294359,
        BD: 0.0323795,
        CD: 0.0103026,
        DD: 0.0441539,
        ED: 0.13099,
        FD: 0.1148,
        GD: 0.0574,
        MC: 0.0618154,
        NC: 0.0706462,
        "9B": 0.0853641,
        HD: 0.780051,
        AC: 0.15601,
        OC: 0.334098,
        PC: 0.166313,
        QC: 0.279641,
        RC: 0.0662308,
        SC: 0.117744,
        ID: 0.974328,
        BC: 0.0883077,
        TC: 0.142764,
        UC: 0.139821,
        VC: 0.207523,
        WC: 0.518072,
        XC: 9.49014,
        YC: 0.0735898,
        CC: 0.0971385
      },
      B: "webkit",
      C: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "KC", "xC", "aC", "yC", "zC", "0C", "F", "1C", "2C", "3C", "4C", "5C", "6C", "7C", "8C", "9C", "AD", "BD", "CD", "DD", "ED", "FD", "GD", "MC", "NC", "9B", "HD", "AC", "OC", "PC", "QC", "RC", "SC", "ID", "BC", "TC", "UC", "VC", "WC", "XC", "YC", "CC", ""],
      E: "Safari on iOS",
      F: {
        KC: 1270252800,
        xC: 1283904000,
        aC: 1299628800,
        yC: 1331078400,
        zC: 1359331200,
        "0C": 1394409600,
        F: 1410912000,
        "1C": 1413763200,
        "2C": 1442361600,
        "3C": 1458518400,
        "4C": 1473724800,
        "5C": 1490572800,
        "6C": 1505779200,
        "7C": 1522281600,
        "8C": 1537142400,
        "9C": 1553472000,
        AD: 1568851200,
        BD: 1572220800,
        CD: 1580169600,
        DD: 1585008000,
        ED: 1600214400,
        FD: 1619395200,
        GD: 1632096000,
        MC: 1639353600,
        NC: 1647216000,
        "9B": 1652659200,
        HD: 1658275200,
        AC: 1662940800,
        OC: 1666569600,
        PC: 1670889600,
        QC: 1674432000,
        RC: 1679875200,
        SC: 1684368000,
        ID: 1690156800,
        BC: 1694995200,
        TC: 1698192000,
        UC: 1702252800,
        VC: 1705881600,
        WC: 1709596800,
        XC: 1715558400,
        YC: null,
        CC: null
      }
    },
    H: {
      A: {
        JD: 0.05
      },
      B: "o",

      E: "Opera Mini",
      F: {
        JD: 1426464000
      }
    },
    I: {
      A: {
        DC: 0,
        J: 0.0000811276,
        D: 0.808599,
        KD: 0,
        LD: 0.000162255,
        MD: 0,
        ND: 0.000486766,
        aC: 0.00032451,
        OD: 0,
        PD: 0.00129804
      },
      B: "webkit",
aC", "OD", "PD", "D", "", "", ""],
      E: "Android Browser",
      F: {
        KD: 1256515200,
        LD: 1274313600,
        MD: 1291593600,
        DC: 1298332800,
        J: 1318896000,
        ND: 1341792000,
        aC: 1374624000,
        OD: 1386547200,
        PD: 1401667200,
        D: 1721692800
      }
    },
    J: {
      A: {
        E: 0,
        A: 0
      },
      B: "webkit",

      E: "Blackberry Browser",
      F: {
        E: 1325376000,
        A: 1359504000
      }
    },
    K: {
      A: {
        A: 0,
        B: 0,
        C: 0,
        I: 1.119,
        "7B": 0,
        ZC: 0,
        "8B": 0
      },
      B: "o",

      E: "Opera Mobile",
      F: {
        A: 1287100800,
        B: 1300752000,
        "7B": 1314835200,
        ZC: 1318291200,
        C: 1330300800,
        "8B": 1349740800,
        I: 1709769600
      },
      D: {
        I: "webkit"
      }
    },
    L: {
      A: {
        D: 44.0982
      },
      B: "webkit",

      E: "Chrome for Android",
      F: {
        D: 1721692800
      }
    },
    M: {
      A: {
        D: 0.35134
      },
      B: "moz",

      E: "Firefox for Android",
      F: {
        D: 1718064000
      }
    },
    N: {
      A: {
        A: 0,
        B: 0
      },
      B: "ms",

      E: "IE Mobile",
      F: {
        A: 1340150400,
        B: 1353456000
      }
    },
    O: {
      A: {
        "9B": 1.05402
      },
      B: "webkit",
      C: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "9B", "", "", ""],
      E: "UC Browser for Android",
      F: {
        "9B": 1710115200
      },
      D: {
        "9B": "webkit"
      }
    },
    P: {
      A: {
        "0": 1.65553,
        J: 0.0973844,
        v: 0.021641,
        w: 0.043282,
        x: 0.0649229,
        y: 0.0757434,
        z: 0.0757434,
        QD: 0.0108205,
        RD: 0.0108205,
        SD: 0.0324615,
        TD: 0,
        UD: 0,
        LC: 0,
        VD: 0,
        WD: 0,
        XD: 0.0108205,
        YD: 0,
        ZD: 0,
        AC: 0,
        BC: 0.021641,
        CC: 0.0108205,
        aD: 0.021641
      },
      B: "webkit",
      C: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "J", "QD", "RD", "SD", "TD", "UD", "LC", "VD", "WD", "XD", "YD", "ZD", "AC", "BC", "CC", "aD", "v", "w", "x", "y", "z", "0", "", "", ""],
      E: "Samsung Internet",
      F: {
        "0": 1715126400,
        J: 1461024000,
        QD: 1481846400,
        RD: 1509408000,
        SD: 1528329600,
        TD: 1546128000,
        UD: 1554163200,
        LC: 1567900800,
        VD: 1582588800,
        WD: 1593475200,
        XD: 1605657600,
        YD: 1618531200,
        ZD: 1629072000,
        AC: 1640736000,
        BC: 1651708800,
        CC: 1659657600,
        aD: 1667260800,
        v: 1677369600,
        w: 1684454400,
        x: 1689292800,
        y: 1697587200,
        z: 1711497600
      }
    },
    Q: {
      A: {
        bD: 0.338564
      },
      B: "webkit",
      C: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "bD", "", "", ""],
      E: "QQ Browser",
      F: {
        bD: 1710288000
      }
    },
    R: {
      A: {
        cD: 0
      },
      B: "webkit",
cD", "", "", ""],
      E: "Baidu Browser",
      F: {
        cD: 1710201600
      }
    },
    S: {
      A: {
        dD: 0.070268,
        eD: 0
      },
      B: "moz",
dD", "eD", "", "", ""],
      E: "KaiOS Browser",
      F: {
        dD: 1527811200,
        eD: 1631664000
      }
    }
  };
  return exports$1o;
}

var exports$1n = {},
  _dewExec$1m = false;
function dew$1m() {
  if (_dewExec$1m) return exports$1n;
  _dewExec$1m = true;
  const browsers = dew$1q().browsers;
  const versions = dew$1o().browserVersions;
  const agentsData = dew$1n();
  function unpackBrowserVersions(versionsData) {
    return Object.keys(versionsData).reduce((usage, version) => {
      usage[versions[version]] = versionsData[version];
      return usage;
    }, {});
  }
  exports$1n.agents = Object.keys(agentsData).reduce((map, key) => {
    let versionsData = agentsData[key];
    map[browsers[key]] = Object.keys(versionsData).reduce((data, entry) => {
      if (entry === "A") {
        data.usage_global = unpackBrowserVersions(versionsData[entry]);
      } else if (entry === "C") {
        data.versions = versionsData[entry].reduce((list, version) => {
          if (version === "") {
            list.push(null);
          } else {
            list.push(versions[version]);
          }
          return list;
        }, []);
      } else if (entry === "D") {
        data.prefix_exceptions = unpackBrowserVersions(versionsData[entry]);
      } else if (entry === "E") {
        data.browser = versionsData[entry];
      } else if (entry === "F") {
        data.release_date = Object.keys(versionsData[entry]).reduce((map2, key2) => {
          map2[versions[key2]] = versionsData[entry][key2];
          return map2;
        }, {});
      } else {
        // entry is B
        data.prefix = versionsData[entry];
      }
      return data;
    }, {});
    return map;
  }, {});
  return exports$1n;
}

var _releaseSchedule = {"v0.8":{"start":"2012-06-25","end":"2014-07-31"},"v0.10":{"start":"2013-03-11","end":"2016-10-31"},"v0.12":{"start":"2015-02-06","end":"2016-12-31"},"v4":{"start":"2015-09-08","lts":"2015-10-12","maintenance":"2017-04-01","end":"2018-04-30","codename":"Argon"},"v5":{"start":"2015-10-29","maintenance":"2016-04-30","end":"2016-06-30"},"v6":{"start":"2016-04-26","lts":"2016-10-18","maintenance":"2018-04-30","end":"2019-04-30","codename":"Boron"},"v7":{"start":"2016-10-25","maintenance":"2017-04-30","end":"2017-06-30"},"v8":{"start":"2017-05-30","lts":"2017-10-31","maintenance":"2019-01-01","end":"2019-12-31","codename":"Carbon"},"v9":{"start":"2017-10-01","maintenance":"2018-04-01","end":"2018-06-30"},"v10":{"start":"2018-04-24","lts":"2018-10-30","maintenance":"2020-05-19","end":"2021-04-30","codename":"Dubnium"},"v11":{"start":"2018-10-23","maintenance":"2019-04-22","end":"2019-06-01"},"v12":{"start":"2019-04-23","lts":"2019-10-21","maintenance":"2020-11-30","end":"2022-04-30","codename":"Erbium"},"v13":{"start":"2019-10-22","maintenance":"2020-04-01","end":"2020-06-01"},"v14":{"start":"2020-04-21","lts":"2020-10-27","maintenance":"2021-10-19","end":"2023-04-30","codename":"Fermium"},"v15":{"start":"2020-10-20","maintenance":"2021-04-01","end":"2021-06-01"},"v16":{"start":"2021-04-20","lts":"2021-10-26","maintenance":"2022-10-18","end":"2023-09-11","codename":"Gallium"},"v17":{"start":"2021-10-19","maintenance":"2022-04-01","end":"2022-06-01"},"v18":{"start":"2022-04-19","lts":"2022-10-25","maintenance":"2023-10-18","end":"2025-04-30","codename":"Hydrogen"},"v19":{"start":"2022-10-18","maintenance":"2023-04-01","end":"2023-06-01"},"v20":{"start":"2023-04-18","lts":"2023-10-24","maintenance":"2024-10-22","end":"2026-04-30","codename":"Iron"},"v21":{"start":"2023-10-17","maintenance":"2024-04-01","end":"2024-06-01"},"v22":{"start":"2024-04-24","lts":"2024-10-29","maintenance":"2025-10-21","end":"2027-04-30","codename":""},"v23":{"start":"2024-10-15","maintenance":"2025-04-01","end":"2025-06-01"},"v24":{"start":"2025-04-22","lts":"2025-10-28","maintenance":"2026-10-20","end":"2028-04-30","codename":""}};

var exports$1m = {},
  _dewExec$1l = false;
function dew$1l() {
  if (_dewExec$1l) return exports$1m;
  _dewExec$1l = true;
  exports$1m = {
    "0.20": "39",
    "0.21": "41",
    "0.22": "41",
    "0.23": "41",
    "0.24": "41",
    "0.25": "42",
    "0.26": "42",
    "0.27": "43",
    "0.28": "43",
    "0.29": "43",
    "0.30": "44",
    "0.31": "45",
    "0.32": "45",
    "0.33": "45",
    "0.34": "45",
    "0.35": "45",
    "0.36": "47",
    "0.37": "49",
    "1.0": "49",
    "1.1": "50",
    "1.2": "51",
    "1.3": "52",
    "1.4": "53",
    "1.5": "54",
    "1.6": "56",
    "1.7": "58",
    "1.8": "59",
    "2.0": "61",
    "2.1": "61",
    "3.0": "66",
    "3.1": "66",
    "4.0": "69",
    "4.1": "69",
    "4.2": "69",
    "5.0": "73",
    "6.0": "76",
    "6.1": "76",
    "7.0": "78",
    "7.1": "78",
    "7.2": "78",
    "7.3": "78",
    "8.0": "80",
    "8.1": "80",
    "8.2": "80",
    "8.3": "80",
    "8.4": "80",
    "8.5": "80",
    "9.0": "83",
    "9.1": "83",
    "9.2": "83",
    "9.3": "83",
    "9.4": "83",
    "10.0": "85",
    "10.1": "85",
    "10.2": "85",
    "10.3": "85",
    "10.4": "85",
    "11.0": "87",
    "11.1": "87",
    "11.2": "87",
    "11.3": "87",
    "11.4": "87",
    "11.5": "87",
    "12.0": "89",
    "12.1": "89",
    "12.2": "89",
    "13.0": "91",
    "13.1": "91",
    "13.2": "91",
    "13.3": "91",
    "13.4": "91",
    "13.5": "91",
    "13.6": "91",
    "14.0": "93",
    "14.1": "93",
    "14.2": "93",
    "15.0": "94",
    "15.1": "94",
    "15.2": "94",
    "15.3": "94",
    "15.4": "94",
    "15.5": "94",
    "16.0": "96",
    "16.1": "96",
    "16.2": "96",
    "17.0": "98",
    "17.1": "98",
    "17.2": "98",
    "17.3": "98",
    "17.4": "98",
    "18.0": "100",
    "18.1": "100",
    "18.2": "100",
    "18.3": "100",
    "19.0": "102",
    "19.1": "102",
    "20.0": "104",
    "20.1": "104",
    "20.2": "104",
    "20.3": "104",
    "21.0": "106",
    "21.1": "106",
    "21.2": "106",
    "21.3": "106",
    "21.4": "106",
    "22.0": "108",
    "22.1": "108",
    "22.2": "108",
    "22.3": "108",
    "23.0": "110",
    "23.1": "110",
    "23.2": "110",
    "23.3": "110",
    "24.0": "112",
    "24.1": "112",
    "24.2": "112",
    "24.3": "112",
    "24.4": "112",
    "24.5": "112",
    "24.6": "112",
    "24.7": "112",
    "24.8": "112",
    "25.0": "114",
    "25.1": "114",
    "25.2": "114",
    "25.3": "114",
    "25.4": "114",
    "25.5": "114",
    "25.6": "114",
    "25.7": "114",
    "25.8": "114",
    "25.9": "114",
    "26.0": "116",
    "26.1": "116",
    "26.2": "116",
    "26.3": "116",
    "26.4": "116",
    "26.5": "116",
    "26.6": "116",
    "27.0": "118",
    "27.1": "118",
    "27.2": "118",
    "27.3": "118",
    "28.0": "120",
    "28.1": "120",
    "28.2": "120",
    "28.3": "120",
    "29.0": "122",
    "29.1": "122",
    "29.2": "122",
    "29.3": "122",
    "29.4": "122",
    "30.0": "124",
    "30.1": "124",
    "30.2": "124",
    "30.3": "124",
    "31.0": "126",
    "31.1": "126",
    "31.2": "126",
    "31.3": "126",
    "32.0": "128"
  };
  return exports$1m;
}

var exports$1l = {},
  _dewExec$1k = false;
var _global$1 = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
function dew$1k() {
  if (_dewExec$1k) return exports$1l;
  _dewExec$1k = true;
  function BrowserslistError(message) {
    (this || _global$1).name = "BrowserslistError";
    (this || _global$1).message = message;
    (this || _global$1).browserslist = true;
    if (Error.captureStackTrace) {
      Error.captureStackTrace(this || _global$1, BrowserslistError);
    }
  }
  BrowserslistError.prototype = Error.prototype;
  exports$1l = BrowserslistError;
  return exports$1l;
}

var exports$1k = {},
  _dewExec$1j = false;
function dew$1j() {
  if (_dewExec$1j) return exports$1k;
  _dewExec$1j = true;
  var AND_REGEXP = /^\s+and\s+(.*)/i;
  var OR_REGEXP = /^(?:,\s*|\s+or\s+)(.*)/i;
  function flatten(array) {
    if (!Array.isArray(array)) return [array];
    return array.reduce(function (a, b) {
      return a.concat(flatten(b));
    }, []);
  }
  function find(string, predicate) {
    for (var n = 1, max = string.length; n <= max; n++) {
      var parsed = string.substr(-n, n);
      if (predicate(parsed, n, max)) {
        return string.slice(0, -n);
      }
    }
    return "";
  }
  function matchQuery(all, query) {
    var node = {
      query: query
    };
    if (query.indexOf("not ") === 0) {
      node.not = true;
      query = query.slice(4);
    }
    for (var name in all) {
      var type = all[name];
      var match = query.match(type.regexp);
      if (match) {
        node.type = name;
        for (var i = 0; i < type.matches.length; i++) {
          node[type.matches[i]] = match[i + 1];
        }
        return node;
      }
    }
    node.type = "unknown";
    return node;
  }
  function matchBlock(all, string, qs) {
    var node;
    return find(string, function (parsed, n, max) {
      if (AND_REGEXP.test(parsed)) {
        node = matchQuery(all, parsed.match(AND_REGEXP)[1]);
        node.compose = "and";
        qs.unshift(node);
        return true;
      } else if (OR_REGEXP.test(parsed)) {
        node = matchQuery(all, parsed.match(OR_REGEXP)[1]);
        node.compose = "or";
        qs.unshift(node);
        return true;
      } else if (n === max) {
        node = matchQuery(all, parsed.trim());
        node.compose = "or";
        qs.unshift(node);
        return true;
      }
      return false;
    });
  }
  exports$1k = function parse(all, queries) {
    if (!Array.isArray(queries)) queries = [queries];
    return flatten(queries.map(function (block) {
      var qs = [];
      do {
        block = matchBlock(all, block, qs);
      } while (block);
      return qs;
    }));
  };
  return exports$1k;
}

var exports$1j = {},
  _dewExec$1i = false;
function dew$1i() {
  if (_dewExec$1i) return exports$1j;
  _dewExec$1i = true;
  exports$1j = {
    1: "ls",
    // WHATWG Living Standard
    2: "rec",
    // W3C Recommendation
    3: "pr",
    // W3C Proposed Recommendation
    4: "cr",
    // W3C Candidate Recommendation
    5: "wd",
    // W3C Working Draft
    6: "other",
    // Non-W3C, but reputable
    7: "unoff" // Unofficial, Editor's Draft or W3C "Note"
  };
  return exports$1j;
}

var exports$1i = {},
  _dewExec$1h = false;
function dew$1h() {
  if (_dewExec$1h) return exports$1i;
  _dewExec$1h = true;
  exports$1i = {
    y: 1 << 0,
    n: 1 << 1,
    a: 1 << 2,
    p: 1 << 3,
    u: 1 << 4,
    x: 1 << 5,
    d: 1 << 6
  };
  return exports$1i;
}

var exports$1h = {},
  _dewExec$1g = false;
function dew$1g() {
  if (_dewExec$1g) return exports$1h;
  _dewExec$1g = true;
  const statuses = dew$1i();
  const supported = dew$1h();
  const browsers = dew$1q().browsers;
  const versions = dew$1o().browserVersions;
  const MATH2LOG = Math.log(2);
  function unpackSupport(cipher) {
    // bit flags
    let stats = Object.keys(supported).reduce((list, support) => {
      if (cipher & supported[support]) list.push(support);
      return list;
    }, []);

    // notes
    let notes = cipher >> 7;
    let notesArray = [];
    while (notes) {
      let note = Math.floor(Math.log(notes) / MATH2LOG) + 1;
      notesArray.unshift(`#${note}`);
      notes -= Math.pow(2, note - 1);
    }
    return stats.concat(notesArray).join(" ");
  }
  function unpackFeature(packed) {
    let unpacked = {
      status: statuses[packed.B],
      title: packed.C,
      shown: packed.D
    };
    unpacked.stats = Object.keys(packed.A).reduce((browserStats, key) => {
      let browser = packed.A[key];
      browserStats[browsers[key]] = Object.keys(browser).reduce((stats, support) => {
        let packedVersions = browser[support].split(" ");
        let unpacked2 = unpackSupport(support);
        packedVersions.forEach(v => stats[versions[v]] = unpacked2);
        return stats;
      }, {});
      return browserStats;
    }, {});
    return unpacked;
  }
  exports$1h = unpackFeature;
  exports$1h.default = unpackFeature;
  return exports$1h;
}

var exports$1g = {},
  _dewExec$1f = false;
function dew$1f() {
  if (_dewExec$1f) return exports$1g;
  _dewExec$1f = true;
  const browsers = dew$1q().browsers;
  function unpackRegion(packed) {
    return Object.keys(packed).reduce((list, browser) => {
      let data = packed[browser];
      list[browsers[browser]] = Object.keys(data).reduce((memo, key) => {
        let stats = data[key];
        if (key === "_") {
          stats.split(" ").forEach(version => memo[version] = null);
        } else {
          memo[key] = stats;
        }
        return memo;
      }, {});
      return list;
    }, {});
  }
  exports$1g = unpackRegion;
  exports$1g.default = unpackRegion;
  return exports$1g;
}

var exports$1f = {},
  _dewExec$1e = false;
var _global = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : global;
function dew$1e() {
  if (_dewExec$1e) return exports$1f;
  _dewExec$1e = true;
  var _nodeRequire = function () {
    var Module = _nodeModule.Module;
    if (Module) {
      var m = new Module("");
      m.filename = import.meta.url.substr(7 + (Module._nodeModulePaths("/")[0].length > 13));
      m.paths = Module._nodeModulePaths(m.filename.substr(0, m.filename.lastIndexOf("/")));
      return Object.assign(m.require.bind(m), {
        resolve: function (id) {
          return Module._resolveFilename(id, m);
        }
      });
    } else {
      return function _nodeRequire(id) {
        var e = new Error("Cannot find module '" + id + "'");
        e.code = "MODULE_NOT_FOUND";
        throw e;
      };
    }
  }();
  var process = _nodeProcess;
  var feature = dew$1g().default;
  var region = dew$1f().default;
  var path = _path2;
  var fs = _fs2;
  var BrowserslistError = dew$1k();
  var IS_SECTION = /^\s*\[(.+)]\s*$/;
  var CONFIG_PATTERN = /^browserslist-config-/;
  var SCOPED_CONFIG__PATTERN = /@[^/]+(?:\/[^/]+)?\/browserslist-config(?:-|$|\/)/;
  var TIME_TO_UPDATE_CANIUSE = 6 * 30 * 24 * 60 * 60 * 1000;
  var FORMAT = "Browserslist config should be a string or an array " + "of strings with browser queries";
  var dataTimeChecked = false;
  var filenessCache = {};
  var configCache = {};
  function checkExtend(name) {
    var use = " Use `dangerousExtend` option to disable.";
    if (!CONFIG_PATTERN.test(name) && !SCOPED_CONFIG__PATTERN.test(name)) {
      throw new BrowserslistError("Browserslist config needs `browserslist-config-` prefix. " + use);
    }
    if (name.replace(/^@[^/]+\//, "").indexOf(".") !== -1) {
      throw new BrowserslistError("`.` not allowed in Browserslist config name. " + use);
    }
    if (name.indexOf("node_modules") !== -1) {
      throw new BrowserslistError("`node_modules` not allowed in Browserslist config." + use);
    }
  }
  function isFile(file) {
    if (file in filenessCache) {
      return filenessCache[file];
    }
    var result = fs.existsSync(file) && fs.statSync(file).isFile();
    if (!process.env.BROWSERSLIST_DISABLE_CACHE) {
      filenessCache[file] = result;
    }
    return result;
  }
  function eachParent(file, callback) {
    var dir = isFile(file) ? path.dirname(file) : file;
    var loc = path.resolve(dir);
    do {
      if (!pathInRoot(loc)) break;
      var result = callback(loc);
      if (typeof result !== "undefined") return result;
    } while (loc !== (loc = path.dirname(loc)));
    return undefined;
  }
  function pathInRoot(p) {
    if (!process.env.BROWSERSLIST_ROOT_PATH) return true;
    var rootPath = path.resolve(process.env.BROWSERSLIST_ROOT_PATH);
    if (path.relative(rootPath, p).substring(0, 2) === "..") {
      return false;
    }
    return true;
  }
  function check(section) {
    if (Array.isArray(section)) {
      for (var i = 0; i < section.length; i++) {
        if (typeof section[i] !== "string") {
          throw new BrowserslistError(FORMAT);
        }
      }
    } else if (typeof section !== "string") {
      throw new BrowserslistError(FORMAT);
    }
  }
  function pickEnv(config, opts) {
    if (typeof config !== "object") return config;
    var name;
    if (typeof opts.env === "string") {
      name = opts.env;
    } else if (process.env.BROWSERSLIST_ENV) {
      name = process.env.BROWSERSLIST_ENV;
    } else {
      name = "dev";
    }
    if (opts.throwOnMissing) {
      if (name && name !== "defaults" && !config[name]) {
        throw new BrowserslistError("Missing config for Browserslist environment `" + name + "`");
      }
    }
    return config[name] || config.defaults;
  }
  function parsePackage(file) {
    var config = JSON.parse(fs.readFileSync(file).toString().replace(/^\uFEFF/m, ""));
    if (config.browserlist && !config.browserslist) {
      throw new BrowserslistError("`browserlist` key instead of `browserslist` in " + file);
    }
    var list = config.browserslist;
    if (Array.isArray(list) || typeof list === "string") {
      list = {
        defaults: list
      };
    }
    for (var i in list) {
      check(list[i]);
    }
    return list;
  }
  function latestReleaseTime(agents) {
    var latest = 0;
    for (var name in agents) {
      var dates = agents[name].releaseDate || {};
      for (var key in dates) {
        if (latest < dates[key]) {
          latest = dates[key];
        }
      }
    }
    return latest * 1000;
  }
  function normalizeStats(data, stats) {
    if (!data) {
      data = {};
    }
    if (stats && "dataByBrowser" in stats) {
      stats = stats.dataByBrowser;
    }
    if (typeof stats !== "object") return undefined;
    var normalized = {};
    for (var i in stats) {
      var versions = Object.keys(stats[i]);
      if (versions.length === 1 && data[i] && data[i].versions.length === 1) {
        var normal = data[i].versions[0];
        normalized[i] = {};
        normalized[i][normal] = stats[i][versions[0]];
      } else {
        normalized[i] = stats[i];
      }
    }
    return normalized;
  }
  function normalizeUsageData(usageData, data) {
    for (var browser in usageData) {
      var browserUsage = usageData[browser];
      // https://github.com/browserslist/browserslist/issues/431#issuecomment-565230615
      // caniuse-db returns { 0: "percentage" } for `and_*` regional stats
      if ("0" in browserUsage) {
        var versions = data[browser].versions;
        browserUsage[versions[versions.length - 1]] = browserUsage[0];
        delete browserUsage[0];
      }
    }
  }
  exports$1f = {
    loadQueries: function loadQueries(ctx, name) {
      if (!ctx.dangerousExtend && !process.env.BROWSERSLIST_DANGEROUS_EXTEND) {
        checkExtend(name);
      }
      var queries = _nodeRequire(_nodeRequire.resolve(name, {
        paths: [".", ctx.path]
      }));
      if (queries) {
        if (Array.isArray(queries)) {
          return queries;
        } else if (typeof queries === "object") {
          if (!queries.defaults) queries.defaults = [];
          return pickEnv(queries, ctx);
        }
      }
      throw new BrowserslistError("`" + name + "` config exports not an array of queries" + " or an object of envs");
    },
    loadStat: function loadStat(ctx, name, data) {
      if (!ctx.dangerousExtend && !process.env.BROWSERSLIST_DANGEROUS_EXTEND) {
        checkExtend(name);
      }
      var stats = _nodeRequire(_nodeRequire.resolve(path.join(name, "browserslist-stats.json"), {
        paths: ["."]
      }));
      return normalizeStats(data, stats);
    },
    getStat: function getStat(opts, data) {
      var stats;
      if (opts.stats) {
        stats = opts.stats;
      } else if (process.env.BROWSERSLIST_STATS) {
        stats = process.env.BROWSERSLIST_STATS;
      } else if (opts.path && path.resolve && fs.existsSync) {
        stats = eachParent(opts.path, function (dir) {
          var file = path.join(dir, "browserslist-stats.json");
          return isFile(file) ? file : undefined;
        });
      }
      if (typeof stats === "string") {
        try {
          stats = JSON.parse(fs.readFileSync(stats));
        } catch (e) {
          throw new BrowserslistError("Can't read " + stats);
        }
      }
      return normalizeStats(data, stats);
    },
    loadConfig: function loadConfig(opts) {
      if (process.env.BROWSERSLIST) {
        return process.env.BROWSERSLIST;
      } else if (opts.config || process.env.BROWSERSLIST_CONFIG) {
        var file = opts.config || process.env.BROWSERSLIST_CONFIG;
        if (path.basename(file) === "package.json") {
          return pickEnv(parsePackage(file), opts);
        } else {
          return pickEnv(exports$1f.readConfig(file), opts);
        }
      } else if (opts.path) {
        return pickEnv(exports$1f.findConfig(opts.path), opts);
      } else {
        return undefined;
      }
    },
    loadCountry: function loadCountry(usage, country, data) {
      var code = country.replace(/[^\w-]/g, "");
      if (!usage[code]) {
        var compressed;
        try {
          compressed = _nodeRequire("caniuse-lite/data/regions/" + code + ".js");
        } catch (e) {
          throw new BrowserslistError("Unknown region name `" + code + "`.");
        }
        var usageData = region(compressed);
        normalizeUsageData(usageData, data);
        usage[country] = {};
        for (var i in usageData) {
          for (var j in usageData[i]) {
            usage[country][i + " " + j] = usageData[i][j];
          }
        }
      }
    },
    loadFeature: function loadFeature(features, name) {
      name = name.replace(/[^\w-]/g, "");
      if (features[name]) return;
      var compressed;
      try {
        compressed = _nodeRequire("caniuse-lite/data/features/" + name + ".js");
      } catch (e) {
        throw new BrowserslistError("Unknown feature name `" + name + "`.");
      }
      var stats = feature(compressed).stats;
      features[name] = {};
      for (var i in stats) {
        features[name][i] = {};
        for (var j in stats[i]) {
          features[name][i][j] = stats[i][j];
        }
      }
    },
    parseConfig: function parseConfig(string) {
      var result = {
        defaults: []
      };
      var sections = ["defaults"];
      string.toString().replace(/#[^\n]*/g, "").split(/\n|,/).map(function (line) {
        return line.trim();
      }).filter(function (line) {
        return line !== "";
      }).forEach(function (line) {
        if (IS_SECTION.test(line)) {
          sections = line.match(IS_SECTION)[1].trim().split(" ");
          sections.forEach(function (section) {
            if (result[section]) {
              throw new BrowserslistError("Duplicate section " + section + " in Browserslist config");
            }
            result[section] = [];
          });
        } else {
          sections.forEach(function (section) {
            result[section].push(line);
          });
        }
      });
      return result;
    },
    readConfig: function readConfig(file) {
      if (!isFile(file)) {
        throw new BrowserslistError("Can't read " + file + " config");
      }
      return exports$1f.parseConfig(fs.readFileSync(file));
    },
    findConfig: function findConfig(from) {
      from = path.resolve(from);
      var passed = [];
      var resolved = eachParent(from, function (dir) {
        if (dir in configCache) {
          return configCache[dir];
        }
        passed.push(dir);
        var config = path.join(dir, "browserslist");
        var pkg = path.join(dir, "package.json");
        var rc = path.join(dir, ".browserslistrc");
        var pkgBrowserslist;
        if (isFile(pkg)) {
          try {
            pkgBrowserslist = parsePackage(pkg);
          } catch (e) {
            if (e.name === "BrowserslistError") throw e;
            console.warn("[Browserslist] Could not parse " + pkg + ". Ignoring it.");
          }
        }
        if (isFile(config) && pkgBrowserslist) {
          throw new BrowserslistError(dir + " contains both browserslist and package.json with browsers");
        } else if (isFile(rc) && pkgBrowserslist) {
          throw new BrowserslistError(dir + " contains both .browserslistrc and package.json with browsers");
        } else if (isFile(config) && isFile(rc)) {
          throw new BrowserslistError(dir + " contains both .browserslistrc and browserslist");
        } else if (isFile(config)) {
          return exports$1f.readConfig(config);
        } else if (isFile(rc)) {
          return exports$1f.readConfig(rc);
        } else {
          return pkgBrowserslist;
        }
      });
      if (!process.env.BROWSERSLIST_DISABLE_CACHE) {
        passed.forEach(function (dir) {
          configCache[dir] = resolved;
        });
      }
      return resolved;
    },
    clearCaches: function clearCaches() {
      dataTimeChecked = false;
      filenessCache = {};
      configCache = {};
      (this || _global).cache = {};
    },
    oldDataWarning: function oldDataWarning(agentsObj) {
      if (dataTimeChecked) return;
      dataTimeChecked = true;
      if (process.env.BROWSERSLIST_IGNORE_OLD_DATA) return;
      var latest = latestReleaseTime(agentsObj);
      var halfYearAgo = Date.now() - TIME_TO_UPDATE_CANIUSE;
      if (latest !== 0 && latest < halfYearAgo) {
        console.warn("Browserslist: caniuse-lite is outdated. Please run:\n" + "  npx update-browserslist-db@latest\n" + "  Why you should do it regularly: " + "https://github.com/browserslist/update-db#readme");
      }
    },
    currentNode: function currentNode() {
      return "node " + process.versions.node;
    },
    env: process.env
  };
  return exports$1f;
}

var exports$1e = {},
  _dewExec$1d = false;
function dew$1d() {
  if (_dewExec$1d) return exports$1e;
  _dewExec$1d = true;
  var jsReleases = _envs;
  var agents = dew$1m().agents;
  var jsEOL = _releaseSchedule;
  var path = _path2;
  var e2c = dew$1l();
  var BrowserslistError = dew$1k();
  var parse = dew$1j();
  var env = dew$1e(); // Will load browser.js in webpack

  var YEAR = 365.259641 * 24 * 60 * 60 * 1000;
  var ANDROID_EVERGREEN_FIRST = "37";
  var OP_MOB_BLINK_FIRST = 14;

  // Helpers

  function isVersionsMatch(versionA, versionB) {
    return (versionA + ".").indexOf(versionB + ".") === 0;
  }
  function isEolReleased(name) {
    var version = name.slice(1);
    return browserslist.nodeVersions.some(function (i) {
      return isVersionsMatch(i, version);
    });
  }
  function normalize(versions) {
    return versions.filter(function (version) {
      return typeof version === "string";
    });
  }
  function normalizeElectron(version) {
    var versionToUse = version;
    if (version.split(".").length === 3) {
      versionToUse = version.split(".").slice(0, -1).join(".");
    }
    return versionToUse;
  }
  function nameMapper(name) {
    return function mapName(version) {
      return name + " " + version;
    };
  }
  function getMajor(version) {
    return parseInt(version.split(".")[0]);
  }
  function getMajorVersions(released, number) {
    if (released.length === 0) return [];
    var majorVersions = uniq(released.map(getMajor));
    var minimum = majorVersions[majorVersions.length - number];
    if (!minimum) {
      return released;
    }
    var selected = [];
    for (var i = released.length - 1; i >= 0; i--) {
      if (minimum > getMajor(released[i])) break;
      selected.unshift(released[i]);
    }
    return selected;
  }
  function uniq(array) {
    var filtered = [];
    for (var i = 0; i < array.length; i++) {
      if (filtered.indexOf(array[i]) === -1) filtered.push(array[i]);
    }
    return filtered;
  }
  function fillUsage(result, name, data) {
    for (var i in data) {
      result[name + " " + i] = data[i];
    }
  }
  function generateFilter(sign, version) {
    version = parseFloat(version);
    if (sign === ">") {
      return function (v) {
        return parseLatestFloat(v) > version;
      };
    } else if (sign === ">=") {
      return function (v) {
        return parseLatestFloat(v) >= version;
      };
    } else if (sign === "<") {
      return function (v) {
        return parseFloat(v) < version;
      };
    } else {
      return function (v) {
        return parseFloat(v) <= version;
      };
    }
    function parseLatestFloat(v) {
      return parseFloat(v.split("-")[1] || v);
    }
  }
  function generateSemverFilter(sign, version) {
    version = version.split(".").map(parseSimpleInt);
    version[1] = version[1] || 0;
    version[2] = version[2] || 0;
    if (sign === ">") {
      return function (v) {
        v = v.split(".").map(parseSimpleInt);
        return compareSemver(v, version) > 0;
      };
    } else if (sign === ">=") {
      return function (v) {
        v = v.split(".").map(parseSimpleInt);
        return compareSemver(v, version) >= 0;
      };
    } else if (sign === "<") {
      return function (v) {
        v = v.split(".").map(parseSimpleInt);
        return compareSemver(version, v) > 0;
      };
    } else {
      return function (v) {
        v = v.split(".").map(parseSimpleInt);
        return compareSemver(version, v) >= 0;
      };
    }
  }
  function parseSimpleInt(x) {
    return parseInt(x);
  }
  function compare(a, b) {
    if (a < b) return -1;
    if (a > b) return +1;
    return 0;
  }
  function compareSemver(a, b) {
    return compare(parseInt(a[0]), parseInt(b[0])) || compare(parseInt(a[1] || "0"), parseInt(b[1] || "0")) || compare(parseInt(a[2] || "0"), parseInt(b[2] || "0"));
  }

  // this follows the npm-like semver behavior
  function semverFilterLoose(operator, range) {
    range = range.split(".").map(parseSimpleInt);
    if (typeof range[1] === "undefined") {
      range[1] = "x";
    }
    // ignore any patch version because we only return minor versions
    // range[2] = 'x'
    switch (operator) {
      case "<=":
        return function (version) {
          version = version.split(".").map(parseSimpleInt);
          return compareSemverLoose(version, range) <= 0;
        };
      case ">=":
      default:
        return function (version) {
          version = version.split(".").map(parseSimpleInt);
          return compareSemverLoose(version, range) >= 0;
        };
    }
  }

  // this follows the npm-like semver behavior
  function compareSemverLoose(version, range) {
    if (version[0] !== range[0]) {
      return version[0] < range[0] ? -1 : +1;
    }
    if (range[1] === "x") {
      return 0;
    }
    if (version[1] !== range[1]) {
      return version[1] < range[1] ? -1 : +1;
    }
    return 0;
  }
  function resolveVersion(data, version) {
    if (data.versions.indexOf(version) !== -1) {
      return version;
    } else if (browserslist.versionAliases[data.name][version]) {
      return browserslist.versionAliases[data.name][version];
    } else {
      return false;
    }
  }
  function normalizeVersion(data, version) {
    var resolved = resolveVersion(data, version);
    if (resolved) {
      return resolved;
    } else if (data.versions.length === 1) {
      return data.versions[0];
    } else {
      return false;
    }
  }
  function filterByYear(since, context) {
    since = since / 1000;
    return Object.keys(agents).reduce(function (selected, name) {
      var data = byName(name, context);
      if (!data) return selected;
      var versions = Object.keys(data.releaseDate).filter(function (v) {
        var date = data.releaseDate[v];
        return date !== null && date >= since;
      });
      return selected.concat(versions.map(nameMapper(data.name)));
    }, []);
  }
  function cloneData(data) {
    return {
      name: data.name,
      versions: data.versions,
      released: data.released,
      releaseDate: data.releaseDate
    };
  }
  function byName(name, context) {
    name = name.toLowerCase();
    name = browserslist.aliases[name] || name;
    if (context.mobileToDesktop && browserslist.desktopNames[name]) {
      var desktop = browserslist.data[browserslist.desktopNames[name]];
      if (name === "android") {
        return normalizeAndroidData(cloneData(browserslist.data[name]), desktop);
      } else {
        var cloned = cloneData(desktop);
        cloned.name = name;
        return cloned;
      }
    }
    return browserslist.data[name];
  }
  function normalizeAndroidVersions(androidVersions, chromeVersions) {
    var iFirstEvergreen = chromeVersions.indexOf(ANDROID_EVERGREEN_FIRST);
    return androidVersions.filter(function (version) {
      return /^(?:[2-4]\.|[34]$)/.test(version);
    }).concat(chromeVersions.slice(iFirstEvergreen));
  }
  function copyObject(obj) {
    var copy = {};
    for (var key in obj) {
      copy[key] = obj[key];
    }
    return copy;
  }
  function normalizeAndroidData(android, chrome) {
    android.released = normalizeAndroidVersions(android.released, chrome.released);
    android.versions = normalizeAndroidVersions(android.versions, chrome.versions);
    android.releaseDate = copyObject(android.releaseDate);
    android.released.forEach(function (v) {
      if (android.releaseDate[v] === undefined) {
        android.releaseDate[v] = chrome.releaseDate[v];
      }
    });
    return android;
  }
  function checkName(name, context) {
    var data = byName(name, context);
    if (!data) throw new BrowserslistError("Unknown browser " + name);
    return data;
  }
  function unknownQuery(query) {
    return new BrowserslistError("Unknown browser query `" + query + "`. " + "Maybe you are using old Browserslist or made typo in query.");
  }

  // Adjusts last X versions queries for some mobile browsers,
  // where caniuse data jumps from a legacy version to the latest
  function filterJumps(list, name, nVersions, context) {
    var jump = 1;
    switch (name) {
      case "android":
        if (context.mobileToDesktop) return list;
        var released = browserslist.data.chrome.released;
        jump = released.length - released.indexOf(ANDROID_EVERGREEN_FIRST);
        break;
      case "op_mob":
        var latest = browserslist.data.op_mob.released.slice(-1)[0];
        jump = getMajor(latest) - OP_MOB_BLINK_FIRST + 1;
        break;
      default:
        return list;
    }
    if (nVersions <= jump) {
      return list.slice(-1);
    }
    return list.slice(jump - 1 - nVersions);
  }
  function isSupported(flags, withPartial) {
    return typeof flags === "string" && (flags.indexOf("y") >= 0 || withPartial && flags.indexOf("a") >= 0);
  }
  function resolve(queries, context) {
    return parse(QUERIES, queries).reduce(function (result, node, index) {
      if (node.not && index === 0) {
        throw new BrowserslistError("Write any browsers query (for instance, `defaults`) " + "before `" + node.query + "`");
      }
      var type = QUERIES[node.type];
      var array = type.select.call(browserslist, context, node).map(function (j) {
        var parts = j.split(" ");
        if (parts[1] === "0") {
          return parts[0] + " " + byName(parts[0], context).versions[0];
        } else {
          return j;
        }
      });
      if (node.compose === "and") {
        if (node.not) {
          return result.filter(function (j) {
            return array.indexOf(j) === -1;
          });
        } else {
          return result.filter(function (j) {
            return array.indexOf(j) !== -1;
          });
        }
      } else {
        if (node.not) {
          var filter = {};
          array.forEach(function (j) {
            filter[j] = true;
          });
          return result.filter(function (j) {
            return !filter[j];
          });
        }
        return result.concat(array);
      }
    }, []);
  }
  function prepareOpts(opts) {
    if (typeof opts === "undefined") opts = {};
    if (typeof opts.path === "undefined") {
      opts.path = path.resolve ? path.resolve(".") : ".";
    }
    return opts;
  }
  function prepareQueries(queries, opts) {
    if (typeof queries === "undefined" || queries === null) {
      var config = browserslist.loadConfig(opts);
      if (config) {
        queries = config;
      } else {
        queries = browserslist.defaults;
      }
    }
    return queries;
  }
  function checkQueries(queries) {
    if (!(typeof queries === "string" || Array.isArray(queries))) {
      throw new BrowserslistError("Browser queries must be an array or string. Got " + typeof queries + ".");
    }
  }
  var cache = {};
  function browserslist(queries, opts) {
    opts = prepareOpts(opts);
    queries = prepareQueries(queries, opts);
    checkQueries(queries);
    var context = {
      ignoreUnknownVersions: opts.ignoreUnknownVersions,
      dangerousExtend: opts.dangerousExtend,
      mobileToDesktop: opts.mobileToDesktop,
      path: opts.path,
      env: opts.env
    };
    env.oldDataWarning(browserslist.data);
    var stats = env.getStat(opts, browserslist.data);
    if (stats) {
      context.customUsage = {};
      for (var browser in stats) {
        fillUsage(context.customUsage, browser, stats[browser]);
      }
    }
    var cacheKey = JSON.stringify([queries, context]);
    if (cache[cacheKey]) return cache[cacheKey];
    var result = uniq(resolve(queries, context)).sort(function (name1, name2) {
      name1 = name1.split(" ");
      name2 = name2.split(" ");
      if (name1[0] === name2[0]) {
        // assumptions on caniuse data
        // 1) version ranges never overlaps
        // 2) if version is not a range, it never contains `-`
        var version1 = name1[1].split("-")[0];
        var version2 = name2[1].split("-")[0];
        return compareSemver(version2.split("."), version1.split("."));
      } else {
        return compare(name1[0], name2[0]);
      }
    });
    if (!env.env.BROWSERSLIST_DISABLE_CACHE) {
      cache[cacheKey] = result;
    }
    return result;
  }
  browserslist.parse = function (queries, opts) {
    opts = prepareOpts(opts);
    queries = prepareQueries(queries, opts);
    checkQueries(queries);
    return parse(QUERIES, queries);
  };

  // Will be filled by Can I Use data below
  browserslist.cache = {};
  browserslist.data = {};
  browserslist.usage = {
    global: {},
    custom: null
  };

  // Default browsers query
  browserslist.defaults = ["> 0.5%", "last 2 versions", "Firefox ESR", "not dead"];

  // Browser names aliases
  browserslist.aliases = {
    fx: "firefox",
    ff: "firefox",
    ios: "ios_saf",
    explorer: "ie",
    blackberry: "bb",
    explorermobile: "ie_mob",
    operamini: "op_mini",
    operamobile: "op_mob",
    chromeandroid: "and_chr",
    firefoxandroid: "and_ff",
    ucandroid: "and_uc",
    qqandroid: "and_qq"
  };

  // Can I Use only provides a few versions for some browsers (e.g. and_chr).
  // Fallback to a similar browser for unknown versions
  // Note op_mob is not included as its chromium versions are not in sync with Opera desktop
  browserslist.desktopNames = {
    and_chr: "chrome",
    and_ff: "firefox",
    ie_mob: "ie",
    android: "chrome" // has extra processing logic
  };

  // Aliases to work with joined versions like `ios_saf 7.0-7.1`
  browserslist.versionAliases = {};
  browserslist.clearCaches = env.clearCaches;
  browserslist.parseConfig = env.parseConfig;
  browserslist.readConfig = env.readConfig;
  browserslist.findConfig = env.findConfig;
  browserslist.loadConfig = env.loadConfig;
  browserslist.coverage = function (browsers, stats) {
    var data;
    if (typeof stats === "undefined") {
      data = browserslist.usage.global;
    } else if (stats === "my stats") {
      var opts = {};
      opts.path = path.resolve ? path.resolve(".") : ".";
      var customStats = env.getStat(opts);
      if (!customStats) {
        throw new BrowserslistError("Custom usage statistics was not provided");
      }
      data = {};
      for (var browser in customStats) {
        fillUsage(data, browser, customStats[browser]);
      }
    } else if (typeof stats === "string") {
      if (stats.length > 2) {
        stats = stats.toLowerCase();
      } else {
        stats = stats.toUpperCase();
      }
      env.loadCountry(browserslist.usage, stats, browserslist.data);
      data = browserslist.usage[stats];
    } else {
      if ("dataByBrowser" in stats) {
        stats = stats.dataByBrowser;
      }
      data = {};
      for (var name in stats) {
        for (var version in stats[name]) {
          data[name + " " + version] = stats[name][version];
        }
      }
    }
    return browsers.reduce(function (all, i) {
      var usage = data[i];
      if (usage === undefined) {
        usage = data[i.replace(/ \S+$/, " 0")];
      }
      return all + (usage || 0);
    }, 0);
  };
  function nodeQuery(context, node) {
    var matched = browserslist.nodeVersions.filter(function (i) {
      return isVersionsMatch(i, node.version);
    });
    if (matched.length === 0) {
      if (context.ignoreUnknownVersions) {
        return [];
      } else {
        throw new BrowserslistError("Unknown version " + node.version + " of Node.js");
      }
    }
    return ["node " + matched[matched.length - 1]];
  }
  function sinceQuery(context, node) {
    var year = parseInt(node.year);
    var month = parseInt(node.month || "01") - 1;
    var day = parseInt(node.day || "01");
    return filterByYear(Date.UTC(year, month, day, 0, 0, 0), context);
  }
  function coverQuery(context, node) {
    var coverage = parseFloat(node.coverage);
    var usage = browserslist.usage.global;
    if (node.place) {
      if (node.place.match(/^my\s+stats$/i)) {
        if (!context.customUsage) {
          throw new BrowserslistError("Custom usage statistics was not provided");
        }
        usage = context.customUsage;
      } else {
        var place;
        if (node.place.length === 2) {
          place = node.place.toUpperCase();
        } else {
          place = node.place.toLowerCase();
        }
        env.loadCountry(browserslist.usage, place, browserslist.data);
        usage = browserslist.usage[place];
      }
    }
    var versions = Object.keys(usage).sort(function (a, b) {
      return usage[b] - usage[a];
    });
    var coveraged = 0;
    var result = [];
    var version;
    for (var i = 0; i < versions.length; i++) {
      version = versions[i];
      if (usage[version] === 0) break;
      coveraged += usage[version];
      result.push(version);
      if (coveraged >= coverage) break;
    }
    return result;
  }
  var QUERIES = {
    last_major_versions: {
      matches: ["versions"],
      regexp: /^last\s+(\d+)\s+major\s+versions?$/i,
      select: function (context, node) {
        return Object.keys(agents).reduce(function (selected, name) {
          var data = byName(name, context);
          if (!data) return selected;
          var list = getMajorVersions(data.released, node.versions);
          list = list.map(nameMapper(data.name));
          list = filterJumps(list, data.name, node.versions, context);
          return selected.concat(list);
        }, []);
      }
    },
    last_versions: {
      matches: ["versions"],
      regexp: /^last\s+(\d+)\s+versions?$/i,
      select: function (context, node) {
        return Object.keys(agents).reduce(function (selected, name) {
          var data = byName(name, context);
          if (!data) return selected;
          var list = data.released.slice(-node.versions);
          list = list.map(nameMapper(data.name));
          list = filterJumps(list, data.name, node.versions, context);
          return selected.concat(list);
        }, []);
      }
    },
    last_electron_major_versions: {
      matches: ["versions"],
      regexp: /^last\s+(\d+)\s+electron\s+major\s+versions?$/i,
      select: function (context, node) {
        var validVersions = getMajorVersions(Object.keys(e2c), node.versions);
        return validVersions.map(function (i) {
          return "chrome " + e2c[i];
        });
      }
    },
    last_node_major_versions: {
      matches: ["versions"],
      regexp: /^last\s+(\d+)\s+node\s+major\s+versions?$/i,
      select: function (context, node) {
        return getMajorVersions(browserslist.nodeVersions, node.versions).map(function (version) {
          return "node " + version;
        });
      }
    },
    last_browser_major_versions: {
      matches: ["versions", "browser"],
      regexp: /^last\s+(\d+)\s+(\w+)\s+major\s+versions?$/i,
      select: function (context, node) {
        var data = checkName(node.browser, context);
        var validVersions = getMajorVersions(data.released, node.versions);
        var list = validVersions.map(nameMapper(data.name));
        list = filterJumps(list, data.name, node.versions, context);
        return list;
      }
    },
    last_electron_versions: {
      matches: ["versions"],
      regexp: /^last\s+(\d+)\s+electron\s+versions?$/i,
      select: function (context, node) {
        return Object.keys(e2c).slice(-node.versions).map(function (i) {
          return "chrome " + e2c[i];
        });
      }
    },
    last_node_versions: {
      matches: ["versions"],
      regexp: /^last\s+(\d+)\s+node\s+versions?$/i,
      select: function (context, node) {
        return browserslist.nodeVersions.slice(-node.versions).map(function (version) {
          return "node " + version;
        });
      }
    },
    last_browser_versions: {
      matches: ["versions", "browser"],
      regexp: /^last\s+(\d+)\s+(\w+)\s+versions?$/i,
      select: function (context, node) {
        var data = checkName(node.browser, context);
        var list = data.released.slice(-node.versions).map(nameMapper(data.name));
        list = filterJumps(list, data.name, node.versions, context);
        return list;
      }
    },
    unreleased_versions: {
      matches: [],
      regexp: /^unreleased\s+versions$/i,
      select: function (context) {
        return Object.keys(agents).reduce(function (selected, name) {
          var data = byName(name, context);
          if (!data) return selected;
          var list = data.versions.filter(function (v) {
            return data.released.indexOf(v) === -1;
          });
          list = list.map(nameMapper(data.name));
          return selected.concat(list);
        }, []);
      }
    },
    unreleased_electron_versions: {
      matches: [],
      regexp: /^unreleased\s+electron\s+versions?$/i,
      select: function () {
        return [];
      }
    },
    unreleased_browser_versions: {
      matches: ["browser"],
      regexp: /^unreleased\s+(\w+)\s+versions?$/i,
      select: function (context, node) {
        var data = checkName(node.browser, context);
        return data.versions.filter(function (v) {
          return data.released.indexOf(v) === -1;
        }).map(nameMapper(data.name));
      }
    },
    last_years: {
      matches: ["years"],
      regexp: /^last\s+(\d*.?\d+)\s+years?$/i,
      select: function (context, node) {
        return filterByYear(Date.now() - YEAR * node.years, context);
      }
    },
    since_y: {
      matches: ["year"],
      regexp: /^since (\d+)$/i,
      select: sinceQuery
    },
    since_y_m: {
      matches: ["year", "month"],
      regexp: /^since (\d+)-(\d+)$/i,
      select: sinceQuery
    },
    since_y_m_d: {
      matches: ["year", "month", "day"],
      regexp: /^since (\d+)-(\d+)-(\d+)$/i,
      select: sinceQuery
    },
    popularity: {
      matches: ["sign", "popularity"],
      regexp: /^(>=?|<=?)\s*(\d+|\d+\.\d+|\.\d+)%$/,
      select: function (context, node) {
        var popularity = parseFloat(node.popularity);
        var usage = browserslist.usage.global;
        return Object.keys(usage).reduce(function (result, version) {
          if (node.sign === ">") {
            if (usage[version] > popularity) {
              result.push(version);
            }
          } else if (node.sign === "<") {
            if (usage[version] < popularity) {
              result.push(version);
            }
          } else if (node.sign === "<=") {
            if (usage[version] <= popularity) {
              result.push(version);
            }
          } else if (usage[version] >= popularity) {
            result.push(version);
          }
          return result;
        }, []);
      }
    },
    popularity_in_my_stats: {
      matches: ["sign", "popularity"],
      regexp: /^(>=?|<=?)\s*(\d+|\d+\.\d+|\.\d+)%\s+in\s+my\s+stats$/,
      select: function (context, node) {
        var popularity = parseFloat(node.popularity);
        if (!context.customUsage) {
          throw new BrowserslistError("Custom usage statistics was not provided");
        }
        var usage = context.customUsage;
        return Object.keys(usage).reduce(function (result, version) {
          var percentage = usage[version];
          if (percentage == null) {
            return result;
          }
          if (node.sign === ">") {
            if (percentage > popularity) {
              result.push(version);
            }
          } else if (node.sign === "<") {
            if (percentage < popularity) {
              result.push(version);
            }
          } else if (node.sign === "<=") {
            if (percentage <= popularity) {
              result.push(version);
            }
          } else if (percentage >= popularity) {
            result.push(version);
          }
          return result;
        }, []);
      }
    },
    popularity_in_config_stats: {
      matches: ["sign", "popularity", "config"],
      regexp: /^(>=?|<=?)\s*(\d+|\d+\.\d+|\.\d+)%\s+in\s+(\S+)\s+stats$/,
      select: function (context, node) {
        var popularity = parseFloat(node.popularity);
        var stats = env.loadStat(context, node.config, browserslist.data);
        if (stats) {
          context.customUsage = {};
          for (var browser in stats) {
            fillUsage(context.customUsage, browser, stats[browser]);
          }
        }
        if (!context.customUsage) {
          throw new BrowserslistError("Custom usage statistics was not provided");
        }
        var usage = context.customUsage;
        return Object.keys(usage).reduce(function (result, version) {
          var percentage = usage[version];
          if (percentage == null) {
            return result;
          }
          if (node.sign === ">") {
            if (percentage > popularity) {
              result.push(version);
            }
          } else if (node.sign === "<") {
            if (percentage < popularity) {
              result.push(version);
            }
          } else if (node.sign === "<=") {
            if (percentage <= popularity) {
              result.push(version);
            }
          } else if (percentage >= popularity) {
            result.push(version);
          }
          return result;
        }, []);
      }
    },
    popularity_in_place: {
      matches: ["sign", "popularity", "place"],
      regexp: /^(>=?|<=?)\s*(\d+|\d+\.\d+|\.\d+)%\s+in\s+((alt-)?\w\w)$/,
      select: function (context, node) {
        var popularity = parseFloat(node.popularity);
        var place = node.place;
        if (place.length === 2) {
          place = place.toUpperCase();
        } else {
          place = place.toLowerCase();
        }
        env.loadCountry(browserslist.usage, place, browserslist.data);
        var usage = browserslist.usage[place];
        return Object.keys(usage).reduce(function (result, version) {
          var percentage = usage[version];
          if (percentage == null) {
            return result;
          }
          if (node.sign === ">") {
            if (percentage > popularity) {
              result.push(version);
            }
          } else if (node.sign === "<") {
            if (percentage < popularity) {
              result.push(version);
            }
          } else if (node.sign === "<=") {
            if (percentage <= popularity) {
              result.push(version);
            }
          } else if (percentage >= popularity) {
            result.push(version);
          }
          return result;
        }, []);
      }
    },
    cover: {
      matches: ["coverage"],
      regexp: /^cover\s+(\d+|\d+\.\d+|\.\d+)%$/i,
      select: coverQuery
    },
    cover_in: {
      matches: ["coverage", "place"],
      regexp: /^cover\s+(\d+|\d+\.\d+|\.\d+)%\s+in\s+(my\s+stats|(alt-)?\w\w)$/i,
      select: coverQuery
    },
    supports: {
      matches: ["supportType", "feature"],
      regexp: /^(?:(fully|partially)\s+)?supports\s+([\w-]+)$/,
      select: function (context, node) {
        env.loadFeature(browserslist.cache, node.feature);
        var withPartial = node.supportType !== "fully";
        var features = browserslist.cache[node.feature];
        var result = [];
        for (var name in features) {
          var data = byName(name, context);
          // Only check desktop when latest released mobile has support
          var iMax = data.released.length - 1;
          while (iMax >= 0) {
            if (data.released[iMax] in features[name]) break;
            iMax--;
          }
          var checkDesktop = context.mobileToDesktop && name in browserslist.desktopNames && isSupported(features[name][data.released[iMax]], withPartial);
          data.versions.forEach(function (version) {
            var flags = features[name][version];
            if (flags === undefined && checkDesktop) {
              flags = features[browserslist.desktopNames[name]][version];
            }
            if (isSupported(flags, withPartial)) {
              result.push(name + " " + version);
            }
          });
        }
        return result;
      }
    },
    electron_range: {
      matches: ["from", "to"],
      regexp: /^electron\s+([\d.]+)\s*-\s*([\d.]+)$/i,
      select: function (context, node) {
        var fromToUse = normalizeElectron(node.from);
        var toToUse = normalizeElectron(node.to);
        var from = parseFloat(node.from);
        var to = parseFloat(node.to);
        if (!e2c[fromToUse]) {
          throw new BrowserslistError("Unknown version " + from + " of electron");
        }
        if (!e2c[toToUse]) {
          throw new BrowserslistError("Unknown version " + to + " of electron");
        }
        return Object.keys(e2c).filter(function (i) {
          var parsed = parseFloat(i);
          return parsed >= from && parsed <= to;
        }).map(function (i) {
          return "chrome " + e2c[i];
        });
      }
    },
    node_range: {
      matches: ["from", "to"],
      regexp: /^node\s+([\d.]+)\s*-\s*([\d.]+)$/i,
      select: function (context, node) {
        return browserslist.nodeVersions.filter(semverFilterLoose(">=", node.from)).filter(semverFilterLoose("<=", node.to)).map(function (v) {
          return "node " + v;
        });
      }
    },
    browser_range: {
      matches: ["browser", "from", "to"],
      regexp: /^(\w+)\s+([\d.]+)\s*-\s*([\d.]+)$/i,
      select: function (context, node) {
        var data = checkName(node.browser, context);
        var from = parseFloat(normalizeVersion(data, node.from) || node.from);
        var to = parseFloat(normalizeVersion(data, node.to) || node.to);
        function filter(v) {
          var parsed = parseFloat(v);
          return parsed >= from && parsed <= to;
        }
        return data.released.filter(filter).map(nameMapper(data.name));
      }
    },
    electron_ray: {
      matches: ["sign", "version"],
      regexp: /^electron\s*(>=?|<=?)\s*([\d.]+)$/i,
      select: function (context, node) {
        var versionToUse = normalizeElectron(node.version);
        return Object.keys(e2c).filter(generateFilter(node.sign, versionToUse)).map(function (i) {
          return "chrome " + e2c[i];
        });
      }
    },
    node_ray: {
      matches: ["sign", "version"],
      regexp: /^node\s*(>=?|<=?)\s*([\d.]+)$/i,
      select: function (context, node) {
        return browserslist.nodeVersions.filter(generateSemverFilter(node.sign, node.version)).map(function (v) {
          return "node " + v;
        });
      }
    },
    browser_ray: {
      matches: ["browser", "sign", "version"],
      regexp: /^(\w+)\s*(>=?|<=?)\s*([\d.]+)$/,
      select: function (context, node) {
        var version = node.version;
        var data = checkName(node.browser, context);
        var alias = browserslist.versionAliases[data.name][version];
        if (alias) version = alias;
        return data.released.filter(generateFilter(node.sign, version)).map(function (v) {
          return data.name + " " + v;
        });
      }
    },
    firefox_esr: {
      matches: [],
      regexp: /^(firefox|ff|fx)\s+esr$/i,
      select: function () {
        return ["firefox 115", "firefox 128"];
      }
    },
    opera_mini_all: {
      matches: [],
      regexp: /(operamini|op_mini)\s+all/i,
      select: function () {
        return ["op_mini all"];
      }
    },
    electron_version: {
      matches: ["version"],
      regexp: /^electron\s+([\d.]+)$/i,
      select: function (context, node) {
        var versionToUse = normalizeElectron(node.version);
        var chrome = e2c[versionToUse];
        if (!chrome) {
          throw new BrowserslistError("Unknown version " + node.version + " of electron");
        }
        return ["chrome " + chrome];
      }
    },
    node_major_version: {
      matches: ["version"],
      regexp: /^node\s+(\d+)$/i,
      select: nodeQuery
    },
    node_minor_version: {
      matches: ["version"],
      regexp: /^node\s+(\d+\.\d+)$/i,
      select: nodeQuery
    },
    node_patch_version: {
      matches: ["version"],
      regexp: /^node\s+(\d+\.\d+\.\d+)$/i,
      select: nodeQuery
    },
    current_node: {
      matches: [],
      regexp: /^current\s+node$/i,
      select: function (context) {
        return [env.currentNode(resolve, context)];
      }
    },
    maintained_node: {
      matches: [],
      regexp: /^maintained\s+node\s+versions$/i,
      select: function (context) {
        var now = Date.now();
        var queries = Object.keys(jsEOL).filter(function (key) {
          return now < Date.parse(jsEOL[key].end) && now > Date.parse(jsEOL[key].start) && isEolReleased(key);
        }).map(function (key) {
          return "node " + key.slice(1);
        });
        return resolve(queries, context);
      }
    },
    phantomjs_1_9: {
      matches: [],
      regexp: /^phantomjs\s+1.9$/i,
      select: function () {
        return ["safari 5"];
      }
    },
    phantomjs_2_1: {
      matches: [],
      regexp: /^phantomjs\s+2.1$/i,
      select: function () {
        return ["safari 6"];
      }
    },
    browser_version: {
      matches: ["browser", "version"],
      regexp: /^(\w+)\s+(tp|[\d.]+)$/i,
      select: function (context, node) {
        var version = node.version;
        if (/^tp$/i.test(version)) version = "TP";
        var data = checkName(node.browser, context);
        var alias = normalizeVersion(data, version);
        if (alias) {
          version = alias;
        } else {
          if (version.indexOf(".") === -1) {
            alias = version + ".0";
          } else {
            alias = version.replace(/\.0$/, "");
          }
          alias = normalizeVersion(data, alias);
          if (alias) {
            version = alias;
          } else if (context.ignoreUnknownVersions) {
            return [];
          } else {
            throw new BrowserslistError("Unknown version " + version + " of " + node.browser);
          }
        }
        return [data.name + " " + version];
      }
    },
    browserslist_config: {
      matches: [],
      regexp: /^browserslist config$/i,
      select: function (context) {
        return browserslist(undefined, context);
      }
    },
    extends: {
      matches: ["config"],
      regexp: /^extends (.+)$/i,
      select: function (context, node) {
        return resolve(env.loadQueries(context, node.config), context);
      }
    },
    defaults: {
      matches: [],
      regexp: /^defaults$/i,
      select: function (context) {
        return resolve(browserslist.defaults, context);
      }
    },
    dead: {
      matches: [],
      regexp: /^dead$/i,
      select: function (context) {
        var dead = ["Baidu >= 0", "ie <= 11", "ie_mob <= 11", "bb <= 10", "op_mob <= 12.1", "samsung 4"];
        return resolve(dead, context);
      }
    },
    unknown: {
      matches: [],
      regexp: /^(\w+)$/i,
      select: function (context, node) {
        if (byName(node.query, context)) {
          throw new BrowserslistError("Specify versions in Browserslist query for browser " + node.query);
        } else {
          throw unknownQuery(node.query);
        }
      }
    }
  }

  // Get and convert Can I Use data
  ;
  (function () {
    for (var name in agents) {
      var browser = agents[name];
      browserslist.data[name] = {
        name: name,
        versions: normalize(agents[name].versions),
        released: normalize(agents[name].versions.slice(0, -3)),
        releaseDate: agents[name].release_date
      };
      fillUsage(browserslist.usage.global, name, browser.usage_global);
      browserslist.versionAliases[name] = {};
      for (var i = 0; i < browser.versions.length; i++) {
        var full = browser.versions[i];
        if (!full) continue;
        if (full.indexOf("-") !== -1) {
          var interval = full.split("-");
          for (var j = 0; j < interval.length; j++) {
            browserslist.versionAliases[name][interval[j]] = full;
          }
        }
      }
    }
    browserslist.nodeVersions = jsReleases.map(function (release) {
      return release.version;
    });
  })();
  exports$1e = browserslist;
  return exports$1e;
}

var exports$1d = {},
  _dewExec$1c = false;
function dew$1c() {
  if (_dewExec$1c) return exports$1d;
  _dewExec$1c = true;
  Object.defineProperty(exports$1d, "__esModule", {
    value: true
  });
  exports$1d.findSuggestion = findSuggestion;
  const {
    min
  } = Math;
  function levenshtein(a, b) {
    let t = [],
      u = [],
      i,
      j;
    const m = a.length,
      n = b.length;
    if (!m) {
      return n;
    }
    if (!n) {
      return m;
    }
    for (j = 0; j <= n; j++) {
      t[j] = j;
    }
    for (i = 1; i <= m; i++) {
      for (u = [i], j = 1; j <= n; j++) {
        u[j] = a[i - 1] === b[j - 1] ? t[j - 1] : min(t[j - 1], t[j], u[j - 1]) + 1;
      }
      t = u;
    }
    return u[n];
  }
  function findSuggestion(str, arr) {
    const distances = arr.map(el => levenshtein(el, str));
    return arr[distances.indexOf(min(...distances))];
  }
  return exports$1d;
}

var exports$1c = {},
  _dewExec$1b = false;
function dew$1b() {
  if (_dewExec$1b) return exports$1c;
  _dewExec$1b = true;
  Object.defineProperty(exports$1c, "__esModule", {
    value: true
  });
  exports$1c.OptionValidator = void 0;
  var _findSuggestion = dew$1c();
  class OptionValidator {
    constructor(descriptor) {
      this.descriptor = descriptor;
    }
    validateTopLevelOptions(options, TopLevelOptionShape) {
      const validOptionNames = Object.keys(TopLevelOptionShape);
      for (const option of Object.keys(options)) {
        if (!validOptionNames.includes(option)) {
          throw new Error(this.formatMessage(`'${option}' is not a valid top-level option.
- Did you mean '${(0, _findSuggestion.findSuggestion)(option, validOptionNames)}'?`));
        }
      }
    }
    validateBooleanOption(name, value, defaultValue) {
      if (value === undefined) {
        return defaultValue;
      } else {
        this.invariant(typeof value === "boolean", `'${name}' option must be a boolean.`);
      }
      return value;
    }
    validateStringOption(name, value, defaultValue) {
      if (value === undefined) {
        return defaultValue;
      } else {
        this.invariant(typeof value === "string", `'${name}' option must be a string.`);
      }
      return value;
    }
    invariant(condition, message) {
      if (!condition) {
        throw new Error(this.formatMessage(message));
      }
    }
    formatMessage(message) {
      return `${this.descriptor}: ${message}`;
    }
  }
  exports$1c.OptionValidator = OptionValidator;
  return exports$1c;
}

var exports$1b = {},
  _dewExec$1a = false;
function dew$1a() {
  if (_dewExec$1a) return exports$1b;
  _dewExec$1a = true;
  Object.defineProperty(exports$1b, "__esModule", {
    value: true
  });
  Object.defineProperty(exports$1b, "OptionValidator", {
    enumerable: true,
    get: function () {
      return _validator.OptionValidator;
    }
  });
  Object.defineProperty(exports$1b, "findSuggestion", {
    enumerable: true,
    get: function () {
      return _findSuggestion.findSuggestion;
    }
  });
  var _validator = dew$1b();
  var _findSuggestion = dew$1c();
  return exports$1b;
}

var _nativeModules = {
  "es6.module": {
    "chrome": "61",
    "and_chr": "61",
    "edge": "16",
    "firefox": "60",
    "and_ff": "60",
    "node": "13.2.0",
    "opera": "48",
    "op_mob": "45",
    "safari": "10.1",
    "ios": "10.3",
    "samsung": "8.2",
    "android": "61",
    "electron": "2.0",
    "ios_saf": "10.3"
  }
};

var exports$1a = {},
  _dewExec$19 = false;
function dew$19() {
  if (_dewExec$19) return exports$1a;
  _dewExec$19 = true;
  exports$1a = _nativeModules;
  return exports$1a;
}

var exports$19 = {},
  _dewExec$18 = false;
function dew$18() {
  if (_dewExec$18) return exports$19;
  _dewExec$18 = true;
  exports$19 = function (Yallist) {
    Yallist.prototype[Symbol.iterator] = function* () {
      for (let walker = this.head; walker; walker = walker.next) {
        yield walker.value;
      }
    };
  };
  return exports$19;
}

var exports$18 = {},
  _dewExec$17 = false;
function dew$17() {
  if (_dewExec$17) return exports$18;
  _dewExec$17 = true;
  exports$18 = Yallist;
  Yallist.Node = Node;
  Yallist.create = Yallist;
  function Yallist(list) {
    var self = this;
    if (!(self instanceof Yallist)) {
      self = new Yallist();
    }
    self.tail = null;
    self.head = null;
    self.length = 0;
    if (list && typeof list.forEach === "function") {
      list.forEach(function (item) {
        self.push(item);
      });
    } else if (arguments.length > 0) {
      for (var i = 0, l = arguments.length; i < l; i++) {
        self.push(arguments[i]);
      }
    }
    return self;
  }
  Yallist.prototype.removeNode = function (node) {
    if (node.list !== this) {
      throw new Error("removing node which does not belong to this list");
    }
    var next = node.next;
    var prev = node.prev;
    if (next) {
      next.prev = prev;
    }
    if (prev) {
      prev.next = next;
    }
    if (node === this.head) {
      this.head = next;
    }
    if (node === this.tail) {
      this.tail = prev;
    }
    node.list.length--;
    node.next = null;
    node.prev = null;
    node.list = null;
    return next;
  };
  Yallist.prototype.unshiftNode = function (node) {
    if (node === this.head) {
      return;
    }
    if (node.list) {
      node.list.removeNode(node);
    }
    var head = this.head;
    node.list = this;
    node.next = head;
    if (head) {
      head.prev = node;
    }
    this.head = node;
    if (!this.tail) {
      this.tail = node;
    }
    this.length++;
  };
  Yallist.prototype.pushNode = function (node) {
    if (node === this.tail) {
      return;
    }
    if (node.list) {
      node.list.removeNode(node);
    }
    var tail = this.tail;
    node.list = this;
    node.prev = tail;
    if (tail) {
      tail.next = node;
    }
    this.tail = node;
    if (!this.head) {
      this.head = node;
    }
    this.length++;
  };
  Yallist.prototype.push = function () {
    for (var i = 0, l = arguments.length; i < l; i++) {
      push(this, arguments[i]);
    }
    return this.length;
  };
  Yallist.prototype.unshift = function () {
    for (var i = 0, l = arguments.length; i < l; i++) {
      unshift(this, arguments[i]);
    }
    return this.length;
  };
  Yallist.prototype.pop = function () {
    if (!this.tail) {
      return undefined;
    }
    var res = this.tail.value;
    this.tail = this.tail.prev;
    if (this.tail) {
      this.tail.next = null;
    } else {
      this.head = null;
    }
    this.length--;
    return res;
  };
  Yallist.prototype.shift = function () {
    if (!this.head) {
      return undefined;
    }
    var res = this.head.value;
    this.head = this.head.next;
    if (this.head) {
      this.head.prev = null;
    } else {
      this.tail = null;
    }
    this.length--;
    return res;
  };
  Yallist.prototype.forEach = function (fn, thisp) {
    thisp = thisp || this;
    for (var walker = this.head, i = 0; walker !== null; i++) {
      fn.call(thisp, walker.value, i, this);
      walker = walker.next;
    }
  };
  Yallist.prototype.forEachReverse = function (fn, thisp) {
    thisp = thisp || this;
    for (var walker = this.tail, i = this.length - 1; walker !== null; i--) {
      fn.call(thisp, walker.value, i, this);
      walker = walker.prev;
    }
  };
  Yallist.prototype.get = function (n) {
    for (var i = 0, walker = this.head; walker !== null && i < n; i++) {
      // abort out of the list early if we hit a cycle
      walker = walker.next;
    }
    if (i === n && walker !== null) {
      return walker.value;
    }
  };
  Yallist.prototype.getReverse = function (n) {
    for (var i = 0, walker = this.tail; walker !== null && i < n; i++) {
      // abort out of the list early if we hit a cycle
      walker = walker.prev;
    }
    if (i === n && walker !== null) {
      return walker.value;
    }
  };
  Yallist.prototype.map = function (fn, thisp) {
    thisp = thisp || this;
    var res = new Yallist();
    for (var walker = this.head; walker !== null;) {
      res.push(fn.call(thisp, walker.value, this));
      walker = walker.next;
    }
    return res;
  };
  Yallist.prototype.mapReverse = function (fn, thisp) {
    thisp = thisp || this;
    var res = new Yallist();
    for (var walker = this.tail; walker !== null;) {
      res.push(fn.call(thisp, walker.value, this));
      walker = walker.prev;
    }
    return res;
  };
  Yallist.prototype.reduce = function (fn, initial) {
    var acc;
    var walker = this.head;
    if (arguments.length > 1) {
      acc = initial;
    } else if (this.head) {
      walker = this.head.next;
      acc = this.head.value;
    } else {
      throw new TypeError("Reduce of empty list with no initial value");
    }
    for (var i = 0; walker !== null; i++) {
      acc = fn(acc, walker.value, i);
      walker = walker.next;
    }
    return acc;
  };
  Yallist.prototype.reduceReverse = function (fn, initial) {
    var acc;
    var walker = this.tail;
    if (arguments.length > 1) {
      acc = initial;
    } else if (this.tail) {
      walker = this.tail.prev;
      acc = this.tail.value;
    } else {
      throw new TypeError("Reduce of empty list with no initial value");
    }
    for (var i = this.length - 1; walker !== null; i--) {
      acc = fn(acc, walker.value, i);
      walker = walker.prev;
    }
    return acc;
  };
  Yallist.prototype.toArray = function () {
    var arr = new Array(this.length);
    for (var i = 0, walker = this.head; walker !== null; i++) {
      arr[i] = walker.value;
      walker = walker.next;
    }
    return arr;
  };
  Yallist.prototype.toArrayReverse = function () {
    var arr = new Array(this.length);
    for (var i = 0, walker = this.tail; walker !== null; i++) {
      arr[i] = walker.value;
      walker = walker.prev;
    }
    return arr;
  };
  Yallist.prototype.slice = function (from, to) {
    to = to || this.length;
    if (to < 0) {
      to += this.length;
    }
    from = from || 0;
    if (from < 0) {
      from += this.length;
    }
    var ret = new Yallist();
    if (to < from || to < 0) {
      return ret;
    }
    if (from < 0) {
      from = 0;
    }
    if (to > this.length) {
      to = this.length;
    }
    for (var i = 0, walker = this.head; walker !== null && i < from; i++) {
      walker = walker.next;
    }
    for (; walker !== null && i < to; i++, walker = walker.next) {
      ret.push(walker.value);
    }
    return ret;
  };
  Yallist.prototype.sliceReverse = function (from, to) {
    to = to || this.length;
    if (to < 0) {
      to += this.length;
    }
    from = from || 0;
    if (from < 0) {
      from += this.length;
    }
    var ret = new Yallist();
    if (to < from || to < 0) {
      return ret;
    }
    if (from < 0) {
      from = 0;
    }
    if (to > this.length) {
      to = this.length;
    }
    for (var i = this.length, walker = this.tail; walker !== null && i > to; i--) {
      walker = walker.prev;
    }
    for (; walker !== null && i > from; i--, walker = walker.prev) {
      ret.push(walker.value);
    }
    return ret;
  };
  Yallist.prototype.splice = function (start, deleteCount /*, ...nodes */) {
    if (start > this.length) {
      start = this.length - 1;
    }
    if (start < 0) {
      start = this.length + start;
    }
    for (var i = 0, walker = this.head; walker !== null && i < start; i++) {
      walker = walker.next;
    }
    var ret = [];
    for (var i = 0; walker && i < deleteCount; i++) {
      ret.push(walker.value);
      walker = this.removeNode(walker);
    }
    if (walker === null) {
      walker = this.tail;
    }
    if (walker !== this.head && walker !== this.tail) {
      walker = walker.prev;
    }
    for (var i = 2; i < arguments.length; i++) {
      walker = insert(this, walker, arguments[i]);
    }
    return ret;
  };
  Yallist.prototype.reverse = function () {
    var head = this.head;
    var tail = this.tail;
    for (var walker = head; walker !== null; walker = walker.prev) {
      var p = walker.prev;
      walker.prev = walker.next;
      walker.next = p;
    }
    this.head = tail;
    this.tail = head;
    return this;
  };
  function insert(self, node, value) {
    var inserted = node === self.head ? new Node(value, null, node, self) : new Node(value, node, node.next, self);
    if (inserted.next === null) {
      self.tail = inserted;
    }
    if (inserted.prev === null) {
      self.head = inserted;
    }
    self.length++;
    return inserted;
  }
  function push(self, item) {
    self.tail = new Node(item, self.tail, null, self);
    if (!self.head) {
      self.head = self.tail;
    }
    self.length++;
  }
  function unshift(self, item) {
    self.head = new Node(item, null, self.head, self);
    if (!self.tail) {
      self.tail = self.head;
    }
    self.length++;
  }
  function Node(value, prev, next, list) {
    if (!(this instanceof Node)) {
      return new Node(value, prev, next, list);
    }
    this.list = list;
    this.value = value;
    if (prev) {
      prev.next = this;
      this.prev = prev;
    } else {
      this.prev = null;
    }
    if (next) {
      next.prev = this;
      this.next = next;
    } else {
      this.next = null;
    }
  }
  try {
    // add if support for Symbol.iterator is present
    dew$18()(Yallist);
  } catch (er) {}
  return exports$18;
}

var exports$17 = {},
  _dewExec$16 = false;
function dew$16() {
  if (_dewExec$16) return exports$17;
  _dewExec$16 = true;
  // A linked list to keep track of recently-used-ness
  const Yallist = dew$17();
  const MAX = Symbol("max");
  const LENGTH = Symbol("length");
  const LENGTH_CALCULATOR = Symbol("lengthCalculator");
  const ALLOW_STALE = Symbol("allowStale");
  const MAX_AGE = Symbol("maxAge");
  const DISPOSE = Symbol("dispose");
  const NO_DISPOSE_ON_SET = Symbol("noDisposeOnSet");
  const LRU_LIST = Symbol("lruList");
  const CACHE = Symbol("cache");
  const UPDATE_AGE_ON_GET = Symbol("updateAgeOnGet");
  const naiveLength = () => 1;

  // lruList is a yallist where the head is the youngest
  // item, and the tail is the oldest.  the list contains the Hit
  // objects as the entries.
  // Each Hit object has a reference to its Yallist.Node.  This
  // never changes.
  //
  // cache is a Map (or PseudoMap) that matches the keys to
  // the Yallist.Node object.
  class LRUCache {
    constructor(options) {
      if (typeof options === "number") options = {
        max: options
      };
      if (!options) options = {};
      if (options.max && (typeof options.max !== "number" || options.max < 0)) throw new TypeError("max must be a non-negative number");
      // Kind of weird to have a default max of Infinity, but oh well.
      this[MAX] = options.max || Infinity;
      const lc = options.length || naiveLength;
      this[LENGTH_CALCULATOR] = typeof lc !== "function" ? naiveLength : lc;
      this[ALLOW_STALE] = options.stale || false;
      if (options.maxAge && typeof options.maxAge !== "number") throw new TypeError("maxAge must be a number");
      this[MAX_AGE] = options.maxAge || 0;
      this[DISPOSE] = options.dispose;
      this[NO_DISPOSE_ON_SET] = options.noDisposeOnSet || false;
      this[UPDATE_AGE_ON_GET] = options.updateAgeOnGet || false;
      this.reset();
    }

    // resize the cache when the max changes.
    set max(mL) {
      if (typeof mL !== "number" || mL < 0) throw new TypeError("max must be a non-negative number");
      this[MAX] = mL || Infinity;
      trim(this);
    }
    get max() {
      return this[MAX];
    }
    set allowStale(allowStale) {
      this[ALLOW_STALE] = !!allowStale;
    }
    get allowStale() {
      return this[ALLOW_STALE];
    }
    set maxAge(mA) {
      if (typeof mA !== "number") throw new TypeError("maxAge must be a non-negative number");
      this[MAX_AGE] = mA;
      trim(this);
    }
    get maxAge() {
      return this[MAX_AGE];
    }

    // resize the cache when the lengthCalculator changes.
    set lengthCalculator(lC) {
      if (typeof lC !== "function") lC = naiveLength;
      if (lC !== this[LENGTH_CALCULATOR]) {
        this[LENGTH_CALCULATOR] = lC;
        this[LENGTH] = 0;
        this[LRU_LIST].forEach(hit => {
          hit.length = this[LENGTH_CALCULATOR](hit.value, hit.key);
          this[LENGTH] += hit.length;
        });
      }
      trim(this);
    }
    get lengthCalculator() {
      return this[LENGTH_CALCULATOR];
    }
    get length() {
      return this[LENGTH];
    }
    get itemCount() {
      return this[LRU_LIST].length;
    }
    rforEach(fn, thisp) {
      thisp = thisp || this;
      for (let walker = this[LRU_LIST].tail; walker !== null;) {
        const prev = walker.prev;
        forEachStep(this, fn, walker, thisp);
        walker = prev;
      }
    }
    forEach(fn, thisp) {
      thisp = thisp || this;
      for (let walker = this[LRU_LIST].head; walker !== null;) {
        const next = walker.next;
        forEachStep(this, fn, walker, thisp);
        walker = next;
      }
    }
    keys() {
      return this[LRU_LIST].toArray().map(k => k.key);
    }
    values() {
      return this[LRU_LIST].toArray().map(k => k.value);
    }
    reset() {
      if (this[DISPOSE] && this[LRU_LIST] && this[LRU_LIST].length) {
        this[LRU_LIST].forEach(hit => this[DISPOSE](hit.key, hit.value));
      }
      this[CACHE] = new Map(); // hash of items by key
      this[LRU_LIST] = new Yallist(); // list of items in order of use recency
      this[LENGTH] = 0; // length of items in the list
    }
    dump() {
      return this[LRU_LIST].map(hit => isStale(this, hit) ? false : {
        k: hit.key,
        v: hit.value,
        e: hit.now + (hit.maxAge || 0)
      }).toArray().filter(h => h);
    }
    dumpLru() {
      return this[LRU_LIST];
    }
    set(key, value, maxAge) {
      maxAge = maxAge || this[MAX_AGE];
      if (maxAge && typeof maxAge !== "number") throw new TypeError("maxAge must be a number");
      const now = maxAge ? Date.now() : 0;
      const len = this[LENGTH_CALCULATOR](value, key);
      if (this[CACHE].has(key)) {
        if (len > this[MAX]) {
          del(this, this[CACHE].get(key));
          return false;
        }
        const node = this[CACHE].get(key);
        const item = node.value;

        // dispose of the old one before overwriting
        // split out into 2 ifs for better coverage tracking
        if (this[DISPOSE]) {
          if (!this[NO_DISPOSE_ON_SET]) this[DISPOSE](key, item.value);
        }
        item.now = now;
        item.maxAge = maxAge;
        item.value = value;
        this[LENGTH] += len - item.length;
        item.length = len;
        this.get(key);
        trim(this);
        return true;
      }
      const hit = new Entry(key, value, len, now, maxAge);

      // oversized objects fall out of cache automatically.
      if (hit.length > this[MAX]) {
        if (this[DISPOSE]) this[DISPOSE](key, value);
        return false;
      }
      this[LENGTH] += hit.length;
      this[LRU_LIST].unshift(hit);
      this[CACHE].set(key, this[LRU_LIST].head);
      trim(this);
      return true;
    }
    has(key) {
      if (!this[CACHE].has(key)) return false;
      const hit = this[CACHE].get(key).value;
      return !isStale(this, hit);
    }
    get(key) {
      return get(this, key, true);
    }
    peek(key) {
      return get(this, key, false);
    }
    pop() {
      const node = this[LRU_LIST].tail;
      if (!node) return null;
      del(this, node);
      return node.value;
    }
    del(key) {
      del(this, this[CACHE].get(key));
    }
    load(arr) {
      // reset the cache
      this.reset();
      const now = Date.now();
      // A previous serialized cache has the most recent items first
      for (let l = arr.length - 1; l >= 0; l--) {
        const hit = arr[l];
        const expiresAt = hit.e || 0;
        if (expiresAt === 0)
          // the item was created without expiration in a non aged cache
          this.set(hit.k, hit.v);else {
          const maxAge = expiresAt - now;
          // dont add already expired items
          if (maxAge > 0) {
            this.set(hit.k, hit.v, maxAge);
          }
        }
      }
    }
    prune() {
      this[CACHE].forEach((value, key) => get(this, key, false));
    }
  }
  const get = (self, key, doUse) => {
    const node = self[CACHE].get(key);
    if (node) {
      const hit = node.value;
      if (isStale(self, hit)) {
        del(self, node);
        if (!self[ALLOW_STALE]) return undefined;
      } else {
        if (doUse) {
          if (self[UPDATE_AGE_ON_GET]) node.value.now = Date.now();
          self[LRU_LIST].unshiftNode(node);
        }
      }
      return hit.value;
    }
  };
  const isStale = (self, hit) => {
    if (!hit || !hit.maxAge && !self[MAX_AGE]) return false;
    const diff = Date.now() - hit.now;
    return hit.maxAge ? diff > hit.maxAge : self[MAX_AGE] && diff > self[MAX_AGE];
  };
  const trim = self => {
    if (self[LENGTH] > self[MAX]) {
      for (let walker = self[LRU_LIST].tail; self[LENGTH] > self[MAX] && walker !== null;) {
        // We know that we're about to delete this one, and also
        // what the next least recently used key will be, so just
        // go ahead and set it now.
        const prev = walker.prev;
        del(self, walker);
        walker = prev;
      }
    }
  };
  const del = (self, node) => {
    if (node) {
      const hit = node.value;
      if (self[DISPOSE]) self[DISPOSE](hit.key, hit.value);
      self[LENGTH] -= hit.length;
      self[CACHE].delete(hit.key);
      self[LRU_LIST].removeNode(node);
    }
  };
  class Entry {
    constructor(key, value, length, now, maxAge) {
      this.key = key;
      this.value = value;
      this.length = length;
      this.now = now;
      this.maxAge = maxAge || 0;
    }
  }
  const forEachStep = (self, fn, node, thisp) => {
    let hit = node.value;
    if (isStale(self, hit)) {
      del(self, node);
      if (!self[ALLOW_STALE]) hit = undefined;
    }
    if (hit) fn.call(thisp, hit.value, hit.key, self);
  };
  exports$17 = LRUCache;
  return exports$17;
}

var exports$16 = {},
  _dewExec$15 = false;
function dew$15() {
  if (_dewExec$15) return exports$16;
  _dewExec$15 = true;
  Object.defineProperty(exports$16, "__esModule", {
    value: true
  });
  exports$16.unreleasedLabels = exports$16.browserNameMap = void 0;
  exports$16.unreleasedLabels = {
    safari: "tp"
  };
  exports$16.browserNameMap = {
    and_chr: "chrome",
    and_ff: "firefox",
    android: "android",
    chrome: "chrome",
    edge: "edge",
    firefox: "firefox",
    ie: "ie",
    ie_mob: "ie",
    ios_saf: "ios",
    node: "node",
    deno: "deno",
    op_mob: "opera_mobile",
    opera: "opera",
    safari: "safari",
    samsung: "samsung"
  };
  return exports$16;
}

var exports$15 = {},
  _dewExec$14 = false;
function dew$14() {
  if (_dewExec$14) return exports$15;
  _dewExec$14 = true;
  Object.defineProperty(exports$15, "__esModule", {
    value: true
  });
  exports$15.getHighestUnreleased = getHighestUnreleased;
  exports$15.getLowestImplementedVersion = getLowestImplementedVersion;
  exports$15.getLowestUnreleased = getLowestUnreleased;
  exports$15.isUnreleasedVersion = isUnreleasedVersion;
  exports$15.semverMin = semverMin;
  exports$15.semverify = semverify;
  var _semver = dew$1Z();
  var _helperValidatorOption = dew$1a();
  var _targets = dew$15();
  const versionRegExp = /^(?:\d+|\d(?:\d?[^\d\n\r\u2028\u2029]\d+|\d{2,}(?:[^\d\n\r\u2028\u2029]\d+)?))$/;
  const v = new _helperValidatorOption.OptionValidator("@babel/helper-compilation-targets");
  function semverMin(first, second) {
    return first && _semver.lt(first, second) ? first : second;
  }
  function semverify(version) {
    if (typeof version === "string" && _semver.valid(version)) {
      return version;
    }
    v.invariant(typeof version === "number" || typeof version === "string" && versionRegExp.test(version), `'${version}' is not a valid version`);
    version = version.toString();
    let pos = 0;
    let num = 0;
    while ((pos = version.indexOf(".", pos + 1)) > 0) {
      num++;
    }
    return version + ".0".repeat(2 - num);
  }
  function isUnreleasedVersion(version, env) {
    const unreleasedLabel = _targets.unreleasedLabels[env];
    return !!unreleasedLabel && unreleasedLabel === version.toString().toLowerCase();
  }
  function getLowestUnreleased(a, b, env) {
    const unreleasedLabel = _targets.unreleasedLabels[env];
    if (a === unreleasedLabel) {
      return b;
    }
    if (b === unreleasedLabel) {
      return a;
    }
    return semverMin(a, b);
  }
  function getHighestUnreleased(a, b, env) {
    return getLowestUnreleased(a, b, env) === a ? b : a;
  }
  function getLowestImplementedVersion(plugin, environment) {
    const result = plugin[environment];
    if (!result && environment === "android") {
      return plugin.chrome;
    }
    return result;
  }
  return exports$15;
}

var exports$14 = {},
  _dewExec$13 = false;
function dew$13() {
  if (_dewExec$13) return exports$14;
  _dewExec$13 = true;
  Object.defineProperty(exports$14, "__esModule", {
    value: true
  });
  exports$14.TargetNames = void 0;
  exports$14.TargetNames = {
    node: "node",
    deno: "deno",
    chrome: "chrome",
    opera: "opera",
    edge: "edge",
    firefox: "firefox",
    safari: "safari",
    ie: "ie",
    ios: "ios",
    android: "android",
    electron: "electron",
    samsung: "samsung",
    rhino: "rhino",
    opera_mobile: "opera_mobile"
  };
  return exports$14;
}

var exports$13 = {},
  _dewExec$12 = false;
function dew$12() {
  if (_dewExec$12) return exports$13;
  _dewExec$12 = true;
  Object.defineProperty(exports$13, "__esModule", {
    value: true
  });
  exports$13.prettifyTargets = prettifyTargets;
  exports$13.prettifyVersion = prettifyVersion;
  var _semver = dew$1Z();
  var _targets = dew$15();
  function prettifyVersion(version) {
    if (typeof version !== "string") {
      return version;
    }
    const {
      major,
      minor,
      patch
    } = _semver.parse(version);
    const parts = [major];
    if (minor || patch) {
      parts.push(minor);
    }
    if (patch) {
      parts.push(patch);
    }
    return parts.join(".");
  }
  function prettifyTargets(targets) {
    return Object.keys(targets).reduce((results, target) => {
      let value = targets[target];
      const unreleasedLabel = _targets.unreleasedLabels[target];
      if (typeof value === "string" && unreleasedLabel !== value) {
        value = prettifyVersion(value);
      }
      results[target] = value;
      return results;
    }, {});
  }
  return exports$13;
}

var exports$12 = {},
  _dewExec$11 = false;
function dew$11() {
  if (_dewExec$11) return exports$12;
  _dewExec$11 = true;
  Object.defineProperty(exports$12, "__esModule", {
    value: true
  });
  exports$12.getInclusionReasons = getInclusionReasons;
  var _semver = dew$1Z();
  var _pretty = dew$12();
  var _utils = dew$14();
  function getInclusionReasons(item, targetVersions, list) {
    const minVersions = list[item] || {};
    return Object.keys(targetVersions).reduce((result, env) => {
      const minVersion = (0, _utils.getLowestImplementedVersion)(minVersions, env);
      const targetVersion = targetVersions[env];
      if (!minVersion) {
        result[env] = (0, _pretty.prettifyVersion)(targetVersion);
      } else {
        const minIsUnreleased = (0, _utils.isUnreleasedVersion)(minVersion, env);
        const targetIsUnreleased = (0, _utils.isUnreleasedVersion)(targetVersion, env);
        if (!targetIsUnreleased && (minIsUnreleased || _semver.lt(targetVersion.toString(), (0, _utils.semverify)(minVersion)))) {
          result[env] = (0, _pretty.prettifyVersion)(targetVersion);
        }
      }
      return result;
    }, {});
  }
  return exports$12;
}

var _plugins = {
  "transform-duplicate-named-capturing-groups-regex": {
    "chrome": "126",
    "edge": "126",
    "firefox": "129",
    "safari": "17.4",
    "electron": "31.0"
  },
  "transform-unicode-sets-regex": {
    "chrome": "112",
    "opera": "98",
    "edge": "112",
    "firefox": "116",
    "safari": "17",
    "node": "20",
    "deno": "1.32",
    "ios": "17",
    "opera_mobile": "75",
    "electron": "24.0"
  },
  "bugfix/transform-v8-static-class-fields-redefine-readonly": {
    "chrome": "98",
    "opera": "84",
    "edge": "98",
    "firefox": "95",
    "safari": "15",
    "node": "12",
    "deno": "1.18",
    "ios": "15",
    "samsung": "11",
    "opera_mobile": "52",
    "electron": "17.0"
  },
  "bugfix/transform-firefox-class-in-computed-class-key": {
    "chrome": "74",
    "opera": "62",
    "edge": "79",
    "safari": "16",
    "node": "12",
    "deno": "1",
    "ios": "16",
    "samsung": "11",
    "opera_mobile": "53",
    "electron": "6.0"
  },
  "bugfix/transform-safari-class-field-initializer-scope": {
    "chrome": "74",
    "opera": "62",
    "edge": "79",
    "firefox": "69",
    "safari": "16",
    "node": "12",
    "deno": "1",
    "ios": "16",
    "samsung": "11",
    "opera_mobile": "53",
    "electron": "6.0"
  },
  "transform-class-static-block": {
    "chrome": "94",
    "opera": "80",
    "edge": "94",
    "firefox": "93",
    "safari": "16.4",
    "node": "16.11",
    "deno": "1.14",
    "ios": "16.4",
    "samsung": "17",
    "opera_mobile": "66",
    "electron": "15.0"
  },
  "proposal-class-static-block": {
    "chrome": "94",
    "opera": "80",
    "edge": "94",
    "firefox": "93",
    "safari": "16.4",
    "node": "16.11",
    "deno": "1.14",
    "ios": "16.4",
    "samsung": "17",
    "opera_mobile": "66",
    "electron": "15.0"
  },
  "transform-private-property-in-object": {
    "chrome": "91",
    "opera": "77",
    "edge": "91",
    "firefox": "90",
    "safari": "15",
    "node": "16.9",
    "deno": "1.9",
    "ios": "15",
    "samsung": "16",
    "opera_mobile": "64",
    "electron": "13.0"
  },
  "proposal-private-property-in-object": {
    "chrome": "91",
    "opera": "77",
    "edge": "91",
    "firefox": "90",
    "safari": "15",
    "node": "16.9",
    "deno": "1.9",
    "ios": "15",
    "samsung": "16",
    "opera_mobile": "64",
    "electron": "13.0"
  },
  "transform-class-properties": {
    "chrome": "74",
    "opera": "62",
    "edge": "79",
    "firefox": "90",
    "safari": "14.1",
    "node": "12",
    "deno": "1",
    "ios": "14.5",
    "samsung": "11",
    "opera_mobile": "53",
    "electron": "6.0"
  },
  "proposal-class-properties": {
    "chrome": "74",
    "opera": "62",
    "edge": "79",
    "firefox": "90",
    "safari": "14.1",
    "node": "12",
    "deno": "1",
    "ios": "14.5",
    "samsung": "11",
    "opera_mobile": "53",
    "electron": "6.0"
  },
  "transform-private-methods": {
    "chrome": "84",
    "opera": "70",
    "edge": "84",
    "firefox": "90",
    "safari": "15",
    "node": "14.6",
    "deno": "1",
    "ios": "15",
    "samsung": "14",
    "opera_mobile": "60",
    "electron": "10.0"
  },
  "proposal-private-methods": {
    "chrome": "84",
    "opera": "70",
    "edge": "84",
    "firefox": "90",
    "safari": "15",
    "node": "14.6",
    "deno": "1",
    "ios": "15",
    "samsung": "14",
    "opera_mobile": "60",
    "electron": "10.0"
  },
  "transform-numeric-separator": {
    "chrome": "75",
    "opera": "62",
    "edge": "79",
    "firefox": "70",
    "safari": "13",
    "node": "12.5",
    "deno": "1",
    "ios": "13",
    "samsung": "11",
    "rhino": "1.7.14",
    "opera_mobile": "54",
    "electron": "6.0"
  },
  "proposal-numeric-separator": {
    "chrome": "75",
    "opera": "62",
    "edge": "79",
    "firefox": "70",
    "safari": "13",
    "node": "12.5",
    "deno": "1",
    "ios": "13",
    "samsung": "11",
    "rhino": "1.7.14",
    "opera_mobile": "54",
    "electron": "6.0"
  },
  "transform-logical-assignment-operators": {
    "chrome": "85",
    "opera": "71",
    "edge": "85",
    "firefox": "79",
    "safari": "14",
    "node": "15",
    "deno": "1.2",
    "ios": "14",
    "samsung": "14",
    "opera_mobile": "60",
    "electron": "10.0"
  },
  "proposal-logical-assignment-operators": {
    "chrome": "85",
    "opera": "71",
    "edge": "85",
    "firefox": "79",
    "safari": "14",
    "node": "15",
    "deno": "1.2",
    "ios": "14",
    "samsung": "14",
    "opera_mobile": "60",
    "electron": "10.0"
  },
  "transform-nullish-coalescing-operator": {
    "chrome": "80",
    "opera": "67",
    "edge": "80",
    "firefox": "72",
    "safari": "13.1",
    "node": "14",
    "deno": "1",
    "ios": "13.4",
    "samsung": "13",
    "opera_mobile": "57",
    "electron": "8.0"
  },
  "proposal-nullish-coalescing-operator": {
    "chrome": "80",
    "opera": "67",
    "edge": "80",
    "firefox": "72",
    "safari": "13.1",
    "node": "14",
    "deno": "1",
    "ios": "13.4",
    "samsung": "13",
    "opera_mobile": "57",
    "electron": "8.0"
  },
  "transform-optional-chaining": {
    "chrome": "91",
    "opera": "77",
    "edge": "91",
    "firefox": "74",
    "safari": "13.1",
    "node": "16.9",
    "deno": "1.9",
    "ios": "13.4",
    "samsung": "16",
    "opera_mobile": "64",
    "electron": "13.0"
  },
  "proposal-optional-chaining": {
    "chrome": "91",
    "opera": "77",
    "edge": "91",
    "firefox": "74",
    "safari": "13.1",
    "node": "16.9",
    "deno": "1.9",
    "ios": "13.4",
    "samsung": "16",
    "opera_mobile": "64",
    "electron": "13.0"
  },
  "transform-json-strings": {
    "chrome": "66",
    "opera": "53",
    "edge": "79",
    "firefox": "62",
    "safari": "12",
    "node": "10",
    "deno": "1",
    "ios": "12",
    "samsung": "9",
    "rhino": "1.7.14",
    "opera_mobile": "47",
    "electron": "3.0"
  },
  "proposal-json-strings": {
    "chrome": "66",
    "opera": "53",
    "edge": "79",
    "firefox": "62",
    "safari": "12",
    "node": "10",
    "deno": "1",
    "ios": "12",
    "samsung": "9",
    "rhino": "1.7.14",
    "opera_mobile": "47",
    "electron": "3.0"
  },
  "transform-optional-catch-binding": {
    "chrome": "66",
    "opera": "53",
    "edge": "79",
    "firefox": "58",
    "safari": "11.1",
    "node": "10",
    "deno": "1",
    "ios": "11.3",
    "samsung": "9",
    "opera_mobile": "47",
    "electron": "3.0"
  },
  "proposal-optional-catch-binding": {
    "chrome": "66",
    "opera": "53",
    "edge": "79",
    "firefox": "58",
    "safari": "11.1",
    "node": "10",
    "deno": "1",
    "ios": "11.3",
    "samsung": "9",
    "opera_mobile": "47",
    "electron": "3.0"
  },
  "transform-parameters": {
    "chrome": "49",
    "opera": "36",
    "edge": "18",
    "firefox": "53",
    "safari": "16.3",
    "node": "6",
    "deno": "1",
    "ios": "16.3",
    "samsung": "5",
    "opera_mobile": "36",
    "electron": "0.37"
  },
  "transform-async-generator-functions": {
    "chrome": "63",
    "opera": "50",
    "edge": "79",
    "firefox": "57",
    "safari": "12",
    "node": "10",
    "deno": "1",
    "ios": "12",
    "samsung": "8",
    "opera_mobile": "46",
    "electron": "3.0"
  },
  "proposal-async-generator-functions": {
    "chrome": "63",
    "opera": "50",
    "edge": "79",
    "firefox": "57",
    "safari": "12",
    "node": "10",
    "deno": "1",
    "ios": "12",
    "samsung": "8",
    "opera_mobile": "46",
    "electron": "3.0"
  },
  "transform-object-rest-spread": {
    "chrome": "60",
    "opera": "47",
    "edge": "79",
    "firefox": "55",
    "safari": "11.1",
    "node": "8.3",
    "deno": "1",
    "ios": "11.3",
    "samsung": "8",
    "opera_mobile": "44",
    "electron": "2.0"
  },
  "proposal-object-rest-spread": {
    "chrome": "60",
    "opera": "47",
    "edge": "79",
    "firefox": "55",
    "safari": "11.1",
    "node": "8.3",
    "deno": "1",
    "ios": "11.3",
    "samsung": "8",
    "opera_mobile": "44",
    "electron": "2.0"
  },
  "transform-dotall-regex": {
    "chrome": "62",
    "opera": "49",
    "edge": "79",
    "firefox": "78",
    "safari": "11.1",
    "node": "8.10",
    "deno": "1",
    "ios": "11.3",
    "samsung": "8",
    "rhino": "1.7.15",
    "opera_mobile": "46",
    "electron": "3.0"
  },
  "transform-unicode-property-regex": {
    "chrome": "64",
    "opera": "51",
    "edge": "79",
    "firefox": "78",
    "safari": "11.1",
    "node": "10",
    "deno": "1",
    "ios": "11.3",
    "samsung": "9",
    "opera_mobile": "47",
    "electron": "3.0"
  },
  "proposal-unicode-property-regex": {
    "chrome": "64",
    "opera": "51",
    "edge": "79",
    "firefox": "78",
    "safari": "11.1",
    "node": "10",
    "deno": "1",
    "ios": "11.3",
    "samsung": "9",
    "opera_mobile": "47",
    "electron": "3.0"
  },
  "transform-named-capturing-groups-regex": {
    "chrome": "64",
    "opera": "51",
    "edge": "79",
    "firefox": "78",
    "safari": "11.1",
    "node": "10",
    "deno": "1",
    "ios": "11.3",
    "samsung": "9",
    "opera_mobile": "47",
    "electron": "3.0"
  },
  "transform-async-to-generator": {
    "chrome": "55",
    "opera": "42",
    "edge": "15",
    "firefox": "52",
    "safari": "11",
    "node": "7.6",
    "deno": "1",
    "ios": "11",
    "samsung": "6",
    "opera_mobile": "42",
    "electron": "1.6"
  },
  "transform-exponentiation-operator": {
    "chrome": "52",
    "opera": "39",
    "edge": "14",
    "firefox": "52",
    "safari": "10.1",
    "node": "7",
    "deno": "1",
    "ios": "10.3",
    "samsung": "6",
    "rhino": "1.7.14",
    "opera_mobile": "41",
    "electron": "1.3"
  },
  "transform-template-literals": {
    "chrome": "41",
    "opera": "28",
    "edge": "13",
    "firefox": "34",
    "safari": "13",
    "node": "4",
    "deno": "1",
    "ios": "13",
    "samsung": "3.4",
    "opera_mobile": "28",
    "electron": "0.21"
  },
  "transform-literals": {
    "chrome": "44",
    "opera": "31",
    "edge": "12",
    "firefox": "53",
    "safari": "9",
    "node": "4",
    "deno": "1",
    "ios": "9",
    "samsung": "4",
    "rhino": "1.7.15",
    "opera_mobile": "32",
    "electron": "0.30"
  },
  "transform-function-name": {
    "chrome": "51",
    "opera": "38",
    "edge": "79",
    "firefox": "53",
    "safari": "10",
    "node": "6.5",
    "deno": "1",
    "ios": "10",
    "samsung": "5",
    "opera_mobile": "41",
    "electron": "1.2"
  },
  "transform-arrow-functions": {
    "chrome": "47",
    "opera": "34",
    "edge": "13",
    "firefox": "43",
    "safari": "10",
    "node": "6",
    "deno": "1",
    "ios": "10",
    "samsung": "5",
    "rhino": "1.7.13",
    "opera_mobile": "34",
    "electron": "0.36"
  },
  "transform-block-scoped-functions": {
    "chrome": "41",
    "opera": "28",
    "edge": "12",
    "firefox": "46",
    "safari": "10",
    "node": "4",
    "deno": "1",
    "ie": "11",
    "ios": "10",
    "samsung": "3.4",
    "opera_mobile": "28",
    "electron": "0.21"
  },
  "transform-classes": {
    "chrome": "46",
    "opera": "33",
    "edge": "13",
    "firefox": "45",
    "safari": "10",
    "node": "5",
    "deno": "1",
    "ios": "10",
    "samsung": "5",
    "opera_mobile": "33",
    "electron": "0.36"
  },
  "transform-object-super": {
    "chrome": "46",
    "opera": "33",
    "edge": "13",
    "firefox": "45",
    "safari": "10",
    "node": "5",
    "deno": "1",
    "ios": "10",
    "samsung": "5",
    "opera_mobile": "33",
    "electron": "0.36"
  },
  "transform-shorthand-properties": {
    "chrome": "43",
    "opera": "30",
    "edge": "12",
    "firefox": "33",
    "safari": "9",
    "node": "4",
    "deno": "1",
    "ios": "9",
    "samsung": "4",
    "rhino": "1.7.14",
    "opera_mobile": "30",
    "electron": "0.27"
  },
  "transform-duplicate-keys": {
    "chrome": "42",
    "opera": "29",
    "edge": "12",
    "firefox": "34",
    "safari": "9",
    "node": "4",
    "deno": "1",
    "ios": "9",
    "samsung": "3.4",
    "opera_mobile": "29",
    "electron": "0.25"
  },
  "transform-computed-properties": {
    "chrome": "44",
    "opera": "31",
    "edge": "12",
    "firefox": "34",
    "safari": "7.1",
    "node": "4",
    "deno": "1",
    "ios": "8",
    "samsung": "4",
    "opera_mobile": "32",
    "electron": "0.30"
  },
  "transform-for-of": {
    "chrome": "51",
    "opera": "38",
    "edge": "15",
    "firefox": "53",
    "safari": "10",
    "node": "6.5",
    "deno": "1",
    "ios": "10",
    "samsung": "5",
    "opera_mobile": "41",
    "electron": "1.2"
  },
  "transform-sticky-regex": {
    "chrome": "49",
    "opera": "36",
    "edge": "13",
    "firefox": "3",
    "safari": "10",
    "node": "6",
    "deno": "1",
    "ios": "10",
    "samsung": "5",
    "rhino": "1.7.15",
    "opera_mobile": "36",
    "electron": "0.37"
  },
  "transform-unicode-escapes": {
    "chrome": "44",
    "opera": "31",
    "edge": "12",
    "firefox": "53",
    "safari": "9",
    "node": "4",
    "deno": "1",
    "ios": "9",
    "samsung": "4",
    "rhino": "1.7.15",
    "opera_mobile": "32",
    "electron": "0.30"
  },
  "transform-unicode-regex": {
    "chrome": "50",
    "opera": "37",
    "edge": "13",
    "firefox": "46",
    "safari": "12",
    "node": "6",
    "deno": "1",
    "ios": "12",
    "samsung": "5",
    "opera_mobile": "37",
    "electron": "1.1"
  },
  "transform-spread": {
    "chrome": "46",
    "opera": "33",
    "edge": "13",
    "firefox": "45",
    "safari": "10",
    "node": "5",
    "deno": "1",
    "ios": "10",
    "samsung": "5",
    "opera_mobile": "33",
    "electron": "0.36"
  },
  "transform-destructuring": {
    "chrome": "51",
    "opera": "38",
    "edge": "15",
    "firefox": "53",
    "safari": "10",
    "node": "6.5",
    "deno": "1",
    "ios": "10",
    "samsung": "5",
    "opera_mobile": "41",
    "electron": "1.2"
  },
  "transform-block-scoping": {
    "chrome": "50",
    "opera": "37",
    "edge": "14",
    "firefox": "53",
    "safari": "11",
    "node": "6",
    "deno": "1",
    "ios": "11",
    "samsung": "5",
    "opera_mobile": "37",
    "electron": "1.1"
  },
  "transform-typeof-symbol": {
    "chrome": "38",
    "opera": "25",
    "edge": "12",
    "firefox": "36",
    "safari": "9",
    "node": "0.12",
    "deno": "1",
    "ios": "9",
    "samsung": "3",
    "rhino": "1.7.13",
    "opera_mobile": "25",
    "electron": "0.20"
  },
  "transform-new-target": {
    "chrome": "46",
    "opera": "33",
    "edge": "14",
    "firefox": "41",
    "safari": "10",
    "node": "5",
    "deno": "1",
    "ios": "10",
    "samsung": "5",
    "opera_mobile": "33",
    "electron": "0.36"
  },
  "transform-regenerator": {
    "chrome": "50",
    "opera": "37",
    "edge": "13",
    "firefox": "53",
    "safari": "10",
    "node": "6",
    "deno": "1",
    "ios": "10",
    "samsung": "5",
    "opera_mobile": "37",
    "electron": "1.1"
  },
  "transform-member-expression-literals": {
    "chrome": "7",
    "opera": "12",
    "edge": "12",
    "firefox": "2",
    "safari": "5.1",
    "node": "0.4",
    "deno": "1",
    "ie": "9",
    "android": "4",
    "ios": "6",
    "phantom": "1.9",
    "samsung": "1",
    "rhino": "1.7.13",
    "opera_mobile": "12",
    "electron": "0.20"
  },
  "transform-property-literals": {
    "chrome": "7",
    "opera": "12",
    "edge": "12",
    "firefox": "2",
    "safari": "5.1",
    "node": "0.4",
    "deno": "1",
    "ie": "9",
    "android": "4",
    "ios": "6",
    "phantom": "1.9",
    "samsung": "1",
    "rhino": "1.7.13",
    "opera_mobile": "12",
    "electron": "0.20"
  },
  "transform-reserved-words": {
    "chrome": "13",
    "opera": "10.50",
    "edge": "12",
    "firefox": "2",
    "safari": "3.1",
    "node": "0.6",
    "deno": "1",
    "ie": "9",
    "android": "4.4",
    "ios": "6",
    "phantom": "1.9",
    "samsung": "1",
    "rhino": "1.7.13",
    "opera_mobile": "10.1",
    "electron": "0.20"
  },
  "transform-export-namespace-from": {
    "chrome": "72",
    "deno": "1.0",
    "edge": "79",
    "firefox": "80",
    "node": "13.2",
    "opera": "60",
    "opera_mobile": "51",
    "safari": "14.1",
    "ios": "14.5",
    "samsung": "11.0",
    "android": "72",
    "electron": "5.0"
  },
  "proposal-export-namespace-from": {
    "chrome": "72",
    "deno": "1.0",
    "edge": "79",
    "firefox": "80",
    "node": "13.2",
    "opera": "60",
    "opera_mobile": "51",
    "safari": "14.1",
    "ios": "14.5",
    "samsung": "11.0",
    "android": "72",
    "electron": "5.0"
  }
};

var exports$11 = {},
  _dewExec$10 = false;
function dew$10() {
  if (_dewExec$10) return exports$11;
  _dewExec$10 = true;
  exports$11 = _plugins;
  return exports$11;
}

var exports$10 = {},
  _dewExec$$ = false;
function dew$$() {
  if (_dewExec$$) return exports$10;
  _dewExec$$ = true;
  Object.defineProperty(exports$10, "__esModule", {
    value: true
  });
  exports$10.default = filterItems;
  exports$10.isRequired = isRequired;
  exports$10.targetsSupported = targetsSupported;
  var _semver = dew$1Z();
  var _plugins = dew$10();
  var _utils = dew$14();
  function targetsSupported(target, support) {
    const targetEnvironments = Object.keys(target);
    if (targetEnvironments.length === 0) {
      return false;
    }
    const unsupportedEnvironments = targetEnvironments.filter(environment => {
      const lowestImplementedVersion = (0, _utils.getLowestImplementedVersion)(support, environment);
      if (!lowestImplementedVersion) {
        return true;
      }
      const lowestTargetedVersion = target[environment];
      if ((0, _utils.isUnreleasedVersion)(lowestTargetedVersion, environment)) {
        return false;
      }
      if ((0, _utils.isUnreleasedVersion)(lowestImplementedVersion, environment)) {
        return true;
      }
      if (!_semver.valid(lowestTargetedVersion.toString())) {
        throw new Error(`Invalid version passed for target "${environment}": "${lowestTargetedVersion}". ` + "Versions must be in semver format (major.minor.patch)");
      }
      return _semver.gt((0, _utils.semverify)(lowestImplementedVersion), lowestTargetedVersion.toString());
    });
    return unsupportedEnvironments.length === 0;
  }
  function isRequired(name, targets, {
    compatData = _plugins,
    includes,
    excludes
  } = {}) {
    if (excludes != null && excludes.has(name)) return false;
    if (includes != null && includes.has(name)) return true;
    return !targetsSupported(targets, compatData[name]);
  }
  function filterItems(list, includes, excludes, targets, defaultIncludes, defaultExcludes, pluginSyntaxMap) {
    const result = new Set();
    const options = {
      compatData: list,
      includes,
      excludes
    };
    for (const item in list) {
      if (isRequired(item, targets, options)) {
        result.add(item);
      } else if (pluginSyntaxMap) {
        const shippedProposalsSyntax = pluginSyntaxMap.get(item);
        if (shippedProposalsSyntax) {
          result.add(shippedProposalsSyntax);
        }
      }
    }
    defaultIncludes == null || defaultIncludes.forEach(item => !excludes.has(item) && result.add(item));
    defaultExcludes == null || defaultExcludes.forEach(item => !includes.has(item) && result.delete(item));
    return result;
  }
  return exports$10;
}

var exports$$ = {},
  _dewExec$_ = false;
function dew$_() {
  if (_dewExec$_) return exports$$;
  _dewExec$_ = true;
  var process = _nodeProcess;
  Object.defineProperty(exports$$, "__esModule", {
    value: true
  });
  Object.defineProperty(exports$$, "TargetNames", {
    enumerable: true,
    get: function () {
      return _options.TargetNames;
    }
  });
  exports$$.default = getTargets;
  Object.defineProperty(exports$$, "filterItems", {
    enumerable: true,
    get: function () {
      return _filterItems.default;
    }
  });
  Object.defineProperty(exports$$, "getInclusionReasons", {
    enumerable: true,
    get: function () {
      return _debug.getInclusionReasons;
    }
  });
  exports$$.isBrowsersQueryValid = isBrowsersQueryValid;
  Object.defineProperty(exports$$, "isRequired", {
    enumerable: true,
    get: function () {
      return _filterItems.isRequired;
    }
  });
  Object.defineProperty(exports$$, "prettifyTargets", {
    enumerable: true,
    get: function () {
      return _pretty.prettifyTargets;
    }
  });
  Object.defineProperty(exports$$, "unreleasedLabels", {
    enumerable: true,
    get: function () {
      return _targets.unreleasedLabels;
    }
  });
  var _browserslist = dew$1d();
  var _helperValidatorOption = dew$1a();
  var _nativeModules = dew$19();
  var _lruCache = dew$16();
  var _utils = dew$14();
  var _targets = dew$15();
  var _options = dew$13();
  var _pretty = dew$12();
  var _debug = dew$11();
  var _filterItems = dew$$();
  const ESM_SUPPORT = _nativeModules["es6.module"];
  const v = new _helperValidatorOption.OptionValidator("@babel/helper-compilation-targets");
  function validateTargetNames(targets) {
    const validTargets = Object.keys(_options.TargetNames);
    for (const target of Object.keys(targets)) {
      if (!(target in _options.TargetNames)) {
        throw new Error(v.formatMessage(`'${target}' is not a valid target
- Did you mean '${(0, _helperValidatorOption.findSuggestion)(target, validTargets)}'?`));
      }
    }
    return targets;
  }
  function isBrowsersQueryValid(browsers) {
    return typeof browsers === "string" || Array.isArray(browsers) && browsers.every(b => typeof b === "string");
  }
  function validateBrowsers(browsers) {
    v.invariant(browsers === undefined || isBrowsersQueryValid(browsers), `'${String(browsers)}' is not a valid browserslist query`);
    return browsers;
  }
  function getLowestVersions(browsers) {
    return browsers.reduce((all, browser) => {
      const [browserName, browserVersion] = browser.split(" ");
      const target = _targets.browserNameMap[browserName];
      if (!target) {
        return all;
      }
      try {
        const splitVersion = browserVersion.split("-")[0].toLowerCase();
        const isSplitUnreleased = (0, _utils.isUnreleasedVersion)(splitVersion, target);
        if (!all[target]) {
          all[target] = isSplitUnreleased ? splitVersion : (0, _utils.semverify)(splitVersion);
          return all;
        }
        const version = all[target];
        const isUnreleased = (0, _utils.isUnreleasedVersion)(version, target);
        if (isUnreleased && isSplitUnreleased) {
          all[target] = (0, _utils.getLowestUnreleased)(version, splitVersion, target);
        } else if (isUnreleased) {
          all[target] = (0, _utils.semverify)(splitVersion);
        } else if (!isUnreleased && !isSplitUnreleased) {
          const parsedBrowserVersion = (0, _utils.semverify)(splitVersion);
          all[target] = (0, _utils.semverMin)(version, parsedBrowserVersion);
        }
      } catch (_) {}
      return all;
    }, {});
  }
  function outputDecimalWarning(decimalTargets) {
    if (!decimalTargets.length) {
      return;
    }
    console.warn("Warning, the following targets are using a decimal version:\n");
    decimalTargets.forEach(({
      target,
      value
    }) => console.warn(`  ${target}: ${value}`));
    console.warn(`
We recommend using a string for minor/patch versions to avoid numbers like 6.10
getting parsed as 6.1, which can lead to unexpected behavior.
`);
  }
  function semverifyTarget(target, value) {
    try {
      return (0, _utils.semverify)(value);
    } catch (_) {
      throw new Error(v.formatMessage(`'${value}' is not a valid value for 'targets.${target}'.`));
    }
  }
  function nodeTargetParser(value) {
    const parsed = value === true || value === "current" ? process.versions.node : semverifyTarget("node", value);
    return ["node", parsed];
  }
  function defaultTargetParser(target, value) {
    const version = (0, _utils.isUnreleasedVersion)(value, target) ? value.toLowerCase() : semverifyTarget(target, value);
    return [target, version];
  }
  function generateTargets(inputTargets) {
    const input = Object.assign({}, inputTargets);
    delete input.esmodules;
    delete input.browsers;
    return input;
  }
  function resolveTargets(queries, env) {
    const resolved = _browserslist(queries, {
      mobileToDesktop: true,
      env
    });
    return getLowestVersions(resolved);
  }
  const targetsCache = new _lruCache({
    max: 64
  });
  function resolveTargetsCached(queries, env) {
    const cacheKey = typeof queries === "string" ? queries : queries.join() + env;
    let cached = targetsCache.get(cacheKey);
    if (!cached) {
      cached = resolveTargets(queries, env);
      targetsCache.set(cacheKey, cached);
    }
    return Object.assign({}, cached);
  }
  function getTargets(inputTargets = {}, options = {}) {
    var _browsers, _browsers2;
    let {
      browsers,
      esmodules
    } = inputTargets;
    const {
      configPath = "."
    } = options;
    validateBrowsers(browsers);
    const input = generateTargets(inputTargets);
    let targets = validateTargetNames(input);
    const shouldParseBrowsers = !!browsers;
    const hasTargets = shouldParseBrowsers || Object.keys(targets).length > 0;
    const shouldSearchForConfig = !options.ignoreBrowserslistConfig && !hasTargets;
    if (!browsers && shouldSearchForConfig) {
      browsers = _browserslist.loadConfig({
        config: options.configFile,
        path: configPath,
        env: options.browserslistEnv
      });
      if (browsers == null) {
        {
          browsers = [];
        }
      }
    }
    if (esmodules && (esmodules !== "intersect" || !((_browsers = browsers) != null && _browsers.length))) {
      browsers = Object.keys(ESM_SUPPORT).map(browser => `${browser} >= ${ESM_SUPPORT[browser]}`).join(", ");
      esmodules = false;
    }
    if ((_browsers2 = browsers) != null && _browsers2.length) {
      const queryBrowsers = resolveTargetsCached(browsers, options.browserslistEnv);
      if (esmodules === "intersect") {
        for (const browser of Object.keys(queryBrowsers)) {
          if (browser !== "deno" && browser !== "ie") {
            const esmSupportVersion = ESM_SUPPORT[browser === "opera_mobile" ? "op_mob" : browser];
            if (esmSupportVersion) {
              const version = queryBrowsers[browser];
              queryBrowsers[browser] = (0, _utils.getHighestUnreleased)(version, (0, _utils.semverify)(esmSupportVersion), browser);
            } else {
              delete queryBrowsers[browser];
            }
          } else {
            delete queryBrowsers[browser];
          }
        }
      }
      targets = Object.assign(queryBrowsers, targets);
    }
    const result = {};
    const decimalWarnings = [];
    for (const target of Object.keys(targets).sort()) {
      const value = targets[target];
      if (typeof value === "number" && value % 1 !== 0) {
        decimalWarnings.push({
          target,
          value
        });
      }
      const [parsedTarget, parsedValue] = target === "node" ? nodeTargetParser(value) : defaultTargetParser(target, value);
      if (parsedValue) {
        result[parsedTarget] = parsedValue;
      }
    }
    outputDecimalWarning(decimalWarnings);
    return result;
  }
  return exports$$;
}

var exports$_ = {},
  _dewExec$Z = false;
function dew$Z() {
  if (_dewExec$Z) return exports$_;
  _dewExec$Z = true;
  Object.defineProperty(exports$_, "__esModule", {
    value: true
  });
  exports$_.resolveBrowserslistConfigFile = resolveBrowserslistConfigFile;
  exports$_.resolveTargets = resolveTargets;
  function _path() {
    const data = _path2;
    _path = function () {
      return data;
    };
    return data;
  }
  function _helperCompilationTargets() {
    const data = dew$_();
    _helperCompilationTargets = function () {
      return data;
    };
    return data;
  }
  function resolveBrowserslistConfigFile(browserslistConfigFile, configFileDir) {
    return _path().resolve(configFileDir, browserslistConfigFile);
  }
  function resolveTargets(options, root) {
    const optTargets = options.targets;
    let targets;
    if (typeof optTargets === "string" || Array.isArray(optTargets)) {
      targets = {
        browsers: optTargets
      };
    } else if (optTargets) {
      if ("esmodules" in optTargets) {
        targets = Object.assign({}, optTargets, {
          esmodules: "intersect"
        });
      } else {
        targets = optTargets;
      }
    }
    const {
      browserslistConfigFile
    } = options;
    let configFile;
    let ignoreBrowserslistConfig = false;
    if (typeof browserslistConfigFile === "string") {
      configFile = browserslistConfigFile;
    } else {
      ignoreBrowserslistConfig = browserslistConfigFile === false;
    }
    return (0, _helperCompilationTargets().default)(targets, {
      ignoreBrowserslistConfig,
      configFile,
      configPath: root,
      browserslistEnv: options.browserslistEnv
    });
  }
  return exports$_;
}

var exports$Z = {},
  _dewExec$Y = false;
function dew$Y() {
  if (_dewExec$Y) return exports$Z;
  _dewExec$Y = true;
  Object.defineProperty(exports$Z, "__esModule", {
    value: true
  });
  exports$Z.createCachedDescriptors = createCachedDescriptors;
  exports$Z.createDescriptor = createDescriptor;
  exports$Z.createUncachedDescriptors = createUncachedDescriptors;
  function _gensync() {
    const data = dew$1J();
    _gensync = function () {
      return data;
    };
    return data;
  }
  var _functional = dew$1s();
  var _index = dew$4();
  var _item = dew$X();
  var _caching = dew$1G();
  var _resolveTargets = dew$Z();
  function isEqualDescriptor(a, b) {
    var _a$file, _b$file, _a$file2, _b$file2;
    return a.name === b.name && a.value === b.value && a.options === b.options && a.dirname === b.dirname && a.alias === b.alias && a.ownPass === b.ownPass && ((_a$file = a.file) == null ? void 0 : _a$file.request) === ((_b$file = b.file) == null ? void 0 : _b$file.request) && ((_a$file2 = a.file) == null ? void 0 : _a$file2.resolved) === ((_b$file2 = b.file) == null ? void 0 : _b$file2.resolved);
  }
  function* handlerOf(value) {
    return value;
  }
  function optionsWithResolvedBrowserslistConfigFile(options, dirname) {
    if (typeof options.browserslistConfigFile === "string") {
      options.browserslistConfigFile = (0, _resolveTargets.resolveBrowserslistConfigFile)(options.browserslistConfigFile, dirname);
    }
    return options;
  }
  function createCachedDescriptors(dirname, options, alias) {
    const {
      plugins,
      presets,
      passPerPreset
    } = options;
    return {
      options: optionsWithResolvedBrowserslistConfigFile(options, dirname),
      plugins: plugins ? () => createCachedPluginDescriptors(plugins, dirname)(alias) : () => handlerOf([]),
      presets: presets ? () => createCachedPresetDescriptors(presets, dirname)(alias)(!!passPerPreset) : () => handlerOf([])
    };
  }
  function createUncachedDescriptors(dirname, options, alias) {
    return {
      options: optionsWithResolvedBrowserslistConfigFile(options, dirname),
      plugins: (0, _functional.once)(() => createPluginDescriptors(options.plugins || [], dirname, alias)),
      presets: (0, _functional.once)(() => createPresetDescriptors(options.presets || [], dirname, alias, !!options.passPerPreset))
    };
  }
  const PRESET_DESCRIPTOR_CACHE = new WeakMap();
  const createCachedPresetDescriptors = (0, _caching.makeWeakCacheSync)((items, cache) => {
    const dirname = cache.using(dir => dir);
    return (0, _caching.makeStrongCacheSync)(alias => (0, _caching.makeStrongCache)(function* (passPerPreset) {
      const descriptors = yield* createPresetDescriptors(items, dirname, alias, passPerPreset);
      return descriptors.map(desc => loadCachedDescriptor(PRESET_DESCRIPTOR_CACHE, desc));
    }));
  });
  const PLUGIN_DESCRIPTOR_CACHE = new WeakMap();
  const createCachedPluginDescriptors = (0, _caching.makeWeakCacheSync)((items, cache) => {
    const dirname = cache.using(dir => dir);
    return (0, _caching.makeStrongCache)(function* (alias) {
      const descriptors = yield* createPluginDescriptors(items, dirname, alias);
      return descriptors.map(desc => loadCachedDescriptor(PLUGIN_DESCRIPTOR_CACHE, desc));
    });
  });
  const DEFAULT_OPTIONS = {};
  function loadCachedDescriptor(cache, desc) {
    const {
      value,
      options = DEFAULT_OPTIONS
    } = desc;
    if (options === false) return desc;
    let cacheByOptions = cache.get(value);
    if (!cacheByOptions) {
      cacheByOptions = new WeakMap();
      cache.set(value, cacheByOptions);
    }
    let possibilities = cacheByOptions.get(options);
    if (!possibilities) {
      possibilities = [];
      cacheByOptions.set(options, possibilities);
    }
    if (!possibilities.includes(desc)) {
      const matches = possibilities.filter(possibility => isEqualDescriptor(possibility, desc));
      if (matches.length > 0) {
        return matches[0];
      }
      possibilities.push(desc);
    }
    return desc;
  }
  function* createPresetDescriptors(items, dirname, alias, passPerPreset) {
    return yield* createDescriptors("preset", items, dirname, alias, passPerPreset);
  }
  function* createPluginDescriptors(items, dirname, alias) {
    return yield* createDescriptors("plugin", items, dirname, alias);
  }
  function* createDescriptors(type, items, dirname, alias, ownPass) {
    const descriptors = yield* _gensync().all(items.map((item, index) => createDescriptor(item, dirname, {
      type,
      alias: `${alias}$${index}`,
      ownPass: !!ownPass
    })));
    assertNoDuplicates(descriptors);
    return descriptors;
  }
  function* createDescriptor(pair, dirname, {
    type,
    alias,
    ownPass
  }) {
    const desc = (0, _item.getItemDescriptor)(pair);
    if (desc) {
      return desc;
    }
    let name;
    let options;
    let value = pair;
    if (Array.isArray(value)) {
      if (value.length === 3) {
        [value, options, name] = value;
      } else {
        [value, options] = value;
      }
    }
    let file = undefined;
    let filepath = null;
    if (typeof value === "string") {
      if (typeof type !== "string") {
        throw new Error("To resolve a string-based item, the type of item must be given");
      }
      const resolver = type === "plugin" ? _index.loadPlugin : _index.loadPreset;
      const request = value;
      ({
        filepath,
        value
      } = yield* resolver(value, dirname));
      file = {
        request,
        resolved: filepath
      };
    }
    if (!value) {
      throw new Error(`Unexpected falsy value: ${String(value)}`);
    }
    if (typeof value === "object" && value.__esModule) {
      if (value.default) {
        value = value.default;
      } else {
        throw new Error("Must export a default export when using ES6 modules.");
      }
    }
    if (typeof value !== "object" && typeof value !== "function") {
      throw new Error(`Unsupported format: ${typeof value}. Expected an object or a function.`);
    }
    if (filepath !== null && typeof value === "object" && value) {
      throw new Error(`Plugin/Preset files are not allowed to export objects, only functions. In ${filepath}`);
    }
    return {
      name,
      alias: filepath || alias,
      value,
      options,
      dirname,
      ownPass,
      file
    };
  }
  function assertNoDuplicates(items) {
    const map = new Map();
    for (const item of items) {
      if (typeof item.value !== "function") continue;
      let nameMap = map.get(item.value);
      if (!nameMap) {
        nameMap = new Set();
        map.set(item.value, nameMap);
      }
      if (nameMap.has(item.name)) {
        const conflicts = items.filter(i => i.value === item.value);
        throw new Error([`Duplicate plugin/preset detected.`, `If you'd like to use two separate instances of a plugin,`, `they need separate names, e.g.`, ``, `  plugins: [`, `    ['some-plugin', {}],`, `    ['some-plugin', {}, 'some unique name'],`, `  ]`, ``, `Duplicates detected are:`, `${JSON.stringify(conflicts, null, 2)}`].join("\n"));
      }
      nameMap.add(item.name);
    }
  }
  return exports$Z;
}

var exports$Y = {},
  _dewExec$X = false;
function dew$X() {
  if (_dewExec$X) return exports$Y;
  _dewExec$X = true;
  Object.defineProperty(exports$Y, "__esModule", {
    value: true
  });
  exports$Y.createConfigItem = createConfigItem;
  exports$Y.createItemFromDescriptor = createItemFromDescriptor;
  exports$Y.getItemDescriptor = getItemDescriptor;
  function _path() {
    const data = _path2;
    _path = function () {
      return data;
    };
    return data;
  }
  var _configDescriptors = dew$Y();
  function createItemFromDescriptor(desc) {
    return new ConfigItem(desc);
  }
  function* createConfigItem(value, {
    dirname = ".",
    type
  } = {}) {
    const descriptor = yield* (0, _configDescriptors.createDescriptor)(value, _path().resolve(dirname), {
      type,
      alias: "programmatic item"
    });
    return createItemFromDescriptor(descriptor);
  }
  const CONFIG_ITEM_BRAND = Symbol.for("@babel/core@7 - ConfigItem");
  function getItemDescriptor(item) {
    if (item != null && item[CONFIG_ITEM_BRAND]) {
      return item._descriptor;
    }
    return undefined;
  }
  class ConfigItem {
    constructor(descriptor) {
      this._descriptor = void 0;
      this[CONFIG_ITEM_BRAND] = true;
      this.value = void 0;
      this.options = void 0;
      this.dirname = void 0;
      this.name = void 0;
      this.file = void 0;
      this._descriptor = descriptor;
      Object.defineProperty(this, "_descriptor", {
        enumerable: false
      });
      Object.defineProperty(this, CONFIG_ITEM_BRAND, {
        enumerable: false
      });
      this.value = this._descriptor.value;
      this.options = this._descriptor.options;
      this.dirname = this._descriptor.dirname;
      this.name = this._descriptor.name;
      this.file = this._descriptor.file ? {
        request: this._descriptor.file.request,
        resolved: this._descriptor.file.resolved
      } : undefined;
      Object.freeze(this);
    }
  }
  Object.freeze(ConfigItem.prototype);
  return exports$Y;
}

var exports$X = {},
  _dewExec$W = false;
function dew$W() {
  if (_dewExec$W) return exports$X;
  _dewExec$W = true;
  Object.defineProperty(exports$X, "__esModule", {
    value: true
  });
  exports$X.default = void 0;
  exports$X.default = {
    auxiliaryComment: {
      message: "Use `auxiliaryCommentBefore` or `auxiliaryCommentAfter`"
    },
    blacklist: {
      message: "Put the specific transforms you want in the `plugins` option"
    },
    breakConfig: {
      message: "This is not a necessary option in Babel 6"
    },
    experimental: {
      message: "Put the specific transforms you want in the `plugins` option"
    },
    externalHelpers: {
      message: "Use the `external-helpers` plugin instead. " + "Check out http://babeljs.io/docs/plugins/external-helpers/"
    },
    extra: {
      message: ""
    },
    jsxPragma: {
      message: "use the `pragma` option in the `react-jsx` plugin. " + "Check out http://babeljs.io/docs/plugins/transform-react-jsx/"
    },
    loose: {
      message: "Specify the `loose` option for the relevant plugin you are using " + "or use a preset that sets the option."
    },
    metadataUsedHelpers: {
      message: "Not required anymore as this is enabled by default"
    },
    modules: {
      message: "Use the corresponding module transform plugin in the `plugins` option. " + "Check out http://babeljs.io/docs/plugins/#modules"
    },
    nonStandard: {
      message: "Use the `react-jsx` and `flow-strip-types` plugins to support JSX and Flow. " + "Also check out the react preset http://babeljs.io/docs/plugins/preset-react/"
    },
    optional: {
      message: "Put the specific transforms you want in the `plugins` option"
    },
    sourceMapName: {
      message: "The `sourceMapName` option has been removed because it makes more sense for the " + "tooling that calls Babel to assign `map.file` themselves."
    },
    stage: {
      message: "Check out the corresponding stage-x presets http://babeljs.io/docs/plugins/#presets"
    },
    whitelist: {
      message: "Put the specific transforms you want in the `plugins` option"
    },
    resolveModuleSource: {
      version: 6,
      message: "Use `babel-plugin-module-resolver@3`'s 'resolvePath' options"
    },
    metadata: {
      version: 6,
      message: "Generated plugin metadata is always included in the output result"
    },
    sourceMapTarget: {
      version: 6,
      message: "The `sourceMapTarget` option has been removed because it makes more sense for the tooling " + "that calls Babel to assign `map.file` themselves."
    }
  };
  return exports$X;
}

var exports$W = {},
  _dewExec$V = false;
function dew$V() {
  if (_dewExec$V) return exports$W;
  _dewExec$V = true;
  Object.defineProperty(exports$W, "__esModule", {
    value: true
  });
  exports$W.access = access;
  exports$W.assertArray = assertArray;
  exports$W.assertAssumptions = assertAssumptions;
  exports$W.assertBabelrcSearch = assertBabelrcSearch;
  exports$W.assertBoolean = assertBoolean;
  exports$W.assertCallerMetadata = assertCallerMetadata;
  exports$W.assertCompact = assertCompact;
  exports$W.assertConfigApplicableTest = assertConfigApplicableTest;
  exports$W.assertConfigFileSearch = assertConfigFileSearch;
  exports$W.assertFunction = assertFunction;
  exports$W.assertIgnoreList = assertIgnoreList;
  exports$W.assertInputSourceMap = assertInputSourceMap;
  exports$W.assertObject = assertObject;
  exports$W.assertPluginList = assertPluginList;
  exports$W.assertRootMode = assertRootMode;
  exports$W.assertSourceMaps = assertSourceMaps;
  exports$W.assertSourceType = assertSourceType;
  exports$W.assertString = assertString;
  exports$W.assertTargets = assertTargets;
  exports$W.msg = msg;
  function _helperCompilationTargets() {
    const data = dew$_();
    _helperCompilationTargets = function () {
      return data;
    };
    return data;
  }
  var _options = dew$U();
  function msg(loc) {
    switch (loc.type) {
      case "root":
        return ``;
      case "env":
        return `${msg(loc.parent)}.env["${loc.name}"]`;
      case "overrides":
        return `${msg(loc.parent)}.overrides[${loc.index}]`;
      case "option":
        return `${msg(loc.parent)}.${loc.name}`;
      case "access":
        return `${msg(loc.parent)}[${JSON.stringify(loc.name)}]`;
      default:
        throw new Error(`Assertion failure: Unknown type ${loc.type}`);
    }
  }
  function access(loc, name) {
    return {
      type: "access",
      name,
      parent: loc
    };
  }
  function assertRootMode(loc, value) {
    if (value !== undefined && value !== "root" && value !== "upward" && value !== "upward-optional") {
      throw new Error(`${msg(loc)} must be a "root", "upward", "upward-optional" or undefined`);
    }
    return value;
  }
  function assertSourceMaps(loc, value) {
    if (value !== undefined && typeof value !== "boolean" && value !== "inline" && value !== "both") {
      throw new Error(`${msg(loc)} must be a boolean, "inline", "both", or undefined`);
    }
    return value;
  }
  function assertCompact(loc, value) {
    if (value !== undefined && typeof value !== "boolean" && value !== "auto") {
      throw new Error(`${msg(loc)} must be a boolean, "auto", or undefined`);
    }
    return value;
  }
  function assertSourceType(loc, value) {
    if (value !== undefined && value !== "module" && value !== "script" && value !== "unambiguous") {
      throw new Error(`${msg(loc)} must be "module", "script", "unambiguous", or undefined`);
    }
    return value;
  }
  function assertCallerMetadata(loc, value) {
    const obj = assertObject(loc, value);
    if (obj) {
      if (typeof obj.name !== "string") {
        throw new Error(`${msg(loc)} set but does not contain "name" property string`);
      }
      for (const prop of Object.keys(obj)) {
        const propLoc = access(loc, prop);
        const value = obj[prop];
        if (value != null && typeof value !== "boolean" && typeof value !== "string" && typeof value !== "number") {
          throw new Error(`${msg(propLoc)} must be null, undefined, a boolean, a string, or a number.`);
        }
      }
    }
    return value;
  }
  function assertInputSourceMap(loc, value) {
    if (value !== undefined && typeof value !== "boolean" && (typeof value !== "object" || !value)) {
      throw new Error(`${msg(loc)} must be a boolean, object, or undefined`);
    }
    return value;
  }
  function assertString(loc, value) {
    if (value !== undefined && typeof value !== "string") {
      throw new Error(`${msg(loc)} must be a string, or undefined`);
    }
    return value;
  }
  function assertFunction(loc, value) {
    if (value !== undefined && typeof value !== "function") {
      throw new Error(`${msg(loc)} must be a function, or undefined`);
    }
    return value;
  }
  function assertBoolean(loc, value) {
    if (value !== undefined && typeof value !== "boolean") {
      throw new Error(`${msg(loc)} must be a boolean, or undefined`);
    }
    return value;
  }
  function assertObject(loc, value) {
    if (value !== undefined && (typeof value !== "object" || Array.isArray(value) || !value)) {
      throw new Error(`${msg(loc)} must be an object, or undefined`);
    }
    return value;
  }
  function assertArray(loc, value) {
    if (value != null && !Array.isArray(value)) {
      throw new Error(`${msg(loc)} must be an array, or undefined`);
    }
    return value;
  }
  function assertIgnoreList(loc, value) {
    const arr = assertArray(loc, value);
    arr == null || arr.forEach((item, i) => assertIgnoreItem(access(loc, i), item));
    return arr;
  }
  function assertIgnoreItem(loc, value) {
    if (typeof value !== "string" && typeof value !== "function" && !(value instanceof RegExp)) {
      throw new Error(`${msg(loc)} must be an array of string/Function/RegExp values, or undefined`);
    }
    return value;
  }
  function assertConfigApplicableTest(loc, value) {
    if (value === undefined) {
      return value;
    }
    if (Array.isArray(value)) {
      value.forEach((item, i) => {
        if (!checkValidTest(item)) {
          throw new Error(`${msg(access(loc, i))} must be a string/Function/RegExp.`);
        }
      });
    } else if (!checkValidTest(value)) {
      throw new Error(`${msg(loc)} must be a string/Function/RegExp, or an array of those`);
    }
    return value;
  }
  function checkValidTest(value) {
    return typeof value === "string" || typeof value === "function" || value instanceof RegExp;
  }
  function assertConfigFileSearch(loc, value) {
    if (value !== undefined && typeof value !== "boolean" && typeof value !== "string") {
      throw new Error(`${msg(loc)} must be a undefined, a boolean, a string, ` + `got ${JSON.stringify(value)}`);
    }
    return value;
  }
  function assertBabelrcSearch(loc, value) {
    if (value === undefined || typeof value === "boolean") {
      return value;
    }
    if (Array.isArray(value)) {
      value.forEach((item, i) => {
        if (!checkValidTest(item)) {
          throw new Error(`${msg(access(loc, i))} must be a string/Function/RegExp.`);
        }
      });
    } else if (!checkValidTest(value)) {
      throw new Error(`${msg(loc)} must be a undefined, a boolean, a string/Function/RegExp ` + `or an array of those, got ${JSON.stringify(value)}`);
    }
    return value;
  }
  function assertPluginList(loc, value) {
    const arr = assertArray(loc, value);
    if (arr) {
      arr.forEach((item, i) => assertPluginItem(access(loc, i), item));
    }
    return arr;
  }
  function assertPluginItem(loc, value) {
    if (Array.isArray(value)) {
      if (value.length === 0) {
        throw new Error(`${msg(loc)} must include an object`);
      }
      if (value.length > 3) {
        throw new Error(`${msg(loc)} may only be a two-tuple or three-tuple`);
      }
      assertPluginTarget(access(loc, 0), value[0]);
      if (value.length > 1) {
        const opts = value[1];
        if (opts !== undefined && opts !== false && (typeof opts !== "object" || Array.isArray(opts) || opts === null)) {
          throw new Error(`${msg(access(loc, 1))} must be an object, false, or undefined`);
        }
      }
      if (value.length === 3) {
        const name = value[2];
        if (name !== undefined && typeof name !== "string") {
          throw new Error(`${msg(access(loc, 2))} must be a string, or undefined`);
        }
      }
    } else {
      assertPluginTarget(loc, value);
    }
    return value;
  }
  function assertPluginTarget(loc, value) {
    if ((typeof value !== "object" || !value) && typeof value !== "string" && typeof value !== "function") {
      throw new Error(`${msg(loc)} must be a string, object, function`);
    }
    return value;
  }
  function assertTargets(loc, value) {
    if ((0, _helperCompilationTargets().isBrowsersQueryValid)(value)) return value;
    if (typeof value !== "object" || !value || Array.isArray(value)) {
      throw new Error(`${msg(loc)} must be a string, an array of strings or an object`);
    }
    const browsersLoc = access(loc, "browsers");
    const esmodulesLoc = access(loc, "esmodules");
    assertBrowsersList(browsersLoc, value.browsers);
    assertBoolean(esmodulesLoc, value.esmodules);
    for (const key of Object.keys(value)) {
      const val = value[key];
      const subLoc = access(loc, key);
      if (key === "esmodules") assertBoolean(subLoc, val);else if (key === "browsers") assertBrowsersList(subLoc, val);else if (!hasOwnProperty.call(_helperCompilationTargets().TargetNames, key)) {
        const validTargets = Object.keys(_helperCompilationTargets().TargetNames).join(", ");
        throw new Error(`${msg(subLoc)} is not a valid target. Supported targets are ${validTargets}`);
      } else assertBrowserVersion(subLoc, val);
    }
    return value;
  }
  function assertBrowsersList(loc, value) {
    if (value !== undefined && !(0, _helperCompilationTargets().isBrowsersQueryValid)(value)) {
      throw new Error(`${msg(loc)} must be undefined, a string or an array of strings`);
    }
  }
  function assertBrowserVersion(loc, value) {
    if (typeof value === "number" && Math.round(value) === value) return;
    if (typeof value === "string") return;
    throw new Error(`${msg(loc)} must be a string or an integer number`);
  }
  function assertAssumptions(loc, value) {
    if (value === undefined) return;
    if (typeof value !== "object" || value === null) {
      throw new Error(`${msg(loc)} must be an object or undefined.`);
    }
    let root = loc;
    do {
      root = root.parent;
    } while (root.type !== "root");
    const inPreset = root.source === "preset";
    for (const name of Object.keys(value)) {
      const subLoc = access(loc, name);
      if (!_options.assumptionsNames.has(name)) {
        throw new Error(`${msg(subLoc)} is not a supported assumption.`);
      }
      if (typeof value[name] !== "boolean") {
        throw new Error(`${msg(subLoc)} must be a boolean.`);
      }
      if (inPreset && value[name] === false) {
        throw new Error(`${msg(subLoc)} cannot be set to 'false' inside presets.`);
      }
    }
    return value;
  }
  return exports$W;
}

var exports$V = {},
  _dewExec$U = false;
function dew$U() {
  if (_dewExec$U) return exports$V;
  _dewExec$U = true;
  Object.defineProperty(exports$V, "__esModule", {
    value: true
  });
  exports$V.assumptionsNames = void 0;
  exports$V.checkNoUnwrappedItemOptionPairs = checkNoUnwrappedItemOptionPairs;
  exports$V.validate = validate;
  var _removed = dew$W();
  var _optionAssertions = dew$V();
  var _configError = dew$1C();
  const ROOT_VALIDATORS = {
    cwd: _optionAssertions.assertString,
    root: _optionAssertions.assertString,
    rootMode: _optionAssertions.assertRootMode,
    configFile: _optionAssertions.assertConfigFileSearch,
    caller: _optionAssertions.assertCallerMetadata,
    filename: _optionAssertions.assertString,
    filenameRelative: _optionAssertions.assertString,
    code: _optionAssertions.assertBoolean,
    ast: _optionAssertions.assertBoolean,
    cloneInputAst: _optionAssertions.assertBoolean,
    envName: _optionAssertions.assertString
  };
  const BABELRC_VALIDATORS = {
    babelrc: _optionAssertions.assertBoolean,
    babelrcRoots: _optionAssertions.assertBabelrcSearch
  };
  const NONPRESET_VALIDATORS = {
    extends: _optionAssertions.assertString,
    ignore: _optionAssertions.assertIgnoreList,
    only: _optionAssertions.assertIgnoreList,
    targets: _optionAssertions.assertTargets,
    browserslistConfigFile: _optionAssertions.assertConfigFileSearch,
    browserslistEnv: _optionAssertions.assertString
  };
  const COMMON_VALIDATORS = {
    inputSourceMap: _optionAssertions.assertInputSourceMap,
    presets: _optionAssertions.assertPluginList,
    plugins: _optionAssertions.assertPluginList,
    passPerPreset: _optionAssertions.assertBoolean,
    assumptions: _optionAssertions.assertAssumptions,
    env: assertEnvSet,
    overrides: assertOverridesList,
    test: _optionAssertions.assertConfigApplicableTest,
    include: _optionAssertions.assertConfigApplicableTest,
    exclude: _optionAssertions.assertConfigApplicableTest,
    retainLines: _optionAssertions.assertBoolean,
    comments: _optionAssertions.assertBoolean,
    shouldPrintComment: _optionAssertions.assertFunction,
    compact: _optionAssertions.assertCompact,
    minified: _optionAssertions.assertBoolean,
    auxiliaryCommentBefore: _optionAssertions.assertString,
    auxiliaryCommentAfter: _optionAssertions.assertString,
    sourceType: _optionAssertions.assertSourceType,
    wrapPluginVisitorMethod: _optionAssertions.assertFunction,
    highlightCode: _optionAssertions.assertBoolean,
    sourceMaps: _optionAssertions.assertSourceMaps,
    sourceMap: _optionAssertions.assertSourceMaps,
    sourceFileName: _optionAssertions.assertString,
    sourceRoot: _optionAssertions.assertString,
    parserOpts: _optionAssertions.assertObject,
    generatorOpts: _optionAssertions.assertObject
  };
  {
    Object.assign(COMMON_VALIDATORS, {
      getModuleId: _optionAssertions.assertFunction,
      moduleRoot: _optionAssertions.assertString,
      moduleIds: _optionAssertions.assertBoolean,
      moduleId: _optionAssertions.assertString
    });
  }
  const knownAssumptions = ["arrayLikeIsIterable", "constantReexports", "constantSuper", "enumerableModuleMeta", "ignoreFunctionLength", "ignoreToPrimitiveHint", "iterableIsArray", "mutableTemplateObject", "noClassCalls", "noDocumentAll", "noIncompleteNsImportDetection", "noNewArrows", "noUninitializedPrivateFieldAccess", "objectRestNoSymbols", "privateFieldsAsSymbols", "privateFieldsAsProperties", "pureGetters", "setClassMethods", "setComputedProperties", "setPublicClassFields", "setSpreadProperties", "skipForOfIteratorClosing", "superIsCallableConstructor"];
  exports$V.assumptionsNames = new Set(knownAssumptions);
  function getSource(loc) {
    return loc.type === "root" ? loc.source : getSource(loc.parent);
  }
  function validate(type, opts, filename) {
    try {
      return validateNested({
        type: "root",
        source: type
      }, opts);
    } catch (error) {
      const configError = new _configError.default(error.message, filename);
      if (error.code) configError.code = error.code;
      throw configError;
    }
  }
  function validateNested(loc, opts) {
    const type = getSource(loc);
    assertNoDuplicateSourcemap(opts);
    Object.keys(opts).forEach(key => {
      const optLoc = {
        type: "option",
        name: key,
        parent: loc
      };
      if (type === "preset" && NONPRESET_VALIDATORS[key]) {
        throw new Error(`${(0, _optionAssertions.msg)(optLoc)} is not allowed in preset options`);
      }
      if (type !== "arguments" && ROOT_VALIDATORS[key]) {
        throw new Error(`${(0, _optionAssertions.msg)(optLoc)} is only allowed in root programmatic options`);
      }
      if (type !== "arguments" && type !== "configfile" && BABELRC_VALIDATORS[key]) {
        if (type === "babelrcfile" || type === "extendsfile") {
          throw new Error(`${(0, _optionAssertions.msg)(optLoc)} is not allowed in .babelrc or "extends"ed files, only in root programmatic options, ` + `or babel.config.js/config file options`);
        }
        throw new Error(`${(0, _optionAssertions.msg)(optLoc)} is only allowed in root programmatic options, or babel.config.js/config file options`);
      }
      const validator = COMMON_VALIDATORS[key] || NONPRESET_VALIDATORS[key] || BABELRC_VALIDATORS[key] || ROOT_VALIDATORS[key] || throwUnknownError;
      validator(optLoc, opts[key]);
    });
    return opts;
  }
  function throwUnknownError(loc) {
    const key = loc.name;
    if (_removed.default[key]) {
      const {
        message,
        version = 5
      } = _removed.default[key];
      throw new Error(`Using removed Babel ${version} option: ${(0, _optionAssertions.msg)(loc)} - ${message}`);
    } else {
      const unknownOptErr = new Error(`Unknown option: ${(0, _optionAssertions.msg)(loc)}. Check out https://babeljs.io/docs/en/babel-core/#options for more information about options.`);
      unknownOptErr.code = "BABEL_UNKNOWN_OPTION";
      throw unknownOptErr;
    }
  }
  function assertNoDuplicateSourcemap(opts) {
    if (hasOwnProperty.call(opts, "sourceMap") && hasOwnProperty.call(opts, "sourceMaps")) {
      throw new Error(".sourceMap is an alias for .sourceMaps, cannot use both");
    }
  }
  function assertEnvSet(loc, value) {
    if (loc.parent.type === "env") {
      throw new Error(`${(0, _optionAssertions.msg)(loc)} is not allowed inside of another .env block`);
    }
    const parent = loc.parent;
    const obj = (0, _optionAssertions.assertObject)(loc, value);
    if (obj) {
      for (const envName of Object.keys(obj)) {
        const env = (0, _optionAssertions.assertObject)((0, _optionAssertions.access)(loc, envName), obj[envName]);
        if (!env) continue;
        const envLoc = {
          type: "env",
          name: envName,
          parent
        };
        validateNested(envLoc, env);
      }
    }
    return obj;
  }
  function assertOverridesList(loc, value) {
    if (loc.parent.type === "env") {
      throw new Error(`${(0, _optionAssertions.msg)(loc)} is not allowed inside an .env block`);
    }
    if (loc.parent.type === "overrides") {
      throw new Error(`${(0, _optionAssertions.msg)(loc)} is not allowed inside an .overrides block`);
    }
    const parent = loc.parent;
    const arr = (0, _optionAssertions.assertArray)(loc, value);
    if (arr) {
      for (const [index, item] of arr.entries()) {
        const objLoc = (0, _optionAssertions.access)(loc, index);
        const env = (0, _optionAssertions.assertObject)(objLoc, item);
        if (!env) throw new Error(`${(0, _optionAssertions.msg)(objLoc)} must be an object`);
        const overridesLoc = {
          type: "overrides",
          index,
          parent
        };
        validateNested(overridesLoc, env);
      }
    }
    return arr;
  }
  function checkNoUnwrappedItemOptionPairs(items, index, type, e) {
    if (index === 0) return;
    const lastItem = items[index - 1];
    const thisItem = items[index];
    if (lastItem.file && lastItem.options === undefined && typeof thisItem.value === "object") {
      e.message += `\n- Maybe you meant to use\n` + `"${type}s": [\n  ["${lastItem.file.request}", ${JSON.stringify(thisItem.value, undefined, 2)}]\n]\n` + `To be a valid ${type}, its name and options should be wrapped in a pair of brackets`;
    }
  }
  return exports$V;
}

var exports$U = {},
  _dewExec$T = false;
function dew$T() {
  if (_dewExec$T) return exports$U;
  _dewExec$T = true;
  Object.defineProperty(exports$U, "__esModule", {
    value: true
  });
  exports$U.default = pathToPattern;
  function _path() {
    const data = _path2;
    _path = function () {
      return data;
    };
    return data;
  }
  const sep = `\\${_path().sep}`;
  const endSep = `(?:${sep}|$)`;
  const substitution = `[^${sep}]+`;
  const starPat = `(?:${substitution}${sep})`;
  const starPatLast = `(?:${substitution}${endSep})`;
  const starStarPat = `${starPat}*?`;
  const starStarPatLast = `${starPat}*?${starPatLast}?`;
  function escapeRegExp(string) {
    return string.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&");
  }
  function pathToPattern(pattern, dirname) {
    const parts = _path().resolve(dirname, pattern).split(_path().sep);
    return new RegExp(["^", ...parts.map((part, i) => {
      const last = i === parts.length - 1;
      if (part === "**") return last ? starStarPatLast : starStarPat;
      if (part === "*") return last ? starPatLast : starPat;
      if (part.indexOf("*.") === 0) {
        return substitution + escapeRegExp(part.slice(1)) + (last ? endSep : sep);
      }
      return escapeRegExp(part) + (last ? endSep : sep);
    })].join(""));
  }
  return exports$U;
}

var exports$T = {},
  _dewExec$S = false;
function dew$S() {
  if (_dewExec$S) return exports$T;
  _dewExec$S = true;
  Object.defineProperty(exports$T, "__esModule", {
    value: true
  });
  exports$T.ConfigPrinter = exports$T.ChainFormatter = void 0;
  function _gensync() {
    const data = dew$1J();
    _gensync = function () {
      return data;
    };
    return data;
  }
  const ChainFormatter = exports$T.ChainFormatter = {
    Programmatic: 0,
    Config: 1
  };
  const Formatter = {
    title(type, callerName, filepath) {
      let title = "";
      if (type === ChainFormatter.Programmatic) {
        title = "programmatic options";
        if (callerName) {
          title += " from " + callerName;
        }
      } else {
        title = "config " + filepath;
      }
      return title;
    },
    loc(index, envName) {
      let loc = "";
      if (index != null) {
        loc += `.overrides[${index}]`;
      }
      if (envName != null) {
        loc += `.env["${envName}"]`;
      }
      return loc;
    },
    *optionsAndDescriptors(opt) {
      const content = Object.assign({}, opt.options);
      delete content.overrides;
      delete content.env;
      const pluginDescriptors = [...(yield* opt.plugins())];
      if (pluginDescriptors.length) {
        content.plugins = pluginDescriptors.map(d => descriptorToConfig(d));
      }
      const presetDescriptors = [...(yield* opt.presets())];
      if (presetDescriptors.length) {
        content.presets = [...presetDescriptors].map(d => descriptorToConfig(d));
      }
      return JSON.stringify(content, undefined, 2);
    }
  };
  function descriptorToConfig(d) {
    var _d$file;
    let name = (_d$file = d.file) == null ? void 0 : _d$file.request;
    if (name == null) {
      if (typeof d.value === "object") {
        name = d.value;
      } else if (typeof d.value === "function") {
        name = `[Function: ${d.value.toString().slice(0, 50)} ... ]`;
      }
    }
    if (name == null) {
      name = "[Unknown]";
    }
    if (d.options === undefined) {
      return name;
    } else if (d.name == null) {
      return [name, d.options];
    } else {
      return [name, d.options, d.name];
    }
  }
  class ConfigPrinter {
    constructor() {
      this._stack = [];
    }
    configure(enabled, type, {
      callerName,
      filepath
    }) {
      if (!enabled) return () => {};
      return (content, index, envName) => {
        this._stack.push({
          type,
          callerName,
          filepath,
          content,
          index,
          envName
        });
      };
    }
    static *format(config) {
      let title = Formatter.title(config.type, config.callerName, config.filepath);
      const loc = Formatter.loc(config.index, config.envName);
      if (loc) title += ` ${loc}`;
      const content = yield* Formatter.optionsAndDescriptors(config.content);
      return `${title}\n${content}`;
    }
    *output() {
      if (this._stack.length === 0) return "";
      const configs = yield* _gensync().all(this._stack.map(s => ConfigPrinter.format(s)));
      return configs.join("\n\n");
    }
  }
  exports$T.ConfigPrinter = ConfigPrinter;
  return exports$T;
}

var exports$S = {},
  _dewExec$R = false;
function dew$R() {
  if (_dewExec$R) return exports$S;
  _dewExec$R = true;
  Object.defineProperty(exports$S, "__esModule", {
    value: true
  });
  exports$S.buildPresetChain = buildPresetChain;
  exports$S.buildPresetChainWalker = void 0;
  exports$S.buildRootChain = buildRootChain;
  function _path() {
    const data = _path2;
    _path = function () {
      return data;
    };
    return data;
  }
  function _debug() {
    const data = dew$2P();
    _debug = function () {
      return data;
    };
    return data;
  }
  var _options = dew$U();
  var _patternToRegex = dew$T();
  var _printer = dew$S();
  var _rewriteStackTrace = dew$1D();
  var _configError = dew$1C();
  var _index = dew$4();
  var _caching = dew$1G();
  var _configDescriptors = dew$Y();
  const debug = _debug()("babel:config:config-chain");
  function* buildPresetChain(arg, context) {
    const chain = yield* buildPresetChainWalker(arg, context);
    if (!chain) return null;
    return {
      plugins: dedupDescriptors(chain.plugins),
      presets: dedupDescriptors(chain.presets),
      options: chain.options.map(o => normalizeOptions(o)),
      files: new Set()
    };
  }
  const buildPresetChainWalker = exports$S.buildPresetChainWalker = makeChainWalker({
    root: preset => loadPresetDescriptors(preset),
    env: (preset, envName) => loadPresetEnvDescriptors(preset)(envName),
    overrides: (preset, index) => loadPresetOverridesDescriptors(preset)(index),
    overridesEnv: (preset, index, envName) => loadPresetOverridesEnvDescriptors(preset)(index)(envName),
    createLogger: () => () => {}
  });
  const loadPresetDescriptors = (0, _caching.makeWeakCacheSync)(preset => buildRootDescriptors(preset, preset.alias, _configDescriptors.createUncachedDescriptors));
  const loadPresetEnvDescriptors = (0, _caching.makeWeakCacheSync)(preset => (0, _caching.makeStrongCacheSync)(envName => buildEnvDescriptors(preset, preset.alias, _configDescriptors.createUncachedDescriptors, envName)));
  const loadPresetOverridesDescriptors = (0, _caching.makeWeakCacheSync)(preset => (0, _caching.makeStrongCacheSync)(index => buildOverrideDescriptors(preset, preset.alias, _configDescriptors.createUncachedDescriptors, index)));
  const loadPresetOverridesEnvDescriptors = (0, _caching.makeWeakCacheSync)(preset => (0, _caching.makeStrongCacheSync)(index => (0, _caching.makeStrongCacheSync)(envName => buildOverrideEnvDescriptors(preset, preset.alias, _configDescriptors.createUncachedDescriptors, index, envName))));
  function* buildRootChain(opts, context) {
    let configReport, babelRcReport;
    const programmaticLogger = new _printer.ConfigPrinter();
    const programmaticChain = yield* loadProgrammaticChain({
      options: opts,
      dirname: context.cwd
    }, context, undefined, programmaticLogger);
    if (!programmaticChain) return null;
    const programmaticReport = yield* programmaticLogger.output();
    let configFile;
    if (typeof opts.configFile === "string") {
      configFile = yield* (0, _index.loadConfig)(opts.configFile, context.cwd, context.envName, context.caller);
    } else if (opts.configFile !== false) {
      configFile = yield* (0, _index.findRootConfig)(context.root, context.envName, context.caller);
    }
    let {
      babelrc,
      babelrcRoots
    } = opts;
    let babelrcRootsDirectory = context.cwd;
    const configFileChain = emptyChain();
    const configFileLogger = new _printer.ConfigPrinter();
    if (configFile) {
      const validatedFile = validateConfigFile(configFile);
      const result = yield* loadFileChain(validatedFile, context, undefined, configFileLogger);
      if (!result) return null;
      configReport = yield* configFileLogger.output();
      if (babelrc === undefined) {
        babelrc = validatedFile.options.babelrc;
      }
      if (babelrcRoots === undefined) {
        babelrcRootsDirectory = validatedFile.dirname;
        babelrcRoots = validatedFile.options.babelrcRoots;
      }
      mergeChain(configFileChain, result);
    }
    let ignoreFile, babelrcFile;
    let isIgnored = false;
    const fileChain = emptyChain();
    if ((babelrc === true || babelrc === undefined) && typeof context.filename === "string") {
      const pkgData = yield* (0, _index.findPackageData)(context.filename);
      if (pkgData && babelrcLoadEnabled(context, pkgData, babelrcRoots, babelrcRootsDirectory)) {
        ({
          ignore: ignoreFile,
          config: babelrcFile
        } = yield* (0, _index.findRelativeConfig)(pkgData, context.envName, context.caller));
        if (ignoreFile) {
          fileChain.files.add(ignoreFile.filepath);
        }
        if (ignoreFile && shouldIgnore(context, ignoreFile.ignore, null, ignoreFile.dirname)) {
          isIgnored = true;
        }
        if (babelrcFile && !isIgnored) {
          const validatedFile = validateBabelrcFile(babelrcFile);
          const babelrcLogger = new _printer.ConfigPrinter();
          const result = yield* loadFileChain(validatedFile, context, undefined, babelrcLogger);
          if (!result) {
            isIgnored = true;
          } else {
            babelRcReport = yield* babelrcLogger.output();
            mergeChain(fileChain, result);
          }
        }
        if (babelrcFile && isIgnored) {
          fileChain.files.add(babelrcFile.filepath);
        }
      }
    }
    if (context.showConfig) {
      console.log(`Babel configs on "${context.filename}" (ascending priority):\n` + [configReport, babelRcReport, programmaticReport].filter(x => !!x).join("\n\n") + "\n-----End Babel configs-----");
    }
    const chain = mergeChain(mergeChain(mergeChain(emptyChain(), configFileChain), fileChain), programmaticChain);
    return {
      plugins: isIgnored ? [] : dedupDescriptors(chain.plugins),
      presets: isIgnored ? [] : dedupDescriptors(chain.presets),
      options: isIgnored ? [] : chain.options.map(o => normalizeOptions(o)),
      fileHandling: isIgnored ? "ignored" : "transpile",
      ignore: ignoreFile || undefined,
      babelrc: babelrcFile || undefined,
      config: configFile || undefined,
      files: chain.files
    };
  }
  function babelrcLoadEnabled(context, pkgData, babelrcRoots, babelrcRootsDirectory) {
    if (typeof babelrcRoots === "boolean") return babelrcRoots;
    const absoluteRoot = context.root;
    if (babelrcRoots === undefined) {
      return pkgData.directories.includes(absoluteRoot);
    }
    let babelrcPatterns = babelrcRoots;
    if (!Array.isArray(babelrcPatterns)) {
      babelrcPatterns = [babelrcPatterns];
    }
    babelrcPatterns = babelrcPatterns.map(pat => {
      return typeof pat === "string" ? _path().resolve(babelrcRootsDirectory, pat) : pat;
    });
    if (babelrcPatterns.length === 1 && babelrcPatterns[0] === absoluteRoot) {
      return pkgData.directories.includes(absoluteRoot);
    }
    return babelrcPatterns.some(pat => {
      if (typeof pat === "string") {
        pat = (0, _patternToRegex.default)(pat, babelrcRootsDirectory);
      }
      return pkgData.directories.some(directory => {
        return matchPattern(pat, babelrcRootsDirectory, directory, context);
      });
    });
  }
  const validateConfigFile = (0, _caching.makeWeakCacheSync)(file => ({
    filepath: file.filepath,
    dirname: file.dirname,
    options: (0, _options.validate)("configfile", file.options, file.filepath)
  }));
  const validateBabelrcFile = (0, _caching.makeWeakCacheSync)(file => ({
    filepath: file.filepath,
    dirname: file.dirname,
    options: (0, _options.validate)("babelrcfile", file.options, file.filepath)
  }));
  const validateExtendFile = (0, _caching.makeWeakCacheSync)(file => ({
    filepath: file.filepath,
    dirname: file.dirname,
    options: (0, _options.validate)("extendsfile", file.options, file.filepath)
  }));
  const loadProgrammaticChain = makeChainWalker({
    root: input => buildRootDescriptors(input, "base", _configDescriptors.createCachedDescriptors),
    env: (input, envName) => buildEnvDescriptors(input, "base", _configDescriptors.createCachedDescriptors, envName),
    overrides: (input, index) => buildOverrideDescriptors(input, "base", _configDescriptors.createCachedDescriptors, index),
    overridesEnv: (input, index, envName) => buildOverrideEnvDescriptors(input, "base", _configDescriptors.createCachedDescriptors, index, envName),
    createLogger: (input, context, baseLogger) => buildProgrammaticLogger(input, context, baseLogger)
  });
  const loadFileChainWalker = makeChainWalker({
    root: file => loadFileDescriptors(file),
    env: (file, envName) => loadFileEnvDescriptors(file)(envName),
    overrides: (file, index) => loadFileOverridesDescriptors(file)(index),
    overridesEnv: (file, index, envName) => loadFileOverridesEnvDescriptors(file)(index)(envName),
    createLogger: (file, context, baseLogger) => buildFileLogger(file.filepath, context, baseLogger)
  });
  function* loadFileChain(input, context, files, baseLogger) {
    const chain = yield* loadFileChainWalker(input, context, files, baseLogger);
    chain == null || chain.files.add(input.filepath);
    return chain;
  }
  const loadFileDescriptors = (0, _caching.makeWeakCacheSync)(file => buildRootDescriptors(file, file.filepath, _configDescriptors.createUncachedDescriptors));
  const loadFileEnvDescriptors = (0, _caching.makeWeakCacheSync)(file => (0, _caching.makeStrongCacheSync)(envName => buildEnvDescriptors(file, file.filepath, _configDescriptors.createUncachedDescriptors, envName)));
  const loadFileOverridesDescriptors = (0, _caching.makeWeakCacheSync)(file => (0, _caching.makeStrongCacheSync)(index => buildOverrideDescriptors(file, file.filepath, _configDescriptors.createUncachedDescriptors, index)));
  const loadFileOverridesEnvDescriptors = (0, _caching.makeWeakCacheSync)(file => (0, _caching.makeStrongCacheSync)(index => (0, _caching.makeStrongCacheSync)(envName => buildOverrideEnvDescriptors(file, file.filepath, _configDescriptors.createUncachedDescriptors, index, envName))));
  function buildFileLogger(filepath, context, baseLogger) {
    if (!baseLogger) {
      return () => {};
    }
    return baseLogger.configure(context.showConfig, _printer.ChainFormatter.Config, {
      filepath
    });
  }
  function buildRootDescriptors({
    dirname,
    options
  }, alias, descriptors) {
    return descriptors(dirname, options, alias);
  }
  function buildProgrammaticLogger(_, context, baseLogger) {
    var _context$caller;
    if (!baseLogger) {
      return () => {};
    }
    return baseLogger.configure(context.showConfig, _printer.ChainFormatter.Programmatic, {
      callerName: (_context$caller = context.caller) == null ? void 0 : _context$caller.name
    });
  }
  function buildEnvDescriptors({
    dirname,
    options
  }, alias, descriptors, envName) {
    var _options$env;
    const opts = (_options$env = options.env) == null ? void 0 : _options$env[envName];
    return opts ? descriptors(dirname, opts, `${alias}.env["${envName}"]`) : null;
  }
  function buildOverrideDescriptors({
    dirname,
    options
  }, alias, descriptors, index) {
    var _options$overrides;
    const opts = (_options$overrides = options.overrides) == null ? void 0 : _options$overrides[index];
    if (!opts) throw new Error("Assertion failure - missing override");
    return descriptors(dirname, opts, `${alias}.overrides[${index}]`);
  }
  function buildOverrideEnvDescriptors({
    dirname,
    options
  }, alias, descriptors, index, envName) {
    var _options$overrides2, _override$env;
    const override = (_options$overrides2 = options.overrides) == null ? void 0 : _options$overrides2[index];
    if (!override) throw new Error("Assertion failure - missing override");
    const opts = (_override$env = override.env) == null ? void 0 : _override$env[envName];
    return opts ? descriptors(dirname, opts, `${alias}.overrides[${index}].env["${envName}"]`) : null;
  }
  function makeChainWalker({
    root,
    env,
    overrides,
    overridesEnv,
    createLogger
  }) {
    return function* chainWalker(input, context, files = new Set(), baseLogger) {
      const {
        dirname
      } = input;
      const flattenedConfigs = [];
      const rootOpts = root(input);
      if (configIsApplicable(rootOpts, dirname, context, input.filepath)) {
        flattenedConfigs.push({
          config: rootOpts,
          envName: undefined,
          index: undefined
        });
        const envOpts = env(input, context.envName);
        if (envOpts && configIsApplicable(envOpts, dirname, context, input.filepath)) {
          flattenedConfigs.push({
            config: envOpts,
            envName: context.envName,
            index: undefined
          });
        }
        (rootOpts.options.overrides || []).forEach((_, index) => {
          const overrideOps = overrides(input, index);
          if (configIsApplicable(overrideOps, dirname, context, input.filepath)) {
            flattenedConfigs.push({
              config: overrideOps,
              index,
              envName: undefined
            });
            const overrideEnvOpts = overridesEnv(input, index, context.envName);
            if (overrideEnvOpts && configIsApplicable(overrideEnvOpts, dirname, context, input.filepath)) {
              flattenedConfigs.push({
                config: overrideEnvOpts,
                index,
                envName: context.envName
              });
            }
          }
        });
      }
      if (flattenedConfigs.some(({
        config: {
          options: {
            ignore,
            only
          }
        }
      }) => shouldIgnore(context, ignore, only, dirname))) {
        return null;
      }
      const chain = emptyChain();
      const logger = createLogger(input, context, baseLogger);
      for (const {
        config,
        index,
        envName
      } of flattenedConfigs) {
        if (!(yield* mergeExtendsChain(chain, config.options, dirname, context, files, baseLogger))) {
          return null;
        }
        logger(config, index, envName);
        yield* mergeChainOpts(chain, config);
      }
      return chain;
    };
  }
  function* mergeExtendsChain(chain, opts, dirname, context, files, baseLogger) {
    if (opts.extends === undefined) return true;
    const file = yield* (0, _index.loadConfig)(opts.extends, dirname, context.envName, context.caller);
    if (files.has(file)) {
      throw new Error(`Configuration cycle detected loading ${file.filepath}.\n` + `File already loaded following the config chain:\n` + Array.from(files, file => ` - ${file.filepath}`).join("\n"));
    }
    files.add(file);
    const fileChain = yield* loadFileChain(validateExtendFile(file), context, files, baseLogger);
    files.delete(file);
    if (!fileChain) return false;
    mergeChain(chain, fileChain);
    return true;
  }
  function mergeChain(target, source) {
    target.options.push(...source.options);
    target.plugins.push(...source.plugins);
    target.presets.push(...source.presets);
    for (const file of source.files) {
      target.files.add(file);
    }
    return target;
  }
  function* mergeChainOpts(target, {
    options,
    plugins,
    presets
  }) {
    target.options.push(options);
    target.plugins.push(...(yield* plugins()));
    target.presets.push(...(yield* presets()));
    return target;
  }
  function emptyChain() {
    return {
      options: [],
      presets: [],
      plugins: [],
      files: new Set()
    };
  }
  function normalizeOptions(opts) {
    const options = Object.assign({}, opts);
    delete options.extends;
    delete options.env;
    delete options.overrides;
    delete options.plugins;
    delete options.presets;
    delete options.passPerPreset;
    delete options.ignore;
    delete options.only;
    delete options.test;
    delete options.include;
    delete options.exclude;
    if (hasOwnProperty.call(options, "sourceMap")) {
      options.sourceMaps = options.sourceMap;
      delete options.sourceMap;
    }
    return options;
  }
  function dedupDescriptors(items) {
    const map = new Map();
    const descriptors = [];
    for (const item of items) {
      if (typeof item.value === "function") {
        const fnKey = item.value;
        let nameMap = map.get(fnKey);
        if (!nameMap) {
          nameMap = new Map();
          map.set(fnKey, nameMap);
        }
        let desc = nameMap.get(item.name);
        if (!desc) {
          desc = {
            value: item
          };
          descriptors.push(desc);
          if (!item.ownPass) nameMap.set(item.name, desc);
        } else {
          desc.value = item;
        }
      } else {
        descriptors.push({
          value: item
        });
      }
    }
    return descriptors.reduce((acc, desc) => {
      acc.push(desc.value);
      return acc;
    }, []);
  }
  function configIsApplicable({
    options
  }, dirname, context, configName) {
    return (options.test === undefined || configFieldIsApplicable(context, options.test, dirname, configName)) && (options.include === undefined || configFieldIsApplicable(context, options.include, dirname, configName)) && (options.exclude === undefined || !configFieldIsApplicable(context, options.exclude, dirname, configName));
  }
  function configFieldIsApplicable(context, test, dirname, configName) {
    const patterns = Array.isArray(test) ? test : [test];
    return matchesPatterns(context, patterns, dirname, configName);
  }
  function ignoreListReplacer(_key, value) {
    if (value instanceof RegExp) {
      return String(value);
    }
    return value;
  }
  function shouldIgnore(context, ignore, only, dirname) {
    if (ignore && matchesPatterns(context, ignore, dirname)) {
      var _context$filename;
      const message = `No config is applied to "${(_context$filename = context.filename) != null ? _context$filename : "(unknown)"}" because it matches one of \`ignore: ${JSON.stringify(ignore, ignoreListReplacer)}\` from "${dirname}"`;
      debug(message);
      if (context.showConfig) {
        console.log(message);
      }
      return true;
    }
    if (only && !matchesPatterns(context, only, dirname)) {
      var _context$filename2;
      const message = `No config is applied to "${(_context$filename2 = context.filename) != null ? _context$filename2 : "(unknown)"}" because it fails to match one of \`only: ${JSON.stringify(only, ignoreListReplacer)}\` from "${dirname}"`;
      debug(message);
      if (context.showConfig) {
        console.log(message);
      }
      return true;
    }
    return false;
  }
  function matchesPatterns(context, patterns, dirname, configName) {
    return patterns.some(pattern => matchPattern(pattern, dirname, context.filename, context, configName));
  }
  function matchPattern(pattern, dirname, pathToTest, context, configName) {
    if (typeof pattern === "function") {
      return !!(0, _rewriteStackTrace.endHiddenCallStack)(pattern)(pathToTest, {
        dirname,
        envName: context.envName,
        caller: context.caller
      });
    }
    if (typeof pathToTest !== "string") {
      throw new _configError.default(`Configuration contains string/RegExp pattern, but no filename was passed to Babel`, configName);
    }
    if (typeof pattern === "string") {
      pattern = (0, _patternToRegex.default)(pattern, dirname);
    }
    return pattern.test(pathToTest);
  }
  return exports$S;
}

var exports$R = {},
  _dewExec$Q = false;
function dew$Q() {
  if (_dewExec$Q) return exports$R;
  _dewExec$Q = true;
  Object.defineProperty(exports$R, "__esModule", {
    value: true
  });
  exports$R.validatePluginObject = validatePluginObject;
  var _optionAssertions = dew$V();
  const VALIDATORS = {
    name: _optionAssertions.assertString,
    manipulateOptions: _optionAssertions.assertFunction,
    pre: _optionAssertions.assertFunction,
    post: _optionAssertions.assertFunction,
    inherits: _optionAssertions.assertFunction,
    visitor: assertVisitorMap,
    parserOverride: _optionAssertions.assertFunction,
    generatorOverride: _optionAssertions.assertFunction
  };
  function assertVisitorMap(loc, value) {
    const obj = (0, _optionAssertions.assertObject)(loc, value);
    if (obj) {
      Object.keys(obj).forEach(prop => {
        if (prop !== "_exploded" && prop !== "_verified") {
          assertVisitorHandler(prop, obj[prop]);
        }
      });
      if (obj.enter || obj.exit) {
        throw new Error(`${(0, _optionAssertions.msg)(loc)} cannot contain catch-all "enter" or "exit" handlers. Please target individual nodes.`);
      }
    }
    return obj;
  }
  function assertVisitorHandler(key, value) {
    if (value && typeof value === "object") {
      Object.keys(value).forEach(handler => {
        if (handler !== "enter" && handler !== "exit") {
          throw new Error(`.visitor["${key}"] may only have .enter and/or .exit handlers.`);
        }
      });
    } else if (typeof value !== "function") {
      throw new Error(`.visitor["${key}"] must be a function`);
    }
  }
  function validatePluginObject(obj) {
    const rootPath = {
      type: "root",
      source: "plugin"
    };
    Object.keys(obj).forEach(key => {
      const validator = VALIDATORS[key];
      if (validator) {
        const optLoc = {
          type: "option",
          name: key,
          parent: rootPath
        };
        validator(optLoc, obj[key]);
      } else {
        const invalidPluginPropertyError = new Error(`.${key} is not a valid Plugin property`);
        invalidPluginPropertyError.code = "BABEL_UNKNOWN_PLUGIN_PROPERTY";
        throw invalidPluginPropertyError;
      }
    });
    return obj;
  }
  return exports$R;
}

var exports$Q = {},
  _dewExec$P = false;
function dew$P() {
  if (_dewExec$P) return exports$Q;
  _dewExec$P = true;
  var process = _nodeProcess;
  Object.defineProperty(exports$Q, "__esModule", {
    value: true
  });
  exports$Q.getEnv = getEnv;
  function getEnv(defaultValue = "development") {
    return process.env.BABEL_ENV || "dev" || defaultValue;
  }
  return exports$Q;
}

var exports$P = {},
  _dewExec$O = false;
function dew$O() {
  if (_dewExec$O) return exports$P;
  _dewExec$O = true;
  Object.defineProperty(exports$P, "__esModule", {
    value: true
  });
  exports$P.default = loadPrivatePartialConfig;
  exports$P.loadPartialConfig = loadPartialConfig;
  function _path() {
    const data = _path2;
    _path = function () {
      return data;
    };
    return data;
  }
  var _plugin = dew$1t();
  var _util = dew$1H();
  var _item = dew$X();
  var _configChain = dew$R();
  var _environment = dew$P();
  var _options = dew$U();
  var _index = dew$4();
  var _resolveTargets = dew$Z();
  const _excluded = ["showIgnoredFiles"];
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }
    return target;
  }
  function resolveRootMode(rootDir, rootMode) {
    switch (rootMode) {
      case "root":
        return rootDir;
      case "upward-optional":
        {
          const upwardRootDir = (0, _index.findConfigUpwards)(rootDir);
          return upwardRootDir === null ? rootDir : upwardRootDir;
        }
      case "upward":
        {
          const upwardRootDir = (0, _index.findConfigUpwards)(rootDir);
          if (upwardRootDir !== null) return upwardRootDir;
          throw Object.assign(new Error(`Babel was run with rootMode:"upward" but a root could not ` + `be found when searching upward from "${rootDir}".\n` + `One of the following config files must be in the directory tree: ` + `"${_index.ROOT_CONFIG_FILENAMES.join(", ")}".`), {
            code: "BABEL_ROOT_NOT_FOUND",
            dirname: rootDir
          });
        }
      default:
        throw new Error(`Assertion failure - unknown rootMode value.`);
    }
  }
  function* loadPrivatePartialConfig(inputOpts) {
    if (inputOpts != null && (typeof inputOpts !== "object" || Array.isArray(inputOpts))) {
      throw new Error("Babel options must be an object, null, or undefined");
    }
    const args = inputOpts ? (0, _options.validate)("arguments", inputOpts) : {};
    const {
      envName = (0, _environment.getEnv)(),
      cwd = ".",
      root: rootDir = ".",
      rootMode = "root",
      caller,
      cloneInputAst = true
    } = args;
    const absoluteCwd = _path().resolve(cwd);
    const absoluteRootDir = resolveRootMode(_path().resolve(absoluteCwd, rootDir), rootMode);
    const filename = typeof args.filename === "string" ? _path().resolve(cwd, args.filename) : undefined;
    const showConfigPath = yield* (0, _index.resolveShowConfigPath)(absoluteCwd);
    const context = {
      filename,
      cwd: absoluteCwd,
      root: absoluteRootDir,
      envName,
      caller,
      showConfig: showConfigPath === filename
    };
    const configChain = yield* (0, _configChain.buildRootChain)(args, context);
    if (!configChain) return null;
    const merged = {
      assumptions: {}
    };
    configChain.options.forEach(opts => {
      (0, _util.mergeOptions)(merged, opts);
    });
    const options = Object.assign({}, merged, {
      targets: (0, _resolveTargets.resolveTargets)(merged, absoluteRootDir),
      cloneInputAst,
      babelrc: false,
      configFile: false,
      browserslistConfigFile: false,
      passPerPreset: false,
      envName: context.envName,
      cwd: context.cwd,
      root: context.root,
      rootMode: "root",
      filename: typeof context.filename === "string" ? context.filename : undefined,
      plugins: configChain.plugins.map(descriptor => (0, _item.createItemFromDescriptor)(descriptor)),
      presets: configChain.presets.map(descriptor => (0, _item.createItemFromDescriptor)(descriptor))
    });
    return {
      options,
      context,
      fileHandling: configChain.fileHandling,
      ignore: configChain.ignore,
      babelrc: configChain.babelrc,
      config: configChain.config,
      files: configChain.files
    };
  }
  function* loadPartialConfig(opts) {
    let showIgnoredFiles = false;
    if (typeof opts === "object" && opts !== null && !Array.isArray(opts)) {
      var _opts = opts;
      ({
        showIgnoredFiles
      } = _opts);
      opts = _objectWithoutPropertiesLoose(_opts, _excluded);
    }
    const result = yield* loadPrivatePartialConfig(opts);
    if (!result) return null;
    const {
      options,
      babelrc,
      ignore,
      config,
      fileHandling,
      files
    } = result;
    if (fileHandling === "ignored" && !showIgnoredFiles) {
      return null;
    }
    (options.plugins || []).forEach(item => {
      if (item.value instanceof _plugin.default) {
        throw new Error("Passing cached plugin instances is not supported in " + "babel.loadPartialConfig()");
      }
    });
    return new PartialConfig(options, babelrc ? babelrc.filepath : undefined, ignore ? ignore.filepath : undefined, config ? config.filepath : undefined, fileHandling, files);
  }
  class PartialConfig {
    constructor(options, babelrc, ignore, config, fileHandling, files) {
      this.options = void 0;
      this.babelrc = void 0;
      this.babelignore = void 0;
      this.config = void 0;
      this.fileHandling = void 0;
      this.files = void 0;
      this.options = options;
      this.babelignore = ignore;
      this.babelrc = babelrc;
      this.config = config;
      this.fileHandling = fileHandling;
      this.files = files;
      Object.freeze(this);
    }
    hasFilesystemConfig() {
      return this.babelrc !== undefined || this.config !== undefined;
    }
  }
  Object.freeze(PartialConfig.prototype);
  return exports$P;
}

var exports$O = {},
  _dewExec$N = false;
function dew$N() {
  if (_dewExec$N) return exports$O;
  _dewExec$N = true;
  Object.defineProperty(exports$O, "__esModule", {
    value: true
  });
  exports$O.default = void 0;
  function _gensync() {
    const data = dew$1J();
    _gensync = function () {
      return data;
    };
    return data;
  }
  var _async = dew$1I();
  var _util = dew$1H();
  var context = dew();
  var _plugin = dew$1t();
  var _item = dew$X();
  var _configChain = dew$R();
  var _deepArray = dew$1u();
  function _traverse() {
    const data = dew$1_();
    _traverse = function () {
      return data;
    };
    return data;
  }
  var _caching = dew$1G();
  var _options = dew$U();
  var _plugins = dew$Q();
  var _configApi = dew$1v();
  var _partial = dew$O();
  var _configError = dew$1C();
  exports$O.default = _gensync()(function* loadFullConfig(inputOpts) {
    var _opts$assumptions;
    const result = yield* (0, _partial.default)(inputOpts);
    if (!result) {
      return null;
    }
    const {
      options,
      context,
      fileHandling
    } = result;
    if (fileHandling === "ignored") {
      return null;
    }
    const optionDefaults = {};
    const {
      plugins,
      presets
    } = options;
    if (!plugins || !presets) {
      throw new Error("Assertion failure - plugins and presets exist");
    }
    const presetContext = Object.assign({}, context, {
      targets: options.targets
    });
    const toDescriptor = item => {
      const desc = (0, _item.getItemDescriptor)(item);
      if (!desc) {
        throw new Error("Assertion failure - must be config item");
      }
      return desc;
    };
    const presetsDescriptors = presets.map(toDescriptor);
    const initialPluginsDescriptors = plugins.map(toDescriptor);
    const pluginDescriptorsByPass = [[]];
    const passes = [];
    const externalDependencies = [];
    const ignored = yield* enhanceError(context, function* recursePresetDescriptors(rawPresets, pluginDescriptorsPass) {
      const presets = [];
      for (let i = 0; i < rawPresets.length; i++) {
        const descriptor = rawPresets[i];
        if (descriptor.options !== false) {
          try {
            var preset = yield* loadPresetDescriptor(descriptor, presetContext);
          } catch (e) {
            if (e.code === "BABEL_UNKNOWN_OPTION") {
              (0, _options.checkNoUnwrappedItemOptionPairs)(rawPresets, i, "preset", e);
            }
            throw e;
          }
          externalDependencies.push(preset.externalDependencies);
          if (descriptor.ownPass) {
            presets.push({
              preset: preset.chain,
              pass: []
            });
          } else {
            presets.unshift({
              preset: preset.chain,
              pass: pluginDescriptorsPass
            });
          }
        }
      }
      if (presets.length > 0) {
        pluginDescriptorsByPass.splice(1, 0, ...presets.map(o => o.pass).filter(p => p !== pluginDescriptorsPass));
        for (const {
          preset,
          pass
        } of presets) {
          if (!preset) return true;
          pass.push(...preset.plugins);
          const ignored = yield* recursePresetDescriptors(preset.presets, pass);
          if (ignored) return true;
          preset.options.forEach(opts => {
            (0, _util.mergeOptions)(optionDefaults, opts);
          });
        }
      }
    })(presetsDescriptors, pluginDescriptorsByPass[0]);
    if (ignored) return null;
    const opts = optionDefaults;
    (0, _util.mergeOptions)(opts, options);
    const pluginContext = Object.assign({}, presetContext, {
      assumptions: (_opts$assumptions = opts.assumptions) != null ? _opts$assumptions : {}
    });
    yield* enhanceError(context, function* loadPluginDescriptors() {
      pluginDescriptorsByPass[0].unshift(...initialPluginsDescriptors);
      for (const descs of pluginDescriptorsByPass) {
        const pass = [];
        passes.push(pass);
        for (let i = 0; i < descs.length; i++) {
          const descriptor = descs[i];
          if (descriptor.options !== false) {
            try {
              var plugin = yield* loadPluginDescriptor(descriptor, pluginContext);
            } catch (e) {
              if (e.code === "BABEL_UNKNOWN_PLUGIN_PROPERTY") {
                (0, _options.checkNoUnwrappedItemOptionPairs)(descs, i, "plugin", e);
              }
              throw e;
            }
            pass.push(plugin);
            externalDependencies.push(plugin.externalDependencies);
          }
        }
      }
    })();
    opts.plugins = passes[0];
    opts.presets = passes.slice(1).filter(plugins => plugins.length > 0).map(plugins => ({
      plugins
    }));
    opts.passPerPreset = opts.presets.length > 0;
    return {
      options: opts,
      passes: passes,
      externalDependencies: (0, _deepArray.finalize)(externalDependencies)
    };
  });
  function enhanceError(context, fn) {
    return function* (arg1, arg2) {
      try {
        return yield* fn(arg1, arg2);
      } catch (e) {
        if (!/^\[BABEL\]/.test(e.message)) {
          var _context$filename;
          e.message = `[BABEL] ${(_context$filename = context.filename) != null ? _context$filename : "unknown file"}: ${e.message}`;
        }
        throw e;
      }
    };
  }
  const makeDescriptorLoader = apiFactory => (0, _caching.makeWeakCache)(function* ({
    value,
    options,
    dirname,
    alias
  }, cache) {
    if (options === false) throw new Error("Assertion failure");
    options = options || {};
    const externalDependencies = [];
    let item = value;
    if (typeof value === "function") {
      const factory = (0, _async.maybeAsync)(value, `You appear to be using an async plugin/preset, but Babel has been called synchronously`);
      const api = Object.assign({}, context, apiFactory(cache, externalDependencies));
      try {
        item = yield* factory(api, options, dirname);
      } catch (e) {
        if (alias) {
          e.message += ` (While processing: ${JSON.stringify(alias)})`;
        }
        throw e;
      }
    }
    if (!item || typeof item !== "object") {
      throw new Error("Plugin/Preset did not return an object.");
    }
    if ((0, _async.isThenable)(item)) {
      yield* [];
      throw new Error(`You appear to be using a promise as a plugin, ` + `which your current version of Babel does not support. ` + `If you're using a published plugin, ` + `you may need to upgrade your @babel/core version. ` + `As an alternative, you can prefix the promise with "await". ` + `(While processing: ${JSON.stringify(alias)})`);
    }
    if (externalDependencies.length > 0 && (!cache.configured() || cache.mode() === "forever")) {
      let error = `A plugin/preset has external untracked dependencies ` + `(${externalDependencies[0]}), but the cache `;
      if (!cache.configured()) {
        error += `has not been configured to be invalidated when the external dependencies change. `;
      } else {
        error += ` has been configured to never be invalidated. `;
      }
      error += `Plugins/presets should configure their cache to be invalidated when the external ` + `dependencies change, for example using \`api.cache.invalidate(() => ` + `statSync(filepath).mtimeMs)\` or \`api.cache.never()\`\n` + `(While processing: ${JSON.stringify(alias)})`;
      throw new Error(error);
    }
    return {
      value: item,
      options,
      dirname,
      alias,
      externalDependencies: (0, _deepArray.finalize)(externalDependencies)
    };
  });
  const pluginDescriptorLoader = makeDescriptorLoader(_configApi.makePluginAPI);
  const presetDescriptorLoader = makeDescriptorLoader(_configApi.makePresetAPI);
  const instantiatePlugin = (0, _caching.makeWeakCache)(function* ({
    value,
    options,
    dirname,
    alias,
    externalDependencies
  }, cache) {
    const pluginObj = (0, _plugins.validatePluginObject)(value);
    const plugin = Object.assign({}, pluginObj);
    if (plugin.visitor) {
      plugin.visitor = _traverse().default.explode(Object.assign({}, plugin.visitor));
    }
    if (plugin.inherits) {
      const inheritsDescriptor = {
        name: undefined,
        alias: `${alias}$inherits`,
        value: plugin.inherits,
        options,
        dirname
      };
      const inherits = yield* (0, _async.forwardAsync)(loadPluginDescriptor, run => {
        return cache.invalidate(data => run(inheritsDescriptor, data));
      });
      plugin.pre = chain(inherits.pre, plugin.pre);
      plugin.post = chain(inherits.post, plugin.post);
      plugin.manipulateOptions = chain(inherits.manipulateOptions, plugin.manipulateOptions);
      plugin.visitor = _traverse().default.visitors.merge([inherits.visitor || {}, plugin.visitor || {}]);
      if (inherits.externalDependencies.length > 0) {
        if (externalDependencies.length === 0) {
          externalDependencies = inherits.externalDependencies;
        } else {
          externalDependencies = (0, _deepArray.finalize)([externalDependencies, inherits.externalDependencies]);
        }
      }
    }
    return new _plugin.default(plugin, options, alias, externalDependencies);
  });
  function* loadPluginDescriptor(descriptor, context) {
    if (descriptor.value instanceof _plugin.default) {
      if (descriptor.options) {
        throw new Error("Passed options to an existing Plugin instance will not work.");
      }
      return descriptor.value;
    }
    return yield* instantiatePlugin(yield* pluginDescriptorLoader(descriptor, context), context);
  }
  const needsFilename = val => val && typeof val !== "function";
  const validateIfOptionNeedsFilename = (options, descriptor) => {
    if (needsFilename(options.test) || needsFilename(options.include) || needsFilename(options.exclude)) {
      const formattedPresetName = descriptor.name ? `"${descriptor.name}"` : "/* your preset */";
      throw new _configError.default([`Preset ${formattedPresetName} requires a filename to be set when babel is called directly,`, `\`\`\``, `babel.transformSync(code, { filename: 'file.ts', presets: [${formattedPresetName}] });`, `\`\`\``, `See https://babeljs.io/docs/en/options#filename for more information.`].join("\n"));
    }
  };
  const validatePreset = (preset, context, descriptor) => {
    if (!context.filename) {
      var _options$overrides;
      const {
        options
      } = preset;
      validateIfOptionNeedsFilename(options, descriptor);
      (_options$overrides = options.overrides) == null || _options$overrides.forEach(overrideOptions => validateIfOptionNeedsFilename(overrideOptions, descriptor));
    }
  };
  const instantiatePreset = (0, _caching.makeWeakCacheSync)(({
    value,
    dirname,
    alias,
    externalDependencies
  }) => {
    return {
      options: (0, _options.validate)("preset", value),
      alias,
      dirname,
      externalDependencies
    };
  });
  function* loadPresetDescriptor(descriptor, context) {
    const preset = instantiatePreset(yield* presetDescriptorLoader(descriptor, context));
    validatePreset(preset, context, descriptor);
    return {
      chain: yield* (0, _configChain.buildPresetChain)(preset, context),
      externalDependencies: preset.externalDependencies
    };
  }
  function chain(a, b) {
    const fns = [a, b].filter(Boolean);
    if (fns.length <= 1) return fns[0];
    return function (...args) {
      for (const fn of fns) {
        fn.apply(this, args);
      }
    };
  }
  return exports$O;
}

var exports$N = {},
  _dewExec$M = false;
function dew$M() {
  if (_dewExec$M) return exports$N;
  _dewExec$M = true;
  Object.defineProperty(exports$N, "__esModule", {
    value: true
  });
  exports$N.createConfigItem = createConfigItem;
  exports$N.createConfigItemAsync = createConfigItemAsync;
  exports$N.createConfigItemSync = createConfigItemSync;
  Object.defineProperty(exports$N, "default", {
    enumerable: true,
    get: function () {
      return _full.default;
    }
  });
  exports$N.loadOptions = loadOptions;
  exports$N.loadOptionsAsync = loadOptionsAsync;
  exports$N.loadOptionsSync = loadOptionsSync;
  exports$N.loadPartialConfig = loadPartialConfig;
  exports$N.loadPartialConfigAsync = loadPartialConfigAsync;
  exports$N.loadPartialConfigSync = loadPartialConfigSync;
  function _gensync() {
    const data = dew$1J();
    _gensync = function () {
      return data;
    };
    return data;
  }
  var _full = dew$N();
  var _partial = dew$O();
  var _item = dew$X();
  var _rewriteStackTrace = dew$1D();
  const loadPartialConfigRunner = _gensync()(_partial.loadPartialConfig);
  function loadPartialConfigAsync(...args) {
    return (0, _rewriteStackTrace.beginHiddenCallStack)(loadPartialConfigRunner.async)(...args);
  }
  function loadPartialConfigSync(...args) {
    return (0, _rewriteStackTrace.beginHiddenCallStack)(loadPartialConfigRunner.sync)(...args);
  }
  function loadPartialConfig(opts, callback) {
    if (callback !== undefined) {
      (0, _rewriteStackTrace.beginHiddenCallStack)(loadPartialConfigRunner.errback)(opts, callback);
    } else if (typeof opts === "function") {
      (0, _rewriteStackTrace.beginHiddenCallStack)(loadPartialConfigRunner.errback)(undefined, opts);
    } else {
      {
        return loadPartialConfigSync(opts);
      }
    }
  }
  function* loadOptionsImpl(opts) {
    var _config$options;
    const config = yield* (0, _full.default)(opts);
    return (_config$options = config == null ? void 0 : config.options) != null ? _config$options : null;
  }
  const loadOptionsRunner = _gensync()(loadOptionsImpl);
  function loadOptionsAsync(...args) {
    return (0, _rewriteStackTrace.beginHiddenCallStack)(loadOptionsRunner.async)(...args);
  }
  function loadOptionsSync(...args) {
    return (0, _rewriteStackTrace.beginHiddenCallStack)(loadOptionsRunner.sync)(...args);
  }
  function loadOptions(opts, callback) {
    if (callback !== undefined) {
      (0, _rewriteStackTrace.beginHiddenCallStack)(loadOptionsRunner.errback)(opts, callback);
    } else if (typeof opts === "function") {
      (0, _rewriteStackTrace.beginHiddenCallStack)(loadOptionsRunner.errback)(undefined, opts);
    } else {
      {
        return loadOptionsSync(opts);
      }
    }
  }
  const createConfigItemRunner = _gensync()(_item.createConfigItem);
  function createConfigItemAsync(...args) {
    return (0, _rewriteStackTrace.beginHiddenCallStack)(createConfigItemRunner.async)(...args);
  }
  function createConfigItemSync(...args) {
    return (0, _rewriteStackTrace.beginHiddenCallStack)(createConfigItemRunner.sync)(...args);
  }
  function createConfigItem(target, options, callback) {
    if (callback !== undefined) {
      (0, _rewriteStackTrace.beginHiddenCallStack)(createConfigItemRunner.errback)(target, options, callback);
    } else if (typeof options === "function") {
      (0, _rewriteStackTrace.beginHiddenCallStack)(createConfigItemRunner.errback)(target, undefined, callback);
    } else {
      {
        return createConfigItemSync(target, options);
      }
    }
  }
  return exports$N;
}

var exports$M = {},
  _dewExec$L = false;
function dew$L() {
  if (_dewExec$L) return exports$M;
  _dewExec$L = true;
  Object.defineProperty(exports$M, "__esModule", {
    value: true
  });
  exports$M.default = void 0;
  class PluginPass {
    constructor(file, key, options) {
      this._map = new Map();
      this.key = void 0;
      this.file = void 0;
      this.opts = void 0;
      this.cwd = void 0;
      this.filename = void 0;
      this.key = key;
      this.file = file;
      this.opts = options || {};
      this.cwd = file.opts.cwd;
      this.filename = file.opts.filename;
    }
    set(key, val) {
      this._map.set(key, val);
    }
    get(key) {
      return this._map.get(key);
    }
    availableHelper(name, versionRange) {
      return this.file.availableHelper(name, versionRange);
    }
    addHelper(name) {
      return this.file.addHelper(name);
    }
    buildCodeFrameError(node, msg, _Error) {
      return this.file.buildCodeFrameError(node, msg, _Error);
    }
  }
  exports$M.default = PluginPass;
  {
    PluginPass.prototype.getModuleName = function getModuleName() {
      return this.file.getModuleName();
    };
    PluginPass.prototype.addImport = function addImport() {
      this.file.addImport();
    };
  }
  return exports$M;
}

var exports$L = {},
  _dewExec$K = false;
function dew$K() {
  if (_dewExec$K) return exports$L;
  _dewExec$K = true;
  Object.defineProperty(exports$L, "__esModule", {
    value: true
  });
  exports$L.default = loadBlockHoistPlugin;
  function _traverse() {
    const data = dew$1_();
    _traverse = function () {
      return data;
    };
    return data;
  }
  var _plugin = dew$1t();
  let LOADED_PLUGIN;
  const blockHoistPlugin = {
    name: "internal.blockHoist",
    visitor: {
      Block: {
        exit({
          node
        }) {
          node.body = performHoisting(node.body);
        }
      },
      SwitchCase: {
        exit({
          node
        }) {
          node.consequent = performHoisting(node.consequent);
        }
      }
    }
  };
  function performHoisting(body) {
    let max = Math.pow(2, 30) - 1;
    let hasChange = false;
    for (let i = 0; i < body.length; i++) {
      const n = body[i];
      const p = priority(n);
      if (p > max) {
        hasChange = true;
        break;
      }
      max = p;
    }
    if (!hasChange) return body;
    return stableSort(body.slice());
  }
  function loadBlockHoistPlugin() {
    if (!LOADED_PLUGIN) {
      LOADED_PLUGIN = new _plugin.default(Object.assign({}, blockHoistPlugin, {
        visitor: _traverse().default.explode(blockHoistPlugin.visitor)
      }), {});
    }
    return LOADED_PLUGIN;
  }
  function priority(bodyNode) {
    const priority = bodyNode == null ? void 0 : bodyNode._blockHoist;
    if (priority == null) return 1;
    if (priority === true) return 2;
    return priority;
  }
  function stableSort(body) {
    const buckets = Object.create(null);
    for (let i = 0; i < body.length; i++) {
      const n = body[i];
      const p = priority(n);
      const bucket = buckets[p] || (buckets[p] = []);
      bucket.push(n);
    }
    const keys = Object.keys(buckets).map(k => +k).sort((a, b) => b - a);
    let index = 0;
    for (const key of keys) {
      const bucket = buckets[key];
      for (const n of bucket) {
        body[index++] = n;
      }
    }
    return body;
  }
  return exports$L;
}

var exports$K = {},
  _dewExec$J = false;
function dew$J() {
  if (_dewExec$J) return exports$K;
  _dewExec$J = true;
  Object.defineProperty(exports$K, "__esModule", {
    value: true
  });
  exports$K.default = normalizeOptions;
  function _path() {
    const data = _path2;
    _path = function () {
      return data;
    };
    return data;
  }
  function normalizeOptions(config) {
    const {
      filename,
      cwd,
      filenameRelative = typeof filename === "string" ? _path().relative(cwd, filename) : "unknown",
      sourceType = "module",
      inputSourceMap,
      sourceMaps = !!inputSourceMap,
      sourceRoot = config.options.moduleRoot,
      sourceFileName = _path().basename(filenameRelative),
      comments = true,
      compact = "auto"
    } = config.options;
    const opts = config.options;
    const options = Object.assign({}, opts, {
      parserOpts: Object.assign({
        sourceType: _path().extname(filenameRelative) === ".mjs" ? "module" : sourceType,
        sourceFileName: filename,
        plugins: []
      }, opts.parserOpts),
      generatorOpts: Object.assign({
        filename,
        auxiliaryCommentBefore: opts.auxiliaryCommentBefore,
        auxiliaryCommentAfter: opts.auxiliaryCommentAfter,
        retainLines: opts.retainLines,
        comments,
        shouldPrintComment: opts.shouldPrintComment,
        compact,
        minified: opts.minified,
        sourceMaps,
        sourceRoot,
        sourceFileName
      }, opts.generatorOpts)
    });
    for (const plugins of config.passes) {
      for (const plugin of plugins) {
        if (plugin.manipulateOptions) {
          plugin.manipulateOptions(options, options.parserOpts);
        }
      }
    }
    return options;
  }
  return exports$K;
}

var exports$J = {},
  _dewExec$I = false;
function dew$I() {
  if (_dewExec$I) return exports$J;
  _dewExec$I = true;
  var Buffer = _nodeBuffer.Buffer;
  Object.defineProperty(exports$J, "commentRegex", {
    get: function getCommentRegex() {
      // Groups: 1: media type, 2: MIME type, 3: charset, 4: encoding, 5: data.
      return /^\s*?\/[\/\*][@#]\s+?sourceMappingURL=data:(((?:application|text)\/json)(?:;charset=([^;,]+?)?)?)?(?:;(base64))?,(.*?)$/mg;
    }
  });
  Object.defineProperty(exports$J, "mapFileCommentRegex", {
    get: function getMapFileCommentRegex() {
      // Matches sourceMappingURL in either // or /* comment styles.
      return /(?:\/\/[@#][ \t]+?sourceMappingURL=([^\s'"`]+?)[ \t]*?$)|(?:\/\*[@#][ \t]+sourceMappingURL=([^*]+?)[ \t]*?(?:\*\/){1}[ \t]*?$)/mg;
    }
  });
  var decodeBase64;
  if (typeof Buffer !== "undefined") {
    if (typeof Buffer.from === "function") {
      decodeBase64 = decodeBase64WithBufferFrom;
    } else {
      decodeBase64 = decodeBase64WithNewBuffer;
    }
  } else {
    decodeBase64 = decodeBase64WithAtob;
  }
  function decodeBase64WithBufferFrom(base64) {
    return Buffer.from(base64, "base64").toString();
  }
  function decodeBase64WithNewBuffer(base64) {
    if (typeof value === "number") {
      throw new TypeError("The value to decode must not be of type number.");
    }
    return new Buffer(base64, "base64").toString();
  }
  function decodeBase64WithAtob(base64) {
    return decodeURIComponent(escape(atob(base64)));
  }
  function stripComment(sm) {
    return sm.split(",").pop();
  }
  function readFromFileMap(sm, read) {
    var r = exports$J.mapFileCommentRegex.exec(sm);
    // for some odd reason //# .. captures in 1 and /* .. */ in 2
    var filename = r[1] || r[2];
    try {
      var sm = read(filename);
      if (sm != null && typeof sm.catch === "function") {
        return sm.catch(throwError);
      } else {
        return sm;
      }
    } catch (e) {
      throwError(e);
    }
    function throwError(e) {
      throw new Error("An error occurred while trying to read the map file at " + filename + "\n" + e.stack);
    }
  }
  function Converter(sm, opts) {
    opts = opts || {};
    if (opts.hasComment) {
      sm = stripComment(sm);
    }
    if (opts.encoding === "base64") {
      sm = decodeBase64(sm);
    } else if (opts.encoding === "uri") {
      sm = decodeURIComponent(sm);
    }
    if (opts.isJSON || opts.encoding) {
      sm = JSON.parse(sm);
    }
    this.sourcemap = sm;
  }
  Converter.prototype.toJSON = function (space) {
    return JSON.stringify(this.sourcemap, null, space);
  };
  if (typeof Buffer !== "undefined") {
    if (typeof Buffer.from === "function") {
      Converter.prototype.toBase64 = encodeBase64WithBufferFrom;
    } else {
      Converter.prototype.toBase64 = encodeBase64WithNewBuffer;
    }
  } else {
    Converter.prototype.toBase64 = encodeBase64WithBtoa;
  }
  function encodeBase64WithBufferFrom() {
    var json = this.toJSON();
    return Buffer.from(json, "utf8").toString("base64");
  }
  function encodeBase64WithNewBuffer() {
    var json = this.toJSON();
    if (typeof json === "number") {
      throw new TypeError("The json to encode must not be of type number.");
    }
    return new Buffer(json, "utf8").toString("base64");
  }
  function encodeBase64WithBtoa() {
    var json = this.toJSON();
    return btoa(unescape(encodeURIComponent(json)));
  }
  Converter.prototype.toURI = function () {
    var json = this.toJSON();
    return encodeURIComponent(json);
  };
  Converter.prototype.toComment = function (options) {
    var encoding, content, data;
    if (options != null && options.encoding === "uri") {
      encoding = "";
      content = this.toURI();
    } else {
      encoding = ";base64";
      content = this.toBase64();
    }
    data = "sourceMappingURL=data:application/json;charset=utf-8" + encoding + "," + content;
    return options != null && options.multiline ? "/*# " + data + " */" : "//# " + data;
  };

  // returns copy instead of original
  Converter.prototype.toObject = function () {
    return JSON.parse(this.toJSON());
  };
  Converter.prototype.addProperty = function (key, value) {
    if (this.sourcemap.hasOwnProperty(key)) throw new Error("property \"" + key + "\" already exists on the sourcemap, use set property instead");
    return this.setProperty(key, value);
  };
  Converter.prototype.setProperty = function (key, value) {
    this.sourcemap[key] = value;
    return this;
  };
  Converter.prototype.getProperty = function (key) {
    return this.sourcemap[key];
  };
  exports$J.fromObject = function (obj) {
    return new Converter(obj);
  };
  exports$J.fromJSON = function (json) {
    return new Converter(json, {
      isJSON: true
    });
  };
  exports$J.fromURI = function (uri) {
    return new Converter(uri, {
      encoding: "uri"
    });
  };
  exports$J.fromBase64 = function (base64) {
    return new Converter(base64, {
      encoding: "base64"
    });
  };
  exports$J.fromComment = function (comment) {
    var m, encoding;
    comment = comment.replace(/^\/\*/g, "//").replace(/\*\/$/g, "");
    m = exports$J.commentRegex.exec(comment);
    encoding = m && m[4] || "uri";
    return new Converter(comment, {
      encoding: encoding,
      hasComment: true
    });
  };
  function makeConverter(sm) {
    return new Converter(sm, {
      isJSON: true
    });
  }
  exports$J.fromMapFileComment = function (comment, read) {
    if (typeof read === "string") {
      throw new Error("String directory paths are no longer supported with `fromMapFileComment`\n" + "Please review the Upgrading documentation at https://github.com/thlorenz/convert-source-map#upgrading");
    }
    var sm = readFromFileMap(comment, read);
    if (sm != null && typeof sm.then === "function") {
      return sm.then(makeConverter);
    } else {
      return makeConverter(sm);
    }
  };

  // Finds last sourcemap comment in file or returns null if none was found
  exports$J.fromSource = function (content) {
    var m = content.match(exports$J.commentRegex);
    return m ? exports$J.fromComment(m.pop()) : null;
  };

  // Finds last sourcemap comment in file or returns null if none was found
  exports$J.fromMapFileSource = function (content, read) {
    if (typeof read === "string") {
      throw new Error("String directory paths are no longer supported with `fromMapFileSource`\n" + "Please review the Upgrading documentation at https://github.com/thlorenz/convert-source-map#upgrading");
    }
    var m = content.match(exports$J.mapFileCommentRegex);
    return m ? exports$J.fromMapFileComment(m.pop(), read) : null;
  };
  exports$J.removeComments = function (src) {
    return src.replace(exports$J.commentRegex, "");
  };
  exports$J.removeMapFileComments = function (src) {
    return src.replace(exports$J.mapFileCommentRegex, "");
  };
  exports$J.generateMapFileComment = function (file, options) {
    var data = "sourceMappingURL=" + file;
    return options && options.multiline ? "/*# " + data + " */" : "//# " + data;
  };
  return exports$J;
}

var exports$I = {},
  _dewExec$H = false;
function dew$H() {
  if (_dewExec$H) return exports$I;
  _dewExec$H = true;
  Object.defineProperty(exports$I, "__esModule", {
    value: true
  });
  exports$I.default = generateMissingPluginMessage;
  const pluginNameMap = {
    asyncDoExpressions: {
      syntax: {
        name: "@babel/plugin-syntax-async-do-expressions",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-async-do-expressions"
      }
    },
    decimal: {
      syntax: {
        name: "@babel/plugin-syntax-decimal",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-decimal"
      }
    },
    decorators: {
      syntax: {
        name: "@babel/plugin-syntax-decorators",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-decorators"
      },
      transform: {
        name: "@babel/plugin-proposal-decorators",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-decorators"
      }
    },
    doExpressions: {
      syntax: {
        name: "@babel/plugin-syntax-do-expressions",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-do-expressions"
      },
      transform: {
        name: "@babel/plugin-proposal-do-expressions",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-do-expressions"
      }
    },
    exportDefaultFrom: {
      syntax: {
        name: "@babel/plugin-syntax-export-default-from",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-export-default-from"
      },
      transform: {
        name: "@babel/plugin-proposal-export-default-from",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-export-default-from"
      }
    },
    flow: {
      syntax: {
        name: "@babel/plugin-syntax-flow",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-flow"
      },
      transform: {
        name: "@babel/preset-flow",
        url: "https://github.com/babel/babel/tree/main/packages/babel-preset-flow"
      }
    },
    functionBind: {
      syntax: {
        name: "@babel/plugin-syntax-function-bind",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-function-bind"
      },
      transform: {
        name: "@babel/plugin-proposal-function-bind",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-function-bind"
      }
    },
    functionSent: {
      syntax: {
        name: "@babel/plugin-syntax-function-sent",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-function-sent"
      },
      transform: {
        name: "@babel/plugin-proposal-function-sent",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-function-sent"
      }
    },
    jsx: {
      syntax: {
        name: "@babel/plugin-syntax-jsx",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-jsx"
      },
      transform: {
        name: "@babel/preset-react",
        url: "https://github.com/babel/babel/tree/main/packages/babel-preset-react"
      }
    },
    importAttributes: {
      syntax: {
        name: "@babel/plugin-syntax-import-attributes",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-import-attributes"
      }
    },
    pipelineOperator: {
      syntax: {
        name: "@babel/plugin-syntax-pipeline-operator",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-pipeline-operator"
      },
      transform: {
        name: "@babel/plugin-proposal-pipeline-operator",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-pipeline-operator"
      }
    },
    recordAndTuple: {
      syntax: {
        name: "@babel/plugin-syntax-record-and-tuple",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-record-and-tuple"
      }
    },
    throwExpressions: {
      syntax: {
        name: "@babel/plugin-syntax-throw-expressions",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-throw-expressions"
      },
      transform: {
        name: "@babel/plugin-proposal-throw-expressions",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-throw-expressions"
      }
    },
    typescript: {
      syntax: {
        name: "@babel/plugin-syntax-typescript",
        url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-typescript"
      },
      transform: {
        name: "@babel/preset-typescript",
        url: "https://github.com/babel/babel/tree/main/packages/babel-preset-typescript"
      }
    }
  };
  {
    Object.assign(pluginNameMap, {
      asyncGenerators: {
        syntax: {
          name: "@babel/plugin-syntax-async-generators",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-async-generators"
        },
        transform: {
          name: "@babel/plugin-transform-async-generator-functions",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-async-generator-functions"
        }
      },
      classProperties: {
        syntax: {
          name: "@babel/plugin-syntax-class-properties",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-class-properties"
        },
        transform: {
          name: "@babel/plugin-transform-class-properties",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-class-properties"
        }
      },
      classPrivateProperties: {
        syntax: {
          name: "@babel/plugin-syntax-class-properties",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-class-properties"
        },
        transform: {
          name: "@babel/plugin-transform-class-properties",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-class-properties"
        }
      },
      classPrivateMethods: {
        syntax: {
          name: "@babel/plugin-syntax-class-properties",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-class-properties"
        },
        transform: {
          name: "@babel/plugin-transform-private-methods",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-private-methods"
        }
      },
      classStaticBlock: {
        syntax: {
          name: "@babel/plugin-syntax-class-static-block",
          url: "https://github.com/babel/babel/tree/HEAD/packages/babel-plugin-syntax-class-static-block"
        },
        transform: {
          name: "@babel/plugin-transform-class-static-block",
          url: "https://github.com/babel/babel/tree/HEAD/packages/babel-plugin-transform-class-static-block"
        }
      },
      dynamicImport: {
        syntax: {
          name: "@babel/plugin-syntax-dynamic-import",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-dynamic-import"
        }
      },
      exportNamespaceFrom: {
        syntax: {
          name: "@babel/plugin-syntax-export-namespace-from",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-export-namespace-from"
        },
        transform: {
          name: "@babel/plugin-transform-export-namespace-from",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-export-namespace-from"
        }
      },
      importAssertions: {
        syntax: {
          name: "@babel/plugin-syntax-import-assertions",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-import-assertions"
        }
      },
      importMeta: {
        syntax: {
          name: "@babel/plugin-syntax-import-meta",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-import-meta"
        }
      },
      logicalAssignment: {
        syntax: {
          name: "@babel/plugin-syntax-logical-assignment-operators",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-logical-assignment-operators"
        },
        transform: {
          name: "@babel/plugin-transform-logical-assignment-operators",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-logical-assignment-operators"
        }
      },
      moduleStringNames: {
        syntax: {
          name: "@babel/plugin-syntax-module-string-names",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-module-string-names"
        }
      },
      numericSeparator: {
        syntax: {
          name: "@babel/plugin-syntax-numeric-separator",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-numeric-separator"
        },
        transform: {
          name: "@babel/plugin-transform-numeric-separator",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-numeric-separator"
        }
      },
      nullishCoalescingOperator: {
        syntax: {
          name: "@babel/plugin-syntax-nullish-coalescing-operator",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-nullish-coalescing-operator"
        },
        transform: {
          name: "@babel/plugin-transform-nullish-coalescing-operator",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-nullish-coalescing-opearator"
        }
      },
      objectRestSpread: {
        syntax: {
          name: "@babel/plugin-syntax-object-rest-spread",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-object-rest-spread"
        },
        transform: {
          name: "@babel/plugin-transform-object-rest-spread",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-object-rest-spread"
        }
      },
      optionalCatchBinding: {
        syntax: {
          name: "@babel/plugin-syntax-optional-catch-binding",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-optional-catch-binding"
        },
        transform: {
          name: "@babel/plugin-transform-optional-catch-binding",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-optional-catch-binding"
        }
      },
      optionalChaining: {
        syntax: {
          name: "@babel/plugin-syntax-optional-chaining",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-optional-chaining"
        },
        transform: {
          name: "@babel/plugin-transform-optional-chaining",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-optional-chaining"
        }
      },
      privateIn: {
        syntax: {
          name: "@babel/plugin-syntax-private-property-in-object",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-private-property-in-object"
        },
        transform: {
          name: "@babel/plugin-transform-private-property-in-object",
          url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-private-property-in-object"
        }
      },
      regexpUnicodeSets: {
        syntax: {
          name: "@babel/plugin-syntax-unicode-sets-regex",
          url: "https://github.com/babel/babel/blob/main/packages/babel-plugin-syntax-unicode-sets-regex/README.md"
        },
        transform: {
          name: "@babel/plugin-transform-unicode-sets-regex",
          url: "https://github.com/babel/babel/blob/main/packages/babel-plugin-proposalunicode-sets-regex/README.md"
        }
      }
    });
  }
  const getNameURLCombination = ({
    name,
    url
  }) => `${name} (${url})`;
  function generateMissingPluginMessage(missingPluginName, loc, codeFrame, filename) {
    let helpMessage = `Support for the experimental syntax '${missingPluginName}' isn't currently enabled ` + `(${loc.line}:${loc.column + 1}):\n\n` + codeFrame;
    const pluginInfo = pluginNameMap[missingPluginName];
    if (pluginInfo) {
      const {
        syntax: syntaxPlugin,
        transform: transformPlugin
      } = pluginInfo;
      if (syntaxPlugin) {
        const syntaxPluginInfo = getNameURLCombination(syntaxPlugin);
        if (transformPlugin) {
          const transformPluginInfo = getNameURLCombination(transformPlugin);
          const sectionType = transformPlugin.name.startsWith("@babel/plugin") ? "plugins" : "presets";
          helpMessage += `\n\nAdd ${transformPluginInfo} to the '${sectionType}' section of your Babel config to enable transformation.
If you want to leave it as-is, add ${syntaxPluginInfo} to the 'plugins' section to enable parsing.`;
        } else {
          helpMessage += `\n\nAdd ${syntaxPluginInfo} to the 'plugins' section of your Babel config ` + `to enable parsing.`;
        }
      }
    }
    const msgFilename = filename === "unknown" ? "<name of the input file>" : filename;
    helpMessage += `

If you already added the plugin for this syntax to your config, it's possible that your config \
isn't being loaded.
You can re-run Babel with the BABEL_SHOW_CONFIG_FOR environment variable to show the loaded \
configuration:
\tnpx cross-env BABEL_SHOW_CONFIG_FOR=${msgFilename} <your build command>
See https://babeljs.io/docs/configuration#print-effective-configs for more info.
`;
    return helpMessage;
  }
  return exports$I;
}

var exports$H = {},
  _dewExec$G = false;
function dew$G() {
  if (_dewExec$G) return exports$H;
  _dewExec$G = true;
  Object.defineProperty(exports$H, "__esModule", {
    value: true
  });
  exports$H.default = parser;
  function _parser() {
    const data = dew$3f();
    _parser = function () {
      return data;
    };
    return data;
  }
  function _codeFrame() {
    const data = dew$31();
    _codeFrame = function () {
      return data;
    };
    return data;
  }
  var _missingPluginHelper = dew$H();
  function* parser(pluginPasses, {
    parserOpts,
    highlightCode = true,
    filename = "unknown"
  }, code) {
    try {
      const results = [];
      for (const plugins of pluginPasses) {
        for (const plugin of plugins) {
          const {
            parserOverride
          } = plugin;
          if (parserOverride) {
            const ast = parserOverride(code, parserOpts, _parser().parse);
            if (ast !== undefined) results.push(ast);
          }
        }
      }
      if (results.length === 0) {
        return (0, _parser().parse)(code, parserOpts);
      } else if (results.length === 1) {
        yield* [];
        if (typeof results[0].then === "function") {
          throw new Error(`You appear to be using an async parser plugin, ` + `which your current version of Babel does not support. ` + `If you're using a published plugin, you may need to upgrade ` + `your @babel/core version.`);
        }
        return results[0];
      }
      throw new Error("More than one plugin attempted to override parsing.");
    } catch (err) {
      if (err.code === "BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED") {
        err.message += "\nConsider renaming the file to '.mjs', or setting sourceType:module " + "or sourceType:unambiguous in your Babel config for this file.";
      }
      const {
        loc,
        missingPlugin
      } = err;
      if (loc) {
        const codeFrame = (0, _codeFrame().codeFrameColumns)(code, {
          start: {
            line: loc.line,
            column: loc.column + 1
          }
        }, {
          highlightCode
        });
        if (missingPlugin) {
          err.message = `${filename}: ` + (0, _missingPluginHelper.default)(missingPlugin[0], loc, codeFrame, filename);
        } else {
          err.message = `${filename}: ${err.message}\n\n` + codeFrame;
        }
        err.code = "BABEL_PARSE_ERROR";
      }
      throw err;
    }
  }
  return exports$H;
}

var exports$G = {},
  _dewExec$F = false;
function dew$F() {
  if (_dewExec$F) return exports$G;
  _dewExec$F = true;
  Object.defineProperty(exports$G, "__esModule", {
    value: true
  });
  exports$G.default = _default;
  function deepClone(value, cache) {
    if (value !== null) {
      if (cache.has(value)) return cache.get(value);
      let cloned;
      if (Array.isArray(value)) {
        cloned = new Array(value.length);
        cache.set(value, cloned);
        for (let i = 0; i < value.length; i++) {
          cloned[i] = typeof value[i] !== "object" ? value[i] : deepClone(value[i], cache);
        }
      } else {
        cloned = {};
        cache.set(value, cloned);
        const keys = Object.keys(value);
        for (let i = 0; i < keys.length; i++) {
          const key = keys[i];
          cloned[key] = typeof value[key] !== "object" ? value[key] : deepClone(value[key], cache);
        }
      }
      return cloned;
    }
    return value;
  }
  function _default(value) {
    if (typeof value !== "object") return value;
    return deepClone(value, new Map());
  }
  return exports$G;
}

var exports$F = {},
  _dewExec$E = false;
function dew$E() {
  if (_dewExec$E) return exports$F;
  _dewExec$E = true;
  Object.defineProperty(exports$F, "__esModule", {
    value: true
  });
  exports$F.default = normalizeFile;
  function _fs() {
    const data = _fs2;
    _fs = function () {
      return data;
    };
    return data;
  }
  function _path() {
    const data = _path2;
    _path = function () {
      return data;
    };
    return data;
  }
  function _debug() {
    const data = dew$2P();
    _debug = function () {
      return data;
    };
    return data;
  }
  function _t() {
    const data = dew$3i();
    _t = function () {
      return data;
    };
    return data;
  }
  function _convertSourceMap() {
    const data = dew$I();
    _convertSourceMap = function () {
      return data;
    };
    return data;
  }
  var _file = dew$1L();
  var _index = dew$G();
  var _cloneDeep = dew$F();
  const {
    file,
    traverseFast
  } = _t();
  const debug = _debug()("babel:transform:file");
  const INLINE_SOURCEMAP_REGEX = /^[@#]\s+sourceMappingURL=data:(?:application|text)\/json;(?:charset[:=]\S+?;)?base64,.*$/;
  const EXTERNAL_SOURCEMAP_REGEX = /^[@#][ \t]+sourceMappingURL=([^\s'"`]+)[ \t]*$/;
  function* normalizeFile(pluginPasses, options, code, ast) {
    code = `${code || ""}`;
    if (ast) {
      if (ast.type === "Program") {
        ast = file(ast, [], []);
      } else if (ast.type !== "File") {
        throw new Error("AST root must be a Program or File node");
      }
      if (options.cloneInputAst) {
        ast = (0, _cloneDeep.default)(ast);
      }
    } else {
      ast = yield* (0, _index.default)(pluginPasses, options, code);
    }
    let inputMap = null;
    if (options.inputSourceMap !== false) {
      if (typeof options.inputSourceMap === "object") {
        inputMap = _convertSourceMap().fromObject(options.inputSourceMap);
      }
      if (!inputMap) {
        const lastComment = extractComments(INLINE_SOURCEMAP_REGEX, ast);
        if (lastComment) {
          try {
            inputMap = _convertSourceMap().fromComment("//" + lastComment);
          } catch (err) {
            {
              debug("discarding unknown inline input sourcemap");
            }
          }
        }
      }
      if (!inputMap) {
        const lastComment = extractComments(EXTERNAL_SOURCEMAP_REGEX, ast);
        if (typeof options.filename === "string" && lastComment) {
          try {
            const match = EXTERNAL_SOURCEMAP_REGEX.exec(lastComment);
            const inputMapContent = _fs().readFileSync(_path().resolve(_path().dirname(options.filename), match[1]), "utf8");
            inputMap = _convertSourceMap().fromJSON(inputMapContent);
          } catch (err) {
            debug("discarding unknown file input sourcemap", err);
          }
        } else if (lastComment) {
          debug("discarding un-loadable file input sourcemap");
        }
      }
    }
    return new _file.default(options, {
      code,
      ast: ast,
      inputMap
    });
  }
  function extractCommentsFromList(regex, comments, lastComment) {
    if (comments) {
      comments = comments.filter(({
        value
      }) => {
        if (regex.test(value)) {
          lastComment = value;
          return false;
        }
        return true;
      });
    }
    return [comments, lastComment];
  }
  function extractComments(regex, ast) {
    let lastComment = null;
    traverseFast(ast, node => {
      [node.leadingComments, lastComment] = extractCommentsFromList(regex, node.leadingComments, lastComment);
      [node.innerComments, lastComment] = extractCommentsFromList(regex, node.innerComments, lastComment);
      [node.trailingComments, lastComment] = extractCommentsFromList(regex, node.trailingComments, lastComment);
    });
    return lastComment;
  }
  return exports$F;
}

var exports$E = {},
  _dewExec$D = false;
function dew$D() {
  if (_dewExec$D) return exports$E;
  _dewExec$D = true;
  (function (global, factory) {
    exports$E = factory(dew$2E(), dew$2D());
  })(exports$E, function (traceMapping, genMapping) {

    const SOURCELESS_MAPPING = /* #__PURE__ */SegmentObject("", -1, -1, "", null, false);
    const EMPTY_SOURCES = [];
    function SegmentObject(source, line, column, name, content, ignore) {
      return {
        source,
        line,
        column,
        name,
        content,
        ignore
      };
    }
    function Source(map, sources, source, content, ignore) {
      return {
        map,
        sources,
        source,
        content,
        ignore
      };
    }
    /**
     * MapSource represents a single sourcemap, with the ability to trace mappings into its child nodes
     * (which may themselves be SourceMapTrees).
     */
    function MapSource(map, sources) {
      return Source(map, sources, "", null, false);
    }
    /**
     * A "leaf" node in the sourcemap tree, representing an original, unmodified source file. Recursive
     * segment tracing ends at the `OriginalSource`.
     */
    function OriginalSource(source, content, ignore) {
      return Source(null, EMPTY_SOURCES, source, content, ignore);
    }
    /**
     * traceMappings is only called on the root level SourceMapTree, and begins the process of
     * resolving each mapping in terms of the original source files.
     */
    function traceMappings(tree) {
      // TODO: Eventually support sourceRoot, which has to be removed because the sources are already
      // fully resolved. We'll need to make sources relative to the sourceRoot before adding them.
      const gen = new genMapping.GenMapping({
        file: tree.map.file
      });
      const {
        sources: rootSources,
        map
      } = tree;
      const rootNames = map.names;
      const rootMappings = traceMapping.decodedMappings(map);
      for (let i = 0; i < rootMappings.length; i++) {
        const segments = rootMappings[i];
        for (let j = 0; j < segments.length; j++) {
          const segment = segments[j];
          const genCol = segment[0];
          let traced = SOURCELESS_MAPPING;
          // 1-length segments only move the current generated column, there's no source information
          // to gather from it.
          if (segment.length !== 1) {
            const source = rootSources[segment[1]];
            traced = originalPositionFor(source, segment[2], segment[3], segment.length === 5 ? rootNames[segment[4]] : "");
            // If the trace is invalid, then the trace ran into a sourcemap that doesn't contain a
            // respective segment into an original source.
            if (traced == null) continue;
          }
          const {
            column,
            line,
            name,
            content,
            source,
            ignore
          } = traced;
          genMapping.maybeAddSegment(gen, i, genCol, source, line, column, name);
          if (source && content != null) genMapping.setSourceContent(gen, source, content);
          if (ignore) genMapping.setIgnore(gen, source, true);
        }
      }
      return gen;
    }
    /**
     * originalPositionFor is only called on children SourceMapTrees. It recurses down into its own
     * child SourceMapTrees, until we find the original source map.
     */
    function originalPositionFor(source, line, column, name) {
      if (!source.map) {
        return SegmentObject(source.source, line, column, name, source.content, source.ignore);
      }
      const segment = traceMapping.traceSegment(source.map, line, column);
      // If we couldn't find a segment, then this doesn't exist in the sourcemap.
      if (segment == null) return null;
      // 1-length segments only move the current generated column, there's no source information
      // to gather from it.
      if (segment.length === 1) return SOURCELESS_MAPPING;
      return originalPositionFor(source.sources[segment[1]], segment[2], segment[3], segment.length === 5 ? source.map.names[segment[4]] : name);
    }
    function asArray(value) {
      if (Array.isArray(value)) return value;
      return [value];
    }
    /**
     * Recursively builds a tree structure out of sourcemap files, with each node
     * being either an `OriginalSource` "leaf" or a `SourceMapTree` composed of
     * `OriginalSource`s and `SourceMapTree`s.
     *
     * Every sourcemap is composed of a collection of source files and mappings
     * into locations of those source files. When we generate a `SourceMapTree` for
     * the sourcemap, we attempt to load each source file's own sourcemap. If it
     * does not have an associated sourcemap, it is considered an original,
     * unmodified source file.
     */
    function buildSourceMapTree(input, loader) {
      const maps = asArray(input).map(m => new traceMapping.TraceMap(m, ""));
      const map = maps.pop();
      for (let i = 0; i < maps.length; i++) {
        if (maps[i].sources.length > 1) {
          throw new Error(`Transformation map ${i} must have exactly one source file.\n` + "Did you specify these with the most recent transformation maps first?");
        }
      }
      let tree = build(map, loader, "", 0);
      for (let i = maps.length - 1; i >= 0; i--) {
        tree = MapSource(maps[i], [tree]);
      }
      return tree;
    }
    function build(map, loader, importer, importerDepth) {
      const {
        resolvedSources,
        sourcesContent,
        ignoreList
      } = map;
      const depth = importerDepth + 1;
      const children = resolvedSources.map((sourceFile, i) => {
        // The loading context gives the loader more information about why this file is being loaded
        // (eg, from which importer). It also allows the loader to override the location of the loaded
        // sourcemap/original source, or to override the content in the sourcesContent field if it's
        // an unmodified source file.
        const ctx = {
          importer,
          depth,
          source: sourceFile || "",
          content: undefined,
          ignore: undefined
        };
        // Use the provided loader callback to retrieve the file's sourcemap.
        // TODO: We should eventually support async loading of sourcemap files.
        const sourceMap = loader(ctx.source, ctx);
        const {
          source,
          content,
          ignore
        } = ctx;
        // If there is a sourcemap, then we need to recurse into it to load its source files.
        if (sourceMap) return build(new traceMapping.TraceMap(sourceMap, source), loader, source, depth);
        // Else, it's an unmodified source file.
        // The contents of this unmodified source file can be overridden via the loader context,
        // allowing it to be explicitly null or a string. If it remains undefined, we fall back to
        // the importing sourcemap's `sourcesContent` field.
        const sourceContent = content !== undefined ? content : sourcesContent ? sourcesContent[i] : null;
        const ignored = ignore !== undefined ? ignore : ignoreList ? ignoreList.includes(i) : false;
        return OriginalSource(source, sourceContent, ignored);
      });
      return MapSource(map, children);
    }

    /**
     * A SourceMap v3 compatible sourcemap, which only includes fields that were
     * provided to it.
     */
    class SourceMap {
      constructor(map, options) {
        const out = options.decodedMappings ? genMapping.toDecodedMap(map) : genMapping.toEncodedMap(map);
        this.version = out.version; // SourceMap spec says this should be first.
        this.file = out.file;
        this.mappings = out.mappings;
        this.names = out.names;
        this.ignoreList = out.ignoreList;
        this.sourceRoot = out.sourceRoot;
        this.sources = out.sources;
        if (!options.excludeContent) {
          this.sourcesContent = out.sourcesContent;
        }
      }
      toString() {
        return JSON.stringify(this);
      }
    }

    /**
     * Traces through all the mappings in the root sourcemap, through the sources
     * (and their sourcemaps), all the way back to the original source location.
     *
     * `loader` will be called every time we encounter a source file. If it returns
     * a sourcemap, we will recurse into that sourcemap to continue the trace. If
     * it returns a falsey value, that source file is treated as an original,
     * unmodified source file.
     *
     * Pass `excludeContent` to exclude any self-containing source file content
     * from the output sourcemap.
     *
     * Pass `decodedMappings` to receive a SourceMap with decoded (instead of
     * VLQ encoded) mappings.
     */
    function remapping(input, loader, options) {
      const opts = typeof options === "object" ? options : {
        excludeContent: !!options,
        decodedMappings: false
      };
      const tree = buildSourceMapTree(input, loader);
      return new SourceMap(traceMappings(tree), opts);
    }
    return remapping;
  });
  return exports$E;
}

var exports$D = {},
  _dewExec$C = false;
function dew$C() {
  if (_dewExec$C) return exports$D;
  _dewExec$C = true;
  Object.defineProperty(exports$D, "__esModule", {
    value: true
  });
  exports$D.default = mergeSourceMap;
  function _remapping() {
    const data = dew$D();
    _remapping = function () {
      return data;
    };
    return data;
  }
  function mergeSourceMap(inputMap, map, sourceFileName) {
    const source = sourceFileName.replace(/\\/g, "/");
    let found = false;
    const result = _remapping()(rootless(map), (s, ctx) => {
      if (s === source && !found) {
        found = true;
        ctx.source = "";
        return rootless(inputMap);
      }
      return null;
    });
    if (typeof inputMap.sourceRoot === "string") {
      result.sourceRoot = inputMap.sourceRoot;
    }
    return Object.assign({}, result);
  }
  function rootless(map) {
    return Object.assign({}, map, {
      sourceRoot: null
    });
  }
  return exports$D;
}

var exports$C = {},
  _dewExec$B = false;
function dew$B() {
  if (_dewExec$B) return exports$C;
  _dewExec$B = true;
  Object.defineProperty(exports$C, "__esModule", {
    value: true
  });
  exports$C.default = generateCode;
  function _convertSourceMap() {
    const data = dew$I();
    _convertSourceMap = function () {
      return data;
    };
    return data;
  }
  function _generator() {
    const data = dew$2j();
    _generator = function () {
      return data;
    };
    return data;
  }
  var _mergeMap = dew$C();
  function generateCode(pluginPasses, file) {
    const {
      opts,
      ast,
      code,
      inputMap
    } = file;
    const {
      generatorOpts
    } = opts;
    generatorOpts.inputSourceMap = inputMap == null ? void 0 : inputMap.toObject();
    const results = [];
    for (const plugins of pluginPasses) {
      for (const plugin of plugins) {
        const {
          generatorOverride
        } = plugin;
        if (generatorOverride) {
          const result = generatorOverride(ast, generatorOpts, code, _generator().default);
          if (result !== undefined) results.push(result);
        }
      }
    }
    let result;
    if (results.length === 0) {
      result = (0, _generator().default)(ast, generatorOpts, code);
    } else if (results.length === 1) {
      result = results[0];
      if (typeof result.then === "function") {
        throw new Error(`You appear to be using an async codegen plugin, ` + `which your current version of Babel does not support. ` + `If you're using a published plugin, ` + `you may need to upgrade your @babel/core version.`);
      }
    } else {
      throw new Error("More than one plugin attempted to override codegen.");
    }
    let {
      code: outputCode,
      decodedMap: outputMap = result.map
    } = result;
    if (result.__mergedMap) {
      outputMap = Object.assign({}, result.map);
    } else {
      if (outputMap) {
        if (inputMap) {
          outputMap = (0, _mergeMap.default)(inputMap.toObject(), outputMap, generatorOpts.sourceFileName);
        } else {
          outputMap = result.map;
        }
      }
    }
    if (opts.sourceMaps === "inline" || opts.sourceMaps === "both") {
      outputCode += "\n" + _convertSourceMap().fromObject(outputMap).toComment();
    }
    if (opts.sourceMaps === "inline") {
      outputMap = null;
    }
    return {
      outputCode,
      outputMap
    };
  }
  return exports$C;
}

var exports$B = {},
  _dewExec$A = false;
function dew$A() {
  if (_dewExec$A) return exports$B;
  _dewExec$A = true;
  Object.defineProperty(exports$B, "__esModule", {
    value: true
  });
  exports$B.run = run;
  function _traverse() {
    const data = dew$1_();
    _traverse = function () {
      return data;
    };
    return data;
  }
  var _pluginPass = dew$L();
  var _blockHoistPlugin = dew$K();
  var _normalizeOpts = dew$J();
  var _normalizeFile = dew$E();
  var _generate = dew$B();
  var _deepArray = dew$1u();
  function* run(config, code, ast) {
    const file = yield* (0, _normalizeFile.default)(config.passes, (0, _normalizeOpts.default)(config), code, ast);
    const opts = file.opts;
    try {
      yield* transformFile(file, config.passes);
    } catch (e) {
      var _opts$filename;
      e.message = `${(_opts$filename = opts.filename) != null ? _opts$filename : "unknown file"}: ${e.message}`;
      if (!e.code) {
        e.code = "BABEL_TRANSFORM_ERROR";
      }
      throw e;
    }
    let outputCode, outputMap;
    try {
      if (opts.code !== false) {
        ({
          outputCode,
          outputMap
        } = (0, _generate.default)(config.passes, file));
      }
    } catch (e) {
      var _opts$filename2;
      e.message = `${(_opts$filename2 = opts.filename) != null ? _opts$filename2 : "unknown file"}: ${e.message}`;
      if (!e.code) {
        e.code = "BABEL_GENERATE_ERROR";
      }
      throw e;
    }
    return {
      metadata: file.metadata,
      options: opts,
      ast: opts.ast === true ? file.ast : null,
      code: outputCode === undefined ? null : outputCode,
      map: outputMap === undefined ? null : outputMap,
      sourceType: file.ast.program.sourceType,
      externalDependencies: (0, _deepArray.flattenToSet)(config.externalDependencies)
    };
  }
  function* transformFile(file, pluginPasses) {
    for (const pluginPairs of pluginPasses) {
      const passPairs = [];
      const passes = [];
      const visitors = [];
      for (const plugin of pluginPairs.concat([(0, _blockHoistPlugin.default)()])) {
        const pass = new _pluginPass.default(file, plugin.key, plugin.options);
        passPairs.push([plugin, pass]);
        passes.push(pass);
        visitors.push(plugin.visitor);
      }
      for (const [plugin, pass] of passPairs) {
        const fn = plugin.pre;
        if (fn) {
          const result = fn.call(pass, file);
          yield* [];
          if (isThenable(result)) {
            throw new Error(`You appear to be using an plugin with an async .pre, ` + `which your current version of Babel does not support. ` + `If you're using a published plugin, you may need to upgrade ` + `your @babel/core version.`);
          }
        }
      }
      const visitor = _traverse().default.visitors.merge(visitors, passes, file.opts.wrapPluginVisitorMethod);
      {
        (0, _traverse().default)(file.ast, visitor, file.scope);
      }
      for (const [plugin, pass] of passPairs) {
        const fn = plugin.post;
        if (fn) {
          const result = fn.call(pass, file);
          yield* [];
          if (isThenable(result)) {
            throw new Error(`You appear to be using an plugin with an async .post, ` + `which your current version of Babel does not support. ` + `If you're using a published plugin, you may need to upgrade ` + `your @babel/core version.`);
          }
        }
      }
    }
  }
  function isThenable(val) {
    return !!val && (typeof val === "object" || typeof val === "function") && !!val.then && typeof val.then === "function";
  }
  return exports$B;
}

var exports$A = {},
  _dewExec$z = false;
function dew$z() {
  if (_dewExec$z) return exports$A;
  _dewExec$z = true;
  Object.defineProperty(exports$A, "__esModule", {
    value: true
  });
  exports$A.transformFile = transformFile;
  exports$A.transformFileAsync = transformFileAsync;
  exports$A.transformFileSync = transformFileSync;
  function _gensync() {
    const data = dew$1J();
    _gensync = function () {
      return data;
    };
    return data;
  }
  var _index = dew$M();
  var _index2 = dew$A();
  var fs = dew$1F();
  const transformFileRunner = _gensync()(function* (filename, opts) {
    const options = Object.assign({}, opts, {
      filename
    });
    const config = yield* (0, _index.default)(options);
    if (config === null) return null;
    const code = yield* fs.readFile(filename, "utf8");
    return yield* (0, _index2.run)(config, code);
  });
  function transformFile(...args) {
    transformFileRunner.errback(...args);
  }
  function transformFileSync(...args) {
    return transformFileRunner.sync(...args);
  }
  function transformFileAsync(...args) {
    return transformFileRunner.async(...args);
  }
  return exports$A;
}

var exports$z = {},
  _dewExec$y = false;
function dew$y() {
  if (_dewExec$y) return exports$z;
  _dewExec$y = true;
  exports$z = function import_(filepath) {
    return import(filepath);
  };
  return exports$z;
}

var exports$y = {},
  _dewExec$x = false;
function dew$x() {
  if (_dewExec$x) return exports$y;
  _dewExec$x = true;
  Object.defineProperty(exports$y, "__esModule", {
    value: true
  });
  exports$y.declare = declare;
  exports$y.declarePreset = void 0;
  const apiPolyfills = {
    assertVersion: api => range => {
      throwVersionError(range, api.version);
    }
  };
  {
    Object.assign(apiPolyfills, {
      targets: () => () => {
        return {};
      },
      assumption: () => () => {
        return undefined;
      }
    });
  }
  function declare(builder) {
    return (api, options, dirname) => {
      var _clonedApi2;
      let clonedApi;
      for (const name of Object.keys(apiPolyfills)) {
        var _clonedApi;
        if (api[name]) continue;
        (_clonedApi = clonedApi) != null ? _clonedApi : clonedApi = copyApiObject(api);
        clonedApi[name] = apiPolyfills[name](clonedApi);
      }
      return builder((_clonedApi2 = clonedApi) != null ? _clonedApi2 : api, options || {}, dirname);
    };
  }
  exports$y.declarePreset = declare;
  function copyApiObject(api) {
    let proto = null;
    if (typeof api.version === "string" && /^7\./.test(api.version)) {
      proto = Object.getPrototypeOf(api);
      if (proto && (!hasOwnProperty.call(proto, "version") || !hasOwnProperty.call(proto, "transform") || !hasOwnProperty.call(proto, "template") || !hasOwnProperty.call(proto, "types"))) {
        proto = null;
      }
    }
    return Object.assign({}, proto, api);
  }
  function throwVersionError(range, version) {
    if (typeof range === "number") {
      if (!Number.isInteger(range)) {
        throw new Error("Expected string or integer value.");
      }
      range = `^${range}.0.0-0`;
    }
    if (typeof range !== "string") {
      throw new Error("Expected string or integer value.");
    }
    const limit = Error.stackTraceLimit;
    if (typeof limit === "number" && limit < 25) {
      Error.stackTraceLimit = 25;
    }
    let err;
    if (version.slice(0, 2) === "7.") {
      err = new Error(`Requires Babel "^7.0.0-beta.41", but was loaded with "${version}". ` + `You'll need to update your @babel/core version.`);
    } else {
      err = new Error(`Requires Babel "${range}", but was loaded with "${version}". ` + `If you are sure you have a compatible version of @babel/core, ` + `it is likely that something in your build process is loading the ` + `wrong version. Inspect the stack trace of this error to look for ` + `the first entry that doesn't mention "@babel/core" or "babel-core" ` + `to see what is calling Babel.`);
    }
    if (typeof limit === "number") {
      Error.stackTraceLimit = limit;
    }
    throw Object.assign(err, {
      code: "BABEL_VERSION_UNSUPPORTED",
      version,
      range
    });
  }
  return exports$y;
}

var exports$x = {},
  _dewExec$w = false;
function dew$w() {
  if (_dewExec$w) return exports$x;
  _dewExec$w = true;
  Object.defineProperty(exports$x, "__esModule", {
    value: true
  });
  exports$x.default = void 0;
  var _helperPluginUtils = dew$x();
  {
    var removePlugin = function (plugins, name) {
      const indices = [];
      plugins.forEach((plugin, i) => {
        const n = Array.isArray(plugin) ? plugin[0] : plugin;
        if (n === name) {
          indices.unshift(i);
        }
      });
      for (const i of indices) {
        plugins.splice(i, 1);
      }
    };
  }
  exports$x.default = (0, _helperPluginUtils.declare)((api, opts) => {
    api.assertVersion(7);
    const {
      disallowAmbiguousJSXLike,
      dts
    } = opts;
    {
      var {
        isTSX
      } = opts;
    }
    return {
      name: "syntax-typescript",
      manipulateOptions(opts, parserOpts) {
        {
          const {
            plugins
          } = parserOpts;
          removePlugin(plugins, "flow");
          removePlugin(plugins, "jsx");
          plugins.push("objectRestSpread", "classProperties");
          if (isTSX) {
            plugins.push("jsx");
          }
        }
        parserOpts.plugins.push(["typescript", {
          disallowAmbiguousJSXLike,
          dts
        }]);
      }
    };
  });
  return exports$x;
}

var exports$w = {},
  _dewExec$v = false;
function dew$v() {
  if (_dewExec$v) return exports$w;
  _dewExec$v = true;
  Object.defineProperty(exports$w, "__esModule", {
    value: true
  });
  var _t = dew$3i();
  function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
      Object.keys(e).forEach(function (k) {
        if (k !== "default") {
          var d = Object.getOwnPropertyDescriptor(e, k);
          Object.defineProperty(n, k, d.get ? d : {
            enumerable: true,
            get: function () {
              return e[k];
            }
          });
        }
      });
    }
    n.default = e;
    return Object.freeze(n);
  }
  var _t__namespace = /*#__PURE__*/_interopNamespace(_t);
  function willPathCastToBoolean(path) {
    const maybeWrapped = path;
    const {
      node,
      parentPath
    } = maybeWrapped;
    if (parentPath.isLogicalExpression()) {
      const {
        operator,
        right
      } = parentPath.node;
      if (operator === "&&" || operator === "||" || operator === "??" && node === right) {
        return willPathCastToBoolean(parentPath);
      }
    }
    if (parentPath.isSequenceExpression()) {
      const {
        expressions
      } = parentPath.node;
      if (expressions[expressions.length - 1] === node) {
        return willPathCastToBoolean(parentPath);
      } else {
        return true;
      }
    }
    return parentPath.isConditional({
      test: node
    }) || parentPath.isUnaryExpression({
      operator: "!"
    }) || parentPath.isLoop({
      test: node
    });
  }
  const {
    LOGICAL_OPERATORS,
    arrowFunctionExpression,
    assignmentExpression,
    binaryExpression,
    booleanLiteral,
    callExpression,
    cloneNode,
    conditionalExpression,
    identifier,
    isMemberExpression,
    isOptionalCallExpression,
    isOptionalMemberExpression,
    isUpdateExpression,
    logicalExpression,
    memberExpression,
    nullLiteral,
    optionalCallExpression,
    optionalMemberExpression,
    sequenceExpression,
    updateExpression
  } = _t__namespace;
  class AssignmentMemoiser {
    constructor() {
      this._map = void 0;
      this._map = new WeakMap();
    }
    has(key) {
      return this._map.has(key);
    }
    get(key) {
      if (!this.has(key)) return;
      const record = this._map.get(key);
      const {
        value
      } = record;
      record.count--;
      if (record.count === 0) {
        return assignmentExpression("=", value, key);
      }
      return value;
    }
    set(key, value, count) {
      return this._map.set(key, {
        count,
        value
      });
    }
  }
  function toNonOptional(path, base) {
    const {
      node
    } = path;
    if (isOptionalMemberExpression(node)) {
      return memberExpression(base, node.property, node.computed);
    }
    if (path.isOptionalCallExpression()) {
      const callee = path.get("callee");
      if (path.node.optional && callee.isOptionalMemberExpression()) {
        const object = callee.node.object;
        const context = path.scope.maybeGenerateMemoised(object);
        callee.get("object").replaceWith(assignmentExpression("=", context, object));
        return callExpression(memberExpression(base, identifier("call")), [context, ...path.node.arguments]);
      }
      return callExpression(base, path.node.arguments);
    }
    return path.node;
  }
  function isInDetachedTree(path) {
    while (path) {
      if (path.isProgram()) break;
      const {
        parentPath,
        container,
        listKey
      } = path;
      const parentNode = parentPath.node;
      if (listKey) {
        if (container !== parentNode[listKey]) {
          return true;
        }
      } else {
        if (container !== parentNode) return true;
      }
      path = parentPath;
    }
    return false;
  }
  const handle = {
    memoise() {},
    handle(member, noDocumentAll) {
      const {
        node,
        parent,
        parentPath,
        scope
      } = member;
      if (member.isOptionalMemberExpression()) {
        if (isInDetachedTree(member)) return;
        const endPath = member.find(({
          node,
          parent
        }) => {
          if (isOptionalMemberExpression(parent)) {
            return parent.optional || parent.object !== node;
          }
          if (isOptionalCallExpression(parent)) {
            return node !== member.node && parent.optional || parent.callee !== node;
          }
          return true;
        });
        if (scope.path.isPattern()) {
          endPath.replaceWith(callExpression(arrowFunctionExpression([], endPath.node), []));
          return;
        }
        const willEndPathCastToBoolean = willPathCastToBoolean(endPath);
        const rootParentPath = endPath.parentPath;
        if (rootParentPath.isUpdateExpression({
          argument: node
        })) {
          throw member.buildCodeFrameError(`can't handle update expression`);
        }
        const isAssignment = rootParentPath.isAssignmentExpression({
          left: endPath.node
        });
        const isDeleteOperation = rootParentPath.isUnaryExpression({
          operator: "delete"
        });
        if (isDeleteOperation && endPath.isOptionalMemberExpression() && endPath.get("property").isPrivateName()) {
          throw member.buildCodeFrameError(`can't delete a private class element`);
        }
        let startingOptional = member;
        for (;;) {
          if (startingOptional.isOptionalMemberExpression()) {
            if (startingOptional.node.optional) break;
            startingOptional = startingOptional.get("object");
            continue;
          } else if (startingOptional.isOptionalCallExpression()) {
            if (startingOptional.node.optional) break;
            startingOptional = startingOptional.get("callee");
            continue;
          }
          throw new Error(`Internal error: unexpected ${startingOptional.node.type}`);
        }
        const startingNode = startingOptional.isOptionalMemberExpression() ? startingOptional.node.object : startingOptional.node.callee;
        const baseNeedsMemoised = scope.maybeGenerateMemoised(startingNode);
        const baseRef = baseNeedsMemoised != null ? baseNeedsMemoised : startingNode;
        const parentIsOptionalCall = parentPath.isOptionalCallExpression({
          callee: node
        });
        const isOptionalCall = parent => parentIsOptionalCall;
        const parentIsCall = parentPath.isCallExpression({
          callee: node
        });
        startingOptional.replaceWith(toNonOptional(startingOptional, baseRef));
        if (isOptionalCall()) {
          if (parent.optional) {
            parentPath.replaceWith(this.optionalCall(member, parent.arguments));
          } else {
            parentPath.replaceWith(this.call(member, parent.arguments));
          }
        } else if (parentIsCall) {
          member.replaceWith(this.boundGet(member));
        } else if (this.delete && parentPath.isUnaryExpression({
          operator: "delete"
        })) {
          parentPath.replaceWith(this.delete(member));
        } else if (parentPath.isAssignmentExpression()) {
          handleAssignment(this, member, parentPath);
        } else {
          member.replaceWith(this.get(member));
        }
        let regular = member.node;
        for (let current = member; current !== endPath;) {
          const parentPath = current.parentPath;
          if (parentPath === endPath && isOptionalCall() && parent.optional) {
            regular = parentPath.node;
            break;
          }
          regular = toNonOptional(parentPath, regular);
          current = parentPath;
        }
        let context;
        const endParentPath = endPath.parentPath;
        if (isMemberExpression(regular) && endParentPath.isOptionalCallExpression({
          callee: endPath.node,
          optional: true
        })) {
          const {
            object
          } = regular;
          context = member.scope.maybeGenerateMemoised(object);
          if (context) {
            regular.object = assignmentExpression("=", context, object);
          }
        }
        let replacementPath = endPath;
        if (isDeleteOperation || isAssignment) {
          replacementPath = endParentPath;
          regular = endParentPath.node;
        }
        const baseMemoised = baseNeedsMemoised ? assignmentExpression("=", cloneNode(baseRef), cloneNode(startingNode)) : cloneNode(baseRef);
        if (willEndPathCastToBoolean) {
          let nonNullishCheck;
          if (noDocumentAll) {
            nonNullishCheck = binaryExpression("!=", baseMemoised, nullLiteral());
          } else {
            nonNullishCheck = logicalExpression("&&", binaryExpression("!==", baseMemoised, nullLiteral()), binaryExpression("!==", cloneNode(baseRef), scope.buildUndefinedNode()));
          }
          replacementPath.replaceWith(logicalExpression("&&", nonNullishCheck, regular));
        } else {
          let nullishCheck;
          if (noDocumentAll) {
            nullishCheck = binaryExpression("==", baseMemoised, nullLiteral());
          } else {
            nullishCheck = logicalExpression("||", binaryExpression("===", baseMemoised, nullLiteral()), binaryExpression("===", cloneNode(baseRef), scope.buildUndefinedNode()));
          }
          replacementPath.replaceWith(conditionalExpression(nullishCheck, isDeleteOperation ? booleanLiteral(true) : scope.buildUndefinedNode(), regular));
        }
        if (context) {
          const endParent = endParentPath.node;
          endParentPath.replaceWith(optionalCallExpression(optionalMemberExpression(endParent.callee, identifier("call"), false, true), [cloneNode(context), ...endParent.arguments], false));
        }
        return;
      }
      if (isUpdateExpression(parent, {
        argument: node
      })) {
        if (this.simpleSet) {
          member.replaceWith(this.simpleSet(member));
          return;
        }
        const {
          operator,
          prefix
        } = parent;
        this.memoise(member, 2);
        const ref = scope.generateUidIdentifierBasedOnNode(node);
        scope.push({
          id: ref
        });
        const seq = [assignmentExpression("=", cloneNode(ref), this.get(member))];
        if (prefix) {
          seq.push(updateExpression(operator, cloneNode(ref), prefix));
          const value = sequenceExpression(seq);
          parentPath.replaceWith(this.set(member, value));
          return;
        } else {
          const ref2 = scope.generateUidIdentifierBasedOnNode(node);
          scope.push({
            id: ref2
          });
          seq.push(assignmentExpression("=", cloneNode(ref2), updateExpression(operator, cloneNode(ref), prefix)), cloneNode(ref));
          const value = sequenceExpression(seq);
          parentPath.replaceWith(sequenceExpression([this.set(member, value), cloneNode(ref2)]));
          return;
        }
      }
      if (parentPath.isAssignmentExpression({
        left: node
      })) {
        handleAssignment(this, member, parentPath);
        return;
      }
      if (parentPath.isCallExpression({
        callee: node
      })) {
        parentPath.replaceWith(this.call(member, parentPath.node.arguments));
        return;
      }
      if (parentPath.isOptionalCallExpression({
        callee: node
      })) {
        if (scope.path.isPattern()) {
          parentPath.replaceWith(callExpression(arrowFunctionExpression([], parentPath.node), []));
          return;
        }
        parentPath.replaceWith(this.optionalCall(member, parentPath.node.arguments));
        return;
      }
      if (this.delete && parentPath.isUnaryExpression({
        operator: "delete"
      })) {
        parentPath.replaceWith(this.delete(member));
        return;
      }
      if (parentPath.isForXStatement({
        left: node
      }) || parentPath.isObjectProperty({
        value: node
      }) && parentPath.parentPath.isObjectPattern() || parentPath.isAssignmentPattern({
        left: node
      }) && parentPath.parentPath.isObjectProperty({
        value: parent
      }) && parentPath.parentPath.parentPath.isObjectPattern() || parentPath.isArrayPattern() || parentPath.isAssignmentPattern({
        left: node
      }) && parentPath.parentPath.isArrayPattern() || parentPath.isRestElement()) {
        member.replaceWith(this.destructureSet(member));
        return;
      }
      if (parentPath.isTaggedTemplateExpression()) {
        member.replaceWith(this.boundGet(member));
      } else {
        member.replaceWith(this.get(member));
      }
    }
  };
  function handleAssignment(state, member, parentPath) {
    if (state.simpleSet) {
      member.replaceWith(state.simpleSet(member));
      return;
    }
    const {
      operator,
      right: value
    } = parentPath.node;
    if (operator === "=") {
      parentPath.replaceWith(state.set(member, value));
    } else {
      const operatorTrunc = operator.slice(0, -1);
      if (LOGICAL_OPERATORS.includes(operatorTrunc)) {
        state.memoise(member, 1);
        parentPath.replaceWith(logicalExpression(operatorTrunc, state.get(member), state.set(member, value)));
      } else {
        state.memoise(member, 2);
        parentPath.replaceWith(state.set(member, binaryExpression(operatorTrunc, state.get(member), value)));
      }
    }
  }
  function memberExpressionToFunctions(path, visitor, state) {
    path.traverse(visitor, Object.assign({}, handle, state, {
      memoiser: new AssignmentMemoiser()
    }));
  }
  exports$w.default = memberExpressionToFunctions;
  return exports$w;
}

var exports$v = {},
  _dewExec$u = false;
function dew$u() {
  if (_dewExec$u) return exports$v;
  _dewExec$u = true;
  Object.defineProperty(exports$v, "__esModule", {
    value: true
  });
  exports$v.default = optimiseCallExpression;
  var _t = dew$3i();
  const {
    callExpression,
    identifier,
    isIdentifier,
    isSpreadElement,
    memberExpression,
    optionalCallExpression,
    optionalMemberExpression
  } = _t;
  function optimiseCallExpression(callee, thisNode, args, optional) {
    if (args.length === 1 && isSpreadElement(args[0]) && isIdentifier(args[0].argument, {
      name: "arguments"
    })) {
      if (optional) {
        return optionalCallExpression(optionalMemberExpression(callee, identifier("apply"), false, true), [thisNode, args[0].argument], false);
      }
      return callExpression(memberExpression(callee, identifier("apply")), [thisNode, args[0].argument]);
    } else {
      if (optional) {
        return optionalCallExpression(optionalMemberExpression(callee, identifier("call"), false, true), [thisNode, ...args], false);
      }
      return callExpression(memberExpression(callee, identifier("call")), [thisNode, ...args]);
    }
  }
  return exports$v;
}

var exports$u = {},
  _dewExec$t = false;
function dew$t() {
  if (_dewExec$t) return exports$u;
  _dewExec$t = true;
  Object.defineProperty(exports$u, "__esModule", {
    value: true
  });
  exports$u.default = void 0;
  var _helperMemberExpressionToFunctions = dew$v();
  var _helperOptimiseCallExpression = dew$u();
  var _core = dew();
  var _traverse = dew$1_();
  const {
    assignmentExpression,
    callExpression,
    cloneNode,
    identifier,
    memberExpression,
    sequenceExpression,
    stringLiteral,
    thisExpression
  } = _core.types;
  {
    exports$u.environmentVisitor = _traverse.visitors.environmentVisitor({});
    exports$u.skipAllButComputedKey = function skipAllButComputedKey(path) {
      path.skip();
      if (path.node.computed) {
        path.context.maybeQueue(path.get("key"));
      }
    };
  }
  const visitor = _traverse.visitors.environmentVisitor({
    Super(path, state) {
      const {
        node,
        parentPath
      } = path;
      if (!parentPath.isMemberExpression({
        object: node
      })) return;
      state.handle(parentPath);
    }
  });
  const unshadowSuperBindingVisitor = _traverse.visitors.environmentVisitor({
    Scopable(path, {
      refName
    }) {
      const binding = path.scope.getOwnBinding(refName);
      if (binding && binding.identifier.name === refName) {
        path.scope.rename(refName);
      }
    }
  });
  const specHandlers = {
    memoise(superMember, count) {
      const {
        scope,
        node
      } = superMember;
      const {
        computed,
        property
      } = node;
      if (!computed) {
        return;
      }
      const memo = scope.maybeGenerateMemoised(property);
      if (!memo) {
        return;
      }
      this.memoiser.set(property, memo, count);
    },
    prop(superMember) {
      const {
        computed,
        property
      } = superMember.node;
      if (this.memoiser.has(property)) {
        return cloneNode(this.memoiser.get(property));
      }
      if (computed) {
        return cloneNode(property);
      }
      return stringLiteral(property.name);
    },
    _getPrototypeOfExpression() {
      const objectRef = cloneNode(this.getObjectRef());
      const targetRef = this.isStatic || this.isPrivateMethod ? objectRef : memberExpression(objectRef, identifier("prototype"));
      return callExpression(this.file.addHelper("getPrototypeOf"), [targetRef]);
    },
    get(superMember) {
      const objectRef = cloneNode(this.getObjectRef());
      return callExpression(this.file.addHelper("superPropGet"), [this.isDerivedConstructor ? sequenceExpression([thisExpression(), objectRef]) : objectRef, this.prop(superMember), thisExpression(), ...(this.isStatic || this.isPrivateMethod ? [] : [_core.types.numericLiteral(1)])]);
    },
    _call(superMember, args, optional) {
      const objectRef = cloneNode(this.getObjectRef());
      let argsNode;
      if (args.length === 1 && _core.types.isSpreadElement(args[0]) && (_core.types.isIdentifier(args[0].argument) || _core.types.isArrayExpression(args[0].argument))) {
        argsNode = args[0].argument;
      } else {
        argsNode = _core.types.arrayExpression(args);
      }
      const call = _core.types.callExpression(this.file.addHelper("superPropGet"), [this.isDerivedConstructor ? sequenceExpression([thisExpression(), objectRef]) : objectRef, this.prop(superMember), thisExpression(), _core.types.numericLiteral(2 | (this.isStatic || this.isPrivateMethod ? 0 : 1))]);
      if (optional) {
        return _core.types.optionalCallExpression(call, [argsNode], true);
      }
      return callExpression(call, [argsNode]);
    },
    set(superMember, value) {
      const objectRef = cloneNode(this.getObjectRef());
      return callExpression(this.file.addHelper("superPropSet"), [this.isDerivedConstructor ? sequenceExpression([thisExpression(), objectRef]) : objectRef, this.prop(superMember), value, thisExpression(), _core.types.numericLiteral(superMember.isInStrictMode() ? 1 : 0), ...(this.isStatic || this.isPrivateMethod ? [] : [_core.types.numericLiteral(1)])]);
    },
    destructureSet(superMember) {
      throw superMember.buildCodeFrameError(`Destructuring to a super field is not supported yet.`);
    },
    call(superMember, args) {
      return this._call(superMember, args, false);
    },
    optionalCall(superMember, args) {
      return this._call(superMember, args, true);
    },
    delete(superMember) {
      if (superMember.node.computed) {
        return sequenceExpression([callExpression(this.file.addHelper("toPropertyKey"), [cloneNode(superMember.node.property)]), _core.template.expression.ast`
          function () { throw new ReferenceError("'delete super[expr]' is invalid"); }()
        `]);
      } else {
        return _core.template.expression.ast`
        function () { throw new ReferenceError("'delete super.prop' is invalid"); }()
      `;
      }
    }
  };
  const specHandlers_old = {
    memoise(superMember, count) {
      const {
        scope,
        node
      } = superMember;
      const {
        computed,
        property
      } = node;
      if (!computed) {
        return;
      }
      const memo = scope.maybeGenerateMemoised(property);
      if (!memo) {
        return;
      }
      this.memoiser.set(property, memo, count);
    },
    prop(superMember) {
      const {
        computed,
        property
      } = superMember.node;
      if (this.memoiser.has(property)) {
        return cloneNode(this.memoiser.get(property));
      }
      if (computed) {
        return cloneNode(property);
      }
      return stringLiteral(property.name);
    },
    _getPrototypeOfExpression() {
      const objectRef = cloneNode(this.getObjectRef());
      const targetRef = this.isStatic || this.isPrivateMethod ? objectRef : memberExpression(objectRef, identifier("prototype"));
      return callExpression(this.file.addHelper("getPrototypeOf"), [targetRef]);
    },
    get(superMember) {
      return this._get(superMember);
    },
    _get(superMember) {
      const proto = this._getPrototypeOfExpression();
      return callExpression(this.file.addHelper("get"), [this.isDerivedConstructor ? sequenceExpression([thisExpression(), proto]) : proto, this.prop(superMember), thisExpression()]);
    },
    set(superMember, value) {
      const proto = this._getPrototypeOfExpression();
      return callExpression(this.file.addHelper("set"), [this.isDerivedConstructor ? sequenceExpression([thisExpression(), proto]) : proto, this.prop(superMember), value, thisExpression(), _core.types.booleanLiteral(superMember.isInStrictMode())]);
    },
    destructureSet(superMember) {
      throw superMember.buildCodeFrameError(`Destructuring to a super field is not supported yet.`);
    },
    call(superMember, args) {
      return (0, _helperOptimiseCallExpression.default)(this._get(superMember), thisExpression(), args, false);
    },
    optionalCall(superMember, args) {
      return (0, _helperOptimiseCallExpression.default)(this._get(superMember), cloneNode(thisExpression()), args, true);
    },
    delete(superMember) {
      if (superMember.node.computed) {
        return sequenceExpression([callExpression(this.file.addHelper("toPropertyKey"), [cloneNode(superMember.node.property)]), _core.template.expression.ast`
          function () { throw new ReferenceError("'delete super[expr]' is invalid"); }()
        `]);
      } else {
        return _core.template.expression.ast`
        function () { throw new ReferenceError("'delete super.prop' is invalid"); }()
      `;
      }
    }
  };
  const looseHandlers = Object.assign({}, specHandlers, {
    prop(superMember) {
      const {
        property
      } = superMember.node;
      if (this.memoiser.has(property)) {
        return cloneNode(this.memoiser.get(property));
      }
      return cloneNode(property);
    },
    get(superMember) {
      const {
        isStatic,
        getSuperRef
      } = this;
      const {
        computed
      } = superMember.node;
      const prop = this.prop(superMember);
      let object;
      if (isStatic) {
        var _getSuperRef;
        object = (_getSuperRef = getSuperRef()) != null ? _getSuperRef : memberExpression(identifier("Function"), identifier("prototype"));
      } else {
        var _getSuperRef2;
        object = memberExpression((_getSuperRef2 = getSuperRef()) != null ? _getSuperRef2 : identifier("Object"), identifier("prototype"));
      }
      return memberExpression(object, prop, computed);
    },
    set(superMember, value) {
      const {
        computed
      } = superMember.node;
      const prop = this.prop(superMember);
      return assignmentExpression("=", memberExpression(thisExpression(), prop, computed), value);
    },
    destructureSet(superMember) {
      const {
        computed
      } = superMember.node;
      const prop = this.prop(superMember);
      return memberExpression(thisExpression(), prop, computed);
    },
    call(superMember, args) {
      return (0, _helperOptimiseCallExpression.default)(this.get(superMember), thisExpression(), args, false);
    },
    optionalCall(superMember, args) {
      return (0, _helperOptimiseCallExpression.default)(this.get(superMember), thisExpression(), args, true);
    }
  });
  class ReplaceSupers {
    constructor(opts) {
      var _opts$constantSuper;
      const path = opts.methodPath;
      this.methodPath = path;
      this.isDerivedConstructor = path.isClassMethod({
        kind: "constructor"
      }) && !!opts.superRef;
      this.isStatic = path.isObjectMethod() || path.node.static || (path.isStaticBlock == null ? void 0 : path.isStaticBlock());
      this.isPrivateMethod = path.isPrivate() && path.isMethod();
      this.file = opts.file;
      this.constantSuper = (_opts$constantSuper = opts.constantSuper) != null ? _opts$constantSuper : opts.isLoose;
      this.opts = opts;
    }
    getObjectRef() {
      return cloneNode(this.opts.objectRef || this.opts.getObjectRef());
    }
    getSuperRef() {
      if (this.opts.superRef) return cloneNode(this.opts.superRef);
      if (this.opts.getSuperRef) {
        return cloneNode(this.opts.getSuperRef());
      }
    }
    replace() {
      const {
        methodPath
      } = this;
      if (this.opts.refToPreserve) {
        methodPath.traverse(unshadowSuperBindingVisitor, {
          refName: this.opts.refToPreserve.name
        });
      }
      const handler = this.constantSuper ? looseHandlers : this.file.availableHelper("superPropSet") ? specHandlers : specHandlers_old;
      visitor.shouldSkip = path => {
        if (path.parentPath === methodPath) {
          if (path.parentKey === "decorators" || path.parentKey === "key") {
            return true;
          }
        }
      };
      (0, _helperMemberExpressionToFunctions.default)(methodPath, visitor, Object.assign({
        file: this.file,
        scope: this.methodPath.scope,
        isDerivedConstructor: this.isDerivedConstructor,
        isStatic: this.isStatic,
        isPrivateMethod: this.isPrivateMethod,
        getObjectRef: this.getObjectRef.bind(this),
        getSuperRef: this.getSuperRef.bind(this),
        boundGet: handler.get
      }, handler));
    }
  }
  exports$u.default = ReplaceSupers;
  return exports$u;
}

var exports$t = {},
  _dewExec$s = false;
function dew$s() {
  if (_dewExec$s) return exports$t;
  _dewExec$s = true;
  Object.defineProperty(exports$t, "__esModule", {
    value: true
  });
  exports$t.isTransparentExprWrapper = isTransparentExprWrapper;
  exports$t.skipTransparentExprWrapperNodes = skipTransparentExprWrapperNodes;
  exports$t.skipTransparentExprWrappers = skipTransparentExprWrappers;
  var _t = dew$3i();
  const {
    isParenthesizedExpression,
    isTSAsExpression,
    isTSNonNullExpression,
    isTSSatisfiesExpression,
    isTSTypeAssertion,
    isTypeCastExpression
  } = _t;
  function isTransparentExprWrapper(node) {
    return isTSAsExpression(node) || isTSSatisfiesExpression(node) || isTSTypeAssertion(node) || isTSNonNullExpression(node) || isTypeCastExpression(node) || isParenthesizedExpression(node);
  }
  function skipTransparentExprWrappers(path) {
    while (isTransparentExprWrapper(path.node)) {
      path = path.get("expression");
    }
    return path;
  }
  function skipTransparentExprWrapperNodes(node) {
    while (isTransparentExprWrapper(node)) {
      node = node.expression;
    }
    return node;
  }
  return exports$t;
}

var exports$s = {},
  _dewExec$r = false;
function dew$r() {
  if (_dewExec$r) return exports$s;
  _dewExec$r = true;
  Object.defineProperty(exports$s, "__esModule", {
    value: true
  });
  exports$s.default = annotateAsPure;
  var _t = dew$3i();
  const {
    addComment
  } = _t;
  const PURE_ANNOTATION = "#__PURE__";
  const isPureAnnotated = ({
    leadingComments
  }) => !!leadingComments && leadingComments.some(comment => /[@#]__PURE__/.test(comment.value));
  function annotateAsPure(pathOrNode) {
    const node = pathOrNode["node"] || pathOrNode;
    if (isPureAnnotated(node)) {
      return;
    }
    addComment(node, "leading", PURE_ANNOTATION);
  }
  return exports$s;
}

var exports$r = {},
  _dewExec$q = false;
function dew$q() {
  if (_dewExec$q) return exports$r;
  _dewExec$q = true;
  Object.defineProperty(exports$r, "__esModule", {
    value: true
  });
  exports$r.assertFieldTransformed = assertFieldTransformed;
  function assertFieldTransformed(path) {
    if (path.node.declare || false) {
      throw path.buildCodeFrameError(`TypeScript 'declare' fields must first be transformed by ` + `@babel/plugin-transform-typescript.\n` + `If you have already enabled that plugin (or '@babel/preset-typescript'), make sure ` + `that it runs before any plugin related to additional class features:\n` + ` - @babel/plugin-transform-class-properties\n` + ` - @babel/plugin-transform-private-methods\n` + ` - @babel/plugin-proposal-decorators`);
    }
  }
  return exports$r;
}

var exports$q = {},
  _dewExec$p = false;
function dew$p() {
  if (_dewExec$p) return exports$q;
  _dewExec$p = true;
  Object.defineProperty(exports$q, "__esModule", {
    value: true
  });
  exports$q.buildCheckInRHS = buildCheckInRHS;
  exports$q.buildFieldsInitNodes = buildFieldsInitNodes;
  exports$q.buildPrivateNamesMap = buildPrivateNamesMap;
  exports$q.buildPrivateNamesNodes = buildPrivateNamesNodes;
  exports$q.privateNameVisitorFactory = privateNameVisitorFactory;
  exports$q.transformPrivateNamesUsage = transformPrivateNamesUsage;
  var _core = dew();
  var _traverse = dew$1_();
  var _helperReplaceSupers = dew$t();
  var _helperMemberExpressionToFunctions = dew$v();
  var _helperOptimiseCallExpression = dew$u();
  var _helperAnnotateAsPure = dew$r();
  var _helperSkipTransparentExpressionWrappers = dew$s();
  var ts = dew$q();
  {
    var newHelpers = file => {
      return file.availableHelper("classPrivateFieldGet2");
    };
  }
  function buildPrivateNamesMap(className, privateFieldsAsSymbolsOrProperties, props, file) {
    const privateNamesMap = new Map();
    let classBrandId;
    for (const prop of props) {
      if (prop.isPrivate()) {
        const {
          name
        } = prop.node.key.id;
        let update = privateNamesMap.get(name);
        if (!update) {
          const isMethod = !prop.isProperty();
          const isStatic = prop.node.static;
          let initAdded = false;
          let id;
          if (!privateFieldsAsSymbolsOrProperties && newHelpers(file) && isMethod && !isStatic) {
            var _classBrandId;
            initAdded = !!classBrandId;
            (_classBrandId = classBrandId) != null ? _classBrandId : classBrandId = prop.scope.generateUidIdentifier(`${className}_brand`);
            id = classBrandId;
          } else {
            id = prop.scope.generateUidIdentifier(name);
          }
          update = {
            id,
            static: isStatic,
            method: isMethod,
            initAdded
          };
          privateNamesMap.set(name, update);
        }
        if (prop.isClassPrivateMethod()) {
          if (prop.node.kind === "get") {
            const {
              body
            } = prop.node.body;
            let $;
            if (body.length === 1 && _core.types.isReturnStatement($ = body[0]) && _core.types.isCallExpression($ = $.argument) && $.arguments.length === 1 && _core.types.isThisExpression($.arguments[0]) && _core.types.isIdentifier($ = $.callee)) {
              update.getId = _core.types.cloneNode($);
              update.getterDeclared = true;
            } else {
              update.getId = prop.scope.generateUidIdentifier(`get_${name}`);
            }
          } else if (prop.node.kind === "set") {
            const {
              params
            } = prop.node;
            const {
              body
            } = prop.node.body;
            let $;
            if (body.length === 1 && _core.types.isExpressionStatement($ = body[0]) && _core.types.isCallExpression($ = $.expression) && $.arguments.length === 2 && _core.types.isThisExpression($.arguments[0]) && _core.types.isIdentifier($.arguments[1], {
              name: params[0].name
            }) && _core.types.isIdentifier($ = $.callee)) {
              update.setId = _core.types.cloneNode($);
              update.setterDeclared = true;
            } else {
              update.setId = prop.scope.generateUidIdentifier(`set_${name}`);
            }
          } else if (prop.node.kind === "method") {
            update.methodId = prop.scope.generateUidIdentifier(name);
          }
        }
        privateNamesMap.set(name, update);
      }
    }
    return privateNamesMap;
  }
  function buildPrivateNamesNodes(privateNamesMap, privateFieldsAsProperties, privateFieldsAsSymbols, state) {
    const initNodes = [];
    const injectedIds = new Set();
    for (const [name, value] of privateNamesMap) {
      const {
        static: isStatic,
        method: isMethod,
        getId,
        setId
      } = value;
      const isGetterOrSetter = getId || setId;
      const id = _core.types.cloneNode(value.id);
      let init;
      if (privateFieldsAsProperties) {
        init = _core.types.callExpression(state.addHelper("classPrivateFieldLooseKey"), [_core.types.stringLiteral(name)]);
      } else if (privateFieldsAsSymbols) {
        init = _core.types.callExpression(_core.types.identifier("Symbol"), [_core.types.stringLiteral(name)]);
      } else if (!isStatic) {
        if (injectedIds.has(id.name)) continue;
        injectedIds.add(id.name);
        init = _core.types.newExpression(_core.types.identifier(isMethod && (!isGetterOrSetter || newHelpers(state)) ? "WeakSet" : "WeakMap"), []);
      }
      if (init) {
        if (!privateFieldsAsSymbols) {
          (0, _helperAnnotateAsPure.default)(init);
        }
        initNodes.push(_core.template.statement.ast`var ${id} = ${init}`);
      }
    }
    return initNodes;
  }
  function privateNameVisitorFactory(visitor) {
    const nestedVisitor = _traverse.visitors.environmentVisitor(Object.assign({}, visitor));
    const privateNameVisitor = Object.assign({}, visitor, {
      Class(path) {
        const {
          privateNamesMap
        } = this;
        const body = path.get("body.body");
        const visiblePrivateNames = new Map(privateNamesMap);
        const redeclared = [];
        for (const prop of body) {
          if (!prop.isPrivate()) continue;
          const {
            name
          } = prop.node.key.id;
          visiblePrivateNames.delete(name);
          redeclared.push(name);
        }
        if (!redeclared.length) {
          return;
        }
        path.get("body").traverse(nestedVisitor, Object.assign({}, this, {
          redeclared
        }));
        path.traverse(privateNameVisitor, Object.assign({}, this, {
          privateNamesMap: visiblePrivateNames
        }));
        path.skipKey("body");
      }
    });
    return privateNameVisitor;
  }
  const privateNameVisitor = privateNameVisitorFactory({
    PrivateName(path, {
      noDocumentAll
    }) {
      const {
        privateNamesMap,
        redeclared
      } = this;
      const {
        node,
        parentPath
      } = path;
      if (!parentPath.isMemberExpression({
        property: node
      }) && !parentPath.isOptionalMemberExpression({
        property: node
      })) {
        return;
      }
      const {
        name
      } = node.id;
      if (!privateNamesMap.has(name)) return;
      if (redeclared != null && redeclared.includes(name)) return;
      this.handle(parentPath, noDocumentAll);
    }
  });
  function unshadow(name, scope, innerBinding) {
    while ((_scope = scope) != null && _scope.hasBinding(name) && !scope.bindingIdentifierEquals(name, innerBinding)) {
      var _scope;
      scope.rename(name);
      scope = scope.parent;
    }
  }
  function buildCheckInRHS(rhs, file, inRHSIsObject) {
    if (inRHSIsObject || !(file.availableHelper != null && file.availableHelper("checkInRHS"))) return rhs;
    return _core.types.callExpression(file.addHelper("checkInRHS"), [rhs]);
  }
  const privateInVisitor = privateNameVisitorFactory({
    BinaryExpression(path, {
      file
    }) {
      const {
        operator,
        left,
        right
      } = path.node;
      if (operator !== "in") return;
      if (!_core.types.isPrivateName(left)) return;
      const {
        privateFieldsAsProperties,
        privateNamesMap,
        redeclared
      } = this;
      const {
        name
      } = left.id;
      if (!privateNamesMap.has(name)) return;
      if (redeclared != null && redeclared.includes(name)) return;
      unshadow(this.classRef.name, path.scope, this.innerBinding);
      if (privateFieldsAsProperties) {
        const {
          id
        } = privateNamesMap.get(name);
        path.replaceWith(_core.template.expression.ast`
        Object.prototype.hasOwnProperty.call(${buildCheckInRHS(right, file)}, ${_core.types.cloneNode(id)})
      `);
        return;
      }
      const {
        id,
        static: isStatic
      } = privateNamesMap.get(name);
      if (isStatic) {
        path.replaceWith(_core.template.expression.ast`${buildCheckInRHS(right, file)} === ${_core.types.cloneNode(this.classRef)}`);
        return;
      }
      path.replaceWith(_core.template.expression.ast`${_core.types.cloneNode(id)}.has(${buildCheckInRHS(right, file)})`);
    }
  });
  function readOnlyError(file, name) {
    return _core.types.callExpression(file.addHelper("readOnlyError"), [_core.types.stringLiteral(`#${name}`)]);
  }
  function writeOnlyError(file, name) {
    if (!file.availableHelper("writeOnlyError")) {
      console.warn(`@babel/helpers is outdated, update it to silence this warning.`);
      return _core.types.buildUndefinedNode();
    }
    return _core.types.callExpression(file.addHelper("writeOnlyError"), [_core.types.stringLiteral(`#${name}`)]);
  }
  function buildStaticPrivateFieldAccess(expr, noUninitializedPrivateFieldAccess) {
    if (noUninitializedPrivateFieldAccess) return expr;
    return _core.types.memberExpression(expr, _core.types.identifier("_"));
  }
  function autoInherits(fn) {
    return function (member) {
      return _core.types.inherits(fn.apply(this, arguments), member.node);
    };
  }
  const privateNameHandlerSpec = {
    memoise(member, count) {
      const {
        scope
      } = member;
      const {
        object
      } = member.node;
      const memo = scope.maybeGenerateMemoised(object);
      if (!memo) {
        return;
      }
      this.memoiser.set(object, memo, count);
    },
    receiver(member) {
      const {
        object
      } = member.node;
      if (this.memoiser.has(object)) {
        return _core.types.cloneNode(this.memoiser.get(object));
      }
      return _core.types.cloneNode(object);
    },
    get: autoInherits(function (member) {
      const {
        classRef,
        privateNamesMap,
        file,
        innerBinding,
        noUninitializedPrivateFieldAccess
      } = this;
      const privateName = member.node.property;
      const {
        name
      } = privateName.id;
      const {
        id,
        static: isStatic,
        method: isMethod,
        methodId,
        getId,
        setId
      } = privateNamesMap.get(name);
      const isGetterOrSetter = getId || setId;
      const cloneId = id => _core.types.inherits(_core.types.cloneNode(id), privateName);
      if (isStatic) {
        unshadow(classRef.name, member.scope, innerBinding);
        if (!newHelpers(file)) {
          const helperName = isMethod && !isGetterOrSetter ? "classStaticPrivateMethodGet" : "classStaticPrivateFieldSpecGet";
          return _core.types.callExpression(file.addHelper(helperName), [this.receiver(member), _core.types.cloneNode(classRef), cloneId(id)]);
        }
        const receiver = this.receiver(member);
        const skipCheck = _core.types.isIdentifier(receiver) && receiver.name === classRef.name;
        if (!isMethod) {
          if (skipCheck) {
            return buildStaticPrivateFieldAccess(cloneId(id), noUninitializedPrivateFieldAccess);
          }
          return buildStaticPrivateFieldAccess(_core.types.callExpression(file.addHelper("assertClassBrand"), [_core.types.cloneNode(classRef), receiver, cloneId(id)]), noUninitializedPrivateFieldAccess);
        }
        if (getId) {
          if (skipCheck) {
            return _core.types.callExpression(cloneId(getId), [receiver]);
          }
          return _core.types.callExpression(file.addHelper("classPrivateGetter"), [_core.types.cloneNode(classRef), receiver, cloneId(getId)]);
        }
        if (setId) {
          const err = _core.types.buildUndefinedNode();
          if (skipCheck) return err;
          return _core.types.sequenceExpression([_core.types.callExpression(file.addHelper("assertClassBrand"), [_core.types.cloneNode(classRef), receiver]), err]);
        }
        if (skipCheck) return cloneId(id);
        return _core.types.callExpression(file.addHelper("assertClassBrand"), [_core.types.cloneNode(classRef), receiver, cloneId(id)]);
      }
      if (isMethod) {
        if (isGetterOrSetter) {
          if (!getId) {
            return _core.types.sequenceExpression([this.receiver(member), writeOnlyError(file, name)]);
          }
          if (!newHelpers(file)) {
            return _core.types.callExpression(file.addHelper("classPrivateFieldGet"), [this.receiver(member), cloneId(id)]);
          }
          return _core.types.callExpression(file.addHelper("classPrivateGetter"), [_core.types.cloneNode(id), this.receiver(member), cloneId(getId)]);
        }
        if (!newHelpers(file)) {
          return _core.types.callExpression(file.addHelper("classPrivateMethodGet"), [this.receiver(member), _core.types.cloneNode(id), cloneId(methodId)]);
        }
        return _core.types.callExpression(file.addHelper("assertClassBrand"), [_core.types.cloneNode(id), this.receiver(member), cloneId(methodId)]);
      }
      if (newHelpers(file)) {
        return _core.types.callExpression(file.addHelper("classPrivateFieldGet2"), [cloneId(id), this.receiver(member)]);
      }
      return _core.types.callExpression(file.addHelper("classPrivateFieldGet"), [this.receiver(member), cloneId(id)]);
    }),
    boundGet(member) {
      this.memoise(member, 1);
      return _core.types.callExpression(_core.types.memberExpression(this.get(member), _core.types.identifier("bind")), [this.receiver(member)]);
    },
    set: autoInherits(function (member, value) {
      const {
        classRef,
        privateNamesMap,
        file,
        noUninitializedPrivateFieldAccess
      } = this;
      const privateName = member.node.property;
      const {
        name
      } = privateName.id;
      const {
        id,
        static: isStatic,
        method: isMethod,
        setId,
        getId
      } = privateNamesMap.get(name);
      const isGetterOrSetter = getId || setId;
      const cloneId = id => _core.types.inherits(_core.types.cloneNode(id), privateName);
      if (isStatic) {
        if (!newHelpers(file)) {
          const helperName = isMethod && !isGetterOrSetter ? "classStaticPrivateMethodSet" : "classStaticPrivateFieldSpecSet";
          return _core.types.callExpression(file.addHelper(helperName), [this.receiver(member), _core.types.cloneNode(classRef), cloneId(id), value]);
        }
        const receiver = this.receiver(member);
        const skipCheck = _core.types.isIdentifier(receiver) && receiver.name === classRef.name;
        if (isMethod && !setId) {
          const err = readOnlyError(file, name);
          if (skipCheck) return _core.types.sequenceExpression([value, err]);
          return _core.types.sequenceExpression([value, _core.types.callExpression(file.addHelper("assertClassBrand"), [_core.types.cloneNode(classRef), receiver]), readOnlyError(file, name)]);
        }
        if (setId) {
          if (skipCheck) {
            return _core.types.callExpression(_core.types.cloneNode(setId), [receiver, value]);
          }
          return _core.types.callExpression(file.addHelper("classPrivateSetter"), [_core.types.cloneNode(classRef), cloneId(setId), receiver, value]);
        }
        return _core.types.assignmentExpression("=", buildStaticPrivateFieldAccess(cloneId(id), noUninitializedPrivateFieldAccess), skipCheck ? value : _core.types.callExpression(file.addHelper("assertClassBrand"), [_core.types.cloneNode(classRef), receiver, value]));
      }
      if (isMethod) {
        if (setId) {
          if (!newHelpers(file)) {
            return _core.types.callExpression(file.addHelper("classPrivateFieldSet"), [this.receiver(member), cloneId(id), value]);
          }
          return _core.types.callExpression(file.addHelper("classPrivateSetter"), [_core.types.cloneNode(id), cloneId(setId), this.receiver(member), value]);
        }
        return _core.types.sequenceExpression([this.receiver(member), value, readOnlyError(file, name)]);
      }
      if (newHelpers(file)) {
        return _core.types.callExpression(file.addHelper("classPrivateFieldSet2"), [cloneId(id), this.receiver(member), value]);
      }
      return _core.types.callExpression(file.addHelper("classPrivateFieldSet"), [this.receiver(member), cloneId(id), value]);
    }),
    destructureSet(member) {
      const {
        classRef,
        privateNamesMap,
        file,
        noUninitializedPrivateFieldAccess
      } = this;
      const privateName = member.node.property;
      const {
        name
      } = privateName.id;
      const {
        id,
        static: isStatic,
        method: isMethod,
        setId
      } = privateNamesMap.get(name);
      const cloneId = id => _core.types.inherits(_core.types.cloneNode(id), privateName);
      if (!newHelpers(file)) {
        if (isStatic) {
          try {
            var helper = file.addHelper("classStaticPrivateFieldDestructureSet");
          } catch (_unused) {
            throw new Error("Babel can not transpile `[C.#p] = [0]` with @babel/helpers < 7.13.10, \n" + "please update @babel/helpers to the latest version.");
          }
          return _core.types.memberExpression(_core.types.callExpression(helper, [this.receiver(member), _core.types.cloneNode(classRef), cloneId(id)]), _core.types.identifier("value"));
        }
        return _core.types.memberExpression(_core.types.callExpression(file.addHelper("classPrivateFieldDestructureSet"), [this.receiver(member), cloneId(id)]), _core.types.identifier("value"));
      }
      if (isMethod && !setId) {
        return _core.types.memberExpression(_core.types.sequenceExpression([member.node.object, readOnlyError(file, name)]), _core.types.identifier("_"));
      }
      if (isStatic && !isMethod) {
        const getCall = this.get(member);
        if (!noUninitializedPrivateFieldAccess || !_core.types.isCallExpression(getCall)) {
          return getCall;
        }
        const ref = getCall.arguments.pop();
        getCall.arguments.push(_core.template.expression.ast`(_) => ${ref} = _`);
        return _core.types.memberExpression(_core.types.callExpression(file.addHelper("toSetter"), [getCall]), _core.types.identifier("_"));
      }
      const setCall = this.set(member, _core.types.identifier("_"));
      if (!_core.types.isCallExpression(setCall) || !_core.types.isIdentifier(setCall.arguments[setCall.arguments.length - 1], {
        name: "_"
      })) {
        throw member.buildCodeFrameError("Internal Babel error while compiling this code. This is a Babel bug. " + "Please report it at https://github.com/babel/babel/issues.");
      }
      let args;
      if (_core.types.isMemberExpression(setCall.callee, {
        computed: false
      }) && _core.types.isIdentifier(setCall.callee.property) && setCall.callee.property.name === "call") {
        args = [setCall.callee.object, _core.types.arrayExpression(setCall.arguments.slice(1, -1)), setCall.arguments[0]];
      } else {
        args = [setCall.callee, _core.types.arrayExpression(setCall.arguments.slice(0, -1))];
      }
      return _core.types.memberExpression(_core.types.callExpression(file.addHelper("toSetter"), args), _core.types.identifier("_"));
    },
    call(member, args) {
      this.memoise(member, 1);
      return (0, _helperOptimiseCallExpression.default)(this.get(member), this.receiver(member), args, false);
    },
    optionalCall(member, args) {
      this.memoise(member, 1);
      return (0, _helperOptimiseCallExpression.default)(this.get(member), this.receiver(member), args, true);
    },
    delete() {
      throw new Error("Internal Babel error: deleting private elements is a parsing error.");
    }
  };
  const privateNameHandlerLoose = {
    get(member) {
      const {
        privateNamesMap,
        file
      } = this;
      const {
        object
      } = member.node;
      const {
        name
      } = member.node.property.id;
      return _core.template.expression`BASE(REF, PROP)[PROP]`({
        BASE: file.addHelper("classPrivateFieldLooseBase"),
        REF: _core.types.cloneNode(object),
        PROP: _core.types.cloneNode(privateNamesMap.get(name).id)
      });
    },
    set() {
      throw new Error("private name handler with loose = true don't need set()");
    },
    boundGet(member) {
      return _core.types.callExpression(_core.types.memberExpression(this.get(member), _core.types.identifier("bind")), [_core.types.cloneNode(member.node.object)]);
    },
    simpleSet(member) {
      return this.get(member);
    },
    destructureSet(member) {
      return this.get(member);
    },
    call(member, args) {
      return _core.types.callExpression(this.get(member), args);
    },
    optionalCall(member, args) {
      return _core.types.optionalCallExpression(this.get(member), args, true);
    },
    delete() {
      throw new Error("Internal Babel error: deleting private elements is a parsing error.");
    }
  };
  function transformPrivateNamesUsage(ref, path, privateNamesMap, {
    privateFieldsAsProperties,
    noUninitializedPrivateFieldAccess,
    noDocumentAll,
    innerBinding
  }, state) {
    if (!privateNamesMap.size) return;
    const body = path.get("body");
    const handler = privateFieldsAsProperties ? privateNameHandlerLoose : privateNameHandlerSpec;
    (0, _helperMemberExpressionToFunctions.default)(body, privateNameVisitor, Object.assign({
      privateNamesMap,
      classRef: ref,
      file: state
    }, handler, {
      noDocumentAll,
      noUninitializedPrivateFieldAccess,
      innerBinding
    }));
    body.traverse(privateInVisitor, {
      privateNamesMap,
      classRef: ref,
      file: state,
      privateFieldsAsProperties,
      innerBinding
    });
  }
  function buildPrivateFieldInitLoose(ref, prop, privateNamesMap) {
    const {
      id
    } = privateNamesMap.get(prop.node.key.id.name);
    const value = prop.node.value || prop.scope.buildUndefinedNode();
    return inheritPropComments(_core.template.statement.ast`
      Object.defineProperty(${ref}, ${_core.types.cloneNode(id)}, {
        // configurable is false by default
        // enumerable is false by default
        writable: true,
        value: ${value}
      });
    `, prop);
  }
  function buildPrivateInstanceFieldInitSpec(ref, prop, privateNamesMap, state) {
    const {
      id
    } = privateNamesMap.get(prop.node.key.id.name);
    const value = prop.node.value || prop.scope.buildUndefinedNode();
    {
      if (!state.availableHelper("classPrivateFieldInitSpec")) {
        return inheritPropComments(_core.template.statement.ast`${_core.types.cloneNode(id)}.set(${ref}, {
          // configurable is always false for private elements
          // enumerable is always false for private elements
          writable: true,
          value: ${value},
        })`, prop);
      }
    }
    const helper = state.addHelper("classPrivateFieldInitSpec");
    return inheritLoc(inheritPropComments(_core.types.expressionStatement(_core.types.callExpression(helper, [_core.types.thisExpression(), inheritLoc(_core.types.cloneNode(id), prop.node.key), newHelpers(state) ? value : _core.template.expression.ast`{ writable: true, value: ${value} }`])), prop), prop.node);
  }
  function buildPrivateStaticFieldInitSpec(prop, privateNamesMap, noUninitializedPrivateFieldAccess) {
    const privateName = privateNamesMap.get(prop.node.key.id.name);
    const value = noUninitializedPrivateFieldAccess ? prop.node.value : _core.template.expression.ast`{
        _: ${prop.node.value || _core.types.buildUndefinedNode()}
      }`;
    return inheritPropComments(_core.types.variableDeclaration("var", [_core.types.variableDeclarator(_core.types.cloneNode(privateName.id), value)]), prop);
  }
  {
    var buildPrivateStaticFieldInitSpecOld = function (prop, privateNamesMap) {
      const privateName = privateNamesMap.get(prop.node.key.id.name);
      const {
        id,
        getId,
        setId,
        initAdded
      } = privateName;
      const isGetterOrSetter = getId || setId;
      if (!prop.isProperty() && (initAdded || !isGetterOrSetter)) return;
      if (isGetterOrSetter) {
        privateNamesMap.set(prop.node.key.id.name, Object.assign({}, privateName, {
          initAdded: true
        }));
        return inheritPropComments(_core.template.statement.ast`
          var ${_core.types.cloneNode(id)} = {
            // configurable is false by default
            // enumerable is false by default
            // writable is false by default
            get: ${getId ? getId.name : prop.scope.buildUndefinedNode()},
            set: ${setId ? setId.name : prop.scope.buildUndefinedNode()}
          }
        `, prop);
      }
      const value = prop.node.value || prop.scope.buildUndefinedNode();
      return inheritPropComments(_core.template.statement.ast`
        var ${_core.types.cloneNode(id)} = {
          // configurable is false by default
          // enumerable is false by default
          writable: true,
          value: ${value}
        };
      `, prop);
    };
  }
  function buildPrivateMethodInitLoose(ref, prop, privateNamesMap) {
    const privateName = privateNamesMap.get(prop.node.key.id.name);
    const {
      methodId,
      id,
      getId,
      setId,
      initAdded
    } = privateName;
    if (initAdded) return;
    if (methodId) {
      return inheritPropComments(_core.template.statement.ast`
        Object.defineProperty(${ref}, ${id}, {
          // configurable is false by default
          // enumerable is false by default
          // writable is false by default
          value: ${methodId.name}
        });
      `, prop);
    }
    const isGetterOrSetter = getId || setId;
    if (isGetterOrSetter) {
      privateNamesMap.set(prop.node.key.id.name, Object.assign({}, privateName, {
        initAdded: true
      }));
      return inheritPropComments(_core.template.statement.ast`
        Object.defineProperty(${ref}, ${id}, {
          // configurable is false by default
          // enumerable is false by default
          // writable is false by default
          get: ${getId ? getId.name : prop.scope.buildUndefinedNode()},
          set: ${setId ? setId.name : prop.scope.buildUndefinedNode()}
        });
      `, prop);
    }
  }
  function buildPrivateInstanceMethodInitSpec(ref, prop, privateNamesMap, state) {
    const privateName = privateNamesMap.get(prop.node.key.id.name);
    if (privateName.initAdded) return;
    if (!newHelpers(state)) {
      const isGetterOrSetter = privateName.getId || privateName.setId;
      if (isGetterOrSetter) {
        return buildPrivateAccessorInitialization(ref, prop, privateNamesMap, state);
      }
    }
    return buildPrivateInstanceMethodInitialization(ref, prop, privateNamesMap, state);
  }
  function buildPrivateAccessorInitialization(ref, prop, privateNamesMap, state) {
    const privateName = privateNamesMap.get(prop.node.key.id.name);
    const {
      id,
      getId,
      setId
    } = privateName;
    privateNamesMap.set(prop.node.key.id.name, Object.assign({}, privateName, {
      initAdded: true
    }));
    {
      if (!state.availableHelper("classPrivateFieldInitSpec")) {
        return inheritPropComments(_core.template.statement.ast`
          ${id}.set(${ref}, {
            get: ${getId ? getId.name : prop.scope.buildUndefinedNode()},
            set: ${setId ? setId.name : prop.scope.buildUndefinedNode()}
          });
        `, prop);
      }
    }
    const helper = state.addHelper("classPrivateFieldInitSpec");
    return inheritLoc(inheritPropComments(_core.template.statement.ast`${helper}(
      ${_core.types.thisExpression()},
      ${_core.types.cloneNode(id)},
      {
        get: ${getId ? getId.name : prop.scope.buildUndefinedNode()},
        set: ${setId ? setId.name : prop.scope.buildUndefinedNode()}
      },
    )`, prop), prop.node);
  }
  function buildPrivateInstanceMethodInitialization(ref, prop, privateNamesMap, state) {
    const privateName = privateNamesMap.get(prop.node.key.id.name);
    const {
      id
    } = privateName;
    {
      if (!state.availableHelper("classPrivateMethodInitSpec")) {
        return inheritPropComments(_core.template.statement.ast`${id}.add(${ref})`, prop);
      }
    }
    const helper = state.addHelper("classPrivateMethodInitSpec");
    return inheritPropComments(_core.template.statement.ast`${helper}(
      ${_core.types.thisExpression()},
      ${_core.types.cloneNode(id)}
    )`, prop);
  }
  function buildPublicFieldInitLoose(ref, prop) {
    const {
      key,
      computed
    } = prop.node;
    const value = prop.node.value || prop.scope.buildUndefinedNode();
    return inheritPropComments(_core.types.expressionStatement(_core.types.assignmentExpression("=", _core.types.memberExpression(ref, key, computed || _core.types.isLiteral(key)), value)), prop);
  }
  function buildPublicFieldInitSpec(ref, prop, state) {
    const {
      key,
      computed
    } = prop.node;
    const value = prop.node.value || prop.scope.buildUndefinedNode();
    return inheritPropComments(_core.types.expressionStatement(_core.types.callExpression(state.addHelper("defineProperty"), [ref, computed || _core.types.isLiteral(key) ? key : _core.types.stringLiteral(key.name), value])), prop);
  }
  function buildPrivateStaticMethodInitLoose(ref, prop, state, privateNamesMap) {
    const privateName = privateNamesMap.get(prop.node.key.id.name);
    const {
      id,
      methodId,
      getId,
      setId,
      initAdded
    } = privateName;
    if (initAdded) return;
    const isGetterOrSetter = getId || setId;
    if (isGetterOrSetter) {
      privateNamesMap.set(prop.node.key.id.name, Object.assign({}, privateName, {
        initAdded: true
      }));
      return inheritPropComments(_core.template.statement.ast`
        Object.defineProperty(${ref}, ${id}, {
          // configurable is false by default
          // enumerable is false by default
          // writable is false by default
          get: ${getId ? getId.name : prop.scope.buildUndefinedNode()},
          set: ${setId ? setId.name : prop.scope.buildUndefinedNode()}
        })
      `, prop);
    }
    return inheritPropComments(_core.template.statement.ast`
      Object.defineProperty(${ref}, ${id}, {
        // configurable is false by default
        // enumerable is false by default
        // writable is false by default
        value: ${methodId.name}
      });
    `, prop);
  }
  function buildPrivateMethodDeclaration(file, prop, privateNamesMap, privateFieldsAsSymbolsOrProperties = false) {
    const privateName = privateNamesMap.get(prop.node.key.id.name);
    const {
      id,
      methodId,
      getId,
      setId,
      getterDeclared,
      setterDeclared,
      static: isStatic
    } = privateName;
    const {
      params,
      body,
      generator,
      async
    } = prop.node;
    const isGetter = getId && params.length === 0;
    const isSetter = setId && params.length > 0;
    if (isGetter && getterDeclared || isSetter && setterDeclared) {
      privateNamesMap.set(prop.node.key.id.name, Object.assign({}, privateName, {
        initAdded: true
      }));
      return null;
    }
    if (newHelpers(file) && (isGetter || isSetter) && !privateFieldsAsSymbolsOrProperties) {
      const scope = prop.get("body").scope;
      const thisArg = scope.generateUidIdentifier("this");
      const state = {
        thisRef: thisArg,
        argumentsPath: []
      };
      prop.traverse(thisContextVisitor, state);
      if (state.argumentsPath.length) {
        const argumentsId = scope.generateUidIdentifier("arguments");
        scope.push({
          id: argumentsId,
          init: _core.template.expression.ast`[].slice.call(arguments, 1)`
        });
        for (const path of state.argumentsPath) {
          path.replaceWith(_core.types.cloneNode(argumentsId));
        }
      }
      params.unshift(_core.types.cloneNode(thisArg));
    }
    let declId = methodId;
    if (isGetter) {
      privateNamesMap.set(prop.node.key.id.name, Object.assign({}, privateName, {
        getterDeclared: true,
        initAdded: true
      }));
      declId = getId;
    } else if (isSetter) {
      privateNamesMap.set(prop.node.key.id.name, Object.assign({}, privateName, {
        setterDeclared: true,
        initAdded: true
      }));
      declId = setId;
    } else if (isStatic && !privateFieldsAsSymbolsOrProperties) {
      declId = id;
    }
    return inheritPropComments(_core.types.functionDeclaration(_core.types.cloneNode(declId), params, body, generator, async), prop);
  }
  const thisContextVisitor = _traverse.visitors.environmentVisitor({
    Identifier(path, state) {
      if (state.argumentsPath && path.node.name === "arguments") {
        state.argumentsPath.push(path);
      }
    },
    UnaryExpression(path) {
      const {
        node
      } = path;
      if (node.operator === "delete") {
        const argument = (0, _helperSkipTransparentExpressionWrappers.skipTransparentExprWrapperNodes)(node.argument);
        if (_core.types.isThisExpression(argument)) {
          path.replaceWith(_core.types.booleanLiteral(true));
        }
      }
    },
    ThisExpression(path, state) {
      state.needsClassRef = true;
      path.replaceWith(_core.types.cloneNode(state.thisRef));
    },
    MetaProperty(path) {
      const {
        node,
        scope
      } = path;
      if (node.meta.name === "new" && node.property.name === "target") {
        path.replaceWith(scope.buildUndefinedNode());
      }
    }
  });
  const innerReferencesVisitor = {
    ReferencedIdentifier(path, state) {
      if (path.scope.bindingIdentifierEquals(path.node.name, state.innerBinding)) {
        state.needsClassRef = true;
        path.node.name = state.thisRef.name;
      }
    }
  };
  function replaceThisContext(path, ref, innerBindingRef) {
    var _state$thisRef;
    const state = {
      thisRef: ref,
      needsClassRef: false,
      innerBinding: innerBindingRef
    };
    if (!path.isMethod()) {
      path.traverse(thisContextVisitor, state);
    }
    if (innerBindingRef != null && (_state$thisRef = state.thisRef) != null && _state$thisRef.name && state.thisRef.name !== innerBindingRef.name) {
      path.traverse(innerReferencesVisitor, state);
    }
    return state.needsClassRef;
  }
  function isNameOrLength({
    key,
    computed
  }) {
    if (key.type === "Identifier") {
      return !computed && (key.name === "name" || key.name === "length");
    }
    if (key.type === "StringLiteral") {
      return key.value === "name" || key.value === "length";
    }
    return false;
  }
  function inheritPropComments(node, prop) {
    _core.types.inheritLeadingComments(node, prop.node);
    _core.types.inheritInnerComments(node, prop.node);
    return node;
  }
  function inheritLoc(node, original) {
    node.start = original.start;
    node.end = original.end;
    node.loc = original.loc;
    return node;
  }
  function buildFieldsInitNodes(ref, superRef, props, privateNamesMap, file, setPublicClassFields, privateFieldsAsSymbolsOrProperties, noUninitializedPrivateFieldAccess, constantSuper, innerBindingRef) {
    var _ref, _ref2;
    let classRefFlags = 0;
    let injectSuperRef;
    const staticNodes = [];
    const instanceNodes = [];
    let lastInstanceNodeReturnsThis = false;
    const pureStaticNodes = [];
    let classBindingNode = null;
    const getSuperRef = _core.types.isIdentifier(superRef) ? () => superRef : () => {
      var _injectSuperRef;
      (_injectSuperRef = injectSuperRef) != null ? _injectSuperRef : injectSuperRef = props[0].scope.generateUidIdentifierBasedOnNode(superRef);
      return injectSuperRef;
    };
    const classRefForInnerBinding = (_ref = ref) != null ? _ref : props[0].scope.generateUidIdentifier((innerBindingRef == null ? void 0 : innerBindingRef.name) || "Class");
    (_ref2 = ref) != null ? _ref2 : ref = _core.types.cloneNode(innerBindingRef);
    for (const prop of props) {
      if (prop.isClassProperty()) {
        ts.assertFieldTransformed(prop);
      }
      const isStatic = !(_core.types.isStaticBlock != null && _core.types.isStaticBlock(prop.node)) && prop.node.static;
      const isInstance = !isStatic;
      const isPrivate = prop.isPrivate();
      const isPublic = !isPrivate;
      const isField = prop.isProperty();
      const isMethod = !isField;
      const isStaticBlock = prop.isStaticBlock == null ? void 0 : prop.isStaticBlock();
      if (isStatic) classRefFlags |= 1;
      if (isStatic || isMethod && isPrivate || isStaticBlock) {
        new _helperReplaceSupers.default({
          methodPath: prop,
          constantSuper,
          file: file,
          refToPreserve: innerBindingRef,
          getSuperRef,
          getObjectRef() {
            classRefFlags |= 2;
            if (isStatic || isStaticBlock) {
              return classRefForInnerBinding;
            } else {
              return _core.types.memberExpression(classRefForInnerBinding, _core.types.identifier("prototype"));
            }
          }
        }).replace();
        const replaced = replaceThisContext(prop, classRefForInnerBinding, innerBindingRef);
        if (replaced) {
          classRefFlags |= 2;
        }
      }
      lastInstanceNodeReturnsThis = false;
      switch (true) {
        case isStaticBlock:
          {
            const blockBody = prop.node.body;
            if (blockBody.length === 1 && _core.types.isExpressionStatement(blockBody[0])) {
              staticNodes.push(inheritPropComments(blockBody[0], prop));
            } else {
              staticNodes.push(_core.types.inheritsComments(_core.template.statement.ast`(() => { ${blockBody} })()`, prop.node));
            }
            break;
          }
        case isStatic && isPrivate && isField && privateFieldsAsSymbolsOrProperties:
          staticNodes.push(buildPrivateFieldInitLoose(_core.types.cloneNode(ref), prop, privateNamesMap));
          break;
        case isStatic && isPrivate && isField && !privateFieldsAsSymbolsOrProperties:
          if (!newHelpers(file)) {
            staticNodes.push(buildPrivateStaticFieldInitSpecOld(prop, privateNamesMap));
          } else {
            staticNodes.push(buildPrivateStaticFieldInitSpec(prop, privateNamesMap, noUninitializedPrivateFieldAccess));
          }
          break;
        case isStatic && isPublic && isField && setPublicClassFields:
          if (!isNameOrLength(prop.node)) {
            staticNodes.push(buildPublicFieldInitLoose(_core.types.cloneNode(ref), prop));
            break;
          }
        case isStatic && isPublic && isField && !setPublicClassFields:
          staticNodes.push(buildPublicFieldInitSpec(_core.types.cloneNode(ref), prop, file));
          break;
        case isInstance && isPrivate && isField && privateFieldsAsSymbolsOrProperties:
          instanceNodes.push(buildPrivateFieldInitLoose(_core.types.thisExpression(), prop, privateNamesMap));
          break;
        case isInstance && isPrivate && isField && !privateFieldsAsSymbolsOrProperties:
          instanceNodes.push(buildPrivateInstanceFieldInitSpec(_core.types.thisExpression(), prop, privateNamesMap, file));
          break;
        case isInstance && isPrivate && isMethod && privateFieldsAsSymbolsOrProperties:
          instanceNodes.unshift(buildPrivateMethodInitLoose(_core.types.thisExpression(), prop, privateNamesMap));
          pureStaticNodes.push(buildPrivateMethodDeclaration(file, prop, privateNamesMap, privateFieldsAsSymbolsOrProperties));
          break;
        case isInstance && isPrivate && isMethod && !privateFieldsAsSymbolsOrProperties:
          instanceNodes.unshift(buildPrivateInstanceMethodInitSpec(_core.types.thisExpression(), prop, privateNamesMap, file));
          pureStaticNodes.push(buildPrivateMethodDeclaration(file, prop, privateNamesMap, privateFieldsAsSymbolsOrProperties));
          break;
        case isStatic && isPrivate && isMethod && !privateFieldsAsSymbolsOrProperties:
          if (!newHelpers(file)) {
            staticNodes.unshift(buildPrivateStaticFieldInitSpecOld(prop, privateNamesMap));
          }
          pureStaticNodes.push(buildPrivateMethodDeclaration(file, prop, privateNamesMap, privateFieldsAsSymbolsOrProperties));
          break;
        case isStatic && isPrivate && isMethod && privateFieldsAsSymbolsOrProperties:
          staticNodes.unshift(buildPrivateStaticMethodInitLoose(_core.types.cloneNode(ref), prop, file, privateNamesMap));
          pureStaticNodes.push(buildPrivateMethodDeclaration(file, prop, privateNamesMap, privateFieldsAsSymbolsOrProperties));
          break;
        case isInstance && isPublic && isField && setPublicClassFields:
          instanceNodes.push(buildPublicFieldInitLoose(_core.types.thisExpression(), prop));
          break;
        case isInstance && isPublic && isField && !setPublicClassFields:
          lastInstanceNodeReturnsThis = true;
          instanceNodes.push(buildPublicFieldInitSpec(_core.types.thisExpression(), prop, file));
          break;
        default:
          throw new Error("Unreachable.");
      }
    }
    if (classRefFlags & 2 && innerBindingRef != null) {
      classBindingNode = _core.types.expressionStatement(_core.types.assignmentExpression("=", _core.types.cloneNode(classRefForInnerBinding), _core.types.cloneNode(innerBindingRef)));
    }
    return {
      staticNodes: staticNodes.filter(Boolean),
      instanceNodes: instanceNodes.filter(Boolean),
      lastInstanceNodeReturnsThis,
      pureStaticNodes: pureStaticNodes.filter(Boolean),
      classBindingNode,
      wrapClass(path) {
        for (const prop of props) {
          prop.node.leadingComments = null;
          prop.remove();
        }
        if (injectSuperRef) {
          path.scope.push({
            id: _core.types.cloneNode(injectSuperRef)
          });
          path.set("superClass", _core.types.assignmentExpression("=", injectSuperRef, path.node.superClass));
        }
        if (classRefFlags !== 0) {
          if (path.isClassExpression()) {
            path.scope.push({
              id: ref
            });
            path.replaceWith(_core.types.assignmentExpression("=", _core.types.cloneNode(ref), path.node));
          } else {
            if (innerBindingRef == null) {
              path.node.id = ref;
            }
            if (classBindingNode != null) {
              path.scope.push({
                id: classRefForInnerBinding
              });
            }
          }
        }
        return path;
      }
    };
  }
  return exports$q;
}

var exports$p = {},
  _dewExec$o = false;
function dew$o() {
  if (_dewExec$o) return exports$p;
  _dewExec$o = true;
  Object.defineProperty(exports$p, "__esModule", {
    value: true
  });
  exports$p.extractComputedKeys = extractComputedKeys;
  exports$p.injectInitialization = injectInitialization;
  exports$p.memoiseComputedKey = memoiseComputedKey;
  var _core = dew();
  var _traverse = dew$1_();
  const findBareSupers = _traverse.visitors.environmentVisitor({
    Super(path) {
      const {
        node,
        parentPath
      } = path;
      if (parentPath.isCallExpression({
        callee: node
      })) {
        this.push(parentPath);
      }
    }
  });
  const referenceVisitor = {
    "TSTypeAnnotation|TypeAnnotation"(path) {
      path.skip();
    },
    ReferencedIdentifier(path, {
      scope
    }) {
      if (scope.hasOwnBinding(path.node.name)) {
        scope.rename(path.node.name);
        path.skip();
      }
    }
  };
  function handleClassTDZ(path, state) {
    if (state.classBinding && state.classBinding === path.scope.getBinding(path.node.name)) {
      const classNameTDZError = state.file.addHelper("classNameTDZError");
      const throwNode = _core.types.callExpression(classNameTDZError, [_core.types.stringLiteral(path.node.name)]);
      path.replaceWith(_core.types.sequenceExpression([throwNode, path.node]));
      path.skip();
    }
  }
  const classFieldDefinitionEvaluationTDZVisitor = {
    ReferencedIdentifier: handleClassTDZ
  };
  function injectInitialization(path, constructor, nodes, renamer, lastReturnsThis) {
    if (!nodes.length) return;
    const isDerived = !!path.node.superClass;
    if (!constructor) {
      const newConstructor = _core.types.classMethod("constructor", _core.types.identifier("constructor"), [], _core.types.blockStatement([]));
      if (isDerived) {
        newConstructor.params = [_core.types.restElement(_core.types.identifier("args"))];
        newConstructor.body.body.push(_core.template.statement.ast`super(...args)`);
      }
      [constructor] = path.get("body").unshiftContainer("body", newConstructor);
    }
    if (renamer) {
      renamer(referenceVisitor, {
        scope: constructor.scope
      });
    }
    if (isDerived) {
      const bareSupers = [];
      constructor.traverse(findBareSupers, bareSupers);
      let isFirst = true;
      for (const bareSuper of bareSupers) {
        if (isFirst) {
          isFirst = false;
        } else {
          nodes = nodes.map(n => _core.types.cloneNode(n));
        }
        if (!bareSuper.parentPath.isExpressionStatement()) {
          const allNodes = [bareSuper.node, ...nodes.map(n => _core.types.toExpression(n))];
          if (!lastReturnsThis) allNodes.push(_core.types.thisExpression());
          bareSuper.replaceWith(_core.types.sequenceExpression(allNodes));
        } else {
          bareSuper.insertAfter(nodes);
        }
      }
    } else {
      constructor.get("body").unshiftContainer("body", nodes);
    }
  }
  function memoiseComputedKey(keyNode, scope, hint) {
    const isUidReference = _core.types.isIdentifier(keyNode) && scope.hasUid(keyNode.name);
    if (isUidReference) {
      return;
    }
    const isMemoiseAssignment = _core.types.isAssignmentExpression(keyNode, {
      operator: "="
    }) && _core.types.isIdentifier(keyNode.left) && scope.hasUid(keyNode.left.name);
    if (isMemoiseAssignment) {
      return _core.types.cloneNode(keyNode);
    } else {
      const ident = _core.types.identifier(hint);
      scope.push({
        id: ident,
        kind: "let"
      });
      return _core.types.assignmentExpression("=", _core.types.cloneNode(ident), keyNode);
    }
  }
  function extractComputedKeys(path, computedPaths, file) {
    const {
      scope
    } = path;
    const declarations = [];
    const state = {
      classBinding: path.node.id && scope.getBinding(path.node.id.name),
      file
    };
    for (const computedPath of computedPaths) {
      const computedKey = computedPath.get("key");
      if (computedKey.isReferencedIdentifier()) {
        handleClassTDZ(computedKey, state);
      } else {
        computedKey.traverse(classFieldDefinitionEvaluationTDZVisitor, state);
      }
      const computedNode = computedPath.node;
      if (!computedKey.isConstantExpression()) {
        const assignment = memoiseComputedKey(computedKey.node, scope, scope.generateUidBasedOnNode(computedKey.node));
        if (assignment) {
          declarations.push(_core.types.expressionStatement(assignment));
          computedNode.key = _core.types.cloneNode(assignment.left);
        }
      }
    }
    return declarations;
  }
  return exports$p;
}

var exports$o = {},
  _dewExec$n = false;
function dew$n() {
  if (_dewExec$n) return exports$o;
  _dewExec$n = true;
  Object.defineProperty(exports$o, "__esModule", {
    value: true
  });
  exports$o.default = _default;
  var _core = dew();
  var _helperReplaceSupers = dew$t();
  var _helperSkipTransparentExpressionWrappers = dew$s();
  var _fields = dew$p();
  var _misc = dew$o();
  function incrementId(id, idx = id.length - 1) {
    if (idx === -1) {
      id.unshift(65);
      return;
    }
    const current = id[idx];
    if (current === 90) {
      id[idx] = 97;
    } else if (current === 122) {
      id[idx] = 65;
      incrementId(id, idx - 1);
    } else {
      id[idx] = current + 1;
    }
  }
  function createPrivateUidGeneratorForClass(classPath) {
    const currentPrivateId = [];
    const privateNames = new Set();
    classPath.traverse({
      PrivateName(path) {
        privateNames.add(path.node.id.name);
      }
    });
    return () => {
      let reifiedId;
      do {
        incrementId(currentPrivateId);
        reifiedId = String.fromCharCode(...currentPrivateId);
      } while (privateNames.has(reifiedId));
      return _core.types.privateName(_core.types.identifier(reifiedId));
    };
  }
  function createLazyPrivateUidGeneratorForClass(classPath) {
    let generator;
    return () => {
      if (!generator) {
        generator = createPrivateUidGeneratorForClass(classPath);
      }
      return generator();
    };
  }
  function replaceClassWithVar(path, className) {
    const id = path.node.id;
    const scope = path.scope;
    if (path.type === "ClassDeclaration") {
      const className = id.name;
      const varId = scope.generateUidIdentifierBasedOnNode(id);
      const classId = _core.types.identifier(className);
      scope.rename(className, varId.name);
      path.get("id").replaceWith(classId);
      return {
        id: _core.types.cloneNode(varId),
        path
      };
    } else {
      let varId;
      if (id) {
        className = id.name;
        varId = generateLetUidIdentifier(scope.parent, className);
        scope.rename(className, varId.name);
      } else {
        varId = generateLetUidIdentifier(scope.parent, typeof className === "string" ? className : "decorated_class");
      }
      const newClassExpr = _core.types.classExpression(typeof className === "string" ? _core.types.identifier(className) : null, path.node.superClass, path.node.body);
      const [newPath] = path.replaceWith(_core.types.sequenceExpression([newClassExpr, varId]));
      return {
        id: _core.types.cloneNode(varId),
        path: newPath.get("expressions.0")
      };
    }
  }
  function generateClassProperty(key, value, isStatic) {
    if (key.type === "PrivateName") {
      return _core.types.classPrivateProperty(key, value, undefined, isStatic);
    } else {
      return _core.types.classProperty(key, value, undefined, undefined, isStatic);
    }
  }
  function assignIdForAnonymousClass(path, className) {
    if (!path.node.id) {
      path.node.id = typeof className === "string" ? _core.types.identifier(className) : path.scope.generateUidIdentifier("Class");
    }
  }
  function addProxyAccessorsFor(className, element, getterKey, setterKey, targetKey, isComputed, isStatic, version) {
    const thisArg = (version === "2023-11" || version === "2023-05") && isStatic ? className : _core.types.thisExpression();
    const getterBody = _core.types.blockStatement([_core.types.returnStatement(_core.types.memberExpression(_core.types.cloneNode(thisArg), _core.types.cloneNode(targetKey)))]);
    const setterBody = _core.types.blockStatement([_core.types.expressionStatement(_core.types.assignmentExpression("=", _core.types.memberExpression(_core.types.cloneNode(thisArg), _core.types.cloneNode(targetKey)), _core.types.identifier("v")))]);
    let getter, setter;
    if (getterKey.type === "PrivateName") {
      getter = _core.types.classPrivateMethod("get", getterKey, [], getterBody, isStatic);
      setter = _core.types.classPrivateMethod("set", setterKey, [_core.types.identifier("v")], setterBody, isStatic);
    } else {
      getter = _core.types.classMethod("get", getterKey, [], getterBody, isComputed, isStatic);
      setter = _core.types.classMethod("set", setterKey, [_core.types.identifier("v")], setterBody, isComputed, isStatic);
    }
    element.insertAfter(setter);
    element.insertAfter(getter);
  }
  function extractProxyAccessorsFor(targetKey, version) {
    if (version !== "2023-11" && version !== "2023-05" && version !== "2023-01") {
      return [_core.template.expression.ast`
        function () {
          return this.${_core.types.cloneNode(targetKey)};
        }
      `, _core.template.expression.ast`
        function (value) {
          this.${_core.types.cloneNode(targetKey)} = value;
        }
      `];
    }
    return [_core.template.expression.ast`
      o => o.${_core.types.cloneNode(targetKey)}
    `, _core.template.expression.ast`
      (o, v) => o.${_core.types.cloneNode(targetKey)} = v
    `];
  }
  function getComputedKeyLastElement(path) {
    path = (0, _helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers)(path);
    if (path.isSequenceExpression()) {
      const expressions = path.get("expressions");
      return getComputedKeyLastElement(expressions[expressions.length - 1]);
    }
    return path;
  }
  function getComputedKeyMemoiser(path) {
    const element = getComputedKeyLastElement(path);
    if (element.isConstantExpression()) {
      return _core.types.cloneNode(path.node);
    } else if (element.isIdentifier() && path.scope.hasUid(element.node.name)) {
      return _core.types.cloneNode(path.node);
    } else if (element.isAssignmentExpression() && element.get("left").isIdentifier()) {
      return _core.types.cloneNode(element.node.left);
    } else {
      throw new Error(`Internal Error: the computed key ${path.toString()} has not yet been memoised.`);
    }
  }
  function prependExpressionsToComputedKey(expressions, fieldPath) {
    const key = fieldPath.get("key");
    if (key.isSequenceExpression()) {
      expressions.push(...key.node.expressions);
    } else {
      expressions.push(key.node);
    }
    key.replaceWith(maybeSequenceExpression(expressions));
  }
  function appendExpressionsToComputedKey(expressions, fieldPath) {
    const key = fieldPath.get("key");
    const completion = getComputedKeyLastElement(key);
    if (completion.isConstantExpression()) {
      prependExpressionsToComputedKey(expressions, fieldPath);
    } else {
      const scopeParent = key.scope.parent;
      const maybeAssignment = (0, _misc.memoiseComputedKey)(completion.node, scopeParent, scopeParent.generateUid("computedKey"));
      if (!maybeAssignment) {
        prependExpressionsToComputedKey(expressions, fieldPath);
      } else {
        const expressionSequence = [...expressions, _core.types.cloneNode(maybeAssignment.left)];
        const completionParent = completion.parentPath;
        if (completionParent.isSequenceExpression()) {
          completionParent.pushContainer("expressions", expressionSequence);
        } else {
          completion.replaceWith(maybeSequenceExpression([_core.types.cloneNode(maybeAssignment), ...expressionSequence]));
        }
      }
    }
  }
  function prependExpressionsToFieldInitializer(expressions, fieldPath) {
    const initializer = fieldPath.get("value");
    if (initializer.node) {
      expressions.push(initializer.node);
    } else if (expressions.length > 0) {
      expressions[expressions.length - 1] = _core.types.unaryExpression("void", expressions[expressions.length - 1]);
    }
    initializer.replaceWith(maybeSequenceExpression(expressions));
  }
  function prependExpressionsToStaticBlock(expressions, blockPath) {
    blockPath.unshiftContainer("body", _core.types.expressionStatement(maybeSequenceExpression(expressions)));
  }
  function prependExpressionsToConstructor(expressions, constructorPath) {
    constructorPath.node.body.body.unshift(_core.types.expressionStatement(maybeSequenceExpression(expressions)));
  }
  function isProtoInitCallExpression(expression, protoInitCall) {
    return _core.types.isCallExpression(expression) && _core.types.isIdentifier(expression.callee, {
      name: protoInitCall.name
    });
  }
  function optimizeSuperCallAndExpressions(expressions, protoInitLocal) {
    if (protoInitLocal) {
      if (expressions.length >= 2 && isProtoInitCallExpression(expressions[1], protoInitLocal)) {
        const mergedSuperCall = _core.types.callExpression(_core.types.cloneNode(protoInitLocal), [expressions[0]]);
        expressions.splice(0, 2, mergedSuperCall);
      }
      if (expressions.length >= 2 && _core.types.isThisExpression(expressions[expressions.length - 1]) && isProtoInitCallExpression(expressions[expressions.length - 2], protoInitLocal)) {
        expressions.splice(expressions.length - 1, 1);
      }
    }
    return maybeSequenceExpression(expressions);
  }
  function insertExpressionsAfterSuperCallAndOptimize(expressions, constructorPath, protoInitLocal) {
    constructorPath.traverse({
      CallExpression: {
        exit(path) {
          if (!path.get("callee").isSuper()) return;
          const newNodes = [path.node, ...expressions.map(expr => _core.types.cloneNode(expr))];
          if (path.isCompletionRecord()) {
            newNodes.push(_core.types.thisExpression());
          }
          path.replaceWith(optimizeSuperCallAndExpressions(newNodes, protoInitLocal));
          path.skip();
        }
      },
      ClassMethod(path) {
        if (path.node.kind === "constructor") {
          path.skip();
        }
      }
    });
  }
  function createConstructorFromExpressions(expressions, isDerivedClass) {
    const body = [_core.types.expressionStatement(maybeSequenceExpression(expressions))];
    if (isDerivedClass) {
      body.unshift(_core.types.expressionStatement(_core.types.callExpression(_core.types.super(), [_core.types.spreadElement(_core.types.identifier("args"))])));
    }
    return _core.types.classMethod("constructor", _core.types.identifier("constructor"), isDerivedClass ? [_core.types.restElement(_core.types.identifier("args"))] : [], _core.types.blockStatement(body));
  }
  function createStaticBlockFromExpressions(expressions) {
    return _core.types.staticBlock([_core.types.expressionStatement(maybeSequenceExpression(expressions))]);
  }
  const FIELD = 0;
  const ACCESSOR = 1;
  const METHOD = 2;
  const GETTER = 3;
  const SETTER = 4;
  const STATIC_OLD_VERSION = 5;
  const STATIC = 8;
  const DECORATORS_HAVE_THIS = 16;
  function getElementKind(element) {
    switch (element.node.type) {
      case "ClassProperty":
      case "ClassPrivateProperty":
        return FIELD;
      case "ClassAccessorProperty":
        return ACCESSOR;
      case "ClassMethod":
      case "ClassPrivateMethod":
        if (element.node.kind === "get") {
          return GETTER;
        } else if (element.node.kind === "set") {
          return SETTER;
        } else {
          return METHOD;
        }
    }
  }
  function toSortedDecoratorInfo(info) {
    return [...info.filter(el => el.isStatic && el.kind >= ACCESSOR && el.kind <= SETTER), ...info.filter(el => !el.isStatic && el.kind >= ACCESSOR && el.kind <= SETTER), ...info.filter(el => el.isStatic && el.kind === FIELD), ...info.filter(el => !el.isStatic && el.kind === FIELD)];
  }
  function generateDecorationList(decorators, decoratorsThis, version) {
    const decsCount = decorators.length;
    const haveOneThis = decoratorsThis.some(Boolean);
    const decs = [];
    for (let i = 0; i < decsCount; i++) {
      if ((version === "2023-11" || version === "2023-05") && haveOneThis) {
        decs.push(decoratorsThis[i] || _core.types.unaryExpression("void", _core.types.numericLiteral(0)));
      }
      decs.push(decorators[i].expression);
    }
    return {
      haveThis: haveOneThis,
      decs
    };
  }
  function generateDecorationExprs(decorationInfo, version) {
    return _core.types.arrayExpression(decorationInfo.map(el => {
      let flag = el.kind;
      if (el.isStatic) {
        flag += version === "2023-11" || version === "2023-05" ? STATIC : STATIC_OLD_VERSION;
      }
      if (el.decoratorsHaveThis) flag += DECORATORS_HAVE_THIS;
      return _core.types.arrayExpression([el.decoratorsArray, _core.types.numericLiteral(flag), el.name, ...(el.privateMethods || [])]);
    }));
  }
  function extractElementLocalAssignments(decorationInfo) {
    const localIds = [];
    for (const el of decorationInfo) {
      const {
        locals
      } = el;
      if (Array.isArray(locals)) {
        localIds.push(...locals);
      } else if (locals !== undefined) {
        localIds.push(locals);
      }
    }
    return localIds;
  }
  function addCallAccessorsFor(version, element, key, getId, setId, isStatic) {
    element.insertAfter(_core.types.classPrivateMethod("get", _core.types.cloneNode(key), [], _core.types.blockStatement([_core.types.returnStatement(_core.types.callExpression(_core.types.cloneNode(getId), version === "2023-11" && isStatic ? [] : [_core.types.thisExpression()]))]), isStatic));
    element.insertAfter(_core.types.classPrivateMethod("set", _core.types.cloneNode(key), [_core.types.identifier("v")], _core.types.blockStatement([_core.types.expressionStatement(_core.types.callExpression(_core.types.cloneNode(setId), version === "2023-11" && isStatic ? [_core.types.identifier("v")] : [_core.types.thisExpression(), _core.types.identifier("v")]))]), isStatic));
  }
  function movePrivateAccessor(element, key, methodLocalVar, isStatic) {
    let params;
    let block;
    if (element.node.kind === "set") {
      params = [_core.types.identifier("v")];
      block = [_core.types.expressionStatement(_core.types.callExpression(methodLocalVar, [_core.types.thisExpression(), _core.types.identifier("v")]))];
    } else {
      params = [];
      block = [_core.types.returnStatement(_core.types.callExpression(methodLocalVar, [_core.types.thisExpression()]))];
    }
    element.replaceWith(_core.types.classPrivateMethod(element.node.kind, _core.types.cloneNode(key), params, _core.types.blockStatement(block), isStatic));
  }
  function isClassDecoratableElementPath(path) {
    const {
      type
    } = path;
    return type !== "TSDeclareMethod" && type !== "TSIndexSignature" && type !== "StaticBlock";
  }
  function staticBlockToIIFE(block) {
    return _core.types.callExpression(_core.types.arrowFunctionExpression([], _core.types.blockStatement(block.body)), []);
  }
  function staticBlockToFunctionClosure(block) {
    return _core.types.functionExpression(null, [], _core.types.blockStatement(block.body));
  }
  function fieldInitializerToClosure(value) {
    return _core.types.functionExpression(null, [], _core.types.blockStatement([_core.types.returnStatement(value)]));
  }
  function maybeSequenceExpression(exprs) {
    if (exprs.length === 0) return _core.types.unaryExpression("void", _core.types.numericLiteral(0));
    if (exprs.length === 1) return exprs[0];
    return _core.types.sequenceExpression(exprs);
  }
  function createFunctionExpressionFromPrivateMethod(node) {
    const {
      params,
      body,
      generator: isGenerator,
      async: isAsync
    } = node;
    return _core.types.functionExpression(undefined, params, body, isGenerator, isAsync);
  }
  function createSetFunctionNameCall(state, className) {
    return _core.types.callExpression(state.addHelper("setFunctionName"), [_core.types.thisExpression(), className]);
  }
  function createToPropertyKeyCall(state, propertyKey) {
    return _core.types.callExpression(state.addHelper("toPropertyKey"), [propertyKey]);
  }
  function createPrivateBrandCheckClosure(brandName) {
    return _core.types.arrowFunctionExpression([_core.types.identifier("_")], _core.types.binaryExpression("in", _core.types.cloneNode(brandName), _core.types.identifier("_")));
  }
  function usesPrivateField(expression) {
    try {
      _core.types.traverseFast(expression, node => {
        if (_core.types.isPrivateName(node)) {
          throw null;
        }
      });
      return false;
    } catch (_unused) {
      return true;
    }
  }
  function convertToComputedKey(path) {
    const {
      node
    } = path;
    node.computed = true;
    if (_core.types.isIdentifier(node.key)) {
      node.key = _core.types.stringLiteral(node.key.name);
    }
  }
  function hasInstancePrivateAccess(path, privateNames) {
    let containsInstancePrivateAccess = false;
    if (privateNames.length > 0) {
      const privateNameVisitor = (0, _fields.privateNameVisitorFactory)({
        PrivateName(path, state) {
          if (state.privateNamesMap.has(path.node.id.name)) {
            containsInstancePrivateAccess = true;
            path.stop();
          }
        }
      });
      const privateNamesMap = new Map();
      for (const name of privateNames) {
        privateNamesMap.set(name, null);
      }
      path.traverse(privateNameVisitor, {
        privateNamesMap: privateNamesMap
      });
    }
    return containsInstancePrivateAccess;
  }
  function checkPrivateMethodUpdateError(path, decoratedPrivateMethods) {
    const privateNameVisitor = (0, _fields.privateNameVisitorFactory)({
      PrivateName(path, state) {
        if (!state.privateNamesMap.has(path.node.id.name)) return;
        const parentPath = path.parentPath;
        const parentParentPath = parentPath.parentPath;
        if (parentParentPath.node.type === "AssignmentExpression" && parentParentPath.node.left === parentPath.node || parentParentPath.node.type === "UpdateExpression" || parentParentPath.node.type === "RestElement" || parentParentPath.node.type === "ArrayPattern" || parentParentPath.node.type === "ObjectProperty" && parentParentPath.node.value === parentPath.node && parentParentPath.parentPath.type === "ObjectPattern" || parentParentPath.node.type === "ForOfStatement" && parentParentPath.node.left === parentPath.node) {
          throw path.buildCodeFrameError(`Decorated private methods are read-only, but "#${path.node.id.name}" is updated via this expression.`);
        }
      }
    });
    const privateNamesMap = new Map();
    for (const name of decoratedPrivateMethods) {
      privateNamesMap.set(name, null);
    }
    path.traverse(privateNameVisitor, {
      privateNamesMap: privateNamesMap
    });
  }
  function transformClass(path, state, constantSuper, ignoreFunctionLength, className, propertyVisitor, version) {
    var _path$node$id, _classDecorationsId;
    const body = path.get("body.body");
    const classDecorators = path.node.decorators;
    let hasElementDecorators = false;
    let hasComputedKeysSideEffects = false;
    let elemDecsUseFnContext = false;
    const generateClassPrivateUid = createLazyPrivateUidGeneratorForClass(path);
    const classAssignments = [];
    const scopeParent = path.scope.parent;
    const memoiseExpression = (expression, hint, assignments) => {
      const localEvaluatedId = generateLetUidIdentifier(scopeParent, hint);
      assignments.push(_core.types.assignmentExpression("=", localEvaluatedId, expression));
      return _core.types.cloneNode(localEvaluatedId);
    };
    let protoInitLocal;
    let staticInitLocal;
    const classIdName = (_path$node$id = path.node.id) == null ? void 0 : _path$node$id.name;
    const setClassName = typeof className === "object" ? className : undefined;
    const usesFunctionContextOrYieldAwait = decorator => {
      try {
        _core.types.traverseFast(decorator, node => {
          if (_core.types.isThisExpression(node) || _core.types.isSuper(node) || _core.types.isYieldExpression(node) || _core.types.isAwaitExpression(node) || _core.types.isIdentifier(node, {
            name: "arguments"
          }) || classIdName && _core.types.isIdentifier(node, {
            name: classIdName
          }) || _core.types.isMetaProperty(node) && node.meta.name !== "import") {
            throw null;
          }
        });
        return false;
      } catch (_unused2) {
        return true;
      }
    };
    const instancePrivateNames = [];
    for (const element of body) {
      if (!isClassDecoratableElementPath(element)) {
        continue;
      }
      const elementNode = element.node;
      if (!elementNode.static && _core.types.isPrivateName(elementNode.key)) {
        instancePrivateNames.push(elementNode.key.id.name);
      }
      if (isDecorated(elementNode)) {
        switch (elementNode.type) {
          case "ClassProperty":
            propertyVisitor.ClassProperty(element, state);
            break;
          case "ClassPrivateProperty":
            propertyVisitor.ClassPrivateProperty(element, state);
            break;
          case "ClassAccessorProperty":
            propertyVisitor.ClassAccessorProperty(element, state);
            if (version === "2023-11") {
              break;
            }
          default:
            if (elementNode.static) {
              var _staticInitLocal;
              (_staticInitLocal = staticInitLocal) != null ? _staticInitLocal : staticInitLocal = generateLetUidIdentifier(scopeParent, "initStatic");
            } else {
              var _protoInitLocal;
              (_protoInitLocal = protoInitLocal) != null ? _protoInitLocal : protoInitLocal = generateLetUidIdentifier(scopeParent, "initProto");
            }
            break;
        }
        hasElementDecorators = true;
        elemDecsUseFnContext || (elemDecsUseFnContext = elementNode.decorators.some(usesFunctionContextOrYieldAwait));
      } else if (elementNode.type === "ClassAccessorProperty") {
        propertyVisitor.ClassAccessorProperty(element, state);
        const {
          key,
          value,
          static: isStatic,
          computed
        } = elementNode;
        const newId = generateClassPrivateUid();
        const newField = generateClassProperty(newId, value, isStatic);
        const keyPath = element.get("key");
        const [newPath] = element.replaceWith(newField);
        let getterKey, setterKey;
        if (computed && !keyPath.isConstantExpression()) {
          getterKey = (0, _misc.memoiseComputedKey)(createToPropertyKeyCall(state, key), scopeParent, scopeParent.generateUid("computedKey"));
          setterKey = _core.types.cloneNode(getterKey.left);
        } else {
          getterKey = _core.types.cloneNode(key);
          setterKey = _core.types.cloneNode(key);
        }
        assignIdForAnonymousClass(path, className);
        addProxyAccessorsFor(path.node.id, newPath, getterKey, setterKey, newId, computed, isStatic, version);
      }
      if ("computed" in element.node && element.node.computed) {
        hasComputedKeysSideEffects || (hasComputedKeysSideEffects = !scopeParent.isStatic(element.node.key));
      }
    }
    if (!classDecorators && !hasElementDecorators) {
      if (!path.node.id && typeof className === "string") {
        path.node.id = _core.types.identifier(className);
      }
      if (setClassName) {
        path.node.body.body.unshift(createStaticBlockFromExpressions([createSetFunctionNameCall(state, setClassName)]));
      }
      return;
    }
    const elementDecoratorInfo = [];
    let constructorPath;
    const decoratedPrivateMethods = new Set();
    let classInitLocal, classIdLocal;
    let decoratorReceiverId = null;
    function handleDecorators(decorators) {
      let hasSideEffects = false;
      let usesFnContext = false;
      const decoratorsThis = [];
      for (const decorator of decorators) {
        const {
          expression
        } = decorator;
        let object;
        if ((version === "2023-11" || version === "2023-05") && _core.types.isMemberExpression(expression)) {
          if (_core.types.isSuper(expression.object)) {
            object = _core.types.thisExpression();
          } else if (scopeParent.isStatic(expression.object)) {
            object = _core.types.cloneNode(expression.object);
          } else {
            var _decoratorReceiverId;
            (_decoratorReceiverId = decoratorReceiverId) != null ? _decoratorReceiverId : decoratorReceiverId = generateLetUidIdentifier(scopeParent, "obj");
            object = _core.types.assignmentExpression("=", _core.types.cloneNode(decoratorReceiverId), expression.object);
            expression.object = _core.types.cloneNode(decoratorReceiverId);
          }
        }
        decoratorsThis.push(object);
        hasSideEffects || (hasSideEffects = !scopeParent.isStatic(expression));
        usesFnContext || (usesFnContext = usesFunctionContextOrYieldAwait(decorator));
      }
      return {
        hasSideEffects,
        usesFnContext,
        decoratorsThis
      };
    }
    const willExtractSomeElemDecs = hasComputedKeysSideEffects || elemDecsUseFnContext || version !== "2023-11";
    let needsDeclaraionForClassBinding = false;
    let classDecorationsFlag = 0;
    let classDecorations = [];
    let classDecorationsId;
    let computedKeyAssignments = [];
    if (classDecorators) {
      classInitLocal = generateLetUidIdentifier(scopeParent, "initClass");
      needsDeclaraionForClassBinding = path.isClassDeclaration();
      ({
        id: classIdLocal,
        path
      } = replaceClassWithVar(path, className));
      path.node.decorators = null;
      const classDecsUsePrivateName = classDecorators.some(usesPrivateField);
      const {
        hasSideEffects,
        usesFnContext,
        decoratorsThis
      } = handleDecorators(classDecorators);
      const {
        haveThis,
        decs
      } = generateDecorationList(classDecorators, decoratorsThis, version);
      classDecorationsFlag = haveThis ? 1 : 0;
      classDecorations = decs;
      if (usesFnContext || hasSideEffects && willExtractSomeElemDecs || classDecsUsePrivateName) {
        classDecorationsId = memoiseExpression(_core.types.arrayExpression(classDecorations), "classDecs", classAssignments);
      }
      if (!hasElementDecorators) {
        for (const element of path.get("body.body")) {
          const {
            node
          } = element;
          const isComputed = "computed" in node && node.computed;
          if (isComputed) {
            if (element.isClassProperty({
              static: true
            })) {
              if (!element.get("key").isConstantExpression()) {
                const key = node.key;
                const maybeAssignment = (0, _misc.memoiseComputedKey)(key, scopeParent, scopeParent.generateUid("computedKey"));
                if (maybeAssignment != null) {
                  node.key = _core.types.cloneNode(maybeAssignment.left);
                  computedKeyAssignments.push(maybeAssignment);
                }
              }
            } else if (computedKeyAssignments.length > 0) {
              prependExpressionsToComputedKey(computedKeyAssignments, element);
              computedKeyAssignments = [];
            }
          }
        }
      }
    } else {
      assignIdForAnonymousClass(path, className);
      classIdLocal = _core.types.cloneNode(path.node.id);
    }
    let lastInstancePrivateName;
    let needsInstancePrivateBrandCheck = false;
    let fieldInitializerExpressions = [];
    let staticFieldInitializerExpressions = [];
    if (hasElementDecorators) {
      if (protoInitLocal) {
        const protoInitCall = _core.types.callExpression(_core.types.cloneNode(protoInitLocal), [_core.types.thisExpression()]);
        fieldInitializerExpressions.push(protoInitCall);
      }
      for (const element of body) {
        if (!isClassDecoratableElementPath(element)) {
          if (staticFieldInitializerExpressions.length > 0 && element.isStaticBlock()) {
            prependExpressionsToStaticBlock(staticFieldInitializerExpressions, element);
            staticFieldInitializerExpressions = [];
          }
          continue;
        }
        const {
          node
        } = element;
        const decorators = node.decorators;
        const hasDecorators = !!(decorators != null && decorators.length);
        const isComputed = "computed" in node && node.computed;
        let name = "computedKey";
        if (node.key.type === "PrivateName") {
          name = node.key.id.name;
        } else if (!isComputed && node.key.type === "Identifier") {
          name = node.key.name;
        }
        let decoratorsArray;
        let decoratorsHaveThis;
        if (hasDecorators) {
          const {
            hasSideEffects,
            usesFnContext,
            decoratorsThis
          } = handleDecorators(decorators);
          const {
            decs,
            haveThis
          } = generateDecorationList(decorators, decoratorsThis, version);
          decoratorsHaveThis = haveThis;
          decoratorsArray = decs.length === 1 ? decs[0] : _core.types.arrayExpression(decs);
          if (usesFnContext || hasSideEffects && willExtractSomeElemDecs) {
            decoratorsArray = memoiseExpression(decoratorsArray, name + "Decs", computedKeyAssignments);
          }
        }
        if (isComputed) {
          if (!element.get("key").isConstantExpression()) {
            const key = node.key;
            const maybeAssignment = (0, _misc.memoiseComputedKey)(hasDecorators ? createToPropertyKeyCall(state, key) : key, scopeParent, scopeParent.generateUid("computedKey"));
            if (maybeAssignment != null) {
              if (classDecorators && element.isClassProperty({
                static: true
              })) {
                node.key = _core.types.cloneNode(maybeAssignment.left);
                computedKeyAssignments.push(maybeAssignment);
              } else {
                node.key = maybeAssignment;
              }
            }
          }
        }
        const {
          key,
          static: isStatic
        } = node;
        const isPrivate = key.type === "PrivateName";
        const kind = getElementKind(element);
        if (isPrivate && !isStatic) {
          if (hasDecorators) {
            needsInstancePrivateBrandCheck = true;
          }
          if (_core.types.isClassPrivateProperty(node) || !lastInstancePrivateName) {
            lastInstancePrivateName = key;
          }
        }
        if (element.isClassMethod({
          kind: "constructor"
        })) {
          constructorPath = element;
        }
        let locals;
        if (hasDecorators) {
          let privateMethods;
          let nameExpr;
          if (isComputed) {
            nameExpr = getComputedKeyMemoiser(element.get("key"));
          } else if (key.type === "PrivateName") {
            nameExpr = _core.types.stringLiteral(key.id.name);
          } else if (key.type === "Identifier") {
            nameExpr = _core.types.stringLiteral(key.name);
          } else {
            nameExpr = _core.types.cloneNode(key);
          }
          if (kind === ACCESSOR) {
            const {
              value
            } = element.node;
            const params = version === "2023-11" && isStatic ? [] : [_core.types.thisExpression()];
            if (value) {
              params.push(_core.types.cloneNode(value));
            }
            const newId = generateClassPrivateUid();
            const newFieldInitId = generateLetUidIdentifier(scopeParent, `init_${name}`);
            const newValue = _core.types.callExpression(_core.types.cloneNode(newFieldInitId), params);
            const newField = generateClassProperty(newId, newValue, isStatic);
            const [newPath] = element.replaceWith(newField);
            if (isPrivate) {
              privateMethods = extractProxyAccessorsFor(newId, version);
              const getId = generateLetUidIdentifier(scopeParent, `get_${name}`);
              const setId = generateLetUidIdentifier(scopeParent, `set_${name}`);
              addCallAccessorsFor(version, newPath, key, getId, setId, isStatic);
              locals = [newFieldInitId, getId, setId];
            } else {
              assignIdForAnonymousClass(path, className);
              addProxyAccessorsFor(path.node.id, newPath, _core.types.cloneNode(key), _core.types.isAssignmentExpression(key) ? _core.types.cloneNode(key.left) : _core.types.cloneNode(key), newId, isComputed, isStatic, version);
              locals = [newFieldInitId];
            }
          } else if (kind === FIELD) {
            const initId = generateLetUidIdentifier(scopeParent, `init_${name}`);
            const valuePath = element.get("value");
            const args = version === "2023-11" && isStatic ? [] : [_core.types.thisExpression()];
            if (valuePath.node) args.push(valuePath.node);
            valuePath.replaceWith(_core.types.callExpression(_core.types.cloneNode(initId), args));
            locals = [initId];
            if (isPrivate) {
              privateMethods = extractProxyAccessorsFor(key, version);
            }
          } else if (isPrivate) {
            const callId = generateLetUidIdentifier(scopeParent, `call_${name}`);
            locals = [callId];
            const replaceSupers = new _helperReplaceSupers.default({
              constantSuper,
              methodPath: element,
              objectRef: classIdLocal,
              superRef: path.node.superClass,
              file: state.file,
              refToPreserve: classIdLocal
            });
            replaceSupers.replace();
            privateMethods = [createFunctionExpressionFromPrivateMethod(element.node)];
            if (kind === GETTER || kind === SETTER) {
              movePrivateAccessor(element, _core.types.cloneNode(key), _core.types.cloneNode(callId), isStatic);
            } else {
              const node = element.node;
              path.node.body.body.unshift(_core.types.classPrivateProperty(key, _core.types.cloneNode(callId), [], node.static));
              decoratedPrivateMethods.add(key.id.name);
              element.remove();
            }
          }
          elementDecoratorInfo.push({
            kind,
            decoratorsArray,
            decoratorsHaveThis,
            name: nameExpr,
            isStatic,
            privateMethods,
            locals
          });
          if (element.node) {
            element.node.decorators = null;
          }
        }
        if (isComputed && computedKeyAssignments.length > 0) {
          if (classDecorators && element.isClassProperty({
            static: true
          })) ; else {
            prependExpressionsToComputedKey(computedKeyAssignments, kind === ACCESSOR ? element.getNextSibling() : element);
            computedKeyAssignments = [];
          }
        }
        if (fieldInitializerExpressions.length > 0 && !isStatic && (kind === FIELD || kind === ACCESSOR)) {
          prependExpressionsToFieldInitializer(fieldInitializerExpressions, element);
          fieldInitializerExpressions = [];
        }
        if (staticFieldInitializerExpressions.length > 0 && isStatic && (kind === FIELD || kind === ACCESSOR)) {
          prependExpressionsToFieldInitializer(staticFieldInitializerExpressions, element);
          staticFieldInitializerExpressions = [];
        }
        if (hasDecorators && version === "2023-11") {
          if (kind === FIELD || kind === ACCESSOR) {
            const initExtraId = generateLetUidIdentifier(scopeParent, `init_extra_${name}`);
            locals.push(initExtraId);
            const initExtraCall = _core.types.callExpression(_core.types.cloneNode(initExtraId), isStatic ? [] : [_core.types.thisExpression()]);
            if (!isStatic) {
              fieldInitializerExpressions.push(initExtraCall);
            } else {
              staticFieldInitializerExpressions.push(initExtraCall);
            }
          }
        }
      }
    }
    if (computedKeyAssignments.length > 0) {
      const elements = path.get("body.body");
      let lastComputedElement;
      for (let i = elements.length - 1; i >= 0; i--) {
        const path = elements[i];
        const node = path.node;
        if (node.computed) {
          if (classDecorators && _core.types.isClassProperty(node, {
            static: true
          })) {
            continue;
          }
          lastComputedElement = path;
          break;
        }
      }
      if (lastComputedElement != null) {
        appendExpressionsToComputedKey(computedKeyAssignments, lastComputedElement);
        computedKeyAssignments = [];
      }
    }
    if (fieldInitializerExpressions.length > 0) {
      const isDerivedClass = !!path.node.superClass;
      if (constructorPath) {
        if (isDerivedClass) {
          insertExpressionsAfterSuperCallAndOptimize(fieldInitializerExpressions, constructorPath, protoInitLocal);
        } else {
          prependExpressionsToConstructor(fieldInitializerExpressions, constructorPath);
        }
      } else {
        path.node.body.body.unshift(createConstructorFromExpressions(fieldInitializerExpressions, isDerivedClass));
      }
      fieldInitializerExpressions = [];
    }
    if (staticFieldInitializerExpressions.length > 0) {
      path.node.body.body.push(createStaticBlockFromExpressions(staticFieldInitializerExpressions));
      staticFieldInitializerExpressions = [];
    }
    const sortedElementDecoratorInfo = toSortedDecoratorInfo(elementDecoratorInfo);
    const elementDecorations = generateDecorationExprs(version === "2023-11" ? elementDecoratorInfo : sortedElementDecoratorInfo, version);
    const elementLocals = extractElementLocalAssignments(sortedElementDecoratorInfo);
    if (protoInitLocal) {
      elementLocals.push(protoInitLocal);
    }
    if (staticInitLocal) {
      elementLocals.push(staticInitLocal);
    }
    const classLocals = [];
    let classInitInjected = false;
    const classInitCall = classInitLocal && _core.types.callExpression(_core.types.cloneNode(classInitLocal), []);
    let originalClassPath = path;
    const originalClass = path.node;
    const staticClosures = [];
    if (classDecorators) {
      classLocals.push(classIdLocal, classInitLocal);
      const statics = [];
      path.get("body.body").forEach(element => {
        if (element.isStaticBlock()) {
          if (hasInstancePrivateAccess(element, instancePrivateNames)) {
            const staticBlockClosureId = memoiseExpression(staticBlockToFunctionClosure(element.node), "staticBlock", staticClosures);
            staticFieldInitializerExpressions.push(_core.types.callExpression(_core.types.memberExpression(staticBlockClosureId, _core.types.identifier("call")), [_core.types.thisExpression()]));
          } else {
            staticFieldInitializerExpressions.push(staticBlockToIIFE(element.node));
          }
          element.remove();
          return;
        }
        if ((element.isClassProperty() || element.isClassPrivateProperty()) && element.node.static) {
          const valuePath = element.get("value");
          if (hasInstancePrivateAccess(valuePath, instancePrivateNames)) {
            const fieldValueClosureId = memoiseExpression(fieldInitializerToClosure(valuePath.node), "fieldValue", staticClosures);
            valuePath.replaceWith(_core.types.callExpression(_core.types.memberExpression(fieldValueClosureId, _core.types.identifier("call")), [_core.types.thisExpression()]));
          }
          if (staticFieldInitializerExpressions.length > 0) {
            prependExpressionsToFieldInitializer(staticFieldInitializerExpressions, element);
            staticFieldInitializerExpressions = [];
          }
          element.node.static = false;
          statics.push(element.node);
          element.remove();
        } else if (element.isClassPrivateMethod({
          static: true
        })) {
          if (hasInstancePrivateAccess(element, instancePrivateNames)) {
            const replaceSupers = new _helperReplaceSupers.default({
              constantSuper,
              methodPath: element,
              objectRef: classIdLocal,
              superRef: path.node.superClass,
              file: state.file,
              refToPreserve: classIdLocal
            });
            replaceSupers.replace();
            const privateMethodDelegateId = memoiseExpression(createFunctionExpressionFromPrivateMethod(element.node), element.get("key.id").node.name, staticClosures);
            if (ignoreFunctionLength) {
              element.node.params = [_core.types.restElement(_core.types.identifier("arg"))];
              element.node.body = _core.types.blockStatement([_core.types.returnStatement(_core.types.callExpression(_core.types.memberExpression(privateMethodDelegateId, _core.types.identifier("apply")), [_core.types.thisExpression(), _core.types.identifier("arg")]))]);
            } else {
              element.node.params = element.node.params.map((p, i) => {
                if (_core.types.isRestElement(p)) {
                  return _core.types.restElement(_core.types.identifier("arg"));
                } else {
                  return _core.types.identifier("_" + i);
                }
              });
              element.node.body = _core.types.blockStatement([_core.types.returnStatement(_core.types.callExpression(_core.types.memberExpression(privateMethodDelegateId, _core.types.identifier("apply")), [_core.types.thisExpression(), _core.types.identifier("arguments")]))]);
            }
          }
          element.node.static = false;
          statics.push(element.node);
          element.remove();
        }
      });
      if (statics.length > 0 || staticFieldInitializerExpressions.length > 0) {
        const staticsClass = _core.template.expression.ast`
        class extends ${state.addHelper("identity")} {}
      `;
        staticsClass.body.body = [_core.types.classProperty(_core.types.toExpression(originalClass), undefined, undefined, undefined, true, true), ...statics];
        const constructorBody = [];
        const newExpr = _core.types.newExpression(staticsClass, []);
        if (staticFieldInitializerExpressions.length > 0) {
          constructorBody.push(...staticFieldInitializerExpressions);
        }
        if (classInitCall) {
          classInitInjected = true;
          constructorBody.push(classInitCall);
        }
        if (constructorBody.length > 0) {
          constructorBody.unshift(_core.types.callExpression(_core.types.super(), [_core.types.cloneNode(classIdLocal)]));
          staticsClass.body.body.push(createConstructorFromExpressions(constructorBody, false));
        } else {
          newExpr.arguments.push(_core.types.cloneNode(classIdLocal));
        }
        const [newPath] = path.replaceWith(newExpr);
        originalClassPath = newPath.get("callee").get("body").get("body.0.key");
      }
    }
    if (!classInitInjected && classInitCall) {
      path.node.body.body.push(_core.types.staticBlock([_core.types.expressionStatement(classInitCall)]));
    }
    let {
      superClass
    } = originalClass;
    if (superClass && (version === "2023-11" || version === "2023-05")) {
      const id = path.scope.maybeGenerateMemoised(superClass);
      if (id) {
        originalClass.superClass = _core.types.assignmentExpression("=", id, superClass);
        superClass = id;
      }
    }
    const applyDecoratorWrapper = _core.types.staticBlock([]);
    originalClass.body.body.unshift(applyDecoratorWrapper);
    const applyDecsBody = applyDecoratorWrapper.body;
    if (computedKeyAssignments.length > 0) {
      const elements = originalClassPath.get("body.body");
      let firstPublicElement;
      for (const path of elements) {
        if ((path.isClassProperty() || path.isClassMethod()) && path.node.kind !== "constructor") {
          firstPublicElement = path;
          break;
        }
      }
      if (firstPublicElement != null) {
        convertToComputedKey(firstPublicElement);
        prependExpressionsToComputedKey(computedKeyAssignments, firstPublicElement);
      } else {
        originalClass.body.body.unshift(_core.types.classProperty(_core.types.sequenceExpression([...computedKeyAssignments, _core.types.stringLiteral("_")]), undefined, undefined, undefined, true, true));
        applyDecsBody.push(_core.types.expressionStatement(_core.types.unaryExpression("delete", _core.types.memberExpression(_core.types.thisExpression(), _core.types.identifier("_")))));
      }
      computedKeyAssignments = [];
    }
    applyDecsBody.push(_core.types.expressionStatement(createLocalsAssignment(elementLocals, classLocals, elementDecorations, (_classDecorationsId = classDecorationsId) != null ? _classDecorationsId : _core.types.arrayExpression(classDecorations), _core.types.numericLiteral(classDecorationsFlag), needsInstancePrivateBrandCheck ? lastInstancePrivateName : null, setClassName, _core.types.cloneNode(superClass), state, version)));
    if (staticInitLocal) {
      applyDecsBody.push(_core.types.expressionStatement(_core.types.callExpression(_core.types.cloneNode(staticInitLocal), [_core.types.thisExpression()])));
    }
    if (staticClosures.length > 0) {
      applyDecsBody.push(...staticClosures.map(expr => _core.types.expressionStatement(expr)));
    }
    path.insertBefore(classAssignments.map(expr => _core.types.expressionStatement(expr)));
    if (needsDeclaraionForClassBinding) {
      const classBindingInfo = scopeParent.getBinding(classIdLocal.name);
      if (!classBindingInfo.constantViolations.length) {
        path.insertBefore(_core.types.variableDeclaration("let", [_core.types.variableDeclarator(_core.types.cloneNode(classIdLocal))]));
      } else {
        const classOuterBindingDelegateLocal = scopeParent.generateUidIdentifier("t" + classIdLocal.name);
        const classOuterBindingLocal = classIdLocal;
        path.replaceWithMultiple([_core.types.variableDeclaration("let", [_core.types.variableDeclarator(_core.types.cloneNode(classOuterBindingLocal)), _core.types.variableDeclarator(classOuterBindingDelegateLocal)]), _core.types.blockStatement([_core.types.variableDeclaration("let", [_core.types.variableDeclarator(_core.types.cloneNode(classIdLocal))]), path.node, _core.types.expressionStatement(_core.types.assignmentExpression("=", _core.types.cloneNode(classOuterBindingDelegateLocal), _core.types.cloneNode(classIdLocal)))]), _core.types.expressionStatement(_core.types.assignmentExpression("=", _core.types.cloneNode(classOuterBindingLocal), _core.types.cloneNode(classOuterBindingDelegateLocal)))]);
      }
    }
    if (decoratedPrivateMethods.size > 0) {
      checkPrivateMethodUpdateError(path, decoratedPrivateMethods);
    }
    path.scope.crawl();
    return path;
  }
  function createLocalsAssignment(elementLocals, classLocals, elementDecorations, classDecorations, classDecorationsFlag, maybePrivateBrandName, setClassName, superClass, state, version) {
    let lhs, rhs;
    const args = [setClassName ? createSetFunctionNameCall(state, setClassName) : _core.types.thisExpression(), classDecorations, elementDecorations];
    {
      if (version !== "2023-11") {
        args.splice(1, 2, elementDecorations, classDecorations);
      }
      if (version === "2021-12" || version === "2022-03" && !state.availableHelper("applyDecs2203R")) {
        lhs = _core.types.arrayPattern([...elementLocals, ...classLocals]);
        rhs = _core.types.callExpression(state.addHelper(version === "2021-12" ? "applyDecs" : "applyDecs2203"), args);
        return _core.types.assignmentExpression("=", lhs, rhs);
      } else if (version === "2022-03") {
        rhs = _core.types.callExpression(state.addHelper("applyDecs2203R"), args);
      } else if (version === "2023-01") {
        if (maybePrivateBrandName) {
          args.push(createPrivateBrandCheckClosure(maybePrivateBrandName));
        }
        rhs = _core.types.callExpression(state.addHelper("applyDecs2301"), args);
      } else if (version === "2023-05") {
        if (maybePrivateBrandName || superClass || classDecorationsFlag.value !== 0) {
          args.push(classDecorationsFlag);
        }
        if (maybePrivateBrandName) {
          args.push(createPrivateBrandCheckClosure(maybePrivateBrandName));
        } else if (superClass) {
          args.push(_core.types.unaryExpression("void", _core.types.numericLiteral(0)));
        }
        if (superClass) args.push(superClass);
        rhs = _core.types.callExpression(state.addHelper("applyDecs2305"), args);
      }
    }
    if (version === "2023-11") {
      if (maybePrivateBrandName || superClass || classDecorationsFlag.value !== 0) {
        args.push(classDecorationsFlag);
      }
      if (maybePrivateBrandName) {
        args.push(createPrivateBrandCheckClosure(maybePrivateBrandName));
      } else if (superClass) {
        args.push(_core.types.unaryExpression("void", _core.types.numericLiteral(0)));
      }
      if (superClass) args.push(superClass);
      rhs = _core.types.callExpression(state.addHelper("applyDecs2311"), args);
    }
    if (elementLocals.length > 0) {
      if (classLocals.length > 0) {
        lhs = _core.types.objectPattern([_core.types.objectProperty(_core.types.identifier("e"), _core.types.arrayPattern(elementLocals)), _core.types.objectProperty(_core.types.identifier("c"), _core.types.arrayPattern(classLocals))]);
      } else {
        lhs = _core.types.arrayPattern(elementLocals);
        rhs = _core.types.memberExpression(rhs, _core.types.identifier("e"), false, false);
      }
    } else {
      lhs = _core.types.arrayPattern(classLocals);
      rhs = _core.types.memberExpression(rhs, _core.types.identifier("c"), false, false);
    }
    return _core.types.assignmentExpression("=", lhs, rhs);
  }
  function isProtoKey(node) {
    return node.type === "Identifier" ? node.name === "__proto__" : node.value === "__proto__";
  }
  function isDecorated(node) {
    return node.decorators && node.decorators.length > 0;
  }
  function shouldTransformElement(node) {
    switch (node.type) {
      case "ClassAccessorProperty":
        return true;
      case "ClassMethod":
      case "ClassProperty":
      case "ClassPrivateMethod":
      case "ClassPrivateProperty":
        return isDecorated(node);
      default:
        return false;
    }
  }
  function shouldTransformClass(node) {
    return isDecorated(node) || node.body.body.some(shouldTransformElement);
  }
  function NamedEvaluationVisitoryFactory(isAnonymous, visitor) {
    function handleComputedProperty(propertyPath, key, state) {
      switch (key.type) {
        case "StringLiteral":
          return _core.types.stringLiteral(key.value);
        case "NumericLiteral":
        case "BigIntLiteral":
          {
            const keyValue = key.value + "";
            propertyPath.get("key").replaceWith(_core.types.stringLiteral(keyValue));
            return _core.types.stringLiteral(keyValue);
          }
        default:
          {
            const ref = propertyPath.scope.maybeGenerateMemoised(key);
            propertyPath.get("key").replaceWith(_core.types.assignmentExpression("=", ref, createToPropertyKeyCall(state, key)));
            return _core.types.cloneNode(ref);
          }
      }
    }
    return {
      VariableDeclarator(path, state) {
        const id = path.node.id;
        if (id.type === "Identifier") {
          const initializer = (0, _helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers)(path.get("init"));
          if (isAnonymous(initializer)) {
            const name = id.name;
            visitor(initializer, state, name);
          }
        }
      },
      AssignmentExpression(path, state) {
        const id = path.node.left;
        if (id.type === "Identifier") {
          const initializer = (0, _helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers)(path.get("right"));
          if (isAnonymous(initializer)) {
            switch (path.node.operator) {
              case "=":
              case "&&=":
              case "||=":
              case "??=":
                visitor(initializer, state, id.name);
            }
          }
        }
      },
      AssignmentPattern(path, state) {
        const id = path.node.left;
        if (id.type === "Identifier") {
          const initializer = (0, _helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers)(path.get("right"));
          if (isAnonymous(initializer)) {
            const name = id.name;
            visitor(initializer, state, name);
          }
        }
      },
      ObjectExpression(path, state) {
        for (const propertyPath of path.get("properties")) {
          if (!propertyPath.isObjectProperty()) continue;
          const {
            node
          } = propertyPath;
          const id = node.key;
          const initializer = (0, _helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers)(propertyPath.get("value"));
          if (isAnonymous(initializer)) {
            if (!node.computed) {
              if (!isProtoKey(id)) {
                if (id.type === "Identifier") {
                  visitor(initializer, state, id.name);
                } else {
                  const className = _core.types.stringLiteral(id.value + "");
                  visitor(initializer, state, className);
                }
              }
            } else {
              const ref = handleComputedProperty(propertyPath, id, state);
              visitor(initializer, state, ref);
            }
          }
        }
      },
      ClassPrivateProperty(path, state) {
        const {
          node
        } = path;
        const initializer = (0, _helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers)(path.get("value"));
        if (isAnonymous(initializer)) {
          const className = _core.types.stringLiteral("#" + node.key.id.name);
          visitor(initializer, state, className);
        }
      },
      ClassAccessorProperty(path, state) {
        const {
          node
        } = path;
        const id = node.key;
        const initializer = (0, _helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers)(path.get("value"));
        if (isAnonymous(initializer)) {
          if (!node.computed) {
            if (id.type === "Identifier") {
              visitor(initializer, state, id.name);
            } else if (id.type === "PrivateName") {
              const className = _core.types.stringLiteral("#" + id.id.name);
              visitor(initializer, state, className);
            } else {
              const className = _core.types.stringLiteral(id.value + "");
              visitor(initializer, state, className);
            }
          } else {
            const ref = handleComputedProperty(path, id, state);
            visitor(initializer, state, ref);
          }
        }
      },
      ClassProperty(path, state) {
        const {
          node
        } = path;
        const id = node.key;
        const initializer = (0, _helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers)(path.get("value"));
        if (isAnonymous(initializer)) {
          if (!node.computed) {
            if (id.type === "Identifier") {
              visitor(initializer, state, id.name);
            } else {
              const className = _core.types.stringLiteral(id.value + "");
              visitor(initializer, state, className);
            }
          } else {
            const ref = handleComputedProperty(path, id, state);
            visitor(initializer, state, ref);
          }
        }
      }
    };
  }
  function isDecoratedAnonymousClassExpression(path) {
    return path.isClassExpression({
      id: null
    }) && shouldTransformClass(path.node);
  }
  function generateLetUidIdentifier(scope, name) {
    const id = scope.generateUidIdentifier(name);
    scope.push({
      id,
      kind: "let"
    });
    return _core.types.cloneNode(id);
  }
  function _default({
    assertVersion,
    assumption
  }, {
    loose
  }, version, inherits) {
    var _assumption, _assumption2;
    {
      if (version === "2023-11" || version === "2023-05" || version === "2023-01") {
        assertVersion("^7.21.0");
      } else if (version === "2021-12") {
        assertVersion("^7.16.0");
      } else {
        assertVersion("^7.19.0");
      }
    }
    const VISITED = new WeakSet();
    const constantSuper = (_assumption = assumption("constantSuper")) != null ? _assumption : loose;
    const ignoreFunctionLength = (_assumption2 = assumption("ignoreFunctionLength")) != null ? _assumption2 : loose;
    const namedEvaluationVisitor = NamedEvaluationVisitoryFactory(isDecoratedAnonymousClassExpression, visitClass);
    function visitClass(path, state, className) {
      var _className, _node$id;
      if (VISITED.has(path)) return;
      const {
        node
      } = path;
      (_className = className) != null ? _className : className = (_node$id = node.id) == null ? void 0 : _node$id.name;
      const newPath = transformClass(path, state, constantSuper, ignoreFunctionLength, className, namedEvaluationVisitor, version);
      if (newPath) {
        VISITED.add(newPath);
        return;
      }
      VISITED.add(path);
    }
    return {
      name: "proposal-decorators",
      inherits: inherits,
      visitor: Object.assign({
        ExportDefaultDeclaration(path, state) {
          const {
            declaration
          } = path.node;
          if ((declaration == null ? void 0 : declaration.type) === "ClassDeclaration" && isDecorated(declaration)) {
            const isAnonymous = !declaration.id;
            {
              var _path$splitExportDecl;
              (_path$splitExportDecl = path.splitExportDeclaration) != null ? _path$splitExportDecl : path.splitExportDeclaration = dew$1_().NodePath.prototype.splitExportDeclaration;
            }
            const updatedVarDeclarationPath = path.splitExportDeclaration();
            if (isAnonymous) {
              visitClass(updatedVarDeclarationPath, state, _core.types.stringLiteral("default"));
            }
          }
        },
        ExportNamedDeclaration(path) {
          const {
            declaration
          } = path.node;
          if ((declaration == null ? void 0 : declaration.type) === "ClassDeclaration" && isDecorated(declaration)) {
            {
              var _path$splitExportDecl2;
              (_path$splitExportDecl2 = path.splitExportDeclaration) != null ? _path$splitExportDecl2 : path.splitExportDeclaration = dew$1_().NodePath.prototype.splitExportDeclaration;
            }
            path.splitExportDeclaration();
          }
        },
        Class(path, state) {
          visitClass(path, state, undefined);
        }
      }, namedEvaluationVisitor)
    };
  }
  return exports$o;
}

var exports$n = {},
  _dewExec$m = false;
function dew$m() {
  if (_dewExec$m) return exports$n;
  _dewExec$m = true;
  Object.defineProperty(exports$n, "__esModule", {
    value: true
  });
  exports$n.buildDecoratedClass = buildDecoratedClass;
  exports$n.hasDecorators = hasDecorators;
  exports$n.hasOwnDecorators = hasOwnDecorators;
  var _core = dew();
  var _helperReplaceSupers = dew$t();
  function hasOwnDecorators(node) {
    var _node$decorators;
    return !!((_node$decorators = node.decorators) != null && _node$decorators.length);
  }
  function hasDecorators(node) {
    return hasOwnDecorators(node) || node.body.body.some(hasOwnDecorators);
  }
  function prop(key, value) {
    if (!value) return null;
    return _core.types.objectProperty(_core.types.identifier(key), value);
  }
  function method(key, body) {
    return _core.types.objectMethod("method", _core.types.identifier(key), [], _core.types.blockStatement(body));
  }
  function takeDecorators(node) {
    let result;
    if (node.decorators && node.decorators.length > 0) {
      result = _core.types.arrayExpression(node.decorators.map(decorator => decorator.expression));
    }
    node.decorators = undefined;
    return result;
  }
  function getKey(node) {
    if (node.computed) {
      return node.key;
    } else if (_core.types.isIdentifier(node.key)) {
      return _core.types.stringLiteral(node.key.name);
    } else {
      return _core.types.stringLiteral(String(node.key.value));
    }
  }
  function extractElementDescriptor(file, classRef, superRef, path) {
    const isMethod = path.isClassMethod();
    if (path.isPrivate()) {
      throw path.buildCodeFrameError(`Private ${isMethod ? "methods" : "fields"} in decorated classes are not supported yet.`);
    }
    if (path.node.type === "ClassAccessorProperty") {
      throw path.buildCodeFrameError(`Accessor properties are not supported in 2018-09 decorator transform, please specify { "version": "2021-12" } instead.`);
    }
    if (path.node.type === "StaticBlock") {
      throw path.buildCodeFrameError(`Static blocks are not supported in 2018-09 decorator transform, please specify { "version": "2021-12" } instead.`);
    }
    if (path.isFunction()) {
      {
        var _path$ensureFunctionN;
        (_path$ensureFunctionN = path.ensureFunctionName) != null ? _path$ensureFunctionN : path.ensureFunctionName = dew$1_().NodePath.prototype.ensureFunctionName;
      }
      path.ensureFunctionName(false);
    }
    const {
      node,
      scope
    } = path;
    if (!path.isTSDeclareMethod()) {
      new _helperReplaceSupers.default({
        methodPath: path,
        objectRef: classRef,
        superRef,
        file,
        refToPreserve: classRef
      }).replace();
    }
    const properties = [prop("kind", _core.types.stringLiteral(_core.types.isClassMethod(node) ? node.kind : "field")), prop("decorators", takeDecorators(node)), prop("static", node.static && _core.types.booleanLiteral(true)), prop("key", getKey(node))].filter(Boolean);
    if (_core.types.isClassMethod(node)) {
      properties.push(prop("value", _core.types.toExpression(node)));
    } else if (_core.types.isClassProperty(node) && node.value) {
      properties.push(method("value", _core.template.statements.ast`return ${node.value}`));
    } else {
      properties.push(prop("value", scope.buildUndefinedNode()));
    }
    path.remove();
    return _core.types.objectExpression(properties);
  }
  function addDecorateHelper(file) {
    return file.addHelper("decorate");
  }
  function buildDecoratedClass(ref, path, elements, file) {
    const {
      node,
      scope
    } = path;
    const initializeId = scope.generateUidIdentifier("initialize");
    const isDeclaration = node.id && path.isDeclaration();
    const isStrict = path.isInStrictMode();
    const {
      superClass
    } = node;
    node.type = "ClassDeclaration";
    if (!node.id) node.id = _core.types.cloneNode(ref);
    let superId;
    if (superClass) {
      superId = scope.generateUidIdentifierBasedOnNode(node.superClass, "super");
      node.superClass = superId;
    }
    const classDecorators = takeDecorators(node);
    const definitions = _core.types.arrayExpression(elements.filter(element => !element.node.abstract && element.node.type !== "TSIndexSignature").map(path => extractElementDescriptor(file, node.id, superId, path)));
    const wrapperCall = _core.template.expression.ast`
    ${addDecorateHelper(file)}(
      ${classDecorators || _core.types.nullLiteral()},
      function (${initializeId}, ${superClass ? _core.types.cloneNode(superId) : null}) {
        ${node}
        return { F: ${_core.types.cloneNode(node.id)}, d: ${definitions} };
      },
      ${superClass}
    )
  `;
    if (!isStrict) {
      wrapperCall.arguments[1].body.directives.push(_core.types.directive(_core.types.directiveLiteral("use strict")));
    }
    let replacement = wrapperCall;
    let classPathDesc = "arguments.1.body.body.0";
    if (isDeclaration) {
      replacement = _core.template.statement.ast`let ${ref} = ${wrapperCall}`;
      classPathDesc = "declarations.0.init." + classPathDesc;
    }
    return {
      instanceNodes: [_core.template.statement.ast`
        ${_core.types.cloneNode(initializeId)}(this)
      `],
      wrapClass(path) {
        path.replaceWith(replacement);
        return path.get(classPathDesc);
      }
    };
  }
  return exports$n;
}

var exports$m = {},
  _dewExec$l = false;
function dew$l() {
  if (_dewExec$l) return exports$m;
  _dewExec$l = true;
  Object.defineProperty(exports$m, "__esModule", {
    value: true
  });
  exports$m.FEATURES = void 0;
  exports$m.enableFeature = enableFeature;
  exports$m.isLoose = isLoose;
  exports$m.shouldTransform = shouldTransform;
  var _decorators = dew$m();
  const FEATURES = exports$m.FEATURES = Object.freeze({
    fields: 1 << 1,
    privateMethods: 1 << 2,
    decorators: 1 << 3,
    privateIn: 1 << 4,
    staticBlocks: 1 << 5
  });
  const featuresSameLoose = new Map([[FEATURES.fields, "@babel/plugin-transform-class-properties"], [FEATURES.privateMethods, "@babel/plugin-transform-private-methods"], [FEATURES.privateIn, "@babel/plugin-transform-private-property-in-object"]]);
  const featuresKey = "@babel/plugin-class-features/featuresKey";
  const looseKey = "@babel/plugin-class-features/looseKey";
  {
    var looseLowPriorityKey = "@babel/plugin-class-features/looseLowPriorityKey/#__internal__@babel/preset-env__please-overwrite-loose-instead-of-throwing";
  }
  {
    var canIgnoreLoose = function (file, feature) {
      return !!(file.get(looseLowPriorityKey) & feature);
    };
  }
  function enableFeature(file, feature, loose) {
    if (!hasFeature(file, feature) || canIgnoreLoose(file, feature)) {
      file.set(featuresKey, file.get(featuresKey) | feature);
      if (loose === "#__internal__@babel/preset-env__prefer-true-but-false-is-ok-if-it-prevents-an-error") {
        setLoose(file, feature, true);
        file.set(looseLowPriorityKey, file.get(looseLowPriorityKey) | feature);
      } else if (loose === "#__internal__@babel/preset-env__prefer-false-but-true-is-ok-if-it-prevents-an-error") {
        setLoose(file, feature, false);
        file.set(looseLowPriorityKey, file.get(looseLowPriorityKey) | feature);
      } else {
        setLoose(file, feature, loose);
      }
    }
    let resolvedLoose;
    for (const [mask, name] of featuresSameLoose) {
      if (!hasFeature(file, mask)) continue;
      {
        if (canIgnoreLoose(file, mask)) continue;
      }
      const loose = isLoose(file, mask);
      if (resolvedLoose === !loose) {
        throw new Error("'loose' mode configuration must be the same for @babel/plugin-transform-class-properties, " + "@babel/plugin-transform-private-methods and " + "@babel/plugin-transform-private-property-in-object (when they are enabled)." + "\n\n" + getBabelShowConfigForHint(file));
      } else {
        resolvedLoose = loose;
        {
          var higherPriorityPluginName = name;
        }
      }
    }
    if (resolvedLoose !== undefined) {
      for (const [mask, name] of featuresSameLoose) {
        if (hasFeature(file, mask) && isLoose(file, mask) !== resolvedLoose) {
          setLoose(file, mask, resolvedLoose);
          console.warn(`Though the "loose" option was set to "${!resolvedLoose}" in your @babel/preset-env ` + `config, it will not be used for ${name} since the "loose" mode option was set to ` + `"${resolvedLoose}" for ${higherPriorityPluginName}.\nThe "loose" option must be the ` + `same for @babel/plugin-transform-class-properties, @babel/plugin-transform-private-methods ` + `and @babel/plugin-transform-private-property-in-object (when they are enabled): you can ` + `silence this warning by explicitly adding\n` + `\t["${name}", { "loose": ${resolvedLoose} }]\n` + `to the "plugins" section of your Babel config.` + "\n\n" + getBabelShowConfigForHint(file));
        }
      }
    }
  }
  function getBabelShowConfigForHint(file) {
    let {
      filename
    } = file.opts;
    if (!filename || filename === "unknown") {
      filename = "[name of the input file]";
    }
    return `\
If you already set the same 'loose' mode for these plugins in your config, it's possible that they \
are enabled multiple times with different options.
You can re-run Babel with the BABEL_SHOW_CONFIG_FOR environment variable to show the loaded \
configuration:
\tnpx cross-env BABEL_SHOW_CONFIG_FOR=${filename} <your build command>
See https://babeljs.io/docs/configuration#print-effective-configs for more info.`;
  }
  function hasFeature(file, feature) {
    return !!(file.get(featuresKey) & feature);
  }
  function isLoose(file, feature) {
    return !!(file.get(looseKey) & feature);
  }
  function setLoose(file, feature, loose) {
    if (loose) file.set(looseKey, file.get(looseKey) | feature);else file.set(looseKey, file.get(looseKey) & ~feature);
    {
      file.set(looseLowPriorityKey, file.get(looseLowPriorityKey) & ~feature);
    }
  }
  function shouldTransform(path, file) {
    let decoratorPath = null;
    let publicFieldPath = null;
    let privateFieldPath = null;
    let privateMethodPath = null;
    let staticBlockPath = null;
    if ((0, _decorators.hasOwnDecorators)(path.node)) {
      decoratorPath = path.get("decorators.0");
    }
    for (const el of path.get("body.body")) {
      if (!decoratorPath && (0, _decorators.hasOwnDecorators)(el.node)) {
        decoratorPath = el.get("decorators.0");
      }
      if (!publicFieldPath && el.isClassProperty()) {
        publicFieldPath = el;
      }
      if (!privateFieldPath && el.isClassPrivateProperty()) {
        privateFieldPath = el;
      }
      if (!privateMethodPath && el.isClassPrivateMethod != null && el.isClassPrivateMethod()) {
        privateMethodPath = el;
      }
      if (!staticBlockPath && el.isStaticBlock != null && el.isStaticBlock()) {
        staticBlockPath = el;
      }
    }
    if (decoratorPath && privateFieldPath) {
      throw privateFieldPath.buildCodeFrameError("Private fields in decorated classes are not supported yet.");
    }
    if (decoratorPath && privateMethodPath) {
      throw privateMethodPath.buildCodeFrameError("Private methods in decorated classes are not supported yet.");
    }
    if (decoratorPath && !hasFeature(file, FEATURES.decorators)) {
      throw path.buildCodeFrameError("Decorators are not enabled." + "\nIf you are using " + "[\"@babel/plugin-proposal-decorators\", { \"version\": \"legacy\" }], " + "make sure it comes *before* \"@babel/plugin-transform-class-properties\" " + "and enable loose mode, like so:\n" + "\t[\"@babel/plugin-proposal-decorators\", { \"version\": \"legacy\" }]\n" + "\t[\"@babel/plugin-transform-class-properties\", { \"loose\": true }]");
    }
    if (privateMethodPath && !hasFeature(file, FEATURES.privateMethods)) {
      throw privateMethodPath.buildCodeFrameError("Class private methods are not enabled. " + "Please add `@babel/plugin-transform-private-methods` to your configuration.");
    }
    if ((publicFieldPath || privateFieldPath) && !hasFeature(file, FEATURES.fields) && !hasFeature(file, FEATURES.privateMethods)) {
      throw path.buildCodeFrameError("Class fields are not enabled. " + "Please add `@babel/plugin-transform-class-properties` to your configuration.");
    }
    if (staticBlockPath && !hasFeature(file, FEATURES.staticBlocks)) {
      throw path.buildCodeFrameError("Static class blocks are not enabled. " + "Please add `@babel/plugin-transform-class-static-block` to your configuration.");
    }
    if (decoratorPath || privateMethodPath || staticBlockPath) {
      return true;
    }
    if ((publicFieldPath || privateFieldPath) && hasFeature(file, FEATURES.fields)) {
      return true;
    }
    return false;
  }
  return exports$m;
}

var exports$l = {},
  _dewExec$k = false;
function dew$k() {
  if (_dewExec$k) return exports$l;
  _dewExec$k = true;
  Object.defineProperty(exports$l, "__esModule", {
    value: true
  });
  Object.defineProperty(exports$l, "FEATURES", {
    enumerable: true,
    get: function () {
      return _features.FEATURES;
    }
  });
  Object.defineProperty(exports$l, "buildCheckInRHS", {
    enumerable: true,
    get: function () {
      return _fields.buildCheckInRHS;
    }
  });
  exports$l.createClassFeaturePlugin = createClassFeaturePlugin;
  Object.defineProperty(exports$l, "enableFeature", {
    enumerable: true,
    get: function () {
      return _features.enableFeature;
    }
  });
  Object.defineProperty(exports$l, "injectInitialization", {
    enumerable: true,
    get: function () {
      return _misc.injectInitialization;
    }
  });
  var _core = dew();
  var _decorators = dew$n();
  var _semver = dew$1Z();
  var _fields = dew$p();
  var _decorators2 = dew$m();
  var _misc = dew$o();
  var _features = dew$l();
  var _typescript = dew$q();
  const versionKey = "@babel/plugin-class-features/version";
  function createClassFeaturePlugin({
    name,
    feature,
    loose,
    manipulateOptions,
    api,
    inherits,
    decoratorVersion
  }) {
    var _api$assumption;
    if (feature & _features.FEATURES.decorators) {
      {
        if (decoratorVersion === "2023-11" || decoratorVersion === "2023-05" || decoratorVersion === "2023-01" || decoratorVersion === "2022-03" || decoratorVersion === "2021-12") {
          return (0, _decorators.default)(api, {
            loose
          }, decoratorVersion, inherits);
        }
      }
    }
    {
      var _api;
      (_api = api) != null ? _api : api = {
        assumption: () => void 0
      };
    }
    const setPublicClassFields = api.assumption("setPublicClassFields");
    const privateFieldsAsSymbols = api.assumption("privateFieldsAsSymbols");
    const privateFieldsAsProperties = api.assumption("privateFieldsAsProperties");
    const noUninitializedPrivateFieldAccess = (_api$assumption = api.assumption("noUninitializedPrivateFieldAccess")) != null ? _api$assumption : false;
    const constantSuper = api.assumption("constantSuper");
    const noDocumentAll = api.assumption("noDocumentAll");
    if (privateFieldsAsProperties && privateFieldsAsSymbols) {
      throw new Error(`Cannot enable both the "privateFieldsAsProperties" and ` + `"privateFieldsAsSymbols" assumptions as the same time.`);
    }
    const privateFieldsAsSymbolsOrProperties = privateFieldsAsProperties || privateFieldsAsSymbols;
    if (loose === true) {
      const explicit = [];
      if (setPublicClassFields !== undefined) {
        explicit.push(`"setPublicClassFields"`);
      }
      if (privateFieldsAsProperties !== undefined) {
        explicit.push(`"privateFieldsAsProperties"`);
      }
      if (privateFieldsAsSymbols !== undefined) {
        explicit.push(`"privateFieldsAsSymbols"`);
      }
      if (explicit.length !== 0) {
        console.warn(`[${name}]: You are using the "loose: true" option and you are` + ` explicitly setting a value for the ${explicit.join(" and ")}` + ` assumption${explicit.length > 1 ? "s" : ""}. The "loose" option` + ` can cause incompatibilities with the other class features` + ` plugins, so it's recommended that you replace it with the` + ` following top-level option:\n` + `\t"assumptions": {\n` + `\t\t"setPublicClassFields": true,\n` + `\t\t"privateFieldsAsSymbols": true\n` + `\t}`);
      }
    }
    return {
      name,
      manipulateOptions,
      inherits,
      pre(file) {
        (0, _features.enableFeature)(file, feature, loose);
        {
          if (typeof file.get(versionKey) === "number") {
            file.set(versionKey, "7.25.0");
            return;
          }
        }
        if (!file.get(versionKey) || _semver.lt(file.get(versionKey), "7.25.0")) {
          file.set(versionKey, "7.25.0");
        }
      },
      visitor: {
        Class(path, {
          file
        }) {
          var _ref;
          if (file.get(versionKey) !== "7.25.0") return;
          if (!(0, _features.shouldTransform)(path, file)) return;
          const pathIsClassDeclaration = path.isClassDeclaration();
          if (pathIsClassDeclaration) (0, _typescript.assertFieldTransformed)(path);
          const loose = (0, _features.isLoose)(file, feature);
          let constructor;
          const isDecorated = (0, _decorators2.hasDecorators)(path.node);
          const props = [];
          const elements = [];
          const computedPaths = [];
          const privateNames = new Set();
          const body = path.get("body");
          for (const path of body.get("body")) {
            if ((path.isClassProperty() || path.isClassMethod()) && path.node.computed) {
              computedPaths.push(path);
            }
            if (path.isPrivate()) {
              const {
                name
              } = path.node.key.id;
              const getName = `get ${name}`;
              const setName = `set ${name}`;
              if (path.isClassPrivateMethod()) {
                if (path.node.kind === "get") {
                  if (privateNames.has(getName) || privateNames.has(name) && !privateNames.has(setName)) {
                    throw path.buildCodeFrameError("Duplicate private field");
                  }
                  privateNames.add(getName).add(name);
                } else if (path.node.kind === "set") {
                  if (privateNames.has(setName) || privateNames.has(name) && !privateNames.has(getName)) {
                    throw path.buildCodeFrameError("Duplicate private field");
                  }
                  privateNames.add(setName).add(name);
                }
              } else {
                if (privateNames.has(name) && !privateNames.has(getName) && !privateNames.has(setName) || privateNames.has(name) && (privateNames.has(getName) || privateNames.has(setName))) {
                  throw path.buildCodeFrameError("Duplicate private field");
                }
                privateNames.add(name);
              }
            }
            if (path.isClassMethod({
              kind: "constructor"
            })) {
              constructor = path;
            } else {
              elements.push(path);
              if (path.isProperty() || path.isPrivate() || path.isStaticBlock != null && path.isStaticBlock()) {
                props.push(path);
              }
            }
          }
          {
            if (!props.length && !isDecorated) return;
          }
          const innerBinding = path.node.id;
          let ref;
          if (!innerBinding || !pathIsClassDeclaration) {
            {
              var _path$ensureFunctionN;
              (_path$ensureFunctionN = path.ensureFunctionName) != null ? _path$ensureFunctionN : path.ensureFunctionName = dew$1_().NodePath.prototype.ensureFunctionName;
            }
            path.ensureFunctionName(false);
            ref = path.scope.generateUidIdentifier((innerBinding == null ? void 0 : innerBinding.name) || "Class");
          }
          const classRefForDefine = (_ref = ref) != null ? _ref : _core.types.cloneNode(innerBinding);
          const privateNamesMap = (0, _fields.buildPrivateNamesMap)(classRefForDefine.name, privateFieldsAsSymbolsOrProperties != null ? privateFieldsAsSymbolsOrProperties : loose, props, file);
          const privateNamesNodes = (0, _fields.buildPrivateNamesNodes)(privateNamesMap, privateFieldsAsProperties != null ? privateFieldsAsProperties : loose, privateFieldsAsSymbols != null ? privateFieldsAsSymbols : false, file);
          (0, _fields.transformPrivateNamesUsage)(classRefForDefine, path, privateNamesMap, {
            privateFieldsAsProperties: privateFieldsAsSymbolsOrProperties != null ? privateFieldsAsSymbolsOrProperties : loose,
            noUninitializedPrivateFieldAccess,
            noDocumentAll,
            innerBinding
          }, file);
          let keysNodes, staticNodes, instanceNodes, lastInstanceNodeReturnsThis, pureStaticNodes, classBindingNode, wrapClass;
          {
            if (isDecorated) {
              staticNodes = pureStaticNodes = keysNodes = [];
              ({
                instanceNodes,
                wrapClass
              } = (0, _decorators2.buildDecoratedClass)(classRefForDefine, path, elements, file));
            } else {
              keysNodes = (0, _misc.extractComputedKeys)(path, computedPaths, file);
              ({
                staticNodes,
                pureStaticNodes,
                instanceNodes,
                lastInstanceNodeReturnsThis,
                classBindingNode,
                wrapClass
              } = (0, _fields.buildFieldsInitNodes)(ref, path.node.superClass, props, privateNamesMap, file, setPublicClassFields != null ? setPublicClassFields : loose, privateFieldsAsSymbolsOrProperties != null ? privateFieldsAsSymbolsOrProperties : loose, noUninitializedPrivateFieldAccess, constantSuper != null ? constantSuper : loose, innerBinding));
            }
          }
          if (instanceNodes.length > 0) {
            (0, _misc.injectInitialization)(path, constructor, instanceNodes, (referenceVisitor, state) => {
              {
                if (isDecorated) return;
              }
              for (const prop of props) {
                if (_core.types.isStaticBlock != null && _core.types.isStaticBlock(prop.node) || prop.node.static) continue;
                prop.traverse(referenceVisitor, state);
              }
            }, lastInstanceNodeReturnsThis);
          }
          const wrappedPath = wrapClass(path);
          wrappedPath.insertBefore([...privateNamesNodes, ...keysNodes]);
          if (staticNodes.length > 0) {
            wrappedPath.insertAfter(staticNodes);
          }
          if (pureStaticNodes.length > 0) {
            wrappedPath.find(parent => parent.isStatement() || parent.isDeclaration()).insertAfter(pureStaticNodes);
          }
          if (classBindingNode != null && pathIsClassDeclaration) {
            wrappedPath.insertAfter(classBindingNode);
          }
        },
        ExportDefaultDeclaration(path, {
          file
        }) {
          {
            if (file.get(versionKey) !== "7.25.0") return;
            const decl = path.get("declaration");
            if (decl.isClassDeclaration() && (0, _decorators2.hasDecorators)(decl.node)) {
              if (decl.node.id) {
                {
                  var _path$splitExportDecl;
                  (_path$splitExportDecl = path.splitExportDeclaration) != null ? _path$splitExportDecl : path.splitExportDeclaration = dew$1_().NodePath.prototype.splitExportDeclaration;
                }
                path.splitExportDeclaration();
              } else {
                decl.node.type = "ClassExpression";
              }
            }
          }
        }
      }
    };
  }
  return exports$l;
}

var exports$k = {},
  _dewExec$j = false;
function dew$j() {
  if (_dewExec$j) return exports$k;
  _dewExec$j = true;
  Object.defineProperty(exports$k, "__esModule", {
    value: true
  });
  exports$k.default = transpileEnum;
  exports$k.isSyntacticallyString = isSyntacticallyString;
  exports$k.translateEnumValues = translateEnumValues;
  var _core = dew();
  var _assert = _assert2;
  var _helperAnnotateAsPure = dew$r();
  var _helperSkipTransparentExpressionWrappers = dew$s();
  const ENUMS = new WeakMap();
  const buildEnumWrapper = _core.template.expression(`
    (function (ID) {
      ASSIGNMENTS;
      return ID;
    })(INIT)
  `);
  function transpileEnum(path, t) {
    const {
      node,
      parentPath
    } = path;
    if (node.declare) {
      path.remove();
      return;
    }
    const name = node.id.name;
    const {
      fill,
      data,
      isPure
    } = enumFill(path, t, node.id);
    switch (parentPath.type) {
      case "BlockStatement":
      case "ExportNamedDeclaration":
      case "Program":
        {
          const isGlobal = t.isProgram(path.parent);
          const isSeen = seen(parentPath);
          let init = t.objectExpression([]);
          if (isSeen || isGlobal) {
            init = t.logicalExpression("||", t.cloneNode(fill.ID), init);
          }
          const enumIIFE = buildEnumWrapper(Object.assign({}, fill, {
            INIT: init
          }));
          if (isPure) (0, _helperAnnotateAsPure.default)(enumIIFE);
          if (isSeen) {
            const toReplace = parentPath.isExportDeclaration() ? parentPath : path;
            toReplace.replaceWith(t.expressionStatement(t.assignmentExpression("=", t.cloneNode(node.id), enumIIFE)));
          } else {
            path.scope.registerDeclaration(path.replaceWith(t.variableDeclaration(isGlobal ? "var" : "let", [t.variableDeclarator(node.id, enumIIFE)]))[0]);
          }
          ENUMS.set(path.scope.getBindingIdentifier(name), data);
          break;
        }
      default:
        throw new Error(`Unexpected enum parent '${path.parent.type}`);
    }
    function seen(parentPath) {
      if (parentPath.isExportDeclaration()) {
        return seen(parentPath.parentPath);
      }
      if (parentPath.getData(name)) {
        return true;
      } else {
        parentPath.setData(name, true);
        return false;
      }
    }
  }
  const buildStringAssignment = (0, _core.template)(`
  ENUM["NAME"] = VALUE;
`);
  const buildNumericAssignment = (0, _core.template)(`
  ENUM[ENUM["NAME"] = VALUE] = "NAME";
`);
  const buildEnumMember = (isString, options) => (isString ? buildStringAssignment : buildNumericAssignment)(options);
  function enumFill(path, t, id) {
    const {
      enumValues: x,
      data,
      isPure
    } = translateEnumValues(path, t);
    const assignments = x.map(([memberName, memberValue]) => buildEnumMember(isSyntacticallyString(memberValue), {
      ENUM: t.cloneNode(id),
      NAME: memberName,
      VALUE: memberValue
    }));
    return {
      fill: {
        ID: t.cloneNode(id),
        ASSIGNMENTS: assignments
      },
      data,
      isPure
    };
  }
  function isSyntacticallyString(expr) {
    expr = (0, _helperSkipTransparentExpressionWrappers.skipTransparentExprWrapperNodes)(expr);
    switch (expr.type) {
      case "BinaryExpression":
        {
          const left = expr.left;
          const right = expr.right;
          return expr.operator === "+" && (isSyntacticallyString(left) || isSyntacticallyString(right));
        }
      case "TemplateLiteral":
      case "StringLiteral":
        return true;
    }
    return false;
  }
  function ReferencedIdentifier(expr, state) {
    const {
      seen,
      path,
      t
    } = state;
    const name = expr.node.name;
    if (seen.has(name) && !expr.scope.hasOwnBinding(name)) {
      expr.replaceWith(t.memberExpression(t.cloneNode(path.node.id), t.cloneNode(expr.node)));
      expr.skip();
    }
  }
  const enumSelfReferenceVisitor = {
    ReferencedIdentifier
  };
  function translateEnumValues(path, t) {
    var _ENUMS$get;
    const bindingIdentifier = path.scope.getBindingIdentifier(path.node.id.name);
    const seen = (_ENUMS$get = ENUMS.get(bindingIdentifier)) != null ? _ENUMS$get : new Map();
    let constValue = -1;
    let lastName;
    let isPure = true;
    const enumValues = path.get("members").map(memberPath => {
      const member = memberPath.node;
      const name = t.isIdentifier(member.id) ? member.id.name : member.id.value;
      const initializerPath = memberPath.get("initializer");
      const initializer = member.initializer;
      let value;
      if (initializer) {
        constValue = computeConstantValue(initializerPath, seen);
        if (constValue !== undefined) {
          seen.set(name, constValue);
          _assert(typeof constValue === "number" || typeof constValue === "string");
          if (constValue === Infinity || Number.isNaN(constValue)) {
            value = t.identifier(String(constValue));
          } else if (constValue === -Infinity) {
            value = t.unaryExpression("-", t.identifier("Infinity"));
          } else {
            value = t.valueToNode(constValue);
          }
        } else {
          isPure && (isPure = initializerPath.isPure());
          if (initializerPath.isReferencedIdentifier()) {
            ReferencedIdentifier(initializerPath, {
              t,
              seen,
              path
            });
          } else {
            initializerPath.traverse(enumSelfReferenceVisitor, {
              t,
              seen,
              path
            });
          }
          value = initializerPath.node;
          seen.set(name, undefined);
        }
      } else if (typeof constValue === "number") {
        constValue += 1;
        value = t.numericLiteral(constValue);
        seen.set(name, constValue);
      } else if (typeof constValue === "string") {
        throw path.buildCodeFrameError("Enum member must have initializer.");
      } else {
        const lastRef = t.memberExpression(t.cloneNode(path.node.id), t.stringLiteral(lastName), true);
        value = t.binaryExpression("+", t.numericLiteral(1), lastRef);
        seen.set(name, undefined);
      }
      lastName = name;
      return [name, value];
    });
    return {
      isPure,
      data: seen,
      enumValues
    };
  }
  function computeConstantValue(path, prevMembers, seen = new Set()) {
    return evaluate(path);
    function evaluate(path) {
      const expr = path.node;
      switch (expr.type) {
        case "MemberExpression":
          return evaluateRef(path, prevMembers, seen);
        case "StringLiteral":
          return expr.value;
        case "UnaryExpression":
          return evalUnaryExpression(path);
        case "BinaryExpression":
          return evalBinaryExpression(path);
        case "NumericLiteral":
          return expr.value;
        case "ParenthesizedExpression":
          return evaluate(path.get("expression"));
        case "Identifier":
          return evaluateRef(path, prevMembers, seen);
        case "TemplateLiteral":
          {
            if (expr.quasis.length === 1) {
              return expr.quasis[0].value.cooked;
            }
            const paths = path.get("expressions");
            const quasis = expr.quasis;
            let str = "";
            for (let i = 0; i < quasis.length; i++) {
              str += quasis[i].value.cooked;
              if (i + 1 < quasis.length) {
                const value = evaluateRef(paths[i], prevMembers, seen);
                if (value === undefined) return undefined;
                str += value;
              }
            }
            return str;
          }
        default:
          return undefined;
      }
    }
    function evaluateRef(path, prevMembers, seen) {
      if (path.isMemberExpression()) {
        const expr = path.node;
        const obj = expr.object;
        const prop = expr.property;
        if (!_core.types.isIdentifier(obj) || (expr.computed ? !_core.types.isStringLiteral(prop) : !_core.types.isIdentifier(prop))) {
          return;
        }
        const bindingIdentifier = path.scope.getBindingIdentifier(obj.name);
        const data = ENUMS.get(bindingIdentifier);
        if (!data) return;
        return data.get(prop.computed ? prop.value : prop.name);
      } else if (path.isIdentifier()) {
        const name = path.node.name;
        if (["Infinity", "NaN"].includes(name)) {
          return Number(name);
        }
        let value = prevMembers == null ? void 0 : prevMembers.get(name);
        if (value !== undefined) {
          return value;
        }
        if (seen.has(path.node)) return;
        seen.add(path.node);
        value = computeConstantValue(path.resolve(), prevMembers, seen);
        prevMembers == null || prevMembers.set(name, value);
        return value;
      }
    }
    function evalUnaryExpression(path) {
      const value = evaluate(path.get("argument"));
      if (value === undefined) {
        return undefined;
      }
      switch (path.node.operator) {
        case "+":
          return value;
        case "-":
          return -value;
        case "~":
          return ~value;
        default:
          return undefined;
      }
    }
    function evalBinaryExpression(path) {
      const left = evaluate(path.get("left"));
      if (left === undefined) {
        return undefined;
      }
      const right = evaluate(path.get("right"));
      if (right === undefined) {
        return undefined;
      }
      switch (path.node.operator) {
        case "|":
          return left | right;
        case "&":
          return left & right;
        case ">>":
          return left >> right;
        case ">>>":
          return left >>> right;
        case "<<":
          return left << right;
        case "^":
          return left ^ right;
        case "*":
          return left * right;
        case "/":
          return left / right;
        case "+":
          return left + right;
        case "-":
          return left - right;
        case "%":
          return left % right;
        case "**":
          return Math.pow(left, right);
        default:
          return undefined;
      }
    }
  }
  return exports$k;
}

var exports$j = {},
  _dewExec$i = false;
function dew$i() {
  if (_dewExec$i) return exports$j;
  _dewExec$i = true;
  Object.defineProperty(exports$j, "__esModule", {
    value: true
  });
  exports$j.default = transpileConstEnum;
  var _enum = dew$j();
  function transpileConstEnum(path, t) {
    const {
      name
    } = path.node.id;
    const parentIsExport = path.parentPath.isExportNamedDeclaration();
    let isExported = parentIsExport;
    if (!isExported && t.isProgram(path.parent)) {
      isExported = path.parent.body.some(stmt => t.isExportNamedDeclaration(stmt) && stmt.exportKind !== "type" && !stmt.source && stmt.specifiers.some(spec => t.isExportSpecifier(spec) && spec.exportKind !== "type" && spec.local.name === name));
    }
    const {
      enumValues: entries
    } = (0, _enum.translateEnumValues)(path, t);
    if (isExported) {
      const obj = t.objectExpression(entries.map(([name, value]) => t.objectProperty(t.isValidIdentifier(name) ? t.identifier(name) : t.stringLiteral(name), value)));
      if (path.scope.hasOwnBinding(name)) {
        (parentIsExport ? path.parentPath : path).replaceWith(t.expressionStatement(t.callExpression(t.memberExpression(t.identifier("Object"), t.identifier("assign")), [path.node.id, obj])));
      } else {
        path.replaceWith(t.variableDeclaration("var", [t.variableDeclarator(path.node.id, obj)]));
        path.scope.registerDeclaration(path);
      }
      return;
    }
    const entriesMap = new Map(entries);
    path.scope.path.traverse({
      Scope(path) {
        if (path.scope.hasOwnBinding(name)) path.skip();
      },
      MemberExpression(path) {
        if (!t.isIdentifier(path.node.object, {
          name
        })) return;
        let key;
        if (path.node.computed) {
          if (t.isStringLiteral(path.node.property)) {
            key = path.node.property.value;
          } else {
            return;
          }
        } else if (t.isIdentifier(path.node.property)) {
          key = path.node.property.name;
        } else {
          return;
        }
        if (!entriesMap.has(key)) return;
        path.replaceWith(t.cloneNode(entriesMap.get(key)));
      }
    });
    path.remove();
  }
  return exports$j;
}

var exports$i = {},
  _dewExec$h = false;
function dew$h() {
  if (_dewExec$h) return exports$i;
  _dewExec$h = true;
  Object.defineProperty(exports$i, "__esModule", {
    value: true
  });
  exports$i.GLOBAL_TYPES = void 0;
  exports$i.isGlobalType = isGlobalType;
  exports$i.registerGlobalType = registerGlobalType;
  const GLOBAL_TYPES = exports$i.GLOBAL_TYPES = new WeakMap();
  function isGlobalType({
    scope
  }, name) {
    if (scope.hasBinding(name)) return false;
    if (GLOBAL_TYPES.get(scope).has(name)) return true;
    console.warn(`The exported identifier "${name}" is not declared in Babel's scope tracker\n` + `as a JavaScript value binding, and "@babel/plugin-transform-typescript"\n` + `never encountered it as a TypeScript type declaration.\n` + `It will be treated as a JavaScript value.\n\n` + `This problem is likely caused by another plugin injecting\n` + `"${name}" without registering it in the scope tracker. If you are the author\n` + ` of that plugin, please use "scope.registerDeclaration(declarationPath)".`);
    return false;
  }
  function registerGlobalType(programScope, name) {
    GLOBAL_TYPES.get(programScope).add(name);
  }
  return exports$i;
}

var exports$h = {},
  _dewExec$g = false;
function dew$g() {
  if (_dewExec$g) return exports$h;
  _dewExec$g = true;
  Object.defineProperty(exports$h, "__esModule", {
    value: true
  });
  exports$h.default = transpileNamespace;
  var _core = dew();
  var _globalTypes = dew$h();
  function transpileNamespace(path, allowNamespaces) {
    if (path.node.declare || path.node.id.type === "StringLiteral") {
      path.remove();
      return;
    }
    if (!allowNamespaces) {
      throw path.get("id").buildCodeFrameError("Namespace not marked type-only declare." + " Non-declarative namespaces are only supported experimentally in Babel." + " To enable and review caveats see:" + " https://babeljs.io/docs/en/babel-plugin-transform-typescript");
    }
    const name = path.node.id.name;
    const value = handleNested(path, _core.types.cloneNode(path.node, true));
    if (value === null) {
      const program = path.findParent(p => p.isProgram());
      (0, _globalTypes.registerGlobalType)(program.scope, name);
      path.remove();
    } else if (path.scope.hasOwnBinding(name)) {
      path.replaceWith(value);
    } else {
      path.scope.registerDeclaration(path.replaceWithMultiple([getDeclaration(name), value])[0]);
    }
  }
  function getDeclaration(name) {
    return _core.types.variableDeclaration("let", [_core.types.variableDeclarator(_core.types.identifier(name))]);
  }
  function getMemberExpression(name, itemName) {
    return _core.types.memberExpression(_core.types.identifier(name), _core.types.identifier(itemName));
  }
  function handleVariableDeclaration(node, name, hub) {
    if (node.kind !== "const") {
      throw hub.file.buildCodeFrameError(node, "Namespaces exporting non-const are not supported by Babel." + " Change to const or see:" + " https://babeljs.io/docs/en/babel-plugin-transform-typescript");
    }
    const {
      declarations
    } = node;
    if (declarations.every(declarator => _core.types.isIdentifier(declarator.id))) {
      for (const declarator of declarations) {
        declarator.init = _core.types.assignmentExpression("=", getMemberExpression(name, declarator.id.name), declarator.init);
      }
      return [node];
    }
    const bindingIdentifiers = _core.types.getBindingIdentifiers(node);
    const assignments = [];
    for (const idName in bindingIdentifiers) {
      assignments.push(_core.types.assignmentExpression("=", getMemberExpression(name, idName), _core.types.cloneNode(bindingIdentifiers[idName])));
    }
    return [node, _core.types.expressionStatement(_core.types.sequenceExpression(assignments))];
  }
  function buildNestedAmbientModuleError(path, node) {
    return path.hub.buildError(node, "Ambient modules cannot be nested in other modules or namespaces.", Error);
  }
  function handleNested(path, node, parentExport) {
    const names = new Set();
    const realName = node.id;
    _core.types.assertIdentifier(realName);
    const name = path.scope.generateUid(realName.name);
    const namespaceTopLevel = _core.types.isTSModuleBlock(node.body) ? node.body.body : [_core.types.exportNamedDeclaration(node.body)];
    let isEmpty = true;
    for (let i = 0; i < namespaceTopLevel.length; i++) {
      const subNode = namespaceTopLevel[i];
      switch (subNode.type) {
        case "TSModuleDeclaration":
          {
            if (!_core.types.isIdentifier(subNode.id)) {
              throw buildNestedAmbientModuleError(path, subNode);
            }
            const transformed = handleNested(path, subNode);
            if (transformed !== null) {
              isEmpty = false;
              const moduleName = subNode.id.name;
              if (names.has(moduleName)) {
                namespaceTopLevel[i] = transformed;
              } else {
                names.add(moduleName);
                namespaceTopLevel.splice(i++, 1, getDeclaration(moduleName), transformed);
              }
            }
            continue;
          }
        case "TSEnumDeclaration":
        case "FunctionDeclaration":
        case "ClassDeclaration":
          isEmpty = false;
          names.add(subNode.id.name);
          continue;
        case "VariableDeclaration":
          {
            isEmpty = false;
            for (const name in _core.types.getBindingIdentifiers(subNode)) {
              names.add(name);
            }
            continue;
          }
        default:
          isEmpty && (isEmpty = _core.types.isTypeScript(subNode));
          continue;
        case "ExportNamedDeclaration":
      }
      if ("declare" in subNode.declaration && subNode.declaration.declare) {
        continue;
      }
      switch (subNode.declaration.type) {
        case "TSEnumDeclaration":
        case "FunctionDeclaration":
        case "ClassDeclaration":
          {
            isEmpty = false;
            const itemName = subNode.declaration.id.name;
            names.add(itemName);
            namespaceTopLevel.splice(i++, 1, subNode.declaration, _core.types.expressionStatement(_core.types.assignmentExpression("=", getMemberExpression(name, itemName), _core.types.identifier(itemName))));
            break;
          }
        case "VariableDeclaration":
          {
            isEmpty = false;
            const nodes = handleVariableDeclaration(subNode.declaration, name, path.hub);
            namespaceTopLevel.splice(i, nodes.length, ...nodes);
            i += nodes.length - 1;
            break;
          }
        case "TSModuleDeclaration":
          {
            if (!_core.types.isIdentifier(subNode.declaration.id)) {
              throw buildNestedAmbientModuleError(path, subNode.declaration);
            }
            const transformed = handleNested(path, subNode.declaration, _core.types.identifier(name));
            if (transformed !== null) {
              isEmpty = false;
              const moduleName = subNode.declaration.id.name;
              if (names.has(moduleName)) {
                namespaceTopLevel[i] = transformed;
              } else {
                names.add(moduleName);
                namespaceTopLevel.splice(i++, 1, getDeclaration(moduleName), transformed);
              }
            } else {
              namespaceTopLevel.splice(i, 1);
              i--;
            }
          }
      }
    }
    if (isEmpty) return null;
    let fallthroughValue = _core.types.objectExpression([]);
    if (parentExport) {
      const memberExpr = _core.types.memberExpression(parentExport, realName);
      fallthroughValue = _core.template.expression.ast`
      ${_core.types.cloneNode(memberExpr)} ||
        (${_core.types.cloneNode(memberExpr)} = ${fallthroughValue})
    `;
    }
    return _core.template.statement.ast`
    (function (${_core.types.identifier(name)}) {
      ${namespaceTopLevel}
    })(${realName} || (${_core.types.cloneNode(realName)} = ${fallthroughValue}));
  `;
  }
  return exports$h;
}

var exports$g = {},
  _dewExec$f = false;
function dew$f() {
  if (_dewExec$f) return exports$g;
  _dewExec$f = true;
  Object.defineProperty(exports$g, "__esModule", {
    value: true
  });
  exports$g.default = void 0;
  var _helperPluginUtils = dew$x();
  var _pluginSyntaxTypescript = dew$w();
  var _helperCreateClassFeaturesPlugin = dew$k();
  var _constEnum = dew$i();
  var _enum = dew$j();
  var _globalTypes = dew$h();
  var _namespace = dew$g();
  function isInType(path) {
    switch (path.parent.type) {
      case "TSTypeReference":
      case "TSExpressionWithTypeArguments":
      case "TSTypeQuery":
        return true;
      case "TSQualifiedName":
        return path.parentPath.findParent(path => path.type !== "TSQualifiedName").type !== "TSImportEqualsDeclaration";
      case "ExportSpecifier":
        return path.parent.exportKind === "type" || path.parentPath.parent.exportKind === "type";
      default:
        return false;
    }
  }
  const NEEDS_EXPLICIT_ESM = new WeakMap();
  const PARSED_PARAMS = new WeakSet();
  function safeRemove(path) {
    const ids = path.getBindingIdentifiers();
    for (const name of Object.keys(ids)) {
      const binding = path.scope.getBinding(name);
      if (binding && binding.identifier === ids[name]) {
        binding.scope.removeBinding(name);
      }
    }
    path.opts.noScope = true;
    path.remove();
    path.opts.noScope = false;
  }
  function assertCjsTransformEnabled(path, pass, wrong, suggestion, extra = "") {
    if (pass.file.get("@babel/plugin-transform-modules-*") !== "commonjs") {
      throw path.buildCodeFrameError(`\`${wrong}\` is only supported when compiling modules to CommonJS.\n` + `Please consider using \`${suggestion}\`${extra}, or add ` + `@babel/plugin-transform-modules-commonjs to your Babel config.`);
    }
  }
  exports$g.default = (0, _helperPluginUtils.declare)((api, opts) => {
    const {
      types: t,
      template
    } = api;
    api.assertVersion(7);
    const JSX_PRAGMA_REGEX = /\*?\s*@jsx((?:Frag)?)\s+(\S+)/;
    const {
      allowNamespaces = true,
      jsxPragma = "React.createElement",
      jsxPragmaFrag = "React.Fragment",
      onlyRemoveTypeImports = false,
      optimizeConstEnums = false
    } = opts;
    {
      var {
        allowDeclareFields = false
      } = opts;
    }
    const classMemberVisitors = {
      field(path) {
        const {
          node
        } = path;
        {
          if (!allowDeclareFields && node.declare) {
            throw path.buildCodeFrameError(`The 'declare' modifier is only allowed when the 'allowDeclareFields' option of ` + `@babel/plugin-transform-typescript or @babel/preset-typescript is enabled.`);
          }
        }
        if (node.declare) {
          if (node.value) {
            throw path.buildCodeFrameError(`Fields with the 'declare' modifier cannot be initialized here, but only in the constructor`);
          }
          if (!node.decorators) {
            path.remove();
          }
        } else if (node.definite) {
          if (node.value) {
            throw path.buildCodeFrameError(`Definitely assigned fields cannot be initialized here, but only in the constructor`);
          }
          {
            if (!allowDeclareFields && !node.decorators && !t.isClassPrivateProperty(node)) {
              path.remove();
            }
          }
        } else if (node.abstract) {
          path.remove();
        } else {
          if (!allowDeclareFields && !node.value && !node.decorators && !t.isClassPrivateProperty(node)) {
            path.remove();
          }
        }
        if (node.accessibility) node.accessibility = null;
        if (node.abstract) node.abstract = null;
        if (node.readonly) node.readonly = null;
        if (node.optional) node.optional = null;
        if (node.typeAnnotation) node.typeAnnotation = null;
        if (node.definite) node.definite = null;
        if (node.declare) node.declare = null;
        if (node.override) node.override = null;
      },
      method({
        node
      }) {
        if (node.accessibility) node.accessibility = null;
        if (node.abstract) node.abstract = null;
        if (node.optional) node.optional = null;
        if (node.override) node.override = null;
      },
      constructor(path, classPath) {
        if (path.node.accessibility) path.node.accessibility = null;
        const assigns = [];
        const {
          scope
        } = path;
        for (const paramPath of path.get("params")) {
          const param = paramPath.node;
          if (param.type === "TSParameterProperty") {
            const parameter = param.parameter;
            if (PARSED_PARAMS.has(parameter)) continue;
            PARSED_PARAMS.add(parameter);
            let id;
            if (t.isIdentifier(parameter)) {
              id = parameter;
            } else if (t.isAssignmentPattern(parameter) && t.isIdentifier(parameter.left)) {
              id = parameter.left;
            } else {
              throw paramPath.buildCodeFrameError("Parameter properties can not be destructuring patterns.");
            }
            assigns.push(template.statement.ast`
              this.${t.cloneNode(id)} = ${t.cloneNode(id)}
            `);
            paramPath.replaceWith(paramPath.get("parameter"));
            scope.registerBinding("param", paramPath);
          }
        }
        (0, _helperCreateClassFeaturesPlugin.injectInitialization)(classPath, path, assigns);
      }
    };
    return {
      name: "transform-typescript",
      inherits: _pluginSyntaxTypescript.default,
      visitor: {
        Pattern: visitPattern,
        Identifier: visitPattern,
        RestElement: visitPattern,
        Program: {
          enter(path, state) {
            const {
              file
            } = state;
            let fileJsxPragma = null;
            let fileJsxPragmaFrag = null;
            const programScope = path.scope;
            if (!_globalTypes.GLOBAL_TYPES.has(programScope)) {
              _globalTypes.GLOBAL_TYPES.set(programScope, new Set());
            }
            if (file.ast.comments) {
              for (const comment of file.ast.comments) {
                const jsxMatches = JSX_PRAGMA_REGEX.exec(comment.value);
                if (jsxMatches) {
                  if (jsxMatches[1]) {
                    fileJsxPragmaFrag = jsxMatches[2];
                  } else {
                    fileJsxPragma = jsxMatches[2];
                  }
                }
              }
            }
            let pragmaImportName = fileJsxPragma || jsxPragma;
            if (pragmaImportName) {
              [pragmaImportName] = pragmaImportName.split(".");
            }
            let pragmaFragImportName = fileJsxPragmaFrag || jsxPragmaFrag;
            if (pragmaFragImportName) {
              [pragmaFragImportName] = pragmaFragImportName.split(".");
            }
            for (let stmt of path.get("body")) {
              if (stmt.isImportDeclaration()) {
                if (!NEEDS_EXPLICIT_ESM.has(state.file.ast.program)) {
                  NEEDS_EXPLICIT_ESM.set(state.file.ast.program, true);
                }
                if (stmt.node.importKind === "type") {
                  for (const specifier of stmt.node.specifiers) {
                    (0, _globalTypes.registerGlobalType)(programScope, specifier.local.name);
                  }
                  stmt.remove();
                  continue;
                }
                const importsToRemove = new Set();
                const specifiersLength = stmt.node.specifiers.length;
                const isAllSpecifiersElided = () => specifiersLength > 0 && specifiersLength === importsToRemove.size;
                for (const specifier of stmt.node.specifiers) {
                  if (specifier.type === "ImportSpecifier" && specifier.importKind === "type") {
                    (0, _globalTypes.registerGlobalType)(programScope, specifier.local.name);
                    const binding = stmt.scope.getBinding(specifier.local.name);
                    if (binding) {
                      importsToRemove.add(binding.path);
                    }
                  }
                }
                if (onlyRemoveTypeImports) {
                  NEEDS_EXPLICIT_ESM.set(path.node, false);
                } else {
                  if (stmt.node.specifiers.length === 0) {
                    NEEDS_EXPLICIT_ESM.set(path.node, false);
                    continue;
                  }
                  for (const specifier of stmt.node.specifiers) {
                    const binding = stmt.scope.getBinding(specifier.local.name);
                    if (binding && !importsToRemove.has(binding.path)) {
                      if (isImportTypeOnly({
                        binding,
                        programPath: path,
                        pragmaImportName,
                        pragmaFragImportName
                      })) {
                        importsToRemove.add(binding.path);
                      } else {
                        NEEDS_EXPLICIT_ESM.set(path.node, false);
                      }
                    }
                  }
                }
                if (isAllSpecifiersElided() && !onlyRemoveTypeImports) {
                  stmt.remove();
                } else {
                  for (const importPath of importsToRemove) {
                    importPath.remove();
                  }
                }
                continue;
              }
              if (stmt.isExportDeclaration()) {
                stmt = stmt.get("declaration");
              }
              if (stmt.isVariableDeclaration({
                declare: true
              })) {
                for (const name of Object.keys(stmt.getBindingIdentifiers())) {
                  (0, _globalTypes.registerGlobalType)(programScope, name);
                }
              } else if (stmt.isTSTypeAliasDeclaration() || stmt.isTSDeclareFunction() && stmt.get("id").isIdentifier() || stmt.isTSInterfaceDeclaration() || stmt.isClassDeclaration({
                declare: true
              }) || stmt.isTSEnumDeclaration({
                declare: true
              }) || stmt.isTSModuleDeclaration({
                declare: true
              }) && stmt.get("id").isIdentifier()) {
                (0, _globalTypes.registerGlobalType)(programScope, stmt.node.id.name);
              }
            }
          },
          exit(path) {
            if (path.node.sourceType === "module" && NEEDS_EXPLICIT_ESM.get(path.node)) {
              path.pushContainer("body", t.exportNamedDeclaration());
            }
          }
        },
        ExportNamedDeclaration(path, state) {
          if (!NEEDS_EXPLICIT_ESM.has(state.file.ast.program)) {
            NEEDS_EXPLICIT_ESM.set(state.file.ast.program, true);
          }
          if (path.node.exportKind === "type") {
            path.remove();
            return;
          }
          if (path.node.source && path.node.specifiers.length > 0 && path.node.specifiers.every(specifier => specifier.type === "ExportSpecifier" && specifier.exportKind === "type")) {
            path.remove();
            return;
          }
          if (!path.node.source && path.node.specifiers.length > 0 && path.node.specifiers.every(specifier => t.isExportSpecifier(specifier) && (0, _globalTypes.isGlobalType)(path, specifier.local.name))) {
            path.remove();
            return;
          }
          if (t.isTSModuleDeclaration(path.node.declaration)) {
            const namespace = path.node.declaration;
            const {
              id
            } = namespace;
            if (t.isIdentifier(id)) {
              if (path.scope.hasOwnBinding(id.name)) {
                path.replaceWith(namespace);
              } else {
                const [newExport] = path.replaceWithMultiple([t.exportNamedDeclaration(t.variableDeclaration("let", [t.variableDeclarator(t.cloneNode(id))])), namespace]);
                path.scope.registerDeclaration(newExport);
              }
            }
          }
          NEEDS_EXPLICIT_ESM.set(state.file.ast.program, false);
        },
        ExportAllDeclaration(path) {
          if (path.node.exportKind === "type") path.remove();
        },
        ExportSpecifier(path) {
          const parent = path.parent;
          if (!parent.source && (0, _globalTypes.isGlobalType)(path, path.node.local.name) || path.node.exportKind === "type") {
            path.remove();
          }
        },
        ExportDefaultDeclaration(path, state) {
          if (!NEEDS_EXPLICIT_ESM.has(state.file.ast.program)) {
            NEEDS_EXPLICIT_ESM.set(state.file.ast.program, true);
          }
          if (t.isIdentifier(path.node.declaration) && (0, _globalTypes.isGlobalType)(path, path.node.declaration.name)) {
            path.remove();
            return;
          }
          NEEDS_EXPLICIT_ESM.set(state.file.ast.program, false);
        },
        TSDeclareFunction(path) {
          safeRemove(path);
        },
        TSDeclareMethod(path) {
          safeRemove(path);
        },
        VariableDeclaration(path) {
          if (path.node.declare) {
            safeRemove(path);
          }
        },
        VariableDeclarator({
          node
        }) {
          if (node.definite) node.definite = null;
        },
        TSIndexSignature(path) {
          path.remove();
        },
        ClassDeclaration(path) {
          const {
            node
          } = path;
          if (node.declare) {
            safeRemove(path);
          }
        },
        Class(path) {
          const {
            node
          } = path;
          if (node.typeParameters) node.typeParameters = null;
          if (node.superTypeParameters) node.superTypeParameters = null;
          if (node.implements) node.implements = null;
          if (node.abstract) node.abstract = null;
          path.get("body.body").forEach(child => {
            if (child.isClassMethod() || child.isClassPrivateMethod()) {
              if (child.node.kind === "constructor") {
                classMemberVisitors.constructor(child, path);
              } else {
                classMemberVisitors.method(child);
              }
            } else if (child.isClassProperty() || child.isClassPrivateProperty() || child.isClassAccessorProperty()) {
              classMemberVisitors.field(child);
            }
          });
        },
        Function(path) {
          const {
            node
          } = path;
          if (node.typeParameters) node.typeParameters = null;
          if (node.returnType) node.returnType = null;
          const params = node.params;
          if (params.length > 0 && t.isIdentifier(params[0], {
            name: "this"
          })) {
            params.shift();
          }
        },
        TSModuleDeclaration(path) {
          (0, _namespace.default)(path, allowNamespaces);
        },
        TSInterfaceDeclaration(path) {
          path.remove();
        },
        TSTypeAliasDeclaration(path) {
          path.remove();
        },
        TSEnumDeclaration(path) {
          if (optimizeConstEnums && path.node.const) {
            (0, _constEnum.default)(path, t);
          } else {
            (0, _enum.default)(path, t);
          }
        },
        TSImportEqualsDeclaration(path, pass) {
          const {
            id,
            moduleReference,
            isExport
          } = path.node;
          let init;
          let varKind;
          if (t.isTSExternalModuleReference(moduleReference)) {
            assertCjsTransformEnabled(path, pass, `import ${id.name} = require(...);`, `import ${id.name} from '...';`, " alongside Typescript's --allowSyntheticDefaultImports option");
            init = t.callExpression(t.identifier("require"), [moduleReference.expression]);
            varKind = "const";
          } else {
            init = entityNameToExpr(moduleReference);
            varKind = "var";
          }
          const newNode = t.variableDeclaration(varKind, [t.variableDeclarator(id, init)]);
          path.replaceWith(isExport ? t.exportNamedDeclaration(newNode) : newNode);
          path.scope.registerDeclaration(path);
        },
        TSExportAssignment(path, pass) {
          assertCjsTransformEnabled(path, pass, `export = <value>;`, `export default <value>;`);
          path.replaceWith(template.statement.ast`module.exports = ${path.node.expression}`);
        },
        TSTypeAssertion(path) {
          path.replaceWith(path.node.expression);
        },
        [`TSAsExpression${t.tsSatisfiesExpression ? "|TSSatisfiesExpression" : ""}`](path) {
          let {
            node
          } = path;
          do {
            node = node.expression;
          } while (t.isTSAsExpression(node) || t.isTSSatisfiesExpression != null && t.isTSSatisfiesExpression(node));
          path.replaceWith(node);
        },
        [api.types.tsInstantiationExpression ? "TSNonNullExpression|TSInstantiationExpression" : "TSNonNullExpression"](path) {
          path.replaceWith(path.node.expression);
        },
        CallExpression(path) {
          path.node.typeParameters = null;
        },
        OptionalCallExpression(path) {
          path.node.typeParameters = null;
        },
        NewExpression(path) {
          path.node.typeParameters = null;
        },
        JSXOpeningElement(path) {
          path.node.typeParameters = null;
        },
        TaggedTemplateExpression(path) {
          path.node.typeParameters = null;
        }
      }
    };
    function entityNameToExpr(node) {
      if (t.isTSQualifiedName(node)) {
        return t.memberExpression(entityNameToExpr(node.left), node.right);
      }
      return node;
    }
    function visitPattern({
      node
    }) {
      if (node.typeAnnotation) node.typeAnnotation = null;
      if (t.isIdentifier(node) && node.optional) node.optional = null;
    }
    function isImportTypeOnly({
      binding,
      programPath,
      pragmaImportName,
      pragmaFragImportName
    }) {
      for (const path of binding.referencePaths) {
        if (!isInType(path)) {
          return false;
        }
      }
      if (binding.identifier.name !== pragmaImportName && binding.identifier.name !== pragmaFragImportName) {
        return true;
      }
      let sourceFileHasJsx = false;
      programPath.traverse({
        "JSXElement|JSXFragment"(path) {
          sourceFileHasJsx = true;
          path.stop();
        }
      });
      return !sourceFileHasJsx;
    }
  });
  return exports$g;
}

var exports$f = {},
  _dewExec$e = false;
function dew$e() {
  if (_dewExec$e) return exports$f;
  _dewExec$e = true;
  Object.defineProperty(exports$f, "__esModule", {
    value: true
  });
  exports$f.default = void 0;
  var _helperPluginUtils = dew$x();
  exports$f.default = (0, _helperPluginUtils.declare)(api => {
    api.assertVersion(7);
    return {
      name: "syntax-jsx",
      manipulateOptions(opts, parserOpts) {
        {
          if (parserOpts.plugins.some(p => (Array.isArray(p) ? p[0] : p) === "typescript")) {
            return;
          }
        }
        parserOpts.plugins.push("jsx");
      }
    };
  });
  return exports$f;
}

var exports$e = {},
  _dewExec$d = false;
function dew$d() {
  if (_dewExec$d) return exports$e;
  _dewExec$d = true;
  Object.defineProperty(exports$e, "__esModule", {
    value: true
  });
  exports$e.transformDynamicImport = transformDynamicImport;
  var _core = dew();
  var _helperModuleTransforms = dew$1N();
  const requireNoInterop = source => _core.template.expression.ast`require(${source})`;
  const requireInterop = (source, file) => _core.types.callExpression(file.addHelper("interopRequireWildcard"), [requireNoInterop(source)]);
  function transformDynamicImport(path, noInterop, file) {
    const buildRequire = noInterop ? requireNoInterop : requireInterop;
    path.replaceWith((0, _helperModuleTransforms.buildDynamicImport)(path.node, true, false, specifier => buildRequire(specifier, file)));
  }
  return exports$e;
}

var exports$d = {},
  _dewExec$c = false;
function dew$c() {
  if (_dewExec$c) return exports$d;
  _dewExec$c = true;
  Object.defineProperty(exports$d, "__esModule", {
    value: true
  });
  exports$d.lazyImportsHook = void 0;
  var _core = dew();
  var _helperModuleTransforms = dew$1N();
  const lazyImportsHook = lazy => ({
    name: `${"@babel/plugin-transform-modules-commonjs"}/lazy`,
    version: "7.24.8",
    getWrapperPayload(source, metadata) {
      if ((0, _helperModuleTransforms.isSideEffectImport)(metadata) || metadata.reexportAll) {
        return null;
      }
      if (lazy === true) {
        return source.includes(".") ? null : "lazy/function";
      }
      if (Array.isArray(lazy)) {
        return !lazy.includes(source) ? null : "lazy/function";
      }
      if (typeof lazy === "function") {
        return lazy(source) ? "lazy/function" : null;
      }
    },
    buildRequireWrapper(name, init, payload, referenced) {
      if (payload === "lazy/function") {
        if (!referenced) return false;
        return _core.template.statement.ast`
        function ${name}() {
          const data = ${init};
          ${name} = function(){ return data; };
          return data;
        }
      `;
      }
    },
    wrapReference(ref, payload) {
      if (payload === "lazy/function") return _core.types.callExpression(ref, []);
    }
  });
  exports$d.lazyImportsHook = lazyImportsHook;
  return exports$d;
}

var exports$c = {},
  _dewExec$b = false;
function dew$b() {
  if (_dewExec$b) return exports$c;
  _dewExec$b = true;
  Object.defineProperty(exports$c, "__esModule", {
    value: true
  });
  exports$c.defineCommonJSHook = defineCommonJSHook;
  exports$c.makeInvokers = makeInvokers;
  const commonJSHooksKey = "@babel/plugin-transform-modules-commonjs/customWrapperPlugin";
  function defineCommonJSHook(file, hook) {
    let hooks = file.get(commonJSHooksKey);
    if (!hooks) file.set(commonJSHooksKey, hooks = []);
    hooks.push(hook);
  }
  function findMap(arr, cb) {
    if (arr) {
      for (const el of arr) {
        const res = cb(el);
        if (res != null) return res;
      }
    }
  }
  function makeInvokers(file) {
    const hooks = file.get(commonJSHooksKey);
    return {
      getWrapperPayload(...args) {
        return findMap(hooks, hook => hook.getWrapperPayload == null ? void 0 : hook.getWrapperPayload(...args));
      },
      wrapReference(...args) {
        return findMap(hooks, hook => hook.wrapReference == null ? void 0 : hook.wrapReference(...args));
      },
      buildRequireWrapper(...args) {
        return findMap(hooks, hook => hook.buildRequireWrapper == null ? void 0 : hook.buildRequireWrapper(...args));
      }
    };
  }
  return exports$c;
}

var exports$b = {},
  _dewExec$a = false;
function dew$a() {
  if (_dewExec$a) return exports$b;
  _dewExec$a = true;
  Object.defineProperty(exports$b, "__esModule", {
    value: true
  });
  exports$b.default = void 0;
  Object.defineProperty(exports$b, "defineCommonJSHook", {
    enumerable: true,
    get: function () {
      return _hooks.defineCommonJSHook;
    }
  });
  var _helperPluginUtils = dew$x();
  var _helperModuleTransforms = dew$1N();
  var _helperSimpleAccess = dew$1T();
  var _core = dew();
  var _dynamicImport = dew$d();
  var _lazy = dew$c();
  var _hooks = dew$b();
  exports$b.default = (0, _helperPluginUtils.declare)((api, options) => {
    var _api$assumption, _api$assumption2, _api$assumption3;
    api.assertVersion(7);
    const {
      strictNamespace = false,
      mjsStrictNamespace = strictNamespace,
      allowTopLevelThis,
      strict,
      strictMode,
      noInterop,
      importInterop,
      lazy = false,
      allowCommonJSExports = true,
      loose = false
    } = options;
    const constantReexports = (_api$assumption = api.assumption("constantReexports")) != null ? _api$assumption : loose;
    const enumerableModuleMeta = (_api$assumption2 = api.assumption("enumerableModuleMeta")) != null ? _api$assumption2 : loose;
    const noIncompleteNsImportDetection = (_api$assumption3 = api.assumption("noIncompleteNsImportDetection")) != null ? _api$assumption3 : false;
    if (typeof lazy !== "boolean" && typeof lazy !== "function" && (!Array.isArray(lazy) || !lazy.every(item => typeof item === "string"))) {
      throw new Error(`.lazy must be a boolean, array of strings, or a function`);
    }
    if (typeof strictNamespace !== "boolean") {
      throw new Error(`.strictNamespace must be a boolean, or undefined`);
    }
    if (typeof mjsStrictNamespace !== "boolean") {
      throw new Error(`.mjsStrictNamespace must be a boolean, or undefined`);
    }
    const getAssertion = localName => _core.template.expression.ast`
    (function(){
      throw new Error(
        "The CommonJS '" + "${localName}" + "' variable is not available in ES6 modules." +
        "Consider setting setting sourceType:script or sourceType:unambiguous in your " +
        "Babel config for this file.");
    })()
  `;
    const moduleExportsVisitor = {
      ReferencedIdentifier(path) {
        const localName = path.node.name;
        if (localName !== "module" && localName !== "exports") return;
        const localBinding = path.scope.getBinding(localName);
        const rootBinding = this.scope.getBinding(localName);
        if (rootBinding !== localBinding || path.parentPath.isObjectProperty({
          value: path.node
        }) && path.parentPath.parentPath.isObjectPattern() || path.parentPath.isAssignmentExpression({
          left: path.node
        }) || path.isAssignmentExpression({
          left: path.node
        })) {
          return;
        }
        path.replaceWith(getAssertion(localName));
      },
      UpdateExpression(path) {
        const arg = path.get("argument");
        if (!arg.isIdentifier()) return;
        const localName = arg.node.name;
        if (localName !== "module" && localName !== "exports") return;
        const localBinding = path.scope.getBinding(localName);
        const rootBinding = this.scope.getBinding(localName);
        if (rootBinding !== localBinding) return;
        path.replaceWith(_core.types.assignmentExpression(path.node.operator[0] + "=", arg.node, getAssertion(localName)));
      },
      AssignmentExpression(path) {
        const left = path.get("left");
        if (left.isIdentifier()) {
          const localName = left.node.name;
          if (localName !== "module" && localName !== "exports") return;
          const localBinding = path.scope.getBinding(localName);
          const rootBinding = this.scope.getBinding(localName);
          if (rootBinding !== localBinding) return;
          const right = path.get("right");
          right.replaceWith(_core.types.sequenceExpression([right.node, getAssertion(localName)]));
        } else if (left.isPattern()) {
          const ids = left.getOuterBindingIdentifiers();
          const localName = Object.keys(ids).find(localName => {
            if (localName !== "module" && localName !== "exports") return false;
            return this.scope.getBinding(localName) === path.scope.getBinding(localName);
          });
          if (localName) {
            const right = path.get("right");
            right.replaceWith(_core.types.sequenceExpression([right.node, getAssertion(localName)]));
          }
        }
      }
    };
    return {
      name: "transform-modules-commonjs",
      pre() {
        this.file.set("@babel/plugin-transform-modules-*", "commonjs");
        if (lazy) (0, _hooks.defineCommonJSHook)(this.file, (0, _lazy.lazyImportsHook)(lazy));
      },
      visitor: {
        ["CallExpression" + (api.types.importExpression ? "|ImportExpression" : "")](path) {
          if (!this.file.has("@babel/plugin-proposal-dynamic-import")) return;
          if (path.isCallExpression() && !_core.types.isImport(path.node.callee)) return;
          let {
            scope
          } = path;
          do {
            scope.rename("require");
          } while (scope = scope.parent);
          (0, _dynamicImport.transformDynamicImport)(path, noInterop, this.file);
        },
        Program: {
          exit(path, state) {
            if (!(0, _helperModuleTransforms.isModule)(path)) return;
            path.scope.rename("exports");
            path.scope.rename("module");
            path.scope.rename("require");
            path.scope.rename("__filename");
            path.scope.rename("__dirname");
            if (!allowCommonJSExports) {
              {
                (0, _helperSimpleAccess.default)(path, new Set(["module", "exports"]), false);
              }
              path.traverse(moduleExportsVisitor, {
                scope: path.scope
              });
            }
            let moduleName = (0, _helperModuleTransforms.getModuleName)(this.file.opts, options);
            if (moduleName) moduleName = _core.types.stringLiteral(moduleName);
            const hooks = (0, _hooks.makeInvokers)(this.file);
            const {
              meta,
              headers
            } = (0, _helperModuleTransforms.rewriteModuleStatementsAndPrepareHeader)(path, {
              exportName: "exports",
              constantReexports,
              enumerableModuleMeta,
              strict,
              strictMode,
              allowTopLevelThis,
              noInterop,
              importInterop,
              wrapReference: hooks.wrapReference,
              getWrapperPayload: hooks.getWrapperPayload,
              esNamespaceOnly: typeof state.filename === "string" && /\.mjs$/.test(state.filename) ? mjsStrictNamespace : strictNamespace,
              noIncompleteNsImportDetection,
              filename: this.file.opts.filename
            });
            for (const [source, metadata] of meta.source) {
              const loadExpr = _core.types.callExpression(_core.types.identifier("require"), [_core.types.stringLiteral(source)]);
              let header;
              if ((0, _helperModuleTransforms.isSideEffectImport)(metadata)) {
                if (lazy && metadata.wrap === "function") {
                  throw new Error("Assertion failure");
                }
                header = _core.types.expressionStatement(loadExpr);
              } else {
                var _header;
                const init = (0, _helperModuleTransforms.wrapInterop)(path, loadExpr, metadata.interop) || loadExpr;
                if (metadata.wrap) {
                  const res = hooks.buildRequireWrapper(metadata.name, init, metadata.wrap, metadata.referenced);
                  if (res === false) continue;else header = res;
                }
                (_header = header) != null ? _header : header = _core.template.statement.ast`
                var ${metadata.name} = ${init};
              `;
              }
              header.loc = metadata.loc;
              headers.push(header);
              headers.push(...(0, _helperModuleTransforms.buildNamespaceInitStatements)(meta, metadata, constantReexports, hooks.wrapReference));
            }
            (0, _helperModuleTransforms.ensureStatementsHoisted)(headers);
            path.unshiftContainer("body", headers);
            path.get("body").forEach(path => {
              if (!headers.includes(path.node)) return;
              if (path.isVariableDeclaration()) {
                path.scope.registerDeclaration(path);
              }
            });
          }
        }
      }
    };
  });
  return exports$b;
}

var exports$a = {},
  _dewExec$9 = false;
function dew$9() {
  if (_dewExec$9) return exports$a;
  _dewExec$9 = true;
  Object.defineProperty(exports$a, "__esModule", {
    value: true
  });
  var helperPluginUtils = dew$x();
  var transformTypeScript = dew$f();
  dew$e();
  var transformModulesCommonJS = dew$a();
  var helperValidatorOption = dew$1a();
  function _interopDefault(e) {
    return e && e.__esModule ? e : {
      default: e
    };
  }
  var transformTypeScript__default = /*#__PURE__*/_interopDefault(transformTypeScript);
  var transformModulesCommonJS__default = /*#__PURE__*/_interopDefault(transformModulesCommonJS);
  const v = new helperValidatorOption.OptionValidator("@babel/preset-typescript");
  function normalizeOptions(options = {}) {
    let {
      allowNamespaces = true,
      jsxPragma,
      onlyRemoveTypeImports
    } = options;
    const TopLevelOptions = {
      ignoreExtensions: "ignoreExtensions",
      allowNamespaces: "allowNamespaces",
      disallowAmbiguousJSXLike: "disallowAmbiguousJSXLike",
      jsxPragma: "jsxPragma",
      jsxPragmaFrag: "jsxPragmaFrag",
      onlyRemoveTypeImports: "onlyRemoveTypeImports",
      optimizeConstEnums: "optimizeConstEnums",
      rewriteImportExtensions: "rewriteImportExtensions",
      allExtensions: "allExtensions",
      isTSX: "isTSX"
    };
    const jsxPragmaFrag = v.validateStringOption(TopLevelOptions.jsxPragmaFrag, options.jsxPragmaFrag, "React.Fragment");
    {
      var allExtensions = v.validateBooleanOption(TopLevelOptions.allExtensions, options.allExtensions, false);
      var isTSX = v.validateBooleanOption(TopLevelOptions.isTSX, options.isTSX, false);
      if (isTSX) {
        v.invariant(allExtensions, "isTSX:true requires allExtensions:true");
      }
    }
    const ignoreExtensions = v.validateBooleanOption(TopLevelOptions.ignoreExtensions, options.ignoreExtensions, false);
    const disallowAmbiguousJSXLike = v.validateBooleanOption(TopLevelOptions.disallowAmbiguousJSXLike, options.disallowAmbiguousJSXLike, false);
    if (disallowAmbiguousJSXLike) {
      {
        v.invariant(allExtensions, "disallowAmbiguousJSXLike:true requires allExtensions:true");
      }
    }
    const optimizeConstEnums = v.validateBooleanOption(TopLevelOptions.optimizeConstEnums, options.optimizeConstEnums, false);
    const rewriteImportExtensions = v.validateBooleanOption(TopLevelOptions.rewriteImportExtensions, options.rewriteImportExtensions, false);
    const normalized = {
      ignoreExtensions,
      allowNamespaces,
      disallowAmbiguousJSXLike,
      jsxPragma,
      jsxPragmaFrag,
      onlyRemoveTypeImports,
      optimizeConstEnums,
      rewriteImportExtensions
    };
    {
      normalized.allExtensions = allExtensions;
      normalized.isTSX = isTSX;
    }
    return normalized;
  }
  var pluginRewriteTSImports = helperPluginUtils.declare(function ({
    types: t
  }) {
    return {
      name: "preset-typescript/plugin-rewrite-ts-imports",
      visitor: {
        "ImportDeclaration|ExportAllDeclaration|ExportNamedDeclaration"({
          node
        }) {
          const {
            source
          } = node;
          const kind = t.isImportDeclaration(node) ? node.importKind : node.exportKind;
          if (kind === "value" && source && /[\\/]/.test(source.value)) {
            source.value = source.value.replace(/(\.[mc]?)ts$/, "$1js").replace(/\.tsx$/, ".js");
          }
        }
      }
    };
  });
  var index = helperPluginUtils.declarePreset((api, opts) => {
    api.assertVersion(7);
    const {
      allExtensions,
      ignoreExtensions,
      allowNamespaces,
      disallowAmbiguousJSXLike,
      isTSX,
      jsxPragma,
      jsxPragmaFrag,
      onlyRemoveTypeImports,
      optimizeConstEnums,
      rewriteImportExtensions
    } = normalizeOptions(opts);
    const pluginOptions = disallowAmbiguousJSXLike => ({
      allowDeclareFields: opts.allowDeclareFields,
      allowNamespaces,
      disallowAmbiguousJSXLike,
      jsxPragma,
      jsxPragmaFrag,
      onlyRemoveTypeImports,
      optimizeConstEnums
    });
    const getPlugins = (isTSX, disallowAmbiguousJSXLike) => {
      {
        return [[transformTypeScript__default.default, Object.assign({
          isTSX
        }, pluginOptions(disallowAmbiguousJSXLike))]];
      }
    };
    const disableExtensionDetect = allExtensions || ignoreExtensions;
    return {
      plugins: rewriteImportExtensions ? [pluginRewriteTSImports] : [],
      overrides: disableExtensionDetect ? [{
        plugins: getPlugins(isTSX, disallowAmbiguousJSXLike)
      }] : [{
        test: /\.ts$/,
        plugins: getPlugins(false, false)
      }, {
        test: /\.mts$/,
        sourceType: "module",
        plugins: getPlugins(false, true)
      }, {
        test: /\.cts$/,
        sourceType: "unambiguous",
        plugins: [[transformModulesCommonJS__default.default, {
          allowTopLevelThis: true
        }], [transformTypeScript__default.default, pluginOptions(true)]]
      }, {
        test: /\.tsx$/,
        plugins: getPlugins(true, false)
      }]
    };
  });
  exports$a.default = index;
  return exports$a;
}

var exports$9 = {},
  _dewExec$8 = false;
function dew$8() {
  if (_dewExec$8) return exports$9;
  _dewExec$8 = true;
  var _nodeRequire = function () {
    var Module = _nodeModule.Module;
    if (Module) {
      var m = new Module("");
      m.filename = import.meta.url.substr(7 + (Module._nodeModulePaths("/")[0].length > 13));
      m.paths = Module._nodeModulePaths(m.filename.substr(0, m.filename.lastIndexOf("/")));
      return Object.assign(m.require.bind(m), {
        resolve: function (id) {
          return Module._resolveFilename(id, m);
        }
      });
    } else {
      return function _nodeRequire(id) {
        var e = new Error("Cannot find module '" + id + "'");
        e.code = "MODULE_NOT_FOUND";
        throw e;
      };
    }
  }();
  var process = _nodeProcess;
  Object.defineProperty(exports$9, "__esModule", {
    value: true
  });
  exports$9.default = loadCodeDefault;
  exports$9.supportsESM = void 0;
  var _async = dew$1I();
  function _path() {
    const data = _path2;
    _path = function () {
      return data;
    };
    return data;
  }
  function _url() {
    const data = _url2;
    _url = function () {
      return data;
    };
    return data;
  }
  function _semver() {
    const data = dew$1Z();
    _semver = function () {
      return data;
    };
    return data;
  }
  function _debug() {
    const data = dew$2P();
    _debug = function () {
      return data;
    };
    return data;
  }
  var _rewriteStackTrace = dew$1D();
  var _configError = dew$1C();
  dew$z();
  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
      var info = gen[key](arg);
      var value = info.value;
    } catch (error) {
      reject(error);
      return;
    }
    if (info.done) {
      resolve(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }
  function _asyncToGenerator(fn) {
    return function () {
      var self = this,
        args = arguments;
      return new Promise(function (resolve, reject) {
        var gen = fn.apply(self, args);
        function _next(value) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
        }
        function _throw(err) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
        }
        _next(undefined);
      });
    };
  }
  const debug = _debug()("babel:config:loading:files:module-types");
  {
    try {
      var import_ = dew$y();
    } catch (_unused) {}
  }
  exports$9.supportsESM = _semver().satisfies(process.versions.node, "^12.17 || >=13.2");
  const LOADING_CJS_FILES = new Set();
  function loadCjsDefault(filepath) {
    if (LOADING_CJS_FILES.has(filepath)) {
      debug("Auto-ignoring usage of config %o.", filepath);
      return {};
    }
    let module;
    try {
      LOADING_CJS_FILES.add(filepath);
      module = (0, _rewriteStackTrace.endHiddenCallStack)(_nodeRequire)(filepath);
    } finally {
      LOADING_CJS_FILES.delete(filepath);
    }
    {
      var _module;
      return (_module = module) != null && _module.__esModule ? module.default || (arguments[1] ? module : undefined) : module;
    }
  }
  const loadMjsDefault = (0, _rewriteStackTrace.endHiddenCallStack)(function () {
    var _loadMjsDefault = _asyncToGenerator(function* (filepath) {
      const url = (0, _url().pathToFileURL)(filepath).toString();
      {
        if (!import_) {
          throw new _configError.default("Internal error: Native ECMAScript modules aren't supported by this platform.\n", filepath);
        }
        return (yield import_(url)).default;
      }
    });
    function loadMjsDefault(_x) {
      return _loadMjsDefault.apply(this, arguments);
    }
    return loadMjsDefault;
  }());
  function* loadCodeDefault(filepath, asyncError) {
    switch (_path().extname(filepath)) {
      case ".cjs":
        {
          return loadCjsDefault(filepath, arguments[2]);
        }
      case ".mjs":
        break;
      case ".cts":
        return loadCtsDefault(filepath);
      default:
        try {
          {
            return loadCjsDefault(filepath, arguments[2]);
          }
        } catch (e) {
          if (e.code !== "ERR_REQUIRE_ESM") throw e;
        }
    }
    if (yield* (0, _async.isAsync)()) {
      return yield* (0, _async.waitFor)(loadMjsDefault(filepath));
    }
    throw new _configError.default(asyncError, filepath);
  }
  function loadCtsDefault(filepath) {
    const hasTsSupport = !!({}[".ts"] || {}[".cts"] || {}[".mts"]);
    if (!hasTsSupport) {
      ({
        babelrc: false,
        configFile: false,
        sourceType: "unambiguous",
        sourceMaps: "inline",
        sourceFileName: _path().basename(filepath),
        presets: [[getTSPreset(filepath), Object.assign({
          onlyRemoveTypeImports: true,
          optimizeConstEnums: true
        }, {
          allowDeclareFields: true
        })]]
      });
    }
    try {
      return loadCjsDefault(filepath);
    } finally {
    }
  }
  function getTSPreset(filepath) {
    try {
      return dew$9();
    } catch (error) {
      if (error.code !== "MODULE_NOT_FOUND") throw error;
      let message = "You appear to be using a .cts file as Babel configuration, but the `@babel/preset-typescript` package was not found: please install it!";
      {
        if (process.versions.pnp) {
          message += `
If you are using Yarn Plug'n'Play, you may also need to add the following configuration to your .yarnrc.yml file:

packageExtensions:
\t"@babel/core@*":
\t\tpeerDependencies:
\t\t\t"@babel/preset-typescript": "*"
`;
        }
      }
      throw new _configError.default(message, filepath);
    }
  }
  return exports$9;
}

var exports$8 = {},
  _dewExec$7 = false;
function dew$7() {
  if (_dewExec$7) return exports$8;
  _dewExec$7 = true;
  var _nodeRequire = function () {
    var Module = _nodeModule.Module;
    if (Module) {
      var m = new Module("");
      m.filename = import.meta.url.substr(7 + (Module._nodeModulePaths("/")[0].length > 13));
      m.paths = Module._nodeModulePaths(m.filename.substr(0, m.filename.lastIndexOf("/")));
      return Object.assign(m.require.bind(m), {
        resolve: function (id) {
          return Module._resolveFilename(id, m);
        }
      });
    } else {
      return function _nodeRequire(id) {
        var e = new Error("Cannot find module '" + id + "'");
        e.code = "MODULE_NOT_FOUND";
        throw e;
      };
    }
  }();
  var process = _nodeProcess;
  Object.defineProperty(exports$8, "__esModule", {
    value: true
  });
  exports$8.ROOT_CONFIG_FILENAMES = void 0;
  exports$8.findConfigUpwards = findConfigUpwards;
  exports$8.findRelativeConfig = findRelativeConfig;
  exports$8.findRootConfig = findRootConfig;
  exports$8.loadConfig = loadConfig;
  exports$8.resolveShowConfigPath = resolveShowConfigPath;
  function _debug() {
    const data = dew$2P();
    _debug = function () {
      return data;
    };
    return data;
  }
  function _fs() {
    const data = _fs2;
    _fs = function () {
      return data;
    };
    return data;
  }
  function _path() {
    const data = _path2;
    _path = function () {
      return data;
    };
    return data;
  }
  function _json() {
    const data = dew$1w();
    _json = function () {
      return data;
    };
    return data;
  }
  function _gensync() {
    const data = dew$1J();
    _gensync = function () {
      return data;
    };
    return data;
  }
  var _caching = dew$1G();
  var _configApi = dew$1v();
  var _utils = dew$1E();
  var _moduleTypes = dew$8();
  var _patternToRegex = dew$T();
  var _configError = dew$1C();
  var fs = dew$1F();
  var _rewriteStackTrace = dew$1D();
  const debug = _debug()("babel:config:loading:files:configuration");
  const ROOT_CONFIG_FILENAMES = exports$8.ROOT_CONFIG_FILENAMES = ["babel.config.js", "babel.config.cjs", "babel.config.mjs", "babel.config.json", "babel.config.cts"];
  const RELATIVE_CONFIG_FILENAMES = [".babelrc", ".babelrc.js", ".babelrc.cjs", ".babelrc.mjs", ".babelrc.json", ".babelrc.cts"];
  const BABELIGNORE_FILENAME = ".babelignore";
  const runConfig = (0, _caching.makeWeakCache)(function* runConfig(options, cache) {
    yield* [];
    return {
      options: (0, _rewriteStackTrace.endHiddenCallStack)(options)((0, _configApi.makeConfigAPI)(cache)),
      cacheNeedsConfiguration: !cache.configured()
    };
  });
  function* readConfigCode(filepath, data) {
    if (!_fs().existsSync(filepath)) return null;
    let options = yield* (0, _moduleTypes.default)(filepath, "You appear to be using a native ECMAScript module configuration " + "file, which is only supported when running Babel asynchronously.");
    let cacheNeedsConfiguration = false;
    if (typeof options === "function") {
      ({
        options,
        cacheNeedsConfiguration
      } = yield* runConfig(options, data));
    }
    if (!options || typeof options !== "object" || Array.isArray(options)) {
      throw new _configError.default(`Configuration should be an exported JavaScript object.`, filepath);
    }
    if (typeof options.then === "function") {
      options.catch == null || options.catch(() => {});
      throw new _configError.default(`You appear to be using an async configuration, ` + `which your current version of Babel does not support. ` + `We may add support for this in the future, ` + `but if you're on the most recent version of @babel/core and still ` + `seeing this error, then you'll need to synchronously return your config.`, filepath);
    }
    if (cacheNeedsConfiguration) throwConfigError(filepath);
    return buildConfigFileObject(options, filepath);
  }
  const cfboaf = new WeakMap();
  function buildConfigFileObject(options, filepath) {
    let configFilesByFilepath = cfboaf.get(options);
    if (!configFilesByFilepath) {
      cfboaf.set(options, configFilesByFilepath = new Map());
    }
    let configFile = configFilesByFilepath.get(filepath);
    if (!configFile) {
      configFile = {
        filepath,
        dirname: _path().dirname(filepath),
        options
      };
      configFilesByFilepath.set(filepath, configFile);
    }
    return configFile;
  }
  const packageToBabelConfig = (0, _caching.makeWeakCacheSync)(file => {
    const babel = file.options["babel"];
    if (typeof babel === "undefined") return null;
    if (typeof babel !== "object" || Array.isArray(babel) || babel === null) {
      throw new _configError.default(`.babel property must be an object`, file.filepath);
    }
    return {
      filepath: file.filepath,
      dirname: file.dirname,
      options: babel
    };
  });
  const readConfigJSON5 = (0, _utils.makeStaticFileCache)((filepath, content) => {
    let options;
    try {
      options = _json().parse(content);
    } catch (err) {
      throw new _configError.default(`Error while parsing config - ${err.message}`, filepath);
    }
    if (!options) throw new _configError.default(`No config detected`, filepath);
    if (typeof options !== "object") {
      throw new _configError.default(`Config returned typeof ${typeof options}`, filepath);
    }
    if (Array.isArray(options)) {
      throw new _configError.default(`Expected config object but found array`, filepath);
    }
    delete options["$schema"];
    return {
      filepath,
      dirname: _path().dirname(filepath),
      options
    };
  });
  const readIgnoreConfig = (0, _utils.makeStaticFileCache)((filepath, content) => {
    const ignoreDir = _path().dirname(filepath);
    const ignorePatterns = content.split("\n").map(line => line.replace(/#.*$/, "").trim()).filter(line => !!line);
    for (const pattern of ignorePatterns) {
      if (pattern[0] === "!") {
        throw new _configError.default(`Negation of file paths is not supported.`, filepath);
      }
    }
    return {
      filepath,
      dirname: _path().dirname(filepath),
      ignore: ignorePatterns.map(pattern => (0, _patternToRegex.default)(pattern, ignoreDir))
    };
  });
  function findConfigUpwards(rootDir) {
    let dirname = rootDir;
    for (;;) {
      for (const filename of ROOT_CONFIG_FILENAMES) {
        if (_fs().existsSync(_path().join(dirname, filename))) {
          return dirname;
        }
      }
      const nextDir = _path().dirname(dirname);
      if (dirname === nextDir) break;
      dirname = nextDir;
    }
    return null;
  }
  function* findRelativeConfig(packageData, envName, caller) {
    let config = null;
    let ignore = null;
    const dirname = _path().dirname(packageData.filepath);
    for (const loc of packageData.directories) {
      if (!config) {
        var _packageData$pkg;
        config = yield* loadOneConfig(RELATIVE_CONFIG_FILENAMES, loc, envName, caller, ((_packageData$pkg = packageData.pkg) == null ? void 0 : _packageData$pkg.dirname) === loc ? packageToBabelConfig(packageData.pkg) : null);
      }
      if (!ignore) {
        const ignoreLoc = _path().join(loc, BABELIGNORE_FILENAME);
        ignore = yield* readIgnoreConfig(ignoreLoc);
        if (ignore) {
          debug("Found ignore %o from %o.", ignore.filepath, dirname);
        }
      }
    }
    return {
      config,
      ignore
    };
  }
  function findRootConfig(dirname, envName, caller) {
    return loadOneConfig(ROOT_CONFIG_FILENAMES, dirname, envName, caller);
  }
  function* loadOneConfig(names, dirname, envName, caller, previousConfig = null) {
    const configs = yield* _gensync().all(names.map(filename => readConfig(_path().join(dirname, filename), envName, caller)));
    const config = configs.reduce((previousConfig, config) => {
      if (config && previousConfig) {
        throw new _configError.default(`Multiple configuration files found. Please remove one:\n` + ` - ${_path().basename(previousConfig.filepath)}\n` + ` - ${config.filepath}\n` + `from ${dirname}`);
      }
      return config || previousConfig;
    }, previousConfig);
    if (config) {
      debug("Found configuration %o from %o.", config.filepath, dirname);
    }
    return config;
  }
  function* loadConfig(name, dirname, envName, caller) {
    const filepath = (((v, w) => (v = v.split("."), w = w.split("."), +v[0] > +w[0] || v[0] == w[0] && +v[1] >= +w[1]))(process.versions.node, "8.9") ? _nodeRequire.resolve : (r, {
      paths: [b]
    }, M = _nodeModule) => {
      let f = M._findPath(r, M._nodeModulePaths(b).concat(b));
      if (f) return f;
      f = new Error(`Cannot resolve module '${r}'`);
      f.code = "MODULE_NOT_FOUND";
      throw f;
    })(name, {
      paths: [dirname]
    });
    const conf = yield* readConfig(filepath, envName, caller);
    if (!conf) {
      throw new _configError.default(`Config file contains no configuration data`, filepath);
    }
    debug("Loaded config %o from %o.", name, dirname);
    return conf;
  }
  function readConfig(filepath, envName, caller) {
    const ext = _path().extname(filepath);
    switch (ext) {
      case ".js":
      case ".cjs":
      case ".mjs":
      case ".cts":
        return readConfigCode(filepath, {
          envName,
          caller
        });
      default:
        return readConfigJSON5(filepath);
    }
  }
  function* resolveShowConfigPath(dirname) {
    const targetPath = process.env.BABEL_SHOW_CONFIG_FOR;
    if (targetPath != null) {
      const absolutePath = _path().resolve(dirname, targetPath);
      const stats = yield* fs.stat(absolutePath);
      if (!stats.isFile()) {
        throw new Error(`${absolutePath}: BABEL_SHOW_CONFIG_FOR must refer to a regular file, directories are not supported.`);
      }
      return absolutePath;
    }
    return null;
  }
  function throwConfigError(filepath) {
    throw new _configError.default(`\
Caching was left unconfigured. Babel's plugins, presets, and .babelrc.js files can be configured
for various types of caching, using the first param of their handler functions:

module.exports = function(api) {
  // The API exposes the following:

  // Cache the returned value forever and don't call this function again.
  api.cache(true);

  // Don't cache at all. Not recommended because it will be very slow.
  api.cache(false);

  // Cached based on the value of some function. If this function returns a value different from
  // a previously-encountered value, the plugins will re-evaluate.
  var env = api.cache(() => process.env.NODE_ENV);

  // If testing for a specific env, we recommend specifics to avoid instantiating a plugin for
  // any possible NODE_ENV value that might come up during plugin execution.
  var isProd = api.cache(() => process.env.NODE_ENV === "production");

  // .cache(fn) will perform a linear search though instances to find the matching plugin based
  // based on previous instantiated plugins. If you want to recreate the plugin and discard the
  // previous instance whenever something changes, you may use:
  var isProd = api.cache.invalidate(() => process.env.NODE_ENV === "production");

  // Note, we also expose the following more-verbose versions of the above examples:
  api.cache.forever(); // api.cache(true)
  api.cache.never();   // api.cache(false)
  api.cache.using(fn); // api.cache(fn)

  // Return the value that will be cached.
  return { };
};`, filepath);
  }
  return exports$8;
}

var exports$7 = {},
  _dewExec$6 = false;
function dew$6() {
  if (_dewExec$6) return exports$7;
  _dewExec$6 = true;
  Object.defineProperty(exports$7, "__esModule", {
    value: true
  });
  exports$7.moduleResolve = moduleResolve;
  exports$7.resolve = resolve;
  function _assert() {
    const data = _assert2;
    _assert = function () {
      return data;
    };
    return data;
  }
  function _fs() {
    const data = _interopRequireWildcard(_fs2, true);
    _fs = function () {
      return data;
    };
    return data;
  }
  function _process() {
    const data = _nodeProcess;
    _process = function () {
      return data;
    };
    return data;
  }
  function _url() {
    const data = _url2;
    _url = function () {
      return data;
    };
    return data;
  }
  function _path() {
    const data = _path2;
    _path = function () {
      return data;
    };
    return data;
  }
  function _module() {
    const data = _nodeModule;
    _module = function () {
      return data;
    };
    return data;
  }
  function _v() {
    const data = _v2;
    _v = function () {
      return data;
    };
    return data;
  }
  function _util$1() {
    const data = _util;
    _util$1 = function () {
      return data;
    };
    return data;
  }
  function _getRequireWildcardCache(e) {
    if ("function" != typeof WeakMap) return null;
    var r = new WeakMap(),
      t = new WeakMap();
    return (_getRequireWildcardCache = function (e) {
      return e ? t : r;
    })(e);
  }
  function _interopRequireWildcard(e, r) {
    if (null === e || "object" != typeof e && "function" != typeof e) return {
      default: e
    };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e)) return t.get(e);
    var n = {
        __proto__: null
      },
      a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) {
      var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
      i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
    }
    return n.default = e, t && t.set(e, n), n;
  }
  const own$1 = {}.hasOwnProperty;
  const classRegExp = /^([A-Z][a-z\d]*)+$/;
  const kTypes = new Set(["string", "function", "number", "object", "Function", "Object", "boolean", "bigint", "symbol"]);
  const codes = {};
  function formatList(array, type = "and") {
    return array.length < 3 ? array.join(` ${type} `) : `${array.slice(0, -1).join(", ")}, ${type} ${array[array.length - 1]}`;
  }
  const messages = new Map();
  const nodeInternalPrefix = "__node_internal_";
  let userStackTraceLimit;
  codes.ERR_INVALID_ARG_TYPE = createError("ERR_INVALID_ARG_TYPE", (name, expected, actual) => {
    _assert()(typeof name === "string", "'name' must be a string");
    if (!Array.isArray(expected)) {
      expected = [expected];
    }
    let message = "The ";
    if (name.endsWith(" argument")) {
      message += `${name} `;
    } else {
      const type = name.includes(".") ? "property" : "argument";
      message += `"${name}" ${type} `;
    }
    message += "must be ";
    const types = [];
    const instances = [];
    const other = [];
    for (const value of expected) {
      _assert()(typeof value === "string", "All expected entries have to be of type string");
      if (kTypes.has(value)) {
        types.push(value.toLowerCase());
      } else if (classRegExp.exec(value) === null) {
        _assert()(value !== "object", "The value \"object\" should be written as \"Object\"");
        other.push(value);
      } else {
        instances.push(value);
      }
    }
    if (instances.length > 0) {
      const pos = types.indexOf("object");
      if (pos !== -1) {
        types.slice(pos, 1);
        instances.push("Object");
      }
    }
    if (types.length > 0) {
      message += `${types.length > 1 ? "one of type" : "of type"} ${formatList(types, "or")}`;
      if (instances.length > 0 || other.length > 0) message += " or ";
    }
    if (instances.length > 0) {
      message += `an instance of ${formatList(instances, "or")}`;
      if (other.length > 0) message += " or ";
    }
    if (other.length > 0) {
      if (other.length > 1) {
        message += `one of ${formatList(other, "or")}`;
      } else {
        if (other[0].toLowerCase() !== other[0]) message += "an ";
        message += `${other[0]}`;
      }
    }
    message += `. Received ${determineSpecificType(actual)}`;
    return message;
  }, TypeError);
  codes.ERR_INVALID_MODULE_SPECIFIER = createError("ERR_INVALID_MODULE_SPECIFIER", (request, reason, base = undefined) => {
    return `Invalid module "${request}" ${reason}${base ? ` imported from ${base}` : ""}`;
  }, TypeError);
  codes.ERR_INVALID_PACKAGE_CONFIG = createError("ERR_INVALID_PACKAGE_CONFIG", (path, base, message) => {
    return `Invalid package config ${path}${base ? ` while importing ${base}` : ""}${message ? `. ${message}` : ""}`;
  }, Error);
  codes.ERR_INVALID_PACKAGE_TARGET = createError("ERR_INVALID_PACKAGE_TARGET", (packagePath, key, target, isImport = false, base = undefined) => {
    const relatedError = typeof target === "string" && !isImport && target.length > 0 && !target.startsWith("./");
    if (key === ".") {
      _assert()(isImport === false);
      return `Invalid "exports" main target ${JSON.stringify(target)} defined ` + `in the package config ${packagePath}package.json${base ? ` imported from ${base}` : ""}${relatedError ? "; targets must start with \"./\"" : ""}`;
    }
    return `Invalid "${isImport ? "imports" : "exports"}" target ${JSON.stringify(target)} defined for '${key}' in the package config ${packagePath}package.json${base ? ` imported from ${base}` : ""}${relatedError ? "; targets must start with \"./\"" : ""}`;
  }, Error);
  codes.ERR_MODULE_NOT_FOUND = createError("ERR_MODULE_NOT_FOUND", (path, base, exactUrl = false) => {
    return `Cannot find ${exactUrl ? "module" : "package"} '${path}' imported from ${base}`;
  }, Error);
  codes.ERR_NETWORK_IMPORT_DISALLOWED = createError("ERR_NETWORK_IMPORT_DISALLOWED", "import of '%s' by %s is not supported: %s", Error);
  codes.ERR_PACKAGE_IMPORT_NOT_DEFINED = createError("ERR_PACKAGE_IMPORT_NOT_DEFINED", (specifier, packagePath, base) => {
    return `Package import specifier "${specifier}" is not defined${packagePath ? ` in package ${packagePath}package.json` : ""} imported from ${base}`;
  }, TypeError);
  codes.ERR_PACKAGE_PATH_NOT_EXPORTED = createError("ERR_PACKAGE_PATH_NOT_EXPORTED", (packagePath, subpath, base = undefined) => {
    if (subpath === ".") return `No "exports" main defined in ${packagePath}package.json${base ? ` imported from ${base}` : ""}`;
    return `Package subpath '${subpath}' is not defined by "exports" in ${packagePath}package.json${base ? ` imported from ${base}` : ""}`;
  }, Error);
  codes.ERR_UNSUPPORTED_DIR_IMPORT = createError("ERR_UNSUPPORTED_DIR_IMPORT", "Directory import '%s' is not supported " + "resolving ES modules imported from %s", Error);
  codes.ERR_UNSUPPORTED_RESOLVE_REQUEST = createError("ERR_UNSUPPORTED_RESOLVE_REQUEST", "Failed to resolve module specifier \"%s\" from \"%s\": Invalid relative URL or base scheme is not hierarchical.", TypeError);
  codes.ERR_UNKNOWN_FILE_EXTENSION = createError("ERR_UNKNOWN_FILE_EXTENSION", (extension, path) => {
    return `Unknown file extension "${extension}" for ${path}`;
  }, TypeError);
  codes.ERR_INVALID_ARG_VALUE = createError("ERR_INVALID_ARG_VALUE", (name, value, reason = "is invalid") => {
    let inspected = (0, _util$1().inspect)(value);
    if (inspected.length > 128) {
      inspected = `${inspected.slice(0, 128)}...`;
    }
    const type = name.includes(".") ? "property" : "argument";
    return `The ${type} '${name}' ${reason}. Received ${inspected}`;
  }, TypeError);
  function createError(sym, value, constructor) {
    messages.set(sym, value);
    return makeNodeErrorWithCode(constructor, sym);
  }
  function makeNodeErrorWithCode(Base, key) {
    return NodeError;
    function NodeError(...parameters) {
      const limit = Error.stackTraceLimit;
      if (isErrorStackTraceLimitWritable()) Error.stackTraceLimit = 0;
      const error = new Base();
      if (isErrorStackTraceLimitWritable()) Error.stackTraceLimit = limit;
      const message = getMessage(key, parameters, error);
      Object.defineProperties(error, {
        message: {
          value: message,
          enumerable: false,
          writable: true,
          configurable: true
        },
        toString: {
          value() {
            return `${this.name} [${key}]: ${this.message}`;
          },
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
      captureLargerStackTrace(error);
      error.code = key;
      return error;
    }
  }
  function isErrorStackTraceLimitWritable() {
    try {
      if (_v().startupSnapshot.isBuildingSnapshot()) {
        return false;
      }
    } catch (_unused) {}
    const desc = Object.getOwnPropertyDescriptor(Error, "stackTraceLimit");
    if (desc === undefined) {
      return Object.isExtensible(Error);
    }
    return own$1.call(desc, "writable") && desc.writable !== undefined ? desc.writable : desc.set !== undefined;
  }
  function hideStackFrames(wrappedFunction) {
    const hidden = nodeInternalPrefix + wrappedFunction.name;
    Object.defineProperty(wrappedFunction, "name", {
      value: hidden
    });
    return wrappedFunction;
  }
  const captureLargerStackTrace = hideStackFrames(function (error) {
    const stackTraceLimitIsWritable = isErrorStackTraceLimitWritable();
    if (stackTraceLimitIsWritable) {
      userStackTraceLimit = Error.stackTraceLimit;
      Error.stackTraceLimit = Number.POSITIVE_INFINITY;
    }
    Error.captureStackTrace(error);
    if (stackTraceLimitIsWritable) Error.stackTraceLimit = userStackTraceLimit;
    return error;
  });
  function getMessage(key, parameters, self) {
    const message = messages.get(key);
    _assert()(message !== undefined, "expected `message` to be found");
    if (typeof message === "function") {
      _assert()(message.length <= parameters.length, `Code: ${key}; The provided arguments length (${parameters.length}) does not ` + `match the required ones (${message.length}).`);
      return Reflect.apply(message, self, parameters);
    }
    const regex = /%[dfijoOs]/g;
    let expectedLength = 0;
    while (regex.exec(message) !== null) expectedLength++;
    _assert()(expectedLength === parameters.length, `Code: ${key}; The provided arguments length (${parameters.length}) does not ` + `match the required ones (${expectedLength}).`);
    if (parameters.length === 0) return message;
    parameters.unshift(message);
    return Reflect.apply(_util$1().format, null, parameters);
  }
  function determineSpecificType(value) {
    if (value === null || value === undefined) {
      return String(value);
    }
    if (typeof value === "function" && value.name) {
      return `function ${value.name}`;
    }
    if (typeof value === "object") {
      if (value.constructor && value.constructor.name) {
        return `an instance of ${value.constructor.name}`;
      }
      return `${(0, _util$1().inspect)(value, {
        depth: -1
      })}`;
    }
    let inspected = (0, _util$1().inspect)(value, {
      colors: false
    });
    if (inspected.length > 28) {
      inspected = `${inspected.slice(0, 25)}...`;
    }
    return `type ${typeof value} (${inspected})`;
  }
  const hasOwnProperty$1 = {}.hasOwnProperty;
  const {
    ERR_INVALID_PACKAGE_CONFIG: ERR_INVALID_PACKAGE_CONFIG$1
  } = codes;
  const cache = new Map();
  function read(jsonPath, {
    base,
    specifier
  }) {
    const existing = cache.get(jsonPath);
    if (existing) {
      return existing;
    }
    let string;
    try {
      string = _fs().default.readFileSync(_path().toNamespacedPath(jsonPath), "utf8");
    } catch (error) {
      const exception = error;
      if (exception.code !== "ENOENT") {
        throw exception;
      }
    }
    const result = {
      exists: false,
      pjsonPath: jsonPath,
      main: undefined,
      name: undefined,
      type: "none",
      exports: undefined,
      imports: undefined
    };
    if (string !== undefined) {
      let parsed;
      try {
        parsed = JSON.parse(string);
      } catch (error_) {
        const cause = error_;
        const error = new ERR_INVALID_PACKAGE_CONFIG$1(jsonPath, (base ? `"${specifier}" from ` : "") + (0, _url().fileURLToPath)(base || specifier), cause.message);
        error.cause = cause;
        throw error;
      }
      result.exists = true;
      if (hasOwnProperty$1.call(parsed, "name") && typeof parsed.name === "string") {
        result.name = parsed.name;
      }
      if (hasOwnProperty$1.call(parsed, "main") && typeof parsed.main === "string") {
        result.main = parsed.main;
      }
      if (hasOwnProperty$1.call(parsed, "exports")) {
        result.exports = parsed.exports;
      }
      if (hasOwnProperty$1.call(parsed, "imports")) {
        result.imports = parsed.imports;
      }
      if (hasOwnProperty$1.call(parsed, "type") && (parsed.type === "commonjs" || parsed.type === "module")) {
        result.type = parsed.type;
      }
    }
    cache.set(jsonPath, result);
    return result;
  }
  function getPackageScopeConfig(resolved) {
    let packageJSONUrl = new URL("package.json", resolved);
    while (true) {
      const packageJSONPath = packageJSONUrl.pathname;
      if (packageJSONPath.endsWith("node_modules/package.json")) {
        break;
      }
      const packageConfig = read((0, _url().fileURLToPath)(packageJSONUrl), {
        specifier: resolved
      });
      if (packageConfig.exists) {
        return packageConfig;
      }
      const lastPackageJSONUrl = packageJSONUrl;
      packageJSONUrl = new URL("../package.json", packageJSONUrl);
      if (packageJSONUrl.pathname === lastPackageJSONUrl.pathname) {
        break;
      }
    }
    const packageJSONPath = (0, _url().fileURLToPath)(packageJSONUrl);
    return {
      pjsonPath: packageJSONPath,
      exists: false,
      type: "none"
    };
  }
  function getPackageType(url) {
    return getPackageScopeConfig(url).type;
  }
  const {
    ERR_UNKNOWN_FILE_EXTENSION
  } = codes;
  const hasOwnProperty = {}.hasOwnProperty;
  const extensionFormatMap = {
    __proto__: null,
    ".cjs": "commonjs",
    ".js": "module",
    ".json": "json",
    ".mjs": "module"
  };
  function mimeToFormat(mime) {
    if (mime && /\s*(text|application)\/javascript\s*(;\s*charset=utf-?8\s*)?/i.test(mime)) return "module";
    if (mime === "application/json") return "json";
    return null;
  }
  const protocolHandlers = {
    __proto__: null,
    "data:": getDataProtocolModuleFormat,
    "file:": getFileProtocolModuleFormat,
    "http:": getHttpProtocolModuleFormat,
    "https:": getHttpProtocolModuleFormat,
    "node:"() {
      return "builtin";
    }
  };
  function getDataProtocolModuleFormat(parsed) {
    const {
      1: mime
    } = /^([^/]+\/[^;,]+)[^,]*?(;base64)?,/.exec(parsed.pathname) || [null, null, null];
    return mimeToFormat(mime);
  }
  function extname(url) {
    const pathname = url.pathname;
    let index = pathname.length;
    while (index--) {
      const code = pathname.codePointAt(index);
      if (code === 47) {
        return "";
      }
      if (code === 46) {
        return pathname.codePointAt(index - 1) === 47 ? "" : pathname.slice(index);
      }
    }
    return "";
  }
  function getFileProtocolModuleFormat(url, _context, ignoreErrors) {
    const value = extname(url);
    if (value === ".js") {
      const packageType = getPackageType(url);
      if (packageType !== "none") {
        return packageType;
      }
      return "commonjs";
    }
    if (value === "") {
      const packageType = getPackageType(url);
      if (packageType === "none" || packageType === "commonjs") {
        return "commonjs";
      }
      return "module";
    }
    const format = extensionFormatMap[value];
    if (format) return format;
    if (ignoreErrors) {
      return undefined;
    }
    const filepath = (0, _url().fileURLToPath)(url);
    throw new ERR_UNKNOWN_FILE_EXTENSION(value, filepath);
  }
  function getHttpProtocolModuleFormat() {}
  function defaultGetFormatWithoutErrors(url, context) {
    const protocol = url.protocol;
    if (!hasOwnProperty.call(protocolHandlers, protocol)) {
      return null;
    }
    return protocolHandlers[protocol](url, context, true) || null;
  }
  const {
    ERR_INVALID_ARG_VALUE
  } = codes;
  const DEFAULT_CONDITIONS = Object.freeze(["node", "import"]);
  const DEFAULT_CONDITIONS_SET = new Set(DEFAULT_CONDITIONS);
  function getDefaultConditions() {
    return DEFAULT_CONDITIONS;
  }
  function getDefaultConditionsSet() {
    return DEFAULT_CONDITIONS_SET;
  }
  function getConditionsSet(conditions) {
    if (conditions !== undefined && conditions !== getDefaultConditions()) {
      if (!Array.isArray(conditions)) {
        throw new ERR_INVALID_ARG_VALUE("conditions", conditions, "expected an array");
      }
      return new Set(conditions);
    }
    return getDefaultConditionsSet();
  }
  const RegExpPrototypeSymbolReplace = RegExp.prototype[Symbol.replace];
  const {
    ERR_NETWORK_IMPORT_DISALLOWED,
    ERR_INVALID_MODULE_SPECIFIER,
    ERR_INVALID_PACKAGE_CONFIG,
    ERR_INVALID_PACKAGE_TARGET,
    ERR_MODULE_NOT_FOUND,
    ERR_PACKAGE_IMPORT_NOT_DEFINED,
    ERR_PACKAGE_PATH_NOT_EXPORTED,
    ERR_UNSUPPORTED_DIR_IMPORT,
    ERR_UNSUPPORTED_RESOLVE_REQUEST
  } = codes;
  const own = {}.hasOwnProperty;
  const invalidSegmentRegEx = /(^|\\|\/)((\.|%2e)(\.|%2e)?|(n|%6e|%4e)(o|%6f|%4f)(d|%64|%44)(e|%65|%45)(_|%5f)(m|%6d|%4d)(o|%6f|%4f)(d|%64|%44)(u|%75|%55)(l|%6c|%4c)(e|%65|%45)(s|%73|%53))?(\\|\/|$)/i;
  const deprecatedInvalidSegmentRegEx = /(^|\\|\/)((\.|%2e)(\.|%2e)?|(n|%6e|%4e)(o|%6f|%4f)(d|%64|%44)(e|%65|%45)(_|%5f)(m|%6d|%4d)(o|%6f|%4f)(d|%64|%44)(u|%75|%55)(l|%6c|%4c)(e|%65|%45)(s|%73|%53))(\\|\/|$)/i;
  const invalidPackageNameRegEx = /^\.|%|\\/;
  const patternRegEx = /\*/g;
  const encodedSeparatorRegEx = /%2f|%5c/i;
  const emittedPackageWarnings = new Set();
  const doubleSlashRegEx = /[/\\]{2}/;
  function emitInvalidSegmentDeprecation(target, request, match, packageJsonUrl, internal, base, isTarget) {
    if (_process().noDeprecation) {
      return;
    }
    const pjsonPath = (0, _url().fileURLToPath)(packageJsonUrl);
    const double = doubleSlashRegEx.exec(isTarget ? target : request) !== null;
    _process().emitWarning(`Use of deprecated ${double ? "double slash" : "leading or trailing slash matching"} resolving "${target}" for module ` + `request "${request}" ${request === match ? "" : `matched to "${match}" `}in the "${internal ? "imports" : "exports"}" field module resolution of the package at ${pjsonPath}${base ? ` imported from ${(0, _url().fileURLToPath)(base)}` : ""}.`, "DeprecationWarning", "DEP0166");
  }
  function emitLegacyIndexDeprecation(url, packageJsonUrl, base, main) {
    if (_process().noDeprecation) {
      return;
    }
    const format = defaultGetFormatWithoutErrors(url, {
      parentURL: base.href
    });
    if (format !== "module") return;
    const urlPath = (0, _url().fileURLToPath)(url.href);
    const packagePath = (0, _url().fileURLToPath)(new (_url().URL)(".", packageJsonUrl));
    const basePath = (0, _url().fileURLToPath)(base);
    if (!main) {
      _process().emitWarning(`No "main" or "exports" field defined in the package.json for ${packagePath} resolving the main entry point "${urlPath.slice(packagePath.length)}", imported from ${basePath}.\nDefault "index" lookups for the main are deprecated for ES modules.`, "DeprecationWarning", "DEP0151");
    } else if (_path().resolve(packagePath, main) !== urlPath) {
      _process().emitWarning(`Package ${packagePath} has a "main" field set to "${main}", ` + `excluding the full filename and extension to the resolved file at "${urlPath.slice(packagePath.length)}", imported from ${basePath}.\n Automatic extension resolution of the "main" field is ` + "deprecated for ES modules.", "DeprecationWarning", "DEP0151");
    }
  }
  function tryStatSync(path) {
    try {
      return (0, _fs().statSync)(path);
    } catch (_unused2) {}
  }
  function fileExists(url) {
    const stats = (0, _fs().statSync)(url, {
      throwIfNoEntry: false
    });
    const isFile = stats ? stats.isFile() : undefined;
    return isFile === null || isFile === undefined ? false : isFile;
  }
  function legacyMainResolve(packageJsonUrl, packageConfig, base) {
    let guess;
    if (packageConfig.main !== undefined) {
      guess = new (_url().URL)(packageConfig.main, packageJsonUrl);
      if (fileExists(guess)) return guess;
      const tries = [`./${packageConfig.main}.js`, `./${packageConfig.main}.json`, `./${packageConfig.main}.node`, `./${packageConfig.main}/index.js`, `./${packageConfig.main}/index.json`, `./${packageConfig.main}/index.node`];
      let i = -1;
      while (++i < tries.length) {
        guess = new (_url().URL)(tries[i], packageJsonUrl);
        if (fileExists(guess)) break;
        guess = undefined;
      }
      if (guess) {
        emitLegacyIndexDeprecation(guess, packageJsonUrl, base, packageConfig.main);
        return guess;
      }
    }
    const tries = ["./index.js", "./index.json", "./index.node"];
    let i = -1;
    while (++i < tries.length) {
      guess = new (_url().URL)(tries[i], packageJsonUrl);
      if (fileExists(guess)) break;
      guess = undefined;
    }
    if (guess) {
      emitLegacyIndexDeprecation(guess, packageJsonUrl, base, packageConfig.main);
      return guess;
    }
    throw new ERR_MODULE_NOT_FOUND((0, _url().fileURLToPath)(new (_url().URL)(".", packageJsonUrl)), (0, _url().fileURLToPath)(base));
  }
  function finalizeResolution(resolved, base, preserveSymlinks) {
    if (encodedSeparatorRegEx.exec(resolved.pathname) !== null) {
      throw new ERR_INVALID_MODULE_SPECIFIER(resolved.pathname, "must not include encoded \"/\" or \"\\\" characters", (0, _url().fileURLToPath)(base));
    }
    let filePath;
    try {
      filePath = (0, _url().fileURLToPath)(resolved);
    } catch (error) {
      const cause = error;
      Object.defineProperty(cause, "input", {
        value: String(resolved)
      });
      Object.defineProperty(cause, "module", {
        value: String(base)
      });
      throw cause;
    }
    const stats = tryStatSync(filePath.endsWith("/") ? filePath.slice(-1) : filePath);
    if (stats && stats.isDirectory()) {
      const error = new ERR_UNSUPPORTED_DIR_IMPORT(filePath, (0, _url().fileURLToPath)(base));
      error.url = String(resolved);
      throw error;
    }
    if (!stats || !stats.isFile()) {
      const error = new ERR_MODULE_NOT_FOUND(filePath || resolved.pathname, base && (0, _url().fileURLToPath)(base), true);
      error.url = String(resolved);
      throw error;
    }
    if (!preserveSymlinks) {
      const real = (0, _fs().realpathSync)(filePath);
      const {
        search,
        hash
      } = resolved;
      resolved = (0, _url().pathToFileURL)(real + (filePath.endsWith(_path().sep) ? "/" : ""));
      resolved.search = search;
      resolved.hash = hash;
    }
    return resolved;
  }
  function importNotDefined(specifier, packageJsonUrl, base) {
    return new ERR_PACKAGE_IMPORT_NOT_DEFINED(specifier, packageJsonUrl && (0, _url().fileURLToPath)(new (_url().URL)(".", packageJsonUrl)), (0, _url().fileURLToPath)(base));
  }
  function exportsNotFound(subpath, packageJsonUrl, base) {
    return new ERR_PACKAGE_PATH_NOT_EXPORTED((0, _url().fileURLToPath)(new (_url().URL)(".", packageJsonUrl)), subpath, base && (0, _url().fileURLToPath)(base));
  }
  function throwInvalidSubpath(request, match, packageJsonUrl, internal, base) {
    const reason = `request is not a valid match in pattern "${match}" for the "${internal ? "imports" : "exports"}" resolution of ${(0, _url().fileURLToPath)(packageJsonUrl)}`;
    throw new ERR_INVALID_MODULE_SPECIFIER(request, reason, base && (0, _url().fileURLToPath)(base));
  }
  function invalidPackageTarget(subpath, target, packageJsonUrl, internal, base) {
    target = typeof target === "object" && target !== null ? JSON.stringify(target, null, "") : `${target}`;
    return new ERR_INVALID_PACKAGE_TARGET((0, _url().fileURLToPath)(new (_url().URL)(".", packageJsonUrl)), subpath, target, internal, base && (0, _url().fileURLToPath)(base));
  }
  function resolvePackageTargetString(target, subpath, match, packageJsonUrl, base, pattern, internal, isPathMap, conditions) {
    if (subpath !== "" && !pattern && target[target.length - 1] !== "/") throw invalidPackageTarget(match, target, packageJsonUrl, internal, base);
    if (!target.startsWith("./")) {
      if (internal && !target.startsWith("../") && !target.startsWith("/")) {
        let isURL = false;
        try {
          new (_url().URL)(target);
          isURL = true;
        } catch (_unused3) {}
        if (!isURL) {
          const exportTarget = pattern ? RegExpPrototypeSymbolReplace.call(patternRegEx, target, () => subpath) : target + subpath;
          return packageResolve(exportTarget, packageJsonUrl, conditions);
        }
      }
      throw invalidPackageTarget(match, target, packageJsonUrl, internal, base);
    }
    if (invalidSegmentRegEx.exec(target.slice(2)) !== null) {
      if (deprecatedInvalidSegmentRegEx.exec(target.slice(2)) === null) {
        if (!isPathMap) {
          const request = pattern ? match.replace("*", () => subpath) : match + subpath;
          const resolvedTarget = pattern ? RegExpPrototypeSymbolReplace.call(patternRegEx, target, () => subpath) : target;
          emitInvalidSegmentDeprecation(resolvedTarget, request, match, packageJsonUrl, internal, base, true);
        }
      } else {
        throw invalidPackageTarget(match, target, packageJsonUrl, internal, base);
      }
    }
    const resolved = new (_url().URL)(target, packageJsonUrl);
    const resolvedPath = resolved.pathname;
    const packagePath = new (_url().URL)(".", packageJsonUrl).pathname;
    if (!resolvedPath.startsWith(packagePath)) throw invalidPackageTarget(match, target, packageJsonUrl, internal, base);
    if (subpath === "") return resolved;
    if (invalidSegmentRegEx.exec(subpath) !== null) {
      const request = pattern ? match.replace("*", () => subpath) : match + subpath;
      if (deprecatedInvalidSegmentRegEx.exec(subpath) === null) {
        if (!isPathMap) {
          const resolvedTarget = pattern ? RegExpPrototypeSymbolReplace.call(patternRegEx, target, () => subpath) : target;
          emitInvalidSegmentDeprecation(resolvedTarget, request, match, packageJsonUrl, internal, base, false);
        }
      } else {
        throwInvalidSubpath(request, match, packageJsonUrl, internal, base);
      }
    }
    if (pattern) {
      return new (_url().URL)(RegExpPrototypeSymbolReplace.call(patternRegEx, resolved.href, () => subpath));
    }
    return new (_url().URL)(subpath, resolved);
  }
  function isArrayIndex(key) {
    const keyNumber = Number(key);
    if (`${keyNumber}` !== key) return false;
    return keyNumber >= 0 && keyNumber < 4294967295;
  }
  function resolvePackageTarget(packageJsonUrl, target, subpath, packageSubpath, base, pattern, internal, isPathMap, conditions) {
    if (typeof target === "string") {
      return resolvePackageTargetString(target, subpath, packageSubpath, packageJsonUrl, base, pattern, internal, isPathMap, conditions);
    }
    if (Array.isArray(target)) {
      const targetList = target;
      if (targetList.length === 0) return null;
      let lastException;
      let i = -1;
      while (++i < targetList.length) {
        const targetItem = targetList[i];
        let resolveResult;
        try {
          resolveResult = resolvePackageTarget(packageJsonUrl, targetItem, subpath, packageSubpath, base, pattern, internal, isPathMap, conditions);
        } catch (error) {
          const exception = error;
          lastException = exception;
          if (exception.code === "ERR_INVALID_PACKAGE_TARGET") continue;
          throw error;
        }
        if (resolveResult === undefined) continue;
        if (resolveResult === null) {
          lastException = null;
          continue;
        }
        return resolveResult;
      }
      if (lastException === undefined || lastException === null) {
        return null;
      }
      throw lastException;
    }
    if (typeof target === "object" && target !== null) {
      const keys = Object.getOwnPropertyNames(target);
      let i = -1;
      while (++i < keys.length) {
        const key = keys[i];
        if (isArrayIndex(key)) {
          throw new ERR_INVALID_PACKAGE_CONFIG((0, _url().fileURLToPath)(packageJsonUrl), base, "\"exports\" cannot contain numeric property keys.");
        }
      }
      i = -1;
      while (++i < keys.length) {
        const key = keys[i];
        if (key === "default" || conditions && conditions.has(key)) {
          const conditionalTarget = target[key];
          const resolveResult = resolvePackageTarget(packageJsonUrl, conditionalTarget, subpath, packageSubpath, base, pattern, internal, isPathMap, conditions);
          if (resolveResult === undefined) continue;
          return resolveResult;
        }
      }
      return null;
    }
    if (target === null) {
      return null;
    }
    throw invalidPackageTarget(packageSubpath, target, packageJsonUrl, internal, base);
  }
  function isConditionalExportsMainSugar(exports, packageJsonUrl, base) {
    if (typeof exports === "string" || Array.isArray(exports)) return true;
    if (typeof exports !== "object" || exports === null) return false;
    const keys = Object.getOwnPropertyNames(exports);
    let isConditionalSugar = false;
    let i = 0;
    let keyIndex = -1;
    while (++keyIndex < keys.length) {
      const key = keys[keyIndex];
      const currentIsConditionalSugar = key === "" || key[0] !== ".";
      if (i++ === 0) {
        isConditionalSugar = currentIsConditionalSugar;
      } else if (isConditionalSugar !== currentIsConditionalSugar) {
        throw new ERR_INVALID_PACKAGE_CONFIG((0, _url().fileURLToPath)(packageJsonUrl), base, "\"exports\" cannot contain some keys starting with '.' and some not." + " The exports object must either be an object of package subpath keys" + " or an object of main entry condition name keys only.");
      }
    }
    return isConditionalSugar;
  }
  function emitTrailingSlashPatternDeprecation(match, pjsonUrl, base) {
    if (_process().noDeprecation) {
      return;
    }
    const pjsonPath = (0, _url().fileURLToPath)(pjsonUrl);
    if (emittedPackageWarnings.has(pjsonPath + "|" + match)) return;
    emittedPackageWarnings.add(pjsonPath + "|" + match);
    _process().emitWarning(`Use of deprecated trailing slash pattern mapping "${match}" in the ` + `"exports" field module resolution of the package at ${pjsonPath}${base ? ` imported from ${(0, _url().fileURLToPath)(base)}` : ""}. Mapping specifiers ending in "/" is no longer supported.`, "DeprecationWarning", "DEP0155");
  }
  function packageExportsResolve(packageJsonUrl, packageSubpath, packageConfig, base, conditions) {
    let exports = packageConfig.exports;
    if (isConditionalExportsMainSugar(exports, packageJsonUrl, base)) {
      exports = {
        ".": exports
      };
    }
    if (own.call(exports, packageSubpath) && !packageSubpath.includes("*") && !packageSubpath.endsWith("/")) {
      const target = exports[packageSubpath];
      const resolveResult = resolvePackageTarget(packageJsonUrl, target, "", packageSubpath, base, false, false, false, conditions);
      if (resolveResult === null || resolveResult === undefined) {
        throw exportsNotFound(packageSubpath, packageJsonUrl, base);
      }
      return resolveResult;
    }
    let bestMatch = "";
    let bestMatchSubpath = "";
    const keys = Object.getOwnPropertyNames(exports);
    let i = -1;
    while (++i < keys.length) {
      const key = keys[i];
      const patternIndex = key.indexOf("*");
      if (patternIndex !== -1 && packageSubpath.startsWith(key.slice(0, patternIndex))) {
        if (packageSubpath.endsWith("/")) {
          emitTrailingSlashPatternDeprecation(packageSubpath, packageJsonUrl, base);
        }
        const patternTrailer = key.slice(patternIndex + 1);
        if (packageSubpath.length >= key.length && packageSubpath.endsWith(patternTrailer) && patternKeyCompare(bestMatch, key) === 1 && key.lastIndexOf("*") === patternIndex) {
          bestMatch = key;
          bestMatchSubpath = packageSubpath.slice(patternIndex, packageSubpath.length - patternTrailer.length);
        }
      }
    }
    if (bestMatch) {
      const target = exports[bestMatch];
      const resolveResult = resolvePackageTarget(packageJsonUrl, target, bestMatchSubpath, bestMatch, base, true, false, packageSubpath.endsWith("/"), conditions);
      if (resolveResult === null || resolveResult === undefined) {
        throw exportsNotFound(packageSubpath, packageJsonUrl, base);
      }
      return resolveResult;
    }
    throw exportsNotFound(packageSubpath, packageJsonUrl, base);
  }
  function patternKeyCompare(a, b) {
    const aPatternIndex = a.indexOf("*");
    const bPatternIndex = b.indexOf("*");
    const baseLengthA = aPatternIndex === -1 ? a.length : aPatternIndex + 1;
    const baseLengthB = bPatternIndex === -1 ? b.length : bPatternIndex + 1;
    if (baseLengthA > baseLengthB) return -1;
    if (baseLengthB > baseLengthA) return 1;
    if (aPatternIndex === -1) return 1;
    if (bPatternIndex === -1) return -1;
    if (a.length > b.length) return -1;
    if (b.length > a.length) return 1;
    return 0;
  }
  function packageImportsResolve(name, base, conditions) {
    if (name === "#" || name.startsWith("#/") || name.endsWith("/")) {
      const reason = "is not a valid internal imports specifier name";
      throw new ERR_INVALID_MODULE_SPECIFIER(name, reason, (0, _url().fileURLToPath)(base));
    }
    let packageJsonUrl;
    const packageConfig = getPackageScopeConfig(base);
    if (packageConfig.exists) {
      packageJsonUrl = (0, _url().pathToFileURL)(packageConfig.pjsonPath);
      const imports = packageConfig.imports;
      if (imports) {
        if (own.call(imports, name) && !name.includes("*")) {
          const resolveResult = resolvePackageTarget(packageJsonUrl, imports[name], "", name, base, false, true, false, conditions);
          if (resolveResult !== null && resolveResult !== undefined) {
            return resolveResult;
          }
        } else {
          let bestMatch = "";
          let bestMatchSubpath = "";
          const keys = Object.getOwnPropertyNames(imports);
          let i = -1;
          while (++i < keys.length) {
            const key = keys[i];
            const patternIndex = key.indexOf("*");
            if (patternIndex !== -1 && name.startsWith(key.slice(0, -1))) {
              const patternTrailer = key.slice(patternIndex + 1);
              if (name.length >= key.length && name.endsWith(patternTrailer) && patternKeyCompare(bestMatch, key) === 1 && key.lastIndexOf("*") === patternIndex) {
                bestMatch = key;
                bestMatchSubpath = name.slice(patternIndex, name.length - patternTrailer.length);
              }
            }
          }
          if (bestMatch) {
            const target = imports[bestMatch];
            const resolveResult = resolvePackageTarget(packageJsonUrl, target, bestMatchSubpath, bestMatch, base, true, true, false, conditions);
            if (resolveResult !== null && resolveResult !== undefined) {
              return resolveResult;
            }
          }
        }
      }
    }
    throw importNotDefined(name, packageJsonUrl, base);
  }
  function parsePackageName(specifier, base) {
    let separatorIndex = specifier.indexOf("/");
    let validPackageName = true;
    let isScoped = false;
    if (specifier[0] === "@") {
      isScoped = true;
      if (separatorIndex === -1 || specifier.length === 0) {
        validPackageName = false;
      } else {
        separatorIndex = specifier.indexOf("/", separatorIndex + 1);
      }
    }
    const packageName = separatorIndex === -1 ? specifier : specifier.slice(0, separatorIndex);
    if (invalidPackageNameRegEx.exec(packageName) !== null) {
      validPackageName = false;
    }
    if (!validPackageName) {
      throw new ERR_INVALID_MODULE_SPECIFIER(specifier, "is not a valid package name", (0, _url().fileURLToPath)(base));
    }
    const packageSubpath = "." + (separatorIndex === -1 ? "" : specifier.slice(separatorIndex));
    return {
      packageName,
      packageSubpath,
      isScoped
    };
  }
  function packageResolve(specifier, base, conditions) {
    if (_module().builtinModules.includes(specifier)) {
      return new (_url().URL)("node:" + specifier);
    }
    const {
      packageName,
      packageSubpath,
      isScoped
    } = parsePackageName(specifier, base);
    const packageConfig = getPackageScopeConfig(base);
    if (packageConfig.exists) {
      const packageJsonUrl = (0, _url().pathToFileURL)(packageConfig.pjsonPath);
      if (packageConfig.name === packageName && packageConfig.exports !== undefined && packageConfig.exports !== null) {
        return packageExportsResolve(packageJsonUrl, packageSubpath, packageConfig, base, conditions);
      }
    }
    let packageJsonUrl = new (_url().URL)("./node_modules/" + packageName + "/package.json", base);
    let packageJsonPath = (0, _url().fileURLToPath)(packageJsonUrl);
    let lastPath;
    do {
      const stat = tryStatSync(packageJsonPath.slice(0, -13));
      if (!stat || !stat.isDirectory()) {
        lastPath = packageJsonPath;
        packageJsonUrl = new (_url().URL)((isScoped ? "../../../../node_modules/" : "../../../node_modules/") + packageName + "/package.json", packageJsonUrl);
        packageJsonPath = (0, _url().fileURLToPath)(packageJsonUrl);
        continue;
      }
      const packageConfig = read(packageJsonPath, {
        base,
        specifier
      });
      if (packageConfig.exports !== undefined && packageConfig.exports !== null) {
        return packageExportsResolve(packageJsonUrl, packageSubpath, packageConfig, base, conditions);
      }
      if (packageSubpath === ".") {
        return legacyMainResolve(packageJsonUrl, packageConfig, base);
      }
      return new (_url().URL)(packageSubpath, packageJsonUrl);
    } while (packageJsonPath.length !== lastPath.length);
    throw new ERR_MODULE_NOT_FOUND(packageName, (0, _url().fileURLToPath)(base), false);
  }
  function isRelativeSpecifier(specifier) {
    if (specifier[0] === ".") {
      if (specifier.length === 1 || specifier[1] === "/") return true;
      if (specifier[1] === "." && (specifier.length === 2 || specifier[2] === "/")) {
        return true;
      }
    }
    return false;
  }
  function shouldBeTreatedAsRelativeOrAbsolutePath(specifier) {
    if (specifier === "") return false;
    if (specifier[0] === "/") return true;
    return isRelativeSpecifier(specifier);
  }
  function moduleResolve(specifier, base, conditions, preserveSymlinks) {
    const protocol = base.protocol;
    const isData = protocol === "data:";
    const isRemote = isData || protocol === "http:" || protocol === "https:";
    let resolved;
    if (shouldBeTreatedAsRelativeOrAbsolutePath(specifier)) {
      try {
        resolved = new (_url().URL)(specifier, base);
      } catch (error_) {
        const error = new ERR_UNSUPPORTED_RESOLVE_REQUEST(specifier, base);
        error.cause = error_;
        throw error;
      }
    } else if (protocol === "file:" && specifier[0] === "#") {
      resolved = packageImportsResolve(specifier, base, conditions);
    } else {
      try {
        resolved = new (_url().URL)(specifier);
      } catch (error_) {
        if (isRemote && !_module().builtinModules.includes(specifier)) {
          const error = new ERR_UNSUPPORTED_RESOLVE_REQUEST(specifier, base);
          error.cause = error_;
          throw error;
        }
        resolved = packageResolve(specifier, base, conditions);
      }
    }
    _assert()(resolved !== undefined, "expected to be defined");
    if (resolved.protocol !== "file:") {
      return resolved;
    }
    return finalizeResolution(resolved, base, preserveSymlinks);
  }
  function checkIfDisallowedImport(specifier, parsed, parsedParentURL) {
    if (parsedParentURL) {
      const parentProtocol = parsedParentURL.protocol;
      if (parentProtocol === "http:" || parentProtocol === "https:") {
        if (shouldBeTreatedAsRelativeOrAbsolutePath(specifier)) {
          const parsedProtocol = parsed == null ? void 0 : parsed.protocol;
          if (parsedProtocol && parsedProtocol !== "https:" && parsedProtocol !== "http:") {
            throw new ERR_NETWORK_IMPORT_DISALLOWED(specifier, parsedParentURL, "remote imports cannot import from a local location.");
          }
          return {
            url: (parsed == null ? void 0 : parsed.href) || ""
          };
        }
        if (_module().builtinModules.includes(specifier)) {
          throw new ERR_NETWORK_IMPORT_DISALLOWED(specifier, parsedParentURL, "remote imports cannot import from a local location.");
        }
        throw new ERR_NETWORK_IMPORT_DISALLOWED(specifier, parsedParentURL, "only relative and absolute specifiers are supported.");
      }
    }
  }
  function isURL(self) {
    return Boolean(self && typeof self === "object" && "href" in self && typeof self.href === "string" && "protocol" in self && typeof self.protocol === "string" && self.href && self.protocol);
  }
  function throwIfInvalidParentURL(parentURL) {
    if (parentURL === undefined) {
      return;
    }
    if (typeof parentURL !== "string" && !isURL(parentURL)) {
      throw new codes.ERR_INVALID_ARG_TYPE("parentURL", ["string", "URL"], parentURL);
    }
  }
  function defaultResolve(specifier, context = {}) {
    const {
      parentURL
    } = context;
    _assert()(parentURL !== undefined, "expected `parentURL` to be defined");
    throwIfInvalidParentURL(parentURL);
    let parsedParentURL;
    if (parentURL) {
      try {
        parsedParentURL = new (_url().URL)(parentURL);
      } catch (_unused4) {}
    }
    let parsed;
    let protocol;
    try {
      parsed = shouldBeTreatedAsRelativeOrAbsolutePath(specifier) ? new (_url().URL)(specifier, parsedParentURL) : new (_url().URL)(specifier);
      protocol = parsed.protocol;
      if (protocol === "data:") {
        return {
          url: parsed.href,
          format: null
        };
      }
    } catch (_unused5) {}
    const maybeReturn = checkIfDisallowedImport(specifier, parsed, parsedParentURL);
    if (maybeReturn) return maybeReturn;
    if (protocol === undefined && parsed) {
      protocol = parsed.protocol;
    }
    if (protocol === "node:") {
      return {
        url: specifier
      };
    }
    if (parsed && parsed.protocol === "node:") return {
      url: specifier
    };
    const conditions = getConditionsSet(context.conditions);
    const url = moduleResolve(specifier, new (_url().URL)(parentURL), conditions, false);
    return {
      url: url.href,
      format: defaultGetFormatWithoutErrors(url, {
        parentURL
      })
    };
  }
  function resolve(specifier, parent) {
    if (!parent) {
      throw new Error("Please pass `parent`: `import-meta-resolve` cannot ponyfill that");
    }
    try {
      return defaultResolve(specifier, {
        parentURL: parent
      }).url;
    } catch (error) {
      const exception = error;
      if ((exception.code === "ERR_UNSUPPORTED_DIR_IMPORT" || exception.code === "ERR_MODULE_NOT_FOUND") && typeof exception.url === "string") {
        return exception.url;
      }
      throw error;
    }
  }
  return exports$7;
}

var exports$6 = {},
  _dewExec$5 = false;
function dew$5() {
  if (_dewExec$5) return exports$6;
  _dewExec$5 = true;
  var _nodeRequire = function () {
    var Module = _nodeModule.Module;
    if (Module) {
      var m = new Module("");
      m.filename = import.meta.url.substr(7 + (Module._nodeModulePaths("/")[0].length > 13));
      m.paths = Module._nodeModulePaths(m.filename.substr(0, m.filename.lastIndexOf("/")));
      return Object.assign(m.require.bind(m), {
        resolve: function (id) {
          return Module._resolveFilename(id, m);
        }
      });
    } else {
      return function _nodeRequire(id) {
        var e = new Error("Cannot find module '" + id + "'");
        e.code = "MODULE_NOT_FOUND";
        throw e;
      };
    }
  }();
  var process = _nodeProcess;
  Object.defineProperty(exports$6, "__esModule", {
    value: true
  });
  exports$6.loadPlugin = loadPlugin;
  exports$6.loadPreset = loadPreset;
  exports$6.resolvePreset = exports$6.resolvePlugin = void 0;
  function _debug() {
    const data = dew$2P();
    _debug = function () {
      return data;
    };
    return data;
  }
  function _path() {
    const data = _path2;
    _path = function () {
      return data;
    };
    return data;
  }
  var _async = dew$1I();
  var _moduleTypes = dew$8();
  function _url() {
    const data = _url2;
    _url = function () {
      return data;
    };
    return data;
  }
  var _importMetaResolve = dew$6();
  function _fs() {
    const data = _fs2;
    _fs = function () {
      return data;
    };
    return data;
  }
  const debug = _debug()("babel:config:loading:files:plugins");
  const EXACT_RE = /^module:/;
  const BABEL_PLUGIN_PREFIX_RE = /^(?!@|module:|[^/]+\/|babel-plugin-)/;
  const BABEL_PRESET_PREFIX_RE = /^(?!@|module:|[^/]+\/|babel-preset-)/;
  const BABEL_PLUGIN_ORG_RE = /^(@babel\/)(?!plugin-|[^/]+\/)/;
  const BABEL_PRESET_ORG_RE = /^(@babel\/)(?!preset-|[^/]+\/)/;
  const OTHER_PLUGIN_ORG_RE = /^(@(?!babel\/)[^/]+\/)(?![^/]*babel-plugin(?:-|\/|$)|[^/]+\/)/;
  const OTHER_PRESET_ORG_RE = /^(@(?!babel\/)[^/]+\/)(?![^/]*babel-preset(?:-|\/|$)|[^/]+\/)/;
  const OTHER_ORG_DEFAULT_RE = /^(@(?!babel$)[^/]+)$/;
  const resolvePlugin = exports$6.resolvePlugin = resolveStandardizedName.bind(null, "plugin");
  const resolvePreset = exports$6.resolvePreset = resolveStandardizedName.bind(null, "preset");
  function* loadPlugin(name, dirname) {
    const filepath = resolvePlugin(name, dirname, yield* (0, _async.isAsync)());
    const value = yield* requireModule("plugin", filepath);
    debug("Loaded plugin %o from %o.", name, dirname);
    return {
      filepath,
      value
    };
  }
  function* loadPreset(name, dirname) {
    const filepath = resolvePreset(name, dirname, yield* (0, _async.isAsync)());
    const value = yield* requireModule("preset", filepath);
    debug("Loaded preset %o from %o.", name, dirname);
    return {
      filepath,
      value
    };
  }
  function standardizeName(type, name) {
    if (_path().isAbsolute(name)) return name;
    const isPreset = type === "preset";
    return name.replace(isPreset ? BABEL_PRESET_PREFIX_RE : BABEL_PLUGIN_PREFIX_RE, `babel-${type}-`).replace(isPreset ? BABEL_PRESET_ORG_RE : BABEL_PLUGIN_ORG_RE, `$1${type}-`).replace(isPreset ? OTHER_PRESET_ORG_RE : OTHER_PLUGIN_ORG_RE, `$1babel-${type}-`).replace(OTHER_ORG_DEFAULT_RE, `$1/babel-${type}`).replace(EXACT_RE, "");
  }
  function* resolveAlternativesHelper(type, name) {
    const standardizedName = standardizeName(type, name);
    const {
      error,
      value
    } = yield standardizedName;
    if (!error) return value;
    if (error.code !== "MODULE_NOT_FOUND") throw error;
    if (standardizedName !== name && !(yield name).error) {
      error.message += `\n- If you want to resolve "${name}", use "module:${name}"`;
    }
    if (!(yield standardizeName(type, "@babel/" + name)).error) {
      error.message += `\n- Did you mean "@babel/${name}"?`;
    }
    const oppositeType = type === "preset" ? "plugin" : "preset";
    if (!(yield standardizeName(oppositeType, name)).error) {
      error.message += `\n- Did you accidentally pass a ${oppositeType} as a ${type}?`;
    }
    if (type === "plugin") {
      const transformName = standardizedName.replace("-proposal-", "-transform-");
      if (transformName !== standardizedName && !(yield transformName).error) {
        error.message += `\n- Did you mean "${transformName}"?`;
      }
    }
    error.message += `\n
Make sure that all the Babel plugins and presets you are using
are defined as dependencies or devDependencies in your package.json
file. It's possible that the missing plugin is loaded by a preset
you are using that forgot to add the plugin to its dependencies: you
can workaround this problem by explicitly adding the missing package
to your top-level package.json.
`;
    throw error;
  }
  function tryRequireResolve(id, dirname) {
    try {
      if (dirname) {
        return {
          error: null,
          value: (((v, w) => (v = v.split("."), w = w.split("."), +v[0] > +w[0] || v[0] == w[0] && +v[1] >= +w[1]))(process.versions.node, "8.9") ? _nodeRequire.resolve : (r, {
            paths: [b]
          }, M = _nodeModule) => {
            let f = M._findPath(r, M._nodeModulePaths(b).concat(b));
            if (f) return f;
            f = new Error(`Cannot resolve module '${r}'`);
            f.code = "MODULE_NOT_FOUND";
            throw f;
          })(id, {
            paths: [dirname]
          })
        };
      } else {
        return {
          error: null,
          value: (_nodeRequire.resolve || _nodeRequire)(id)
        };
      }
    } catch (error) {
      return {
        error,
        value: null
      };
    }
  }
  function tryImportMetaResolve(id, options) {
    try {
      return {
        error: null,
        value: (0, _importMetaResolve.resolve)(id, options)
      };
    } catch (error) {
      return {
        error,
        value: null
      };
    }
  }
  function resolveStandardizedNameForRequire(type, name, dirname) {
    const it = resolveAlternativesHelper(type, name);
    let res = it.next();
    while (!res.done) {
      res = it.next(tryRequireResolve(res.value, dirname));
    }
    return res.value;
  }
  function resolveStandardizedNameForImport(type, name, dirname) {
    const parentUrl = (0, _url().pathToFileURL)(_path().join(dirname, "./babel-virtual-resolve-base.js")).href;
    const it = resolveAlternativesHelper(type, name);
    let res = it.next();
    while (!res.done) {
      res = it.next(tryImportMetaResolve(res.value, parentUrl));
    }
    return (0, _url().fileURLToPath)(res.value);
  }
  function resolveStandardizedName(type, name, dirname, resolveESM) {
    if (!_moduleTypes.supportsESM || !resolveESM) {
      return resolveStandardizedNameForRequire(type, name, dirname);
    }
    try {
      const resolved = resolveStandardizedNameForImport(type, name, dirname);
      if (!(0, _fs().existsSync)(resolved)) {
        throw Object.assign(new Error(`Could not resolve "${name}" in file ${dirname}.`), {
          type: "MODULE_NOT_FOUND"
        });
      }
      return resolved;
    } catch (e) {
      try {
        return resolveStandardizedNameForRequire(type, name, dirname);
      } catch (e2) {
        if (e.type === "MODULE_NOT_FOUND") throw e;
        if (e2.type === "MODULE_NOT_FOUND") throw e2;
        throw e;
      }
    }
  }
  {
    var LOADING_MODULES = new Set();
  }
  function* requireModule(type, name) {
    {
      if (!(yield* (0, _async.isAsync)()) && LOADING_MODULES.has(name)) {
        throw new Error(`Reentrant ${type} detected trying to load "${name}". This module is not ignored ` + "and is trying to load itself while compiling itself, leading to a dependency cycle. " + "We recommend adding it to your \"ignore\" list in your babelrc, or to a .babelignore.");
      }
    }
    try {
      {
        LOADING_MODULES.add(name);
      }
      {
        return yield* (0, _moduleTypes.default)(name, `You appear to be using a native ECMAScript module ${type}, ` + "which is only supported when running Babel asynchronously.", true);
      }
    } catch (err) {
      err.message = `[BABEL]: ${err.message} (While processing: ${name})`;
      throw err;
    } finally {
      {
        LOADING_MODULES.delete(name);
      }
    }
  }
  return exports$6;
}

var exports$5 = {},
  _dewExec$4 = false;
function dew$4() {
  if (_dewExec$4) return exports$5;
  _dewExec$4 = true;
  Object.defineProperty(exports$5, "__esModule", {
    value: true
  });
  Object.defineProperty(exports$5, "ROOT_CONFIG_FILENAMES", {
    enumerable: true,
    get: function () {
      return _configuration.ROOT_CONFIG_FILENAMES;
    }
  });
  Object.defineProperty(exports$5, "findConfigUpwards", {
    enumerable: true,
    get: function () {
      return _configuration.findConfigUpwards;
    }
  });
  Object.defineProperty(exports$5, "findPackageData", {
    enumerable: true,
    get: function () {
      return _package.findPackageData;
    }
  });
  Object.defineProperty(exports$5, "findRelativeConfig", {
    enumerable: true,
    get: function () {
      return _configuration.findRelativeConfig;
    }
  });
  Object.defineProperty(exports$5, "findRootConfig", {
    enumerable: true,
    get: function () {
      return _configuration.findRootConfig;
    }
  });
  Object.defineProperty(exports$5, "loadConfig", {
    enumerable: true,
    get: function () {
      return _configuration.loadConfig;
    }
  });
  Object.defineProperty(exports$5, "loadPlugin", {
    enumerable: true,
    get: function () {
      return _plugins.loadPlugin;
    }
  });
  Object.defineProperty(exports$5, "loadPreset", {
    enumerable: true,
    get: function () {
      return _plugins.loadPreset;
    }
  });
  Object.defineProperty(exports$5, "resolvePlugin", {
    enumerable: true,
    get: function () {
      return _plugins.resolvePlugin;
    }
  });
  Object.defineProperty(exports$5, "resolvePreset", {
    enumerable: true,
    get: function () {
      return _plugins.resolvePreset;
    }
  });
  Object.defineProperty(exports$5, "resolveShowConfigPath", {
    enumerable: true,
    get: function () {
      return _configuration.resolveShowConfigPath;
    }
  });
  var _package = dew$1B();
  var _configuration = dew$7();
  var _plugins = dew$5();
  return exports$5;
}

var exports$4 = {},
  _dewExec$3 = false;
function dew$3() {
  if (_dewExec$3) return exports$4;
  _dewExec$3 = true;
  Object.defineProperty(exports$4, "__esModule", {
    value: true
  });
  exports$4.transform = void 0;
  exports$4.transformAsync = transformAsync;
  exports$4.transformSync = transformSync;
  function _gensync() {
    const data = dew$1J();
    _gensync = function () {
      return data;
    };
    return data;
  }
  var _index = dew$M();
  var _index2 = dew$A();
  var _rewriteStackTrace = dew$1D();
  const transformRunner = _gensync()(function* transform(code, opts) {
    const config = yield* (0, _index.default)(opts);
    if (config === null) return null;
    return yield* (0, _index2.run)(config, code);
  });
  exports$4.transform = function transform(code, optsOrCallback, maybeCallback) {
    let opts;
    let callback;
    if (typeof optsOrCallback === "function") {
      callback = optsOrCallback;
      opts = undefined;
    } else {
      opts = optsOrCallback;
      callback = maybeCallback;
    }
    if (callback === undefined) {
      {
        return (0, _rewriteStackTrace.beginHiddenCallStack)(transformRunner.sync)(code, opts);
      }
    }
    (0, _rewriteStackTrace.beginHiddenCallStack)(transformRunner.errback)(code, opts, callback);
  };
  function transformSync(...args) {
    return (0, _rewriteStackTrace.beginHiddenCallStack)(transformRunner.sync)(...args);
  }
  function transformAsync(...args) {
    return (0, _rewriteStackTrace.beginHiddenCallStack)(transformRunner.async)(...args);
  }
  return exports$4;
}

var exports$3 = {},
  _dewExec$2 = false;
function dew$2() {
  if (_dewExec$2) return exports$3;
  _dewExec$2 = true;
  Object.defineProperty(exports$3, "__esModule", {
    value: true
  });
  exports$3.transformFromAst = void 0;
  exports$3.transformFromAstAsync = transformFromAstAsync;
  exports$3.transformFromAstSync = transformFromAstSync;
  function _gensync() {
    const data = dew$1J();
    _gensync = function () {
      return data;
    };
    return data;
  }
  var _index = dew$M();
  var _index2 = dew$A();
  var _rewriteStackTrace = dew$1D();
  const transformFromAstRunner = _gensync()(function* (ast, code, opts) {
    const config = yield* (0, _index.default)(opts);
    if (config === null) return null;
    if (!ast) throw new Error("No AST given");
    return yield* (0, _index2.run)(config, code, ast);
  });
  exports$3.transformFromAst = function transformFromAst(ast, code, optsOrCallback, maybeCallback) {
    let opts;
    let callback;
    if (typeof optsOrCallback === "function") {
      callback = optsOrCallback;
      opts = undefined;
    } else {
      opts = optsOrCallback;
      callback = maybeCallback;
    }
    if (callback === undefined) {
      {
        return (0, _rewriteStackTrace.beginHiddenCallStack)(transformFromAstRunner.sync)(ast, code, opts);
      }
    }
    (0, _rewriteStackTrace.beginHiddenCallStack)(transformFromAstRunner.errback)(ast, code, opts, callback);
  };
  function transformFromAstSync(...args) {
    return (0, _rewriteStackTrace.beginHiddenCallStack)(transformFromAstRunner.sync)(...args);
  }
  function transformFromAstAsync(...args) {
    return (0, _rewriteStackTrace.beginHiddenCallStack)(transformFromAstRunner.async)(...args);
  }
  return exports$3;
}

var exports$2 = {},
  _dewExec$1 = false;
function dew$1() {
  if (_dewExec$1) return exports$2;
  _dewExec$1 = true;
  Object.defineProperty(exports$2, "__esModule", {
    value: true
  });
  exports$2.parse = void 0;
  exports$2.parseAsync = parseAsync;
  exports$2.parseSync = parseSync;
  function _gensync() {
    const data = dew$1J();
    _gensync = function () {
      return data;
    };
    return data;
  }
  var _index = dew$M();
  var _index2 = dew$G();
  var _normalizeOpts = dew$J();
  var _rewriteStackTrace = dew$1D();
  const parseRunner = _gensync()(function* parse(code, opts) {
    const config = yield* (0, _index.default)(opts);
    if (config === null) {
      return null;
    }
    return yield* (0, _index2.default)(config.passes, (0, _normalizeOpts.default)(config), code);
  });
  exports$2.parse = function parse(code, opts, callback) {
    if (typeof opts === "function") {
      callback = opts;
      opts = undefined;
    }
    if (callback === undefined) {
      {
        return (0, _rewriteStackTrace.beginHiddenCallStack)(parseRunner.sync)(code, opts);
      }
    }
    (0, _rewriteStackTrace.beginHiddenCallStack)(parseRunner.errback)(code, opts, callback);
  };
  function parseSync(...args) {
    return (0, _rewriteStackTrace.beginHiddenCallStack)(parseRunner.sync)(...args);
  }
  function parseAsync(...args) {
    return (0, _rewriteStackTrace.beginHiddenCallStack)(parseRunner.async)(...args);
  }
  return exports$2;
}

var exports$1 = {},
  _dewExec = false;
function dew() {
  if (_dewExec) return exports$1;
  _dewExec = true;
  Object.defineProperty(exports$1, "__esModule", {
    value: true
  });
  exports$1.DEFAULT_EXTENSIONS = void 0;
  Object.defineProperty(exports$1, "File", {
    enumerable: true,
    get: function () {
      return _file.default;
    }
  });
  Object.defineProperty(exports$1, "buildExternalHelpers", {
    enumerable: true,
    get: function () {
      return _buildExternalHelpers.default;
    }
  });
  Object.defineProperty(exports$1, "createConfigItem", {
    enumerable: true,
    get: function () {
      return _index2.createConfigItem;
    }
  });
  Object.defineProperty(exports$1, "createConfigItemAsync", {
    enumerable: true,
    get: function () {
      return _index2.createConfigItemAsync;
    }
  });
  Object.defineProperty(exports$1, "createConfigItemSync", {
    enumerable: true,
    get: function () {
      return _index2.createConfigItemSync;
    }
  });
  Object.defineProperty(exports$1, "getEnv", {
    enumerable: true,
    get: function () {
      return _environment.getEnv;
    }
  });
  Object.defineProperty(exports$1, "loadOptions", {
    enumerable: true,
    get: function () {
      return _index2.loadOptions;
    }
  });
  Object.defineProperty(exports$1, "loadOptionsAsync", {
    enumerable: true,
    get: function () {
      return _index2.loadOptionsAsync;
    }
  });
  Object.defineProperty(exports$1, "loadOptionsSync", {
    enumerable: true,
    get: function () {
      return _index2.loadOptionsSync;
    }
  });
  Object.defineProperty(exports$1, "loadPartialConfig", {
    enumerable: true,
    get: function () {
      return _index2.loadPartialConfig;
    }
  });
  Object.defineProperty(exports$1, "loadPartialConfigAsync", {
    enumerable: true,
    get: function () {
      return _index2.loadPartialConfigAsync;
    }
  });
  Object.defineProperty(exports$1, "loadPartialConfigSync", {
    enumerable: true,
    get: function () {
      return _index2.loadPartialConfigSync;
    }
  });
  Object.defineProperty(exports$1, "parse", {
    enumerable: true,
    get: function () {
      return _parse.parse;
    }
  });
  Object.defineProperty(exports$1, "parseAsync", {
    enumerable: true,
    get: function () {
      return _parse.parseAsync;
    }
  });
  Object.defineProperty(exports$1, "parseSync", {
    enumerable: true,
    get: function () {
      return _parse.parseSync;
    }
  });
  Object.defineProperty(exports$1, "resolvePlugin", {
    enumerable: true,
    get: function () {
      return _index.resolvePlugin;
    }
  });
  Object.defineProperty(exports$1, "resolvePreset", {
    enumerable: true,
    get: function () {
      return _index.resolvePreset;
    }
  });
  Object.defineProperty((exports$1), "template", {
    enumerable: true,
    get: function () {
      return _template().default;
    }
  });
  Object.defineProperty((exports$1), "tokTypes", {
    enumerable: true,
    get: function () {
      return _parser().tokTypes;
    }
  });
  Object.defineProperty(exports$1, "transform", {
    enumerable: true,
    get: function () {
      return _transform.transform;
    }
  });
  Object.defineProperty(exports$1, "transformAsync", {
    enumerable: true,
    get: function () {
      return _transform.transformAsync;
    }
  });
  Object.defineProperty(exports$1, "transformFile", {
    enumerable: true,
    get: function () {
      return _transformFile.transformFile;
    }
  });
  Object.defineProperty(exports$1, "transformFileAsync", {
    enumerable: true,
    get: function () {
      return _transformFile.transformFileAsync;
    }
  });
  Object.defineProperty(exports$1, "transformFileSync", {
    enumerable: true,
    get: function () {
      return _transformFile.transformFileSync;
    }
  });
  Object.defineProperty(exports$1, "transformFromAst", {
    enumerable: true,
    get: function () {
      return _transformAst.transformFromAst;
    }
  });
  Object.defineProperty(exports$1, "transformFromAstAsync", {
    enumerable: true,
    get: function () {
      return _transformAst.transformFromAstAsync;
    }
  });
  Object.defineProperty(exports$1, "transformFromAstSync", {
    enumerable: true,
    get: function () {
      return _transformAst.transformFromAstSync;
    }
  });
  Object.defineProperty(exports$1, "transformSync", {
    enumerable: true,
    get: function () {
      return _transform.transformSync;
    }
  });
  Object.defineProperty((exports$1), "traverse", {
    enumerable: true,
    get: function () {
      return _traverse().default;
    }
  });
  exports$1.version = exports$1.types = void 0;
  var _file = dew$1L();
  var _buildExternalHelpers = dew$1K();
  var _index = dew$4();
  var _environment = dew$P();
  function _types() {
    const data = dew$3i();
    _types = function () {
      return data;
    };
    return data;
  }
  Object.defineProperty((exports$1), "types", {
    enumerable: true,
    get: function () {
      return _types();
    }
  });
  function _parser() {
    const data = dew$3f();
    _parser = function () {
      return data;
    };
    return data;
  }
  function _traverse() {
    const data = dew$1_();
    _traverse = function () {
      return data;
    };
    return data;
  }
  function _template() {
    const data = dew$2X();
    _template = function () {
      return data;
    };
    return data;
  }
  var _index2 = dew$M();
  var _transform = dew$3();
  var _transformFile = dew$z();
  var _transformAst = dew$2();
  var _parse = dew$1();
  dew();
  exports$1.version = "7.25.2";
  exports$1.DEFAULT_EXTENSIONS = Object.freeze([".js", ".jsx", ".es6", ".es", ".mjs", ".cjs"]);
  {
    exports$1.OptionManager = class OptionManager {
      init(opts) {
        return (0, _index2.loadOptionsSync)(opts);
      }
    };
    exports$1.Plugin = function Plugin(alias) {
      throw new Error(`The (${alias}) Babel 5 plugin is being run with an unsupported Babel version.`);
    };
  }
  return exports$1;
}

const exports = dew();
exports['__esModule']; exports['DEFAULT_EXTENSIONS']; exports['File']; exports['buildExternalHelpers']; exports['createConfigItem']; exports['createConfigItemAsync']; exports['createConfigItemSync']; exports['getEnv']; exports['loadOptions']; exports['loadOptionsAsync']; exports['loadOptionsSync']; exports['loadPartialConfig']; exports['loadPartialConfigAsync']; exports['loadPartialConfigSync']; exports['parse']; exports['parseAsync']; exports['parseSync']; exports['resolvePlugin']; exports['resolvePreset']; exports['transform']; exports['transformAsync']; exports['transformFile']; exports['transformFileAsync']; exports['transformFileSync']; exports['transformFromAst']; exports['transformFromAstAsync']; exports['transformFromAstSync']; exports['transformSync']; exports['version']; exports['types']; exports['OptionManager']; exports['Plugin']; exports['traverse']; exports['tokTypes']; exports['template'];

const { code } = exports.transform(`export var p = 5;`);
_assert2.equal(code, 'export var p = 5;');
